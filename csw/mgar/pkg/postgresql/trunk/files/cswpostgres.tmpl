#!/bin/sh
# $Id$
#
# PostgreSQL startup script - part of the CSWpostgresql package
# mark@blastwave.org
# 
# 2009-11-29:  Parametrized file locations
#              Maciej Blizinski (maciej@opencsw.org)
#
# Variables to substitute:
# - PGDATA
# - bindir
# - sysconfdir


# Read in the user configuration file
[ -s /opt/csw/etc/postgresql.conf ] && . /opt/csw/etc/postgresql.conf
[ -s @sysconfdir@/postgresql.conf ] && . @sysconfdir@/postgresql.conf

# Defaults
[ -z "${PGDATA}" ] && PGDATA=@PGDATA@
[ -z "${PGCTL}" ] && PGCTL=@bindir@/sparcv8/pg_ctl
[ -z "${PGINIT}" ] && PGINIT=@bindir@/sparcv8/initdb


# The following attempts to catch any mistakes in the server
# version - it checks if the 64-bit server was last run. If so,
# it forces the 64-bit server, otherwise it won't start up!
# And vice-versa for the 32-bit server...
if [ -f "${PGDATA}/postmaster.opts" ]; then
  if grep 'sparcv9' ${PGDATA}/postmaster.opts > /dev/null; then
    echo ${PGCTL} | grep "sparcv8" > /dev/null
    if [ $? -eq 0 ]; then
      echo "Warning: 32-bit server was specified in /etc/init.d/cswpostgres,"
      echo "         but 64-bit version was last run. Using 64-bit server..."
    fi
    PGCTL=@bindir@/sparcv9/pg_ctl
    PGINIT=@bindir@/sparcv9/initdb
  elif grep 'sparcv8' ${PGDATA}/postmaster.opts > /dev/null; then
    # Detected 32-bit server last used
    echo "${PGCTL}" | grep "sparcv8" > /dev/null
    if [ $? -ne 0 ]; then
      echo "Warning: 64-bit server was specified in /etc/init.d/cswpostgres,"
      echo "         but 32-bit version was last run. Using 32-bit server..."
    fi
    PGCTL=@bindir@/sparcv8/pg_ctl
    PGINIT=@bindir@/sparcv8/initdb
  else
  	echo "Couldn't detect whether the previously run version was 32 or 64-bit."
  	PGCTL=@bindir@/pg_ctl
  	PGINIT=@bindir@/initdb
  fi
fi

# Exit if postgres user hasn't been created.
grep '^postgres:' /etc/passwd >/dev/null
if [ $? -ne 0 ] ; then
        getent passwd postgres >/dev/null
        if [ $? -ne 0 ] ; then
               exit 0
        fi
fi

# Change to /var/tmp, as pgctl etc. need to be started from
# a directory that they can read
cd /var/tmp

case "${1}" in
start)
      if [ -d ${PGDATA} -a `ls -l ${PGDATA} 2> /dev/null | wc -l` -gt 1 ]; then
         # PostgreSQL data directory exists and is populated
         echo "Starting PostgreSQL..."
         su postgres -c "${PGCTL} -D ${PGDATA} -l ${PGDATA}/postgresql.log start ${SERVEROPTS}"
      fi
      ;;

stop)
     echo "Stopping PostgreSQL database..."
     su postgres -c "${PGCTL} -D ${PGDATA} -l ${PGDATA}/postgresql.log stop"
     ;;

restart)
     echo "Restarting PostgreSQL database..."
     su postgres -c "${PGCTL} -D ${PGDATA} -l ${PGDATA}/postgresql.log restart ${SERVEROPTS}"
     ;;

reload)
     echo "Reloading PostgreSQL database..."
     su postgres -c "${PGCTL} -D ${PGDATA} -l ${PGDATA}/postgresql.log reload ${SERVEROPTS}"
     ;;

status)
     su postgres -c "${PGCTL} -D ${PGDATA} status"
     ;;

init)
     # create and initialise data directory
     echo "Creating PostgreSQL data directory at ${PGDATA}..."
     # Create it, unless it's already there and empty
     [ -d ${PGDATA} -a `ls -l ${PGDATA} 2> /dev/null | wc -l` -eq 1 ] || mkdir -p "${PGDATA}"
     chown postgres "${PGDATA}"
     chmod 0700 "${PGDATA}"
     echo "Initialising PostgreSQL database..."
     su postgres -c "${PGINIT} -D ${PGDATA} -E utf-8"
     ;;

*)
     echo "Usage: ${0} (init|start|stop|restart|reload|status)"
     ;;

esac

# vim:set sw=2 ts=2 sts=2 expandtab:
