#!/bin/sh
# vim:set ft=sh:
#
# $Id$
#
# Initialize the database cluster if it hasn't been initialized before.

USERCONF=@CSWPGSQLCONFFILE_VERSIONED@
PGCTL=@bindir@/pg_ctl-@BASE_VERSION_NODOT@
PGINIT=@bindir@/initdb-@BASE_VERSION_NODOT@

# Read in the user configuration file
[ -s /opt/csw/etc/${USERCONF} ] && . /opt/csw/etc/${USERCONF}
[ -s @sysconfdir@/${USERCONF} ] && . @sysconfdir@/${USERCONF}

if [ ! -d "${PGDATA}" -o `ls -l ${PGDATA} 2>/dev/null | wc -l` -eq 1 ]; then
    @sysconfdir@/init.d/cswpostgresql-@BASE_VERSION_NODOT@ init
    cat <<EOF
---

The database cluster has been initialized in ${PGDATA}.

Some customizations to the initialization can be made by editing the file

 @sysconfdir@/${USERCONF}

In order to re-initialize the database cluster, remove the directory

 ${PGDATA}

and call cswpostgresql-@BASE_VERSION_NODOT@ as such

 @sysconfdir@/init.d/cswpostgresql-@BASE_VERSION_NODOT@ init

PLEASE NOTE: by doing so, all data will be LOST. Thus this procedure
             is only recommended for pristine installations.


In order to start the PostgreSQL server you can either use

 svcadm enable cswpostgresql-@BASE_VERSION_NODOT@    # Solaris 10+ only

or

 @sysconfdir@/init.d/cswpostgresql-@BASE_VERSION_NODOT@ start

---
EOF
else
    cat <<EOF
---

The database cluster seems to be initialized already.

---
EOF
fi

# The database server will not be started, in case the user wants to
# do some customization to the database cluster. However, the database
# cluster is initialized and the user simply have to start the server
# if the defaults suits him.

exit 0
