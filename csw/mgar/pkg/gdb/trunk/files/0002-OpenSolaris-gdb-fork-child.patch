From f661e528c55de3eb4ec1182c497c27a05f652d26 Mon Sep 17 00:00:00 2001
From: Peter Felecan <pfelecan@opencsw.org>
Date: Sun, 9 Feb 2014 15:26:06 +0100
Subject: [PATCH] OpenSolaris gdb fork child

---
 gdb/fork-child.c | 37 +++++++++++++++++++++++++++++++++++++
 1 file changed, 37 insertions(+)

diff --git a/gdb/fork-child.c b/gdb/fork-child.c
index 6c42d2e..2a749eb 100644
--- a/gdb/fork-child.c
+++ b/gdb/fork-child.c
@@ -42,6 +42,16 @@ extern char **environ;
 
 static char *exec_wrapper;
 
+/* On Solaris, the SHELL may be a hard link to /usr/lib/isaexec.
+   If so, there will be one more exec trap to skip while starting
+   the inferior.  */
+
+#include <fcntl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+
+static int isaexec_shell;
+
 /* Break up SCRATCH into an argument vector suitable for passing to
    execvp and store it in ARGV.  E.g., on "run a b c d" this routine
    would get as input the string "a b c d", and as output it would
@@ -143,6 +153,8 @@ fork_inferior (char *exec_file_arg, char *allargs, char **env,
   int i;
   int save_errno;
 
+  isaexec_shell = 0;  /* Solaris only */
+
   /* If no exec file handed to us, get it from the exec-file command
      -- with a good, common error message if none is specified.  */
   exec_file = exec_file_arg;
@@ -155,12 +167,34 @@ fork_inferior (char *exec_file_arg, char *allargs, char **env,
   shell_file = shell_file_arg;
   if (startup_with_shell)
     {
+      /* Solaris only, is the shell a hard link to isaexec?  */
+      struct stat buf1, buf2;
+
       /* Figure out what shell to start up the user program under.  */
       if (shell_file == NULL)
 	shell_file = getenv ("SHELL");
       if (shell_file == NULL)
 	shell_file = default_shell_file;
       shell = 1;
+
+      /* Solaris only, is the shell a hard link to isaexec?
+	 If either stat call fails or the user's shell is
+	 not linked to isaexec, proceed with gdb's normal
+	 behavior, i.e. do not skip an extra exec.
+
+	 Assume that two files are the same if their inode
+	 numbers, device numbers, and number of links match.
+	 Is it possible to get a false positive if the shell
+	 and isaexec are located on different file systems?  */
+      if (
+	stat ("/usr/lib/isaexec", &buf1) == 0 &&
+	stat (shell_file, &buf2) == 0 &&
+	buf1.st_ino == buf2.st_ino &&
+	buf1.st_dev == buf2.st_dev &&
+	buf1.st_nlink == buf2.st_nlink
+      ) {
+	isaexec_shell = 1;
+      }
     }
 
   if (!shell)
@@ -429,6 +463,9 @@ startup_inferior (int ntraps)
   else
     resume_ptid = minus_one_ptid;
 
+  /* Solaris only, increment ntraps if shell is isaexec'ed.  */
+  pending_execs += isaexec_shell;
+
   /* The process was started by the fork that created it, but it will
      have stopped one instruction after execing the shell.  Here we
      must get it up to actual execution of the real program.  */
-- 
1.8.4.1

