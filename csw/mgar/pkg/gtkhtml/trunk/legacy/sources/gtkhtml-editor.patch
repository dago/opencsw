diff -urN components/html-editor.old/Editor-common.c components/html-editor/Editor-common.c
--- components/html-editor.old/Editor-common.c	1970-01-01 01:00:00.000000000 +0100
+++ components/html-editor/Editor-common.c	2004-03-06 23:22:34.899004000 +0100
@@ -0,0 +1,307 @@
+/*
+ * This file was generated by orbit-idl-2 - DO NOT EDIT!
+ */
+#include <string.h>
+#define ORBIT2_STUBS_API
+#define ORBIT_IDL_C_COMMON
+#define Editor_COMMON
+#include "Editor.h"
+static const CORBA_unsigned_long ORBit_zero_int = 0;
+#if ( (TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_0 == 'E') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_1 == 'd') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_2 == 'i') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_3 == 't') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_4 == 'o') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_5 == 'r') \
+) && !defined(TC_DEF_TC_GNOME_GtkHTML_Editor_Listener)
+#define TC_DEF_TC_GNOME_GtkHTML_Editor_Listener 1
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+static
+#endif
+const struct CORBA_TypeCode_struct TC_GNOME_GtkHTML_Editor_Listener_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_objref,
+   0,
+   0,
+   4,
+   0,
+   0
+   ,
+   NULL,
+   CORBA_OBJECT_NIL,
+   "Listener",
+   "IDL:GNOME/GtkHTML/Editor/Listener:1.0",
+   NULL,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_0 == 'E') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_1 == 'd') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_2 == 'i') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_3 == 't') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_4 == 'o') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_5 == 'r') \
+) && !defined(TC_DEF_TC_GNOME_GtkHTML_Editor_Engine)
+#define TC_DEF_TC_GNOME_GtkHTML_Editor_Engine 1
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+static
+#endif
+const struct CORBA_TypeCode_struct TC_GNOME_GtkHTML_Editor_Engine_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_objref,
+   0,
+   0,
+   4,
+   0,
+   0
+   ,
+   NULL,
+   CORBA_OBJECT_NIL,
+   "Engine",
+   "IDL:GNOME/GtkHTML/Editor/Engine:1.0",
+   NULL,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_0 == 'E') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_1 == 'd') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_2 == 'i') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_3 == 't') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_4 == 'o') \
+&& (TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_5 == 'r') \
+) && !defined(TC_DEF_TC_GNOME_GtkHTML_Editor_URLRequestEvent)
+#define TC_DEF_TC_GNOME_GtkHTML_Editor_URLRequestEvent 1
+static const char *anon_subnames_array6[] = {"url", "stream"};
+static const CORBA_TypeCode anon_subtypes_array7[] = {(CORBA_TypeCode) & TC_CORBA_string_struct, (CORBA_TypeCode) & TC_Bonobo_Stream_struct};
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+static
+#endif
+const struct CORBA_TypeCode_struct TC_GNOME_GtkHTML_Editor_URLRequestEvent_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_struct,
+   0,
+   0,
+   4,
+   0,
+   2
+   ,
+   (CORBA_TypeCode *) anon_subtypes_array7,
+   CORBA_OBJECT_NIL,
+   "URLRequestEvent",
+   "IDL:GNOME/GtkHTML/Editor/URLRequestEvent:1.0",
+   (char **) anon_subnames_array6,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#ifndef ORBIT_IDL_C_IMODULE_Editor
+CORBA_unsigned_long GNOME_GtkHTML_Editor_Listener__classid = 0;
+#endif
+#ifndef ORBIT_IDL_C_IMODULE_Editor
+CORBA_unsigned_long GNOME_GtkHTML_Editor_Engine__classid = 0;
+#endif
+/* Interface type data */
+static ORBit_IArg GNOME_GtkHTML_Editor_Listener_event__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "name"},
+   {TC_CORBA_any, ORBit_I_ARG_IN, "arg"}
+};
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+static
+#endif
+ORBit_IMethod GNOME_GtkHTML_Editor_Listener__imethods[] = {
+   {
+      {2, 2, GNOME_GtkHTML_Editor_Listener_event__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_CORBA_any, "event", 5,
+      0
+   }
+};
+static CORBA_string GNOME_GtkHTML_Editor_Listener__base_itypes[] = {
+   "IDL:Bonobo/Unknown:1.0",
+   "IDL:omg.org/CORBA/Object:1.0"
+};
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+static
+#endif
+ORBit_IInterface GNOME_GtkHTML_Editor_Listener__iinterface = {
+   TC_GNOME_GtkHTML_Editor_Listener, {1, 1, GNOME_GtkHTML_Editor_Listener__imethods, FALSE},
+   {2, 2, GNOME_GtkHTML_Editor_Listener__base_itypes, FALSE}
+};
+static ORBit_IArg GNOME_GtkHTML_Editor_Engine__set_listener__arginfo[] = {
+   {TC_GNOME_GtkHTML_Editor_Listener, ORBit_I_ARG_IN, "value"}
+};
+static ORBit_IArg GNOME_GtkHTML_Editor_Engine_runCommand__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "command"}
+};
+static ORBit_IArg GNOME_GtkHTML_Editor_Engine_getParagraphData__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "key"}
+};
+static ORBit_IArg GNOME_GtkHTML_Editor_Engine_setParagraphData__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "key"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "value"}
+};
+static ORBit_IArg GNOME_GtkHTML_Editor_Engine_setObjectDataByType__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "type_name"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "key"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "data"}
+};
+static ORBit_IArg GNOME_GtkHTML_Editor_Engine_searchByData__arginfo[] = {
+   {TC_CORBA_long, ORBit_I_ARG_IN | ORBit_I_COMMON_FIXED_SIZE, "level"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "klass"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "key"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "value"}
+};
+static ORBit_IArg GNOME_GtkHTML_Editor_Engine_insertHTML__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "html"}
+};
+static ORBit_IArg GNOME_GtkHTML_Editor_Engine_undoBegin__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "undo_name"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "redo_name"}
+};
+static ORBit_IArg GNOME_GtkHTML_Editor_Engine_ignoreWord__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "word"}
+};
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+static
+#endif
+ORBit_IMethod GNOME_GtkHTML_Editor_Engine__imethods[] = {
+   {
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_GNOME_GtkHTML_Editor_Listener, "_get_listener", 13,
+      0
+   }
+   ,{
+      {1, 1, GNOME_GtkHTML_Editor_Engine__set_listener__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "_set_listener", 13,
+      0
+   }
+   ,{
+      {1, 1, GNOME_GtkHTML_Editor_Engine_runCommand__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_CORBA_boolean, "runCommand", 10,
+      0 | ORBit_I_COMMON_FIXED_SIZE
+   }
+   ,{
+      {1, 1, GNOME_GtkHTML_Editor_Engine_getParagraphData__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_CORBA_string, "getParagraphData", 16,
+      0
+   }
+   ,{
+      {2, 2, GNOME_GtkHTML_Editor_Engine_setParagraphData__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "setParagraphData", 16,
+      0
+   }
+   ,{
+      {3, 3, GNOME_GtkHTML_Editor_Engine_setObjectDataByType__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "setObjectDataByType", 19,
+      0
+   }
+   ,{
+      {4, 4, GNOME_GtkHTML_Editor_Engine_searchByData__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_CORBA_boolean, "searchByData", 12,
+      0 | ORBit_I_COMMON_FIXED_SIZE
+   }
+   ,{
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_CORBA_boolean, "isParagraphEmpty", 16,
+      0 | ORBit_I_COMMON_FIXED_SIZE
+   }
+   ,{
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_CORBA_boolean, "isPreviousParagraphEmpty", 24,
+      0 | ORBit_I_COMMON_FIXED_SIZE
+   }
+   ,{
+      {1, 1, GNOME_GtkHTML_Editor_Engine_insertHTML__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "insertHTML", 10,
+      0
+   }
+   ,{
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "freeze", 6,
+      0
+   }
+   ,{
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "thaw", 4,
+      0
+   }
+   ,{
+      {2, 2, GNOME_GtkHTML_Editor_Engine_undoBegin__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "undoBegin", 9,
+      0
+   }
+   ,{
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "undoEnd", 7,
+      0
+   }
+   ,{
+      {1, 1, GNOME_GtkHTML_Editor_Engine_ignoreWord__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "ignoreWord", 10,
+      0
+   }
+   ,{
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "dropUndo", 8,
+      0
+   }
+   ,{
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_CORBA_boolean, "hasUndo", 7,
+      0 | ORBit_I_COMMON_FIXED_SIZE
+   }
+};
+static CORBA_string GNOME_GtkHTML_Editor_Engine__base_itypes[] = {
+   "IDL:Bonobo/Unknown:1.0",
+   "IDL:omg.org/CORBA/Object:1.0"
+};
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+static
+#endif
+ORBit_IInterface GNOME_GtkHTML_Editor_Engine__iinterface = {
+   TC_GNOME_GtkHTML_Editor_Engine, {17, 17, GNOME_GtkHTML_Editor_Engine__imethods, FALSE},
+   {2, 2, GNOME_GtkHTML_Editor_Engine__base_itypes, FALSE}
+};
diff -urN components/html-editor.old/Editor-skels.c components/html-editor/Editor-skels.c
--- components/html-editor.old/Editor-skels.c	1970-01-01 01:00:00.000000000 +0100
+++ components/html-editor/Editor-skels.c	2004-03-06 23:22:34.869434000 +0100
@@ -0,0 +1,426 @@
+/*
+ * This file was generated by orbit-idl-2 - DO NOT EDIT!
+ */
+#include <string.h>
+#define ORBIT2_STUBS_API
+#include "Editor.h"
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Listener_event(POA_GNOME_GtkHTML_Editor_Listener * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+						      CORBA_any * (*_impl_event) (PortableServer_Servant _servant, const CORBA_char * name, const CORBA_any * arg, CORBA_Environment * ev))
+{
+   *(CORBA_any * *) _o_retval = _impl_event(_o_servant, *(const CORBA_char * *) _o_args[0], (const CORBA_any *) _o_args[1], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine__get_listener(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							    GNOME_GtkHTML_Editor_Listener(*_impl__get_listener) (PortableServer_Servant _servant, CORBA_Environment * ev))
+{
+   *(GNOME_GtkHTML_Editor_Listener *) _o_retval = _impl__get_listener(_o_servant, _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine__set_listener(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							    void (*_impl__set_listener) (PortableServer_Servant _servant, const GNOME_GtkHTML_Editor_Listener value, CORBA_Environment * ev))
+{
+   _impl__set_listener(_o_servant, *(const GNOME_GtkHTML_Editor_Listener *) _o_args[0], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_runCommand(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							 CORBA_boolean(*_impl_runCommand) (PortableServer_Servant _servant, const CORBA_char * command, CORBA_Environment * ev))
+{
+   *(CORBA_boolean *) _o_retval = _impl_runCommand(_o_servant, *(const CORBA_char * *) _o_args[0], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_getParagraphData(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							       CORBA_string(*_impl_getParagraphData) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev))
+{
+   *(CORBA_string *) _o_retval = _impl_getParagraphData(_o_servant, *(const CORBA_char * *) _o_args[0], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_setParagraphData(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							       void (*_impl_setParagraphData) (PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev))
+{
+   _impl_setParagraphData(_o_servant, *(const CORBA_char * *) _o_args[0], *(const CORBA_char * *) _o_args[1], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_setObjectDataByType(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+								  void (*_impl_setObjectDataByType) (PortableServer_Servant _servant, const CORBA_char * type_name, const CORBA_char * key, const CORBA_char * data, CORBA_Environment * ev))
+{
+   _impl_setObjectDataByType(_o_servant, *(const CORBA_char * *) _o_args[0], *(const CORBA_char * *) _o_args[1], *(const CORBA_char * *) _o_args[2], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_searchByData(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							   CORBA_boolean(*_impl_searchByData) (PortableServer_Servant _servant, const CORBA_long level, const CORBA_char * klass, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev))
+{
+   *(CORBA_boolean *) _o_retval = _impl_searchByData(_o_servant, *(const CORBA_long *) _o_args[0], *(const CORBA_char * *) _o_args[1], *(const CORBA_char * *) _o_args[2], *(const CORBA_char * *) _o_args[3], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_isParagraphEmpty(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							       CORBA_boolean(*_impl_isParagraphEmpty) (PortableServer_Servant _servant, CORBA_Environment * ev))
+{
+   *(CORBA_boolean *) _o_retval = _impl_isParagraphEmpty(_o_servant, _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_isPreviousParagraphEmpty(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+								       CORBA_boolean(*_impl_isPreviousParagraphEmpty) (PortableServer_Servant _servant, CORBA_Environment * ev))
+{
+   *(CORBA_boolean *) _o_retval = _impl_isPreviousParagraphEmpty(_o_servant, _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_insertHTML(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							 void (*_impl_insertHTML) (PortableServer_Servant _servant, const CORBA_char * html, CORBA_Environment * ev))
+{
+   _impl_insertHTML(_o_servant, *(const CORBA_char * *) _o_args[0], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_freeze(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+						     void (*_impl_freeze) (PortableServer_Servant _servant, CORBA_Environment * ev))
+{
+   _impl_freeze(_o_servant, _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_thaw(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+void (*_impl_thaw) (PortableServer_Servant _servant, CORBA_Environment * ev))
+{
+   _impl_thaw(_o_servant, _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_undoBegin(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							void (*_impl_undoBegin) (PortableServer_Servant _servant, const CORBA_char * undo_name, const CORBA_char * redo_name, CORBA_Environment * ev))
+{
+   _impl_undoBegin(_o_servant, *(const CORBA_char * *) _o_args[0], *(const CORBA_char * *) _o_args[1], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_undoEnd(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+						      void (*_impl_undoEnd) (PortableServer_Servant _servant, CORBA_Environment * ev))
+{
+   _impl_undoEnd(_o_servant, _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_ignoreWord(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							 void (*_impl_ignoreWord) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev))
+{
+   _impl_ignoreWord(_o_servant, *(const CORBA_char * *) _o_args[0], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_dropUndo(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+						       void (*_impl_dropUndo) (PortableServer_Servant _servant, CORBA_Environment * ev))
+{
+   _impl_dropUndo(_o_servant, _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_hasUndo(POA_GNOME_GtkHTML_Editor_Engine * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+						      CORBA_boolean(*_impl_hasUndo) (PortableServer_Servant _servant, CORBA_Environment * ev))
+{
+   *(CORBA_boolean *) _o_retval = _impl_hasUndo(_o_servant, _o_ev);
+}
+static ORBitSmallSkeleton 
+get_skel_small_GNOME_GtkHTML_Editor_Listener(POA_GNOME_GtkHTML_Editor_Listener * servant,
+		     const char *opname, gpointer * m_data, gpointer * impl)
+{
+   switch (opname[0]) {
+	    case 'e':
+	    if (strcmp((opname + 1), "vent"))
+	       break;
+	    *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Listener_epv->event;
+	    *m_data = (gpointer) & GNOME_GtkHTML_Editor_Listener__iinterface.methods._buffer[0];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Listener_event;
+	    break;
+	 case 'q':
+	    if (strcmp((opname + 1), "ueryInterface"))
+	       break;
+	    *impl = (gpointer) servant->vepv->Bonobo_Unknown_epv->queryInterface;
+	    *m_data = (gpointer) & Bonobo_Unknown__iinterface.methods._buffer[2];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_Bonobo_Unknown_queryInterface;
+	    break;
+	 case 'r':
+	    if (strcmp((opname + 1), "ef"))
+	       break;
+	    *impl = (gpointer) servant->vepv->Bonobo_Unknown_epv->ref;
+	    *m_data = (gpointer) & Bonobo_Unknown__iinterface.methods._buffer[0];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_Bonobo_Unknown_ref;
+	    break;
+	 case 'u':
+	    if (strcmp((opname + 1), "nref"))
+	       break;
+	    *impl = (gpointer) servant->vepv->Bonobo_Unknown_epv->unref;
+	    *m_data = (gpointer) & Bonobo_Unknown__iinterface.methods._buffer[1];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_Bonobo_Unknown_unref;
+	    break;
+	 default:
+	    break;
+   }
+   return NULL;
+}
+void 
+POA_GNOME_GtkHTML_Editor_Listener__init(PortableServer_Servant servant,
+					CORBA_Environment * env)
+{
+   static PortableServer_ClassInfo class_info = {NULL, (ORBit_small_impl_finder) & get_skel_small_GNOME_GtkHTML_Editor_Listener, "IDL:GNOME/GtkHTML/Editor/Listener:1.0", &GNOME_GtkHTML_Editor_Listener__classid, NULL, &GNOME_GtkHTML_Editor_Listener__iinterface};
+   POA_GNOME_GtkHTML_Editor_Listener__vepv *fakevepv = NULL;
+   if (((PortableServer_ServantBase *) servant)->vepv[0]->finalize == 0) {
+      ((PortableServer_ServantBase *) servant)->vepv[0]->finalize = POA_GNOME_GtkHTML_Editor_Listener__fini;
+   }
+   PortableServer_ServantBase__init(((PortableServer_ServantBase *) servant), env);
+   POA_Bonobo_Unknown__init(servant, env);
+   ORBit_classinfo_register(&class_info);
+   ORBIT_SERVANT_SET_CLASSINFO(servant, &class_info);
+   if (!class_info.vepvmap) {
+      class_info.vepvmap = g_new0(ORBit_VepvIdx, GNOME_GtkHTML_Editor_Listener__classid + 1);
+      class_info.vepvmap[Bonobo_Unknown__classid] = (((char *) &(fakevepv->Bonobo_Unknown_epv)) - ((char *) (fakevepv))) / sizeof(GFunc);
+      class_info.vepvmap[GNOME_GtkHTML_Editor_Listener__classid] = (((char *) &(fakevepv->GNOME_GtkHTML_Editor_Listener_epv)) - ((char *) (fakevepv))) / sizeof(GFunc);
+   }
+}
+void 
+POA_GNOME_GtkHTML_Editor_Listener__fini(PortableServer_Servant servant,
+					CORBA_Environment * env)
+{
+   POA_Bonobo_Unknown__fini(servant, env);
+   PortableServer_ServantBase__fini(servant, env);
+}
+static ORBitSmallSkeleton 
+get_skel_small_GNOME_GtkHTML_Editor_Engine(POA_GNOME_GtkHTML_Editor_Engine * servant,
+		     const char *opname, gpointer * m_data, gpointer * impl)
+{
+   switch (opname[0]) {
+	    case '_':
+	    switch (opname[1]) {
+		     case 'g':
+		     if (strcmp((opname + 2), "et_listener"))
+			break;
+		     *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->_get_listener;
+		     *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[0];
+		     return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine__get_listener;
+		     break;
+		  case 's':
+		     if (strcmp((opname + 2), "et_listener"))
+			break;
+		     *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->_set_listener;
+		     *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[1];
+		     return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine__set_listener;
+		     break;
+		  default:
+		     break;
+	    }
+	    break;
+	 case 'd':
+	    if (strcmp((opname + 1), "ropUndo"))
+	       break;
+	    *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->dropUndo;
+	    *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[15];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_dropUndo;
+	    break;
+	 case 'f':
+	    if (strcmp((opname + 1), "reeze"))
+	       break;
+	    *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->freeze;
+	    *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[10];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_freeze;
+	    break;
+	 case 'g':
+	    if (strcmp((opname + 1), "etParagraphData"))
+	       break;
+	    *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->getParagraphData;
+	    *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[3];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_getParagraphData;
+	    break;
+	 case 'h':
+	    if (strcmp((opname + 1), "asUndo"))
+	       break;
+	    *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->hasUndo;
+	    *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[16];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_hasUndo;
+	    break;
+	 case 'i':
+	    switch (opname[1]) {
+		  case 'g':
+		     if (strcmp((opname + 2), "noreWord"))
+			break;
+		     *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->ignoreWord;
+		     *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[14];
+		     return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_ignoreWord;
+		     break;
+		  case 'n':
+		     if (strcmp((opname + 2), "sertHTML"))
+			break;
+		     *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->insertHTML;
+		     *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[9];
+		     return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_insertHTML;
+		     break;
+		  case 's':
+		     switch (opname[2]) {
+			   case 'P':
+			      switch (opname[3]) {
+				    case 'a':
+				       if (strcmp((opname + 4), "ragraphEmpty"))
+					  break;
+				       *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->isParagraphEmpty;
+				       *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[7];
+				       return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_isParagraphEmpty;
+				       break;
+				    case 'r':
+				       if (strcmp((opname + 4), "eviousParagraphEmpty"))
+					  break;
+				       *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->isPreviousParagraphEmpty;
+				       *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[8];
+				       return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_isPreviousParagraphEmpty;
+				       break;
+				    default:
+				       break;
+			      }
+			      break;
+			   default:
+			      break;
+		     }
+		     break;
+		  default:
+		     break;
+	    }
+	    break;
+	 case 'q':
+	    if (strcmp((opname + 1), "ueryInterface"))
+	       break;
+	    *impl = (gpointer) servant->vepv->Bonobo_Unknown_epv->queryInterface;
+	    *m_data = (gpointer) & Bonobo_Unknown__iinterface.methods._buffer[2];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_Bonobo_Unknown_queryInterface;
+	    break;
+	 case 'r':
+	    switch (opname[1]) {
+		  case 'e':
+		     if (strcmp((opname + 2), "f"))
+			break;
+		     *impl = (gpointer) servant->vepv->Bonobo_Unknown_epv->ref;
+		     *m_data = (gpointer) & Bonobo_Unknown__iinterface.methods._buffer[0];
+		     return (ORBitSmallSkeleton) _ORBIT_skel_small_Bonobo_Unknown_ref;
+		     break;
+		  case 'u':
+		     if (strcmp((opname + 2), "nCommand"))
+			break;
+		     *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->runCommand;
+		     *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[2];
+		     return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_runCommand;
+		     break;
+		  default:
+		     break;
+	    }
+	    break;
+	 case 's':
+	    switch (opname[1]) {
+		  case 'e':
+		     switch (opname[2]) {
+			   case 'a':
+			      if (strcmp((opname + 3), "rchByData"))
+				 break;
+			      *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->searchByData;
+			      *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[6];
+			      return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_searchByData;
+			      break;
+			   case 't':
+			      switch (opname[3]) {
+				    case 'O':
+				       if (strcmp((opname + 4), "bjectDataByType"))
+					  break;
+				       *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->setObjectDataByType;
+				       *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[5];
+				       return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_setObjectDataByType;
+				       break;
+				    case 'P':
+				       if (strcmp((opname + 4), "aragraphData"))
+					  break;
+				       *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->setParagraphData;
+				       *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[4];
+				       return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_setParagraphData;
+				       break;
+				    default:
+				       break;
+			      }
+			      break;
+			   default:
+			      break;
+		     }
+		     break;
+		  default:
+		     break;
+	    }
+	    break;
+	 case 't':
+	    if (strcmp((opname + 1), "haw"))
+	       break;
+	    *impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->thaw;
+	    *m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[11];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_thaw;
+	    break;
+	 case 'u':
+	    switch (opname[1]) {
+		  case 'n':
+		     switch (opname[2]) {
+			   case 'd':
+			      switch (opname[3]) {
+				    case 'o':
+				       switch (opname[4]) {
+					     case 'B':
+						if (strcmp((opname + 5), "egin"))
+						   break;
+						*impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->undoBegin;
+						*m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[12];
+						return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_undoBegin;
+						break;
+					     case 'E':
+						if (strcmp((opname + 5), "nd"))
+						   break;
+						*impl = (gpointer) servant->vepv->GNOME_GtkHTML_Editor_Engine_epv->undoEnd;
+						*m_data = (gpointer) & GNOME_GtkHTML_Editor_Engine__iinterface.methods._buffer[13];
+						return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_undoEnd;
+						break;
+					     default:
+						break;
+				       }
+				       break;
+				    default:
+				       break;
+			      }
+			      break;
+			   case 'r':
+			      if (strcmp((opname + 3), "ef"))
+				 break;
+			      *impl = (gpointer) servant->vepv->Bonobo_Unknown_epv->unref;
+			      *m_data = (gpointer) & Bonobo_Unknown__iinterface.methods._buffer[1];
+			      return (ORBitSmallSkeleton) _ORBIT_skel_small_Bonobo_Unknown_unref;
+			      break;
+			   default:
+			      break;
+		     }
+		     break;
+		  default:
+		     break;
+	    }
+	    break;
+	 default:
+	    break;
+   }
+   return NULL;
+}
+void 
+POA_GNOME_GtkHTML_Editor_Engine__init(PortableServer_Servant servant,
+				      CORBA_Environment * env)
+{
+   static PortableServer_ClassInfo class_info = {NULL, (ORBit_small_impl_finder) & get_skel_small_GNOME_GtkHTML_Editor_Engine, "IDL:GNOME/GtkHTML/Editor/Engine:1.0", &GNOME_GtkHTML_Editor_Engine__classid, NULL, &GNOME_GtkHTML_Editor_Engine__iinterface};
+   POA_GNOME_GtkHTML_Editor_Engine__vepv *fakevepv = NULL;
+   if (((PortableServer_ServantBase *) servant)->vepv[0]->finalize == 0) {
+      ((PortableServer_ServantBase *) servant)->vepv[0]->finalize = POA_GNOME_GtkHTML_Editor_Engine__fini;
+   }
+   PortableServer_ServantBase__init(((PortableServer_ServantBase *) servant), env);
+   POA_Bonobo_Unknown__init(servant, env);
+   ORBit_classinfo_register(&class_info);
+   ORBIT_SERVANT_SET_CLASSINFO(servant, &class_info);
+   if (!class_info.vepvmap) {
+      class_info.vepvmap = g_new0(ORBit_VepvIdx, GNOME_GtkHTML_Editor_Engine__classid + 1);
+      class_info.vepvmap[Bonobo_Unknown__classid] = (((char *) &(fakevepv->Bonobo_Unknown_epv)) - ((char *) (fakevepv))) / sizeof(GFunc);
+      class_info.vepvmap[GNOME_GtkHTML_Editor_Engine__classid] = (((char *) &(fakevepv->GNOME_GtkHTML_Editor_Engine_epv)) - ((char *) (fakevepv))) / sizeof(GFunc);
+   }
+}
+void 
+POA_GNOME_GtkHTML_Editor_Engine__fini(PortableServer_Servant servant,
+				      CORBA_Environment * env)
+{
+   POA_Bonobo_Unknown__fini(servant, env);
+   PortableServer_ServantBase__fini(servant, env);
+}
diff -urN components/html-editor.old/Editor-stubs.c components/html-editor/Editor-stubs.c
--- components/html-editor.old/Editor-stubs.c	1970-01-01 01:00:00.000000000 +0100
+++ components/html-editor/Editor-stubs.c	2004-03-06 23:22:34.821504000 +0100
@@ -0,0 +1,294 @@
+/*
+ * This file was generated by orbit-idl-2 - DO NOT EDIT!
+ */
+#include <string.h>
+#define ORBIT2_STUBS_API
+#include "Editor.h"
+CORBA_any *
+GNOME_GtkHTML_Editor_Listener_event(GNOME_GtkHTML_Editor_Listener _obj, const CORBA_char * name, const CORBA_any * arg, CORBA_Environment * ev)
+{
+   CORBA_any *_ORBIT_retval;
+   POA_GNOME_GtkHTML_Editor_Listener__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Listener__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Listener__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Listener__classid))->event) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->event(ORBIT_STUB_GetServant(_obj), name, arg, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & name, (gpointer) arg};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Listener__iinterface.methods, 0, &_ORBIT_retval, _args, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+GNOME_GtkHTML_Editor_Listener 
+GNOME_GtkHTML_Editor_Engine__get_listener(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev)
+{
+   GNOME_GtkHTML_Editor_Listener _ORBIT_retval;
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->_get_listener) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->_get_listener(ORBIT_STUB_GetServant(_obj), ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 0, &_ORBIT_retval, NULL, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+void 
+GNOME_GtkHTML_Editor_Engine__set_listener(GNOME_GtkHTML_Editor_Engine _obj, const GNOME_GtkHTML_Editor_Listener value, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->_set_listener) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->_set_listener(ORBIT_STUB_GetServant(_obj), value, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & value};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 1, NULL, _args, NULL, ev);
+   }
+}
+CORBA_boolean 
+GNOME_GtkHTML_Editor_Engine_runCommand(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * command, CORBA_Environment * ev)
+{
+   CORBA_boolean _ORBIT_retval;
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->runCommand) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->runCommand(ORBIT_STUB_GetServant(_obj), command, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & command};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 2, &_ORBIT_retval, _args, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+CORBA_string 
+GNOME_GtkHTML_Editor_Engine_getParagraphData(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * key, CORBA_Environment * ev)
+{
+   CORBA_string _ORBIT_retval;
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->getParagraphData) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->getParagraphData(ORBIT_STUB_GetServant(_obj), key, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & key};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 3, &_ORBIT_retval, _args, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+void 
+GNOME_GtkHTML_Editor_Engine_setParagraphData(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->setParagraphData) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->setParagraphData(ORBIT_STUB_GetServant(_obj), key, value, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & key, (gpointer) & value};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 4, NULL, _args, NULL, ev);
+   }
+}
+void 
+GNOME_GtkHTML_Editor_Engine_setObjectDataByType(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * type_name, const CORBA_char * key, const CORBA_char * data, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->setObjectDataByType) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->setObjectDataByType(ORBIT_STUB_GetServant(_obj), type_name, key, data, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & type_name, (gpointer) & key, (gpointer) & data};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 5, NULL, _args, NULL, ev);
+   }
+}
+CORBA_boolean 
+GNOME_GtkHTML_Editor_Engine_searchByData(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_long level, const CORBA_char * klass, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev)
+{
+   CORBA_boolean _ORBIT_retval;
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->searchByData) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->searchByData(ORBIT_STUB_GetServant(_obj), level, klass, key, value, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & level, (gpointer) & klass, (gpointer) & key, (gpointer) & value};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 6, &_ORBIT_retval, _args, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+CORBA_boolean 
+GNOME_GtkHTML_Editor_Engine_isParagraphEmpty(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev)
+{
+   CORBA_boolean _ORBIT_retval;
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->isParagraphEmpty) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->isParagraphEmpty(ORBIT_STUB_GetServant(_obj), ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 7, &_ORBIT_retval, NULL, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+CORBA_boolean 
+GNOME_GtkHTML_Editor_Engine_isPreviousParagraphEmpty(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev)
+{
+   CORBA_boolean _ORBIT_retval;
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->isPreviousParagraphEmpty) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->isPreviousParagraphEmpty(ORBIT_STUB_GetServant(_obj), ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 8, &_ORBIT_retval, NULL, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+void 
+GNOME_GtkHTML_Editor_Engine_insertHTML(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * html, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->insertHTML) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->insertHTML(ORBIT_STUB_GetServant(_obj), html, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & html};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 9, NULL, _args, NULL, ev);
+   }
+}
+void 
+GNOME_GtkHTML_Editor_Engine_freeze(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->freeze) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->freeze(ORBIT_STUB_GetServant(_obj), ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 10, NULL, NULL, NULL, ev);
+   }
+}
+void 
+GNOME_GtkHTML_Editor_Engine_thaw(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->thaw) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->thaw(ORBIT_STUB_GetServant(_obj), ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 11, NULL, NULL, NULL, ev);
+   }
+}
+void 
+GNOME_GtkHTML_Editor_Engine_undoBegin(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * undo_name, const CORBA_char * redo_name, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->undoBegin) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->undoBegin(ORBIT_STUB_GetServant(_obj), undo_name, redo_name, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & undo_name, (gpointer) & redo_name};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 12, NULL, _args, NULL, ev);
+   }
+}
+void 
+GNOME_GtkHTML_Editor_Engine_undoEnd(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->undoEnd) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->undoEnd(ORBIT_STUB_GetServant(_obj), ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 13, NULL, NULL, NULL, ev);
+   }
+}
+void 
+GNOME_GtkHTML_Editor_Engine_ignoreWord(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * word, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->ignoreWord) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->ignoreWord(ORBIT_STUB_GetServant(_obj), word, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & word};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 14, NULL, _args, NULL, ev);
+   }
+}
+void 
+GNOME_GtkHTML_Editor_Engine_dropUndo(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev)
+{
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->dropUndo) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->dropUndo(ORBIT_STUB_GetServant(_obj), ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 15, NULL, NULL, NULL, ev);
+   }
+}
+CORBA_boolean 
+GNOME_GtkHTML_Editor_Engine_hasUndo(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev)
+{
+   CORBA_boolean _ORBIT_retval;
+   POA_GNOME_GtkHTML_Editor_Engine__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_GtkHTML_Editor_Engine__classid) &&
+       (_ORBIT_epv = (POA_GNOME_GtkHTML_Editor_Engine__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_GtkHTML_Editor_Engine__classid))->hasUndo) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->hasUndo(ORBIT_STUB_GetServant(_obj), ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      ORBit_small_invoke_stub_n(_obj, &GNOME_GtkHTML_Editor_Engine__iinterface.methods, 16, &_ORBIT_retval, NULL, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
diff -urN components/html-editor.old/Editor.h components/html-editor/Editor.h
--- components/html-editor.old/Editor.h	1970-01-01 01:00:00.000000000 +0100
+++ components/html-editor/Editor.h	2004-03-06 23:22:34.941372000 +0100
@@ -0,0 +1,223 @@
+/*
+ * This file was generated by orbit-idl-2 - DO NOT EDIT!
+ */
+#ifndef Editor_H
+#define Editor_H 1
+#include <glib.h>
+#define ORBIT_IDL_SERIAL 19
+#include <orbit/orbit-types.h>
+#ifdef __cplusplus
+extern "C" {
+#endif				/* __cplusplus */
+   /** typedefs **/
+#include <bonobo/Bonobo.h>
+#if !defined(ORBIT_DECL_GNOME_GtkHTML_Editor_Listener) && !defined(_GNOME_GtkHTML_Editor_Listener_defined)
+#define ORBIT_DECL_GNOME_GtkHTML_Editor_Listener 1
+#define _GNOME_GtkHTML_Editor_Listener_defined 1
+#define GNOME_GtkHTML_Editor_Listener__freekids CORBA_Object__freekids
+   typedef CORBA_Object GNOME_GtkHTML_Editor_Listener;
+   extern CORBA_unsigned_long GNOME_GtkHTML_Editor_Listener__classid;
+#if !defined(TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_0)
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_0 'E'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_1 'd'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_2 'i'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_3 't'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_4 'o'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_5 'r'
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_GNOME_GtkHTML_Editor_Listener_struct;
+#define TC_GNOME_GtkHTML_Editor_Listener ((CORBA_TypeCode)&TC_GNOME_GtkHTML_Editor_Listener_struct)
+#endif
+#endif
+#if !defined(ORBIT_DECL_GNOME_GtkHTML_Editor_Engine) && !defined(_GNOME_GtkHTML_Editor_Engine_defined)
+#define ORBIT_DECL_GNOME_GtkHTML_Editor_Engine 1
+#define _GNOME_GtkHTML_Editor_Engine_defined 1
+#define GNOME_GtkHTML_Editor_Engine__freekids CORBA_Object__freekids
+   typedef CORBA_Object GNOME_GtkHTML_Editor_Engine;
+   extern CORBA_unsigned_long GNOME_GtkHTML_Editor_Engine__classid;
+#if !defined(TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_0)
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_0 'E'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_1 'd'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_2 'i'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_3 't'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_4 'o'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_5 'r'
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_GNOME_GtkHTML_Editor_Engine_struct;
+#define TC_GNOME_GtkHTML_Editor_Engine ((CORBA_TypeCode)&TC_GNOME_GtkHTML_Editor_Engine_struct)
+#endif
+#endif
+#if !defined(_GNOME_GtkHTML_Editor_URLRequestEvent_defined)
+#define _GNOME_GtkHTML_Editor_URLRequestEvent_defined 1
+   typedef struct GNOME_GtkHTML_Editor_URLRequestEvent_type GNOME_GtkHTML_Editor_URLRequestEvent;
+   struct GNOME_GtkHTML_Editor_URLRequestEvent_type {
+      CORBA_string url;
+      Bonobo_Stream stream;
+   };
+#if !defined(TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_0)
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_0 'E'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_1 'd'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_2 'i'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_3 't'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_4 'o'
+#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_5 'r'
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_GNOME_GtkHTML_Editor_URLRequestEvent_struct;
+#define TC_GNOME_GtkHTML_Editor_URLRequestEvent ((CORBA_TypeCode)&TC_GNOME_GtkHTML_Editor_URLRequestEvent_struct)
+#endif
+#define GNOME_GtkHTML_Editor_URLRequestEvent__alloc() ((GNOME_GtkHTML_Editor_URLRequestEvent *)ORBit_small_alloc (TC_GNOME_GtkHTML_Editor_URLRequestEvent))
+#define GNOME_GtkHTML_Editor_URLRequestEvent__freekids(m,d) ORBit_small_freekids (TC_GNOME_GtkHTML_Editor_URLRequestEvent,(m),(d))
+#endif
+   /** POA structures **/
+#ifndef _defined_POA_GNOME_GtkHTML_Editor_Listener
+#define _defined_POA_GNOME_GtkHTML_Editor_Listener 1
+   typedef struct {
+      void *_private;
+      CORBA_any *(*event) (PortableServer_Servant _servant, const CORBA_char * name, const CORBA_any * arg, CORBA_Environment * ev);
+   } POA_GNOME_GtkHTML_Editor_Listener__epv;
+   typedef struct {
+      PortableServer_ServantBase__epv *_base_epv;
+      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
+      POA_GNOME_GtkHTML_Editor_Listener__epv *GNOME_GtkHTML_Editor_Listener_epv;
+   } POA_GNOME_GtkHTML_Editor_Listener__vepv;
+   typedef struct {
+      void *_private;
+      POA_GNOME_GtkHTML_Editor_Listener__vepv *vepv;
+   } POA_GNOME_GtkHTML_Editor_Listener;
+   extern void POA_GNOME_GtkHTML_Editor_Listener__init(PortableServer_Servant servant, CORBA_Environment * ev);
+   extern void POA_GNOME_GtkHTML_Editor_Listener__fini(PortableServer_Servant servant, CORBA_Environment * ev);
+#endif				/* _defined_POA_GNOME_GtkHTML_Editor_Listener */
+#ifndef _defined_POA_GNOME_GtkHTML_Editor_Engine
+#define _defined_POA_GNOME_GtkHTML_Editor_Engine 1
+   typedef struct {
+      void *_private;
+       GNOME_GtkHTML_Editor_Listener(*_get_listener) (PortableServer_Servant _servant, CORBA_Environment * ev);
+      void (*_set_listener) (PortableServer_Servant _servant, const GNOME_GtkHTML_Editor_Listener value, CORBA_Environment * ev);
+       CORBA_boolean(*runCommand) (PortableServer_Servant _servant, const CORBA_char * command, CORBA_Environment * ev);
+       CORBA_string(*getParagraphData) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev);
+      void (*setParagraphData) (PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev);
+      void (*setObjectDataByType) (PortableServer_Servant _servant, const CORBA_char * type_name, const CORBA_char * key, const CORBA_char * data, CORBA_Environment * ev);
+       CORBA_boolean(*searchByData) (PortableServer_Servant _servant, const CORBA_long level, const CORBA_char * klass, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev);
+       CORBA_boolean(*isParagraphEmpty) (PortableServer_Servant _servant, CORBA_Environment * ev);
+       CORBA_boolean(*isPreviousParagraphEmpty) (PortableServer_Servant _servant, CORBA_Environment * ev);
+      void (*insertHTML) (PortableServer_Servant _servant, const CORBA_char * html, CORBA_Environment * ev);
+      void (*freeze) (PortableServer_Servant _servant, CORBA_Environment * ev);
+      void (*thaw) (PortableServer_Servant _servant, CORBA_Environment * ev);
+      void (*undoBegin) (PortableServer_Servant _servant, const CORBA_char * undo_name, const CORBA_char * redo_name, CORBA_Environment * ev);
+      void (*undoEnd) (PortableServer_Servant _servant, CORBA_Environment * ev);
+      void (*ignoreWord) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev);
+      void (*dropUndo) (PortableServer_Servant _servant, CORBA_Environment * ev);
+       CORBA_boolean(*hasUndo) (PortableServer_Servant _servant, CORBA_Environment * ev);
+   } POA_GNOME_GtkHTML_Editor_Engine__epv;
+   typedef struct {
+      PortableServer_ServantBase__epv *_base_epv;
+      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
+      POA_GNOME_GtkHTML_Editor_Engine__epv *GNOME_GtkHTML_Editor_Engine_epv;
+   } POA_GNOME_GtkHTML_Editor_Engine__vepv;
+   typedef struct {
+      void *_private;
+      POA_GNOME_GtkHTML_Editor_Engine__vepv *vepv;
+   } POA_GNOME_GtkHTML_Editor_Engine;
+   extern void POA_GNOME_GtkHTML_Editor_Engine__init(PortableServer_Servant servant, CORBA_Environment * ev);
+   extern void POA_GNOME_GtkHTML_Editor_Engine__fini(PortableServer_Servant servant, CORBA_Environment * ev);
+#endif				/* _defined_POA_GNOME_GtkHTML_Editor_Engine */
+   /** skel prototypes **/
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Listener_event(POA_GNOME_GtkHTML_Editor_Listener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_any * (*_impl_event) (PortableServer_Servant _servant, const CORBA_char * name, const CORBA_any * arg, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine__get_listener(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, GNOME_GtkHTML_Editor_Listener(*_impl__get_listener) (PortableServer_Servant _servant, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine__set_listener(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl__set_listener) (PortableServer_Servant _servant, const GNOME_GtkHTML_Editor_Listener value, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_runCommand(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_runCommand) (PortableServer_Servant _servant, const CORBA_char * command, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_getParagraphData(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getParagraphData) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_setParagraphData(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_setParagraphData) (PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_setObjectDataByType(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_setObjectDataByType) (PortableServer_Servant _servant, const CORBA_char * type_name, const CORBA_char * key, const CORBA_char * data, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_searchByData(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_searchByData) (PortableServer_Servant _servant, const CORBA_long level, const CORBA_char * klass, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_isParagraphEmpty(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_isParagraphEmpty) (PortableServer_Servant _servant, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_isPreviousParagraphEmpty(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_isPreviousParagraphEmpty) (PortableServer_Servant _servant, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_insertHTML(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_insertHTML) (PortableServer_Servant _servant, const CORBA_char * html, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_freeze(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_freeze) (PortableServer_Servant _servant, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_thaw(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_thaw) (PortableServer_Servant _servant, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_undoBegin(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_undoBegin) (PortableServer_Servant _servant, const CORBA_char * undo_name, const CORBA_char * redo_name, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_undoEnd(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_undoEnd) (PortableServer_Servant _servant, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_ignoreWord(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_ignoreWord) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_dropUndo(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_dropUndo) (PortableServer_Servant _servant, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_hasUndo(POA_GNOME_GtkHTML_Editor_Engine * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_hasUndo) (PortableServer_Servant _servant, CORBA_Environment * ev));
+   /** stub prototypes **/
+#define GNOME_GtkHTML_Editor_Listener_ref Bonobo_Unknown_ref
+#define GNOME_GtkHTML_Editor_Listener_unref Bonobo_Unknown_unref
+#define GNOME_GtkHTML_Editor_Listener_queryInterface Bonobo_Unknown_queryInterface
+   CORBA_any *GNOME_GtkHTML_Editor_Listener_event(GNOME_GtkHTML_Editor_Listener _obj, const CORBA_char * name, const CORBA_any * arg, CORBA_Environment * ev);
+#define GNOME_GtkHTML_Editor_Engine_ref Bonobo_Unknown_ref
+#define GNOME_GtkHTML_Editor_Engine_unref Bonobo_Unknown_unref
+#define GNOME_GtkHTML_Editor_Engine_queryInterface Bonobo_Unknown_queryInterface
+   GNOME_GtkHTML_Editor_Listener GNOME_GtkHTML_Editor_Engine__get_listener(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine__set_listener(GNOME_GtkHTML_Editor_Engine _obj, const GNOME_GtkHTML_Editor_Listener value, CORBA_Environment * ev);
+   CORBA_boolean GNOME_GtkHTML_Editor_Engine_runCommand(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * command, CORBA_Environment * ev);
+   CORBA_string GNOME_GtkHTML_Editor_Engine_getParagraphData(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * key, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine_setParagraphData(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine_setObjectDataByType(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * type_name, const CORBA_char * key, const CORBA_char * data, CORBA_Environment * ev);
+   CORBA_boolean GNOME_GtkHTML_Editor_Engine_searchByData(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_long level, const CORBA_char * klass, const CORBA_char * key, const CORBA_char * value, CORBA_Environment * ev);
+   CORBA_boolean GNOME_GtkHTML_Editor_Engine_isParagraphEmpty(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev);
+   CORBA_boolean GNOME_GtkHTML_Editor_Engine_isPreviousParagraphEmpty(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine_insertHTML(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * html, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine_freeze(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine_thaw(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine_undoBegin(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * undo_name, const CORBA_char * redo_name, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine_undoEnd(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine_ignoreWord(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * word, CORBA_Environment * ev);
+   void GNOME_GtkHTML_Editor_Engine_dropUndo(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev);
+   CORBA_boolean GNOME_GtkHTML_Editor_Engine_hasUndo(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment * ev);
+   /** more internals **/
+#if !defined(MARSHAL_IMPL_GNOME_GtkHTML_Editor_URLRequestEvent_0)
+#define MARSHAL_IMPL_GNOME_GtkHTML_Editor_URLRequestEvent_0 'E'
+#define MARSHAL_IMPL_GNOME_GtkHTML_Editor_URLRequestEvent_1 'd'
+#define MARSHAL_IMPL_GNOME_GtkHTML_Editor_URLRequestEvent_2 'i'
+#define MARSHAL_IMPL_GNOME_GtkHTML_Editor_URLRequestEvent_3 't'
+#define MARSHAL_IMPL_GNOME_GtkHTML_Editor_URLRequestEvent_4 'o'
+#define MARSHAL_IMPL_GNOME_GtkHTML_Editor_URLRequestEvent_5 'r'
+#endif
+#include <orbit/orb-core/orbit-interface.h>
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+   static
+#else
+   extern
+#endif
+   ORBit_IInterface GNOME_GtkHTML_Editor_Listener__iinterface;
+#define GNOME_GtkHTML_Editor_Listener_IMETHODS_LEN 1
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+   static
+#else
+   extern
+#endif
+   ORBit_IMethod GNOME_GtkHTML_Editor_Listener__imethods[GNOME_GtkHTML_Editor_Listener_IMETHODS_LEN];
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+   static
+#else
+   extern
+#endif
+   ORBit_IInterface GNOME_GtkHTML_Editor_Engine__iinterface;
+#define GNOME_GtkHTML_Editor_Engine_IMETHODS_LEN 17
+#ifdef ORBIT_IDL_C_IMODULE_Editor
+   static
+#else
+   extern
+#endif
+   ORBit_IMethod GNOME_GtkHTML_Editor_Engine__imethods[GNOME_GtkHTML_Editor_Engine_IMETHODS_LEN];
+#ifdef __cplusplus
+}
+#endif				/* __cplusplus */
+#ifndef EXCLUDE_ORBIT_H
+#include <orbit/orbit.h>
+#endif				/* EXCLUDE_ORBIT_H */
+#endif
+#undef ORBIT_IDL_SERIAL
diff -urN components/html-editor.old/Spell-common.c components/html-editor/Spell-common.c
--- components/html-editor.old/Spell-common.c	1970-01-01 01:00:00.000000000 +0100
+++ components/html-editor/Spell-common.c	2004-03-06 23:23:57.080627000 +0100
@@ -0,0 +1,399 @@
+/*
+ * This file was generated by orbit-idl-2 - DO NOT EDIT!
+ */
+#include <string.h>
+#define ORBIT2_STUBS_API
+#define ORBIT_IDL_C_COMMON
+#define Spell_COMMON
+#include "Spell.h"
+static const CORBA_unsigned_long ORBit_zero_int = 0;
+#if ( (TC_IMPL_TC_CORBA_sequence_CORBA_string_0 == 'S') \
+&& (TC_IMPL_TC_CORBA_sequence_CORBA_string_1 == 'p') \
+&& (TC_IMPL_TC_CORBA_sequence_CORBA_string_2 == 'e') \
+&& (TC_IMPL_TC_CORBA_sequence_CORBA_string_3 == 'l') \
+&& (TC_IMPL_TC_CORBA_sequence_CORBA_string_4 == 'l') \
+) && !defined(TC_DEF_TC_CORBA_sequence_CORBA_string)
+#define TC_DEF_TC_CORBA_sequence_CORBA_string 1
+static const CORBA_TypeCode anon_subtypes_array1[] = {(CORBA_TypeCode) & TC_CORBA_string_struct};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_sequence,
+   0,
+   0,
+   4,
+   0,
+   1
+   ,
+   (CORBA_TypeCode *) anon_subtypes_array1,
+   CORBA_OBJECT_NIL,
+   NULL,
+   NULL,
+   NULL,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_CORBA_sequence_CORBA_string_0 == 'S') \
+&& (TC_IMPL_TC_CORBA_sequence_CORBA_string_1 == 'p') \
+&& (TC_IMPL_TC_CORBA_sequence_CORBA_string_2 == 'e') \
+&& (TC_IMPL_TC_CORBA_sequence_CORBA_string_3 == 'l') \
+&& (TC_IMPL_TC_CORBA_sequence_CORBA_string_4 == 'l') \
+) && !defined(TC_DEF_TC_CORBA_sequence_CORBA_string)
+#define TC_DEF_TC_CORBA_sequence_CORBA_string 1
+static const CORBA_TypeCode anon_subtypes_array8[] = {(CORBA_TypeCode) & TC_CORBA_string_struct};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_sequence,
+   0,
+   0,
+   4,
+   0,
+   1
+   ,
+   (CORBA_TypeCode *) anon_subtypes_array8,
+   CORBA_OBJECT_NIL,
+   NULL,
+   NULL,
+   NULL,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_GNOME_Spell_StringSeq_0 == 'S') \
+&& (TC_IMPL_TC_GNOME_Spell_StringSeq_1 == 'p') \
+&& (TC_IMPL_TC_GNOME_Spell_StringSeq_2 == 'e') \
+&& (TC_IMPL_TC_GNOME_Spell_StringSeq_3 == 'l') \
+&& (TC_IMPL_TC_GNOME_Spell_StringSeq_4 == 'l') \
+) && !defined(TC_DEF_TC_GNOME_Spell_StringSeq)
+#define TC_DEF_TC_GNOME_Spell_StringSeq 1
+static const CORBA_TypeCode anon_subtypes_array11[] = {(CORBA_TypeCode) & TC_CORBA_sequence_CORBA_string_struct};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+const struct CORBA_TypeCode_struct TC_GNOME_Spell_StringSeq_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_alias,
+   0,
+   0,
+   4,
+   0,
+   1
+   ,
+   (CORBA_TypeCode *) anon_subtypes_array11,
+   CORBA_OBJECT_NIL,
+   "StringSeq",
+   "IDL:GNOME/Spell/StringSeq:1.0",
+   NULL,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_GNOME_Spell_Language_0 == 'S') \
+&& (TC_IMPL_TC_GNOME_Spell_Language_1 == 'p') \
+&& (TC_IMPL_TC_GNOME_Spell_Language_2 == 'e') \
+&& (TC_IMPL_TC_GNOME_Spell_Language_3 == 'l') \
+&& (TC_IMPL_TC_GNOME_Spell_Language_4 == 'l') \
+) && !defined(TC_DEF_TC_GNOME_Spell_Language)
+#define TC_DEF_TC_GNOME_Spell_Language 1
+static const char *anon_subnames_array13[] = {"name", "abbreviation"};
+static const CORBA_TypeCode anon_subtypes_array14[] = {(CORBA_TypeCode) & TC_CORBA_string_struct, (CORBA_TypeCode) & TC_CORBA_string_struct};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+const struct CORBA_TypeCode_struct TC_GNOME_Spell_Language_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_struct,
+   0,
+   0,
+   4,
+   0,
+   2
+   ,
+   (CORBA_TypeCode *) anon_subtypes_array14,
+   CORBA_OBJECT_NIL,
+   "Language",
+   "IDL:GNOME/Spell/Language:1.0",
+   (char **) anon_subnames_array13,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_0 == 'S') \
+&& (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_1 == 'p') \
+&& (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_2 == 'e') \
+&& (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_3 == 'l') \
+&& (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_4 == 'l') \
+) && !defined(TC_DEF_TC_CORBA_sequence_GNOME_Spell_Language)
+#define TC_DEF_TC_CORBA_sequence_GNOME_Spell_Language 1
+static const CORBA_TypeCode anon_subtypes_array17[] = {(CORBA_TypeCode) & TC_GNOME_Spell_Language_struct};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+const struct CORBA_TypeCode_struct TC_CORBA_sequence_GNOME_Spell_Language_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_sequence,
+   0,
+   0,
+   4,
+   0,
+   1
+   ,
+   (CORBA_TypeCode *) anon_subtypes_array17,
+   CORBA_OBJECT_NIL,
+   NULL,
+   NULL,
+   NULL,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_0 == 'S') \
+&& (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_1 == 'p') \
+&& (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_2 == 'e') \
+&& (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_3 == 'l') \
+&& (TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_4 == 'l') \
+) && !defined(TC_DEF_TC_CORBA_sequence_GNOME_Spell_Language)
+#define TC_DEF_TC_CORBA_sequence_GNOME_Spell_Language 1
+static const CORBA_TypeCode anon_subtypes_array24[] = {(CORBA_TypeCode) & TC_GNOME_Spell_Language_struct};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+const struct CORBA_TypeCode_struct TC_CORBA_sequence_GNOME_Spell_Language_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_sequence,
+   0,
+   0,
+   4,
+   0,
+   1
+   ,
+   (CORBA_TypeCode *) anon_subtypes_array24,
+   CORBA_OBJECT_NIL,
+   NULL,
+   NULL,
+   NULL,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_GNOME_Spell_LanguageSeq_0 == 'S') \
+&& (TC_IMPL_TC_GNOME_Spell_LanguageSeq_1 == 'p') \
+&& (TC_IMPL_TC_GNOME_Spell_LanguageSeq_2 == 'e') \
+&& (TC_IMPL_TC_GNOME_Spell_LanguageSeq_3 == 'l') \
+&& (TC_IMPL_TC_GNOME_Spell_LanguageSeq_4 == 'l') \
+) && !defined(TC_DEF_TC_GNOME_Spell_LanguageSeq)
+#define TC_DEF_TC_GNOME_Spell_LanguageSeq 1
+static const CORBA_TypeCode anon_subtypes_array27[] = {(CORBA_TypeCode) & TC_CORBA_sequence_GNOME_Spell_Language_struct};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+const struct CORBA_TypeCode_struct TC_GNOME_Spell_LanguageSeq_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_alias,
+   0,
+   0,
+   4,
+   0,
+   1
+   ,
+   (CORBA_TypeCode *) anon_subtypes_array27,
+   CORBA_OBJECT_NIL,
+   "LanguageSeq",
+   "IDL:GNOME/Spell/LanguageSeq:1.0",
+   NULL,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_GNOME_Spell_Dictionary_Error_0 == 'S') \
+&& (TC_IMPL_TC_GNOME_Spell_Dictionary_Error_1 == 'p') \
+&& (TC_IMPL_TC_GNOME_Spell_Dictionary_Error_2 == 'e') \
+&& (TC_IMPL_TC_GNOME_Spell_Dictionary_Error_3 == 'l') \
+&& (TC_IMPL_TC_GNOME_Spell_Dictionary_Error_4 == 'l') \
+) && !defined(TC_DEF_TC_GNOME_Spell_Dictionary_Error)
+#define TC_DEF_TC_GNOME_Spell_Dictionary_Error 1
+static const char *anon_subnames_array29[] = {"error"};
+static const CORBA_TypeCode anon_subtypes_array30[] = {(CORBA_TypeCode) & TC_CORBA_string_struct};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+const struct CORBA_TypeCode_struct TC_GNOME_Spell_Dictionary_Error_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_except,
+   0,
+   0,
+   4,
+   0,
+   1
+   ,
+   (CORBA_TypeCode *) anon_subtypes_array30,
+   CORBA_OBJECT_NIL,
+   "Error",
+   "IDL:GNOME/Spell/Dictionary/Error:1.0",
+   (char **) anon_subnames_array29,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#if ( (TC_IMPL_TC_GNOME_Spell_Dictionary_0 == 'S') \
+&& (TC_IMPL_TC_GNOME_Spell_Dictionary_1 == 'p') \
+&& (TC_IMPL_TC_GNOME_Spell_Dictionary_2 == 'e') \
+&& (TC_IMPL_TC_GNOME_Spell_Dictionary_3 == 'l') \
+&& (TC_IMPL_TC_GNOME_Spell_Dictionary_4 == 'l') \
+) && !defined(TC_DEF_TC_GNOME_Spell_Dictionary)
+#define TC_DEF_TC_GNOME_Spell_Dictionary 1
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+const struct CORBA_TypeCode_struct TC_GNOME_Spell_Dictionary_struct = {
+   {&ORBit_TypeCode_epv, ORBIT_REFCOUNT_STATIC},
+   CORBA_tk_objref,
+   0,
+   0,
+   4,
+   0,
+   0
+   ,
+   NULL,
+   CORBA_OBJECT_NIL,
+   "Dictionary",
+   "IDL:GNOME/Spell/Dictionary:1.0",
+   NULL,
+   NULL,
+   -1,
+   0,
+   0, 0
+};
+#endif
+#ifndef ORBIT_IDL_C_IMODULE_Spell
+CORBA_unsigned_long GNOME_Spell_Dictionary__classid = 0;
+#endif
+/* Interface type data */
+static ORBit_IArg GNOME_Spell_Dictionary_setLanguage__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "language"}
+};
+static ORBit_IArg GNOME_Spell_Dictionary_checkWord__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "word"}
+};
+/* Exceptions */
+static CORBA_TypeCode GNOME_Spell_Dictionary_checkWord__exceptinfo[] = {
+   TC_GNOME_Spell_Dictionary_Error,
+   NULL
+};
+static ORBit_IArg GNOME_Spell_Dictionary_getSuggestions__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "word"}
+};
+/* Exceptions */
+static CORBA_TypeCode GNOME_Spell_Dictionary_getSuggestions__exceptinfo[] = {
+   TC_GNOME_Spell_Dictionary_Error,
+   NULL
+};
+static ORBit_IArg GNOME_Spell_Dictionary_addWordToSession__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "word"}
+};
+/* Exceptions */
+static CORBA_TypeCode GNOME_Spell_Dictionary_addWordToSession__exceptinfo[] = {
+   TC_GNOME_Spell_Dictionary_Error,
+   NULL
+};
+static ORBit_IArg GNOME_Spell_Dictionary_addWordToPersonal__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "word"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "language"}
+};
+/* Exceptions */
+static CORBA_TypeCode GNOME_Spell_Dictionary_addWordToPersonal__exceptinfo[] = {
+   TC_GNOME_Spell_Dictionary_Error,
+   NULL
+};
+static ORBit_IArg GNOME_Spell_Dictionary_setCorrection__arginfo[] = {
+   {TC_CORBA_string, ORBit_I_ARG_IN, "word"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "replacement"},
+   {TC_CORBA_string, ORBit_I_ARG_IN, "language"}
+};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+ORBit_IMethod GNOME_Spell_Dictionary__imethods[] = {
+   {
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_GNOME_Spell_LanguageSeq, "getLanguages", 12,
+      0
+   }
+   ,{
+      {1, 1, GNOME_Spell_Dictionary_setLanguage__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "setLanguage", 11,
+      0
+   }
+   ,{
+      {1, 1, GNOME_Spell_Dictionary_checkWord__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {1, 1, GNOME_Spell_Dictionary_checkWord__exceptinfo, FALSE},
+      TC_CORBA_boolean, "checkWord", 9,
+      0 | ORBit_I_COMMON_FIXED_SIZE
+   }
+   ,{
+      {1, 1, GNOME_Spell_Dictionary_getSuggestions__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {1, 1, GNOME_Spell_Dictionary_getSuggestions__exceptinfo, FALSE},
+      TC_GNOME_Spell_StringSeq, "getSuggestions", 14,
+      0
+   }
+   ,{
+      {1, 1, GNOME_Spell_Dictionary_addWordToSession__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {1, 1, GNOME_Spell_Dictionary_addWordToSession__exceptinfo, FALSE},
+      TC_void, "addWordToSession", 16,
+      0
+   }
+   ,{
+      {2, 2, GNOME_Spell_Dictionary_addWordToPersonal__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {1, 1, GNOME_Spell_Dictionary_addWordToPersonal__exceptinfo, FALSE},
+      TC_void, "addWordToPersonal", 17,
+      0
+   }
+   ,{
+      {3, 3, GNOME_Spell_Dictionary_setCorrection__arginfo, FALSE},
+      {0, 0, NULL, FALSE},
+      {0, 0, NULL, FALSE},
+      TC_void, "setCorrection", 13,
+      0
+   }
+};
+static CORBA_string GNOME_Spell_Dictionary__base_itypes[] = {
+   "IDL:Bonobo/Unknown:1.0",
+   "IDL:omg.org/CORBA/Object:1.0"
+};
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+static
+#endif
+ORBit_IInterface GNOME_Spell_Dictionary__iinterface = {
+   TC_GNOME_Spell_Dictionary, {7, 7, GNOME_Spell_Dictionary__imethods, FALSE},
+   {2, 2, GNOME_Spell_Dictionary__base_itypes, FALSE}
+};
diff -urN components/html-editor.old/Spell-skels.c components/html-editor/Spell-skels.c
--- components/html-editor.old/Spell-skels.c	1970-01-01 01:00:00.000000000 +0100
+++ components/html-editor/Spell-skels.c	2004-03-06 23:23:57.050027000 +0100
@@ -0,0 +1,244 @@
+/*
+ * This file was generated by orbit-idl-2 - DO NOT EDIT!
+ */
+#include <string.h>
+#define ORBIT2_STUBS_API
+#include "Spell.h"
+void 
+_ORBIT_skel_small_GNOME_Spell_Dictionary_getLanguages(POA_GNOME_Spell_Dictionary * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+						      GNOME_Spell_LanguageSeq * (*_impl_getLanguages) (PortableServer_Servant _servant, CORBA_Environment * ev))
+{
+   *(GNOME_Spell_LanguageSeq * *) _o_retval = _impl_getLanguages(_o_servant, _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_Spell_Dictionary_setLanguage(POA_GNOME_Spell_Dictionary * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+						     void (*_impl_setLanguage) (PortableServer_Servant _servant, const CORBA_char * language, CORBA_Environment * ev))
+{
+   _impl_setLanguage(_o_servant, *(const CORBA_char * *) _o_args[0], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_Spell_Dictionary_checkWord(POA_GNOME_Spell_Dictionary * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+						   CORBA_boolean(*_impl_checkWord) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev))
+{
+   *(CORBA_boolean *) _o_retval = _impl_checkWord(_o_servant, *(const CORBA_char * *) _o_args[0], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_Spell_Dictionary_getSuggestions(POA_GNOME_Spell_Dictionary * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							GNOME_Spell_StringSeq * (*_impl_getSuggestions) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev))
+{
+   *(GNOME_Spell_StringSeq * *) _o_retval = _impl_getSuggestions(_o_servant, *(const CORBA_char * *) _o_args[0], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_Spell_Dictionary_addWordToSession(POA_GNOME_Spell_Dictionary * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							  void (*_impl_addWordToSession) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev))
+{
+   _impl_addWordToSession(_o_servant, *(const CORBA_char * *) _o_args[0], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_Spell_Dictionary_addWordToPersonal(POA_GNOME_Spell_Dictionary * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+							   void (*_impl_addWordToPersonal) (PortableServer_Servant _servant, const CORBA_char * word, const CORBA_char * language, CORBA_Environment * ev))
+{
+   _impl_addWordToPersonal(_o_servant, *(const CORBA_char * *) _o_args[0], *(const CORBA_char * *) _o_args[1], _o_ev);
+}
+void 
+_ORBIT_skel_small_GNOME_Spell_Dictionary_setCorrection(POA_GNOME_Spell_Dictionary * _o_servant, gpointer _o_retval, gpointer * _o_args, CORBA_Context _o_ctx, CORBA_Environment * _o_ev,
+						       void (*_impl_setCorrection) (PortableServer_Servant _servant, const CORBA_char * word, const CORBA_char * replacement, const CORBA_char * language, CORBA_Environment * ev))
+{
+   _impl_setCorrection(_o_servant, *(const CORBA_char * *) _o_args[0], *(const CORBA_char * *) _o_args[1], *(const CORBA_char * *) _o_args[2], _o_ev);
+}
+static ORBitSmallSkeleton 
+get_skel_small_GNOME_Spell_Dictionary(POA_GNOME_Spell_Dictionary * servant,
+		     const char *opname, gpointer * m_data, gpointer * impl)
+{
+   switch (opname[0]) {
+	    case 'a':
+	    switch (opname[1]) {
+		     case 'd':
+		     switch (opname[2]) {
+			      case 'd':
+			      switch (opname[3]) {
+				       case 'W':
+				       switch (opname[4]) {
+						case 'o':
+						switch (opname[5]) {
+							 case 'r':
+							 switch (opname[6]) {
+								  case 'd':
+								  switch (opname[7]) {
+									   case 'T':
+									   switch (opname[8]) {
+										    case 'o':
+										    switch (opname[9]) {
+											     case 'P':
+											     if (strcmp((opname + 10), "ersonal"))
+												break;
+											     *impl = (gpointer) servant->vepv->GNOME_Spell_Dictionary_epv->addWordToPersonal;
+											     *m_data = (gpointer) & GNOME_Spell_Dictionary__iinterface.methods._buffer[5];
+											     return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_Spell_Dictionary_addWordToPersonal;
+											     break;
+											  case 'S':
+											     if (strcmp((opname + 10), "ession"))
+												break;
+											     *impl = (gpointer) servant->vepv->GNOME_Spell_Dictionary_epv->addWordToSession;
+											     *m_data = (gpointer) & GNOME_Spell_Dictionary__iinterface.methods._buffer[4];
+											     return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_Spell_Dictionary_addWordToSession;
+											     break;
+											  default:
+											     break;
+										    }
+										    break;
+										 default:
+										    break;
+									   }
+									   break;
+									default:
+									   break;
+								  }
+								  break;
+							       default:
+								  break;
+							 }
+							 break;
+						      default:
+							 break;
+						}
+						break;
+					     default:
+						break;
+				       }
+				       break;
+				    default:
+				       break;
+			      }
+			      break;
+			   default:
+			      break;
+		     }
+		     break;
+		  default:
+		     break;
+	    }
+	    break;
+	 case 'c':
+	    if (strcmp((opname + 1), "heckWord"))
+	       break;
+	    *impl = (gpointer) servant->vepv->GNOME_Spell_Dictionary_epv->checkWord;
+	    *m_data = (gpointer) & GNOME_Spell_Dictionary__iinterface.methods._buffer[2];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_Spell_Dictionary_checkWord;
+	    break;
+	 case 'g':
+	    switch (opname[1]) {
+		  case 'e':
+		     switch (opname[2]) {
+			   case 't':
+			      switch (opname[3]) {
+				    case 'L':
+				       if (strcmp((opname + 4), "anguages"))
+					  break;
+				       *impl = (gpointer) servant->vepv->GNOME_Spell_Dictionary_epv->getLanguages;
+				       *m_data = (gpointer) & GNOME_Spell_Dictionary__iinterface.methods._buffer[0];
+				       return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_Spell_Dictionary_getLanguages;
+				       break;
+				    case 'S':
+				       if (strcmp((opname + 4), "uggestions"))
+					  break;
+				       *impl = (gpointer) servant->vepv->GNOME_Spell_Dictionary_epv->getSuggestions;
+				       *m_data = (gpointer) & GNOME_Spell_Dictionary__iinterface.methods._buffer[3];
+				       return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_Spell_Dictionary_getSuggestions;
+				       break;
+				    default:
+				       break;
+			      }
+			      break;
+			   default:
+			      break;
+		     }
+		     break;
+		  default:
+		     break;
+	    }
+	    break;
+	 case 'q':
+	    if (strcmp((opname + 1), "ueryInterface"))
+	       break;
+	    *impl = (gpointer) servant->vepv->Bonobo_Unknown_epv->queryInterface;
+	    *m_data = (gpointer) & Bonobo_Unknown__iinterface.methods._buffer[2];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_Bonobo_Unknown_queryInterface;
+	    break;
+	 case 'r':
+	    if (strcmp((opname + 1), "ef"))
+	       break;
+	    *impl = (gpointer) servant->vepv->Bonobo_Unknown_epv->ref;
+	    *m_data = (gpointer) & Bonobo_Unknown__iinterface.methods._buffer[0];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_Bonobo_Unknown_ref;
+	    break;
+	 case 's':
+	    switch (opname[1]) {
+		  case 'e':
+		     switch (opname[2]) {
+			   case 't':
+			      switch (opname[3]) {
+				    case 'C':
+				       if (strcmp((opname + 4), "orrection"))
+					  break;
+				       *impl = (gpointer) servant->vepv->GNOME_Spell_Dictionary_epv->setCorrection;
+				       *m_data = (gpointer) & GNOME_Spell_Dictionary__iinterface.methods._buffer[6];
+				       return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_Spell_Dictionary_setCorrection;
+				       break;
+				    case 'L':
+				       if (strcmp((opname + 4), "anguage"))
+					  break;
+				       *impl = (gpointer) servant->vepv->GNOME_Spell_Dictionary_epv->setLanguage;
+				       *m_data = (gpointer) & GNOME_Spell_Dictionary__iinterface.methods._buffer[1];
+				       return (ORBitSmallSkeleton) _ORBIT_skel_small_GNOME_Spell_Dictionary_setLanguage;
+				       break;
+				    default:
+				       break;
+			      }
+			      break;
+			   default:
+			      break;
+		     }
+		     break;
+		  default:
+		     break;
+	    }
+	    break;
+	 case 'u':
+	    if (strcmp((opname + 1), "nref"))
+	       break;
+	    *impl = (gpointer) servant->vepv->Bonobo_Unknown_epv->unref;
+	    *m_data = (gpointer) & Bonobo_Unknown__iinterface.methods._buffer[1];
+	    return (ORBitSmallSkeleton) _ORBIT_skel_small_Bonobo_Unknown_unref;
+	    break;
+	 default:
+	    break;
+   }
+   return NULL;
+}
+void 
+POA_GNOME_Spell_Dictionary__init(PortableServer_Servant servant,
+				 CORBA_Environment * env)
+{
+   static PortableServer_ClassInfo class_info = {NULL, (ORBit_small_impl_finder) & get_skel_small_GNOME_Spell_Dictionary, "IDL:GNOME/Spell/Dictionary:1.0", &GNOME_Spell_Dictionary__classid, NULL, &GNOME_Spell_Dictionary__iinterface};
+   POA_GNOME_Spell_Dictionary__vepv *fakevepv = NULL;
+   if (((PortableServer_ServantBase *) servant)->vepv[0]->finalize == 0) {
+      ((PortableServer_ServantBase *) servant)->vepv[0]->finalize = POA_GNOME_Spell_Dictionary__fini;
+   }
+   PortableServer_ServantBase__init(((PortableServer_ServantBase *) servant), env);
+   POA_Bonobo_Unknown__init(servant, env);
+   ORBit_classinfo_register(&class_info);
+   ORBIT_SERVANT_SET_CLASSINFO(servant, &class_info);
+   if (!class_info.vepvmap) {
+      class_info.vepvmap = g_new0(ORBit_VepvIdx, GNOME_Spell_Dictionary__classid + 1);
+      class_info.vepvmap[Bonobo_Unknown__classid] = (((char *) &(fakevepv->Bonobo_Unknown_epv)) - ((char *) (fakevepv))) / sizeof(GFunc);
+      class_info.vepvmap[GNOME_Spell_Dictionary__classid] = (((char *) &(fakevepv->GNOME_Spell_Dictionary_epv)) - ((char *) (fakevepv))) / sizeof(GFunc);
+   }
+}
+void 
+POA_GNOME_Spell_Dictionary__fini(PortableServer_Servant servant,
+				 CORBA_Environment * env)
+{
+   POA_Bonobo_Unknown__fini(servant, env);
+   PortableServer_ServantBase__fini(servant, env);
+}
diff -urN components/html-editor.old/Spell-stubs.c components/html-editor/Spell-stubs.c
--- components/html-editor.old/Spell-stubs.c	1970-01-01 01:00:00.000000000 +0100
+++ components/html-editor/Spell-stubs.c	2004-03-06 23:23:57.020546000 +0100
@@ -0,0 +1,122 @@
+/*
+ * This file was generated by orbit-idl-2 - DO NOT EDIT!
+ */
+#include <string.h>
+#define ORBIT2_STUBS_API
+#include "Spell.h"
+GNOME_Spell_LanguageSeq *
+GNOME_Spell_Dictionary_getLanguages(GNOME_Spell_Dictionary _obj, CORBA_Environment * ev)
+{
+   GNOME_Spell_LanguageSeq *_ORBIT_retval;
+   POA_GNOME_Spell_Dictionary__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_Spell_Dictionary__classid) &&
+       (_ORBIT_epv = (POA_GNOME_Spell_Dictionary__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_Spell_Dictionary__classid))->getLanguages) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->getLanguages(ORBIT_STUB_GetServant(_obj), ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      ORBit_small_invoke_stub_n(_obj, &GNOME_Spell_Dictionary__iinterface.methods, 0, &_ORBIT_retval, NULL, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+void 
+GNOME_Spell_Dictionary_setLanguage(GNOME_Spell_Dictionary _obj, const CORBA_char * language, CORBA_Environment * ev)
+{
+   POA_GNOME_Spell_Dictionary__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_Spell_Dictionary__classid) &&
+       (_ORBIT_epv = (POA_GNOME_Spell_Dictionary__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_Spell_Dictionary__classid))->setLanguage) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->setLanguage(ORBIT_STUB_GetServant(_obj), language, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & language};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_Spell_Dictionary__iinterface.methods, 1, NULL, _args, NULL, ev);
+   }
+}
+CORBA_boolean 
+GNOME_Spell_Dictionary_checkWord(GNOME_Spell_Dictionary _obj, const CORBA_char * word, CORBA_Environment * ev)
+{
+   CORBA_boolean _ORBIT_retval;
+   POA_GNOME_Spell_Dictionary__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_Spell_Dictionary__classid) &&
+       (_ORBIT_epv = (POA_GNOME_Spell_Dictionary__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_Spell_Dictionary__classid))->checkWord) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->checkWord(ORBIT_STUB_GetServant(_obj), word, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & word};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_Spell_Dictionary__iinterface.methods, 2, &_ORBIT_retval, _args, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+GNOME_Spell_StringSeq *
+GNOME_Spell_Dictionary_getSuggestions(GNOME_Spell_Dictionary _obj, const CORBA_char * word, CORBA_Environment * ev)
+{
+   GNOME_Spell_StringSeq *_ORBIT_retval;
+   POA_GNOME_Spell_Dictionary__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_Spell_Dictionary__classid) &&
+       (_ORBIT_epv = (POA_GNOME_Spell_Dictionary__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_Spell_Dictionary__classid))->getSuggestions) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_retval = _ORBIT_epv->getSuggestions(ORBIT_STUB_GetServant(_obj), word, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & word};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_Spell_Dictionary__iinterface.methods, 3, &_ORBIT_retval, _args, NULL, ev);
+   }
+   return _ORBIT_retval;
+}
+void 
+GNOME_Spell_Dictionary_addWordToSession(GNOME_Spell_Dictionary _obj, const CORBA_char * word, CORBA_Environment * ev)
+{
+   POA_GNOME_Spell_Dictionary__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_Spell_Dictionary__classid) &&
+       (_ORBIT_epv = (POA_GNOME_Spell_Dictionary__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_Spell_Dictionary__classid))->addWordToSession) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->addWordToSession(ORBIT_STUB_GetServant(_obj), word, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & word};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_Spell_Dictionary__iinterface.methods, 4, NULL, _args, NULL, ev);
+   }
+}
+void 
+GNOME_Spell_Dictionary_addWordToPersonal(GNOME_Spell_Dictionary _obj, const CORBA_char * word, const CORBA_char * language, CORBA_Environment * ev)
+{
+   POA_GNOME_Spell_Dictionary__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_Spell_Dictionary__classid) &&
+       (_ORBIT_epv = (POA_GNOME_Spell_Dictionary__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_Spell_Dictionary__classid))->addWordToPersonal) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->addWordToPersonal(ORBIT_STUB_GetServant(_obj), word, language, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & word, (gpointer) & language};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_Spell_Dictionary__iinterface.methods, 5, NULL, _args, NULL, ev);
+   }
+}
+void 
+GNOME_Spell_Dictionary_setCorrection(GNOME_Spell_Dictionary _obj, const CORBA_char * word, const CORBA_char * replacement, const CORBA_char * language, CORBA_Environment * ev)
+{
+   POA_GNOME_Spell_Dictionary__epv *_ORBIT_epv;
+   if (ORBit_small_flags & ORBIT_SMALL_FAST_LOCALS &&
+       ORBIT_STUB_IsBypass(_obj, GNOME_Spell_Dictionary__classid) &&
+       (_ORBIT_epv = (POA_GNOME_Spell_Dictionary__epv *) ORBIT_STUB_GetEpv(_obj, GNOME_Spell_Dictionary__classid))->setCorrection) {
+      ORBIT_STUB_PreCall(_obj);
+      _ORBIT_epv->setCorrection(ORBIT_STUB_GetServant(_obj), word, replacement, language, ev);
+      ORBIT_STUB_PostCall(_obj);
+   } else {			/* remote marshal */
+      gpointer _args[] = {
+      (gpointer) & word, (gpointer) & replacement, (gpointer) & language};
+      ORBit_small_invoke_stub_n(_obj, &GNOME_Spell_Dictionary__iinterface.methods, 6, NULL, _args, NULL, ev);
+   }
+}
diff -urN components/html-editor.old/Spell.h components/html-editor/Spell.h
--- components/html-editor.old/Spell.h	1970-01-01 01:00:00.000000000 +0100
+++ components/html-editor/Spell.h	2004-03-06 23:23:57.120938000 +0100
@@ -0,0 +1,287 @@
+/*
+ * This file was generated by orbit-idl-2 - DO NOT EDIT!
+ */
+#ifndef Spell_H
+#define Spell_H 1
+#include <glib.h>
+#define ORBIT_IDL_SERIAL 19
+#include <orbit/orbit-types.h>
+#ifdef __cplusplus
+extern "C" {
+#endif				/* __cplusplus */
+   /** typedefs **/
+#include <bonobo/Bonobo.h>
+#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
+#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
+#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'S'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'p'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'e'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'l'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'l'
+#if !defined(_CORBA_sequence_CORBA_string_defined)
+#define _CORBA_sequence_CORBA_string_defined 1
+   typedef struct {
+      CORBA_unsigned_long _maximum,
+       _length;
+      CORBA_string *_buffer;
+      CORBA_boolean _release;
+   } CORBA_sequence_CORBA_string;
+#endif
+#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
+#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'S'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'p'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'e'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'l'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'l'
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
+#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
+#endif
+#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
+#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
+#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
+#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
+#endif
+#if !defined(_GNOME_Spell_StringSeq_defined)
+#define _GNOME_Spell_StringSeq_defined 1
+   typedef CORBA_sequence_CORBA_string GNOME_Spell_StringSeq;
+#define GNOME_Spell_StringSeq_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
+#define GNOME_Spell_StringSeq_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_GNOME_Spell_StringSeq_0)
+#define TC_IMPL_TC_GNOME_Spell_StringSeq_0 'S'
+#define TC_IMPL_TC_GNOME_Spell_StringSeq_1 'p'
+#define TC_IMPL_TC_GNOME_Spell_StringSeq_2 'e'
+#define TC_IMPL_TC_GNOME_Spell_StringSeq_3 'l'
+#define TC_IMPL_TC_GNOME_Spell_StringSeq_4 'l'
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_GNOME_Spell_StringSeq_struct;
+#define TC_GNOME_Spell_StringSeq ((CORBA_TypeCode)&TC_GNOME_Spell_StringSeq_struct)
+#endif
+#define GNOME_Spell_StringSeq__alloc() ((GNOME_Spell_StringSeq *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
+#define GNOME_Spell_StringSeq__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
+#define GNOME_Spell_StringSeq_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
+#endif
+#if !defined(_GNOME_Spell_Language_defined)
+#define _GNOME_Spell_Language_defined 1
+   typedef struct GNOME_Spell_Language_type GNOME_Spell_Language;
+   struct GNOME_Spell_Language_type {
+      CORBA_string name;
+      CORBA_string abbreviation;
+   };
+#if !defined(TC_IMPL_TC_GNOME_Spell_Language_0)
+#define TC_IMPL_TC_GNOME_Spell_Language_0 'S'
+#define TC_IMPL_TC_GNOME_Spell_Language_1 'p'
+#define TC_IMPL_TC_GNOME_Spell_Language_2 'e'
+#define TC_IMPL_TC_GNOME_Spell_Language_3 'l'
+#define TC_IMPL_TC_GNOME_Spell_Language_4 'l'
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_GNOME_Spell_Language_struct;
+#define TC_GNOME_Spell_Language ((CORBA_TypeCode)&TC_GNOME_Spell_Language_struct)
+#endif
+#define GNOME_Spell_Language__alloc() ((GNOME_Spell_Language *)ORBit_small_alloc (TC_GNOME_Spell_Language))
+#define GNOME_Spell_Language__freekids(m,d) ORBit_small_freekids (TC_GNOME_Spell_Language,(m),(d))
+#endif
+#if !defined(ORBIT_DECL_CORBA_sequence_GNOME_Spell_Language)
+#define ORBIT_DECL_CORBA_sequence_GNOME_Spell_Language 1
+#define ORBIT_IMPL_CORBA_sequence_GNOME_Spell_Language_0 'S'
+#define ORBIT_IMPL_CORBA_sequence_GNOME_Spell_Language_1 'p'
+#define ORBIT_IMPL_CORBA_sequence_GNOME_Spell_Language_2 'e'
+#define ORBIT_IMPL_CORBA_sequence_GNOME_Spell_Language_3 'l'
+#define ORBIT_IMPL_CORBA_sequence_GNOME_Spell_Language_4 'l'
+#if !defined(_CORBA_sequence_GNOME_Spell_Language_defined)
+#define _CORBA_sequence_GNOME_Spell_Language_defined 1
+   typedef struct {
+      CORBA_unsigned_long _maximum,
+       _length;
+      GNOME_Spell_Language *_buffer;
+      CORBA_boolean _release;
+   } CORBA_sequence_GNOME_Spell_Language;
+#endif
+#if !defined(TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_0)
+#define TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_0 'S'
+#define TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_1 'p'
+#define TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_2 'e'
+#define TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_3 'l'
+#define TC_IMPL_TC_CORBA_sequence_GNOME_Spell_Language_4 'l'
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_CORBA_sequence_GNOME_Spell_Language_struct;
+#define TC_CORBA_sequence_GNOME_Spell_Language ((CORBA_TypeCode)&TC_CORBA_sequence_GNOME_Spell_Language_struct)
+#endif
+#define CORBA_sequence_GNOME_Spell_Language__alloc() ((CORBA_sequence_GNOME_Spell_Language *)ORBit_small_alloc (TC_CORBA_sequence_GNOME_Spell_Language))
+#define CORBA_sequence_GNOME_Spell_Language__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_GNOME_Spell_Language,(m),(d))
+#define CORBA_sequence_GNOME_Spell_Language_allocbuf(l) ((GNOME_Spell_Language*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_Spell_Language, (l)))
+#define CORBA_sequence_GNOME_Spell_Language_allocbuf(l) ((GNOME_Spell_Language*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_Spell_Language, (l)))
+#endif
+#if !defined(_GNOME_Spell_LanguageSeq_defined)
+#define _GNOME_Spell_LanguageSeq_defined 1
+   typedef CORBA_sequence_GNOME_Spell_Language GNOME_Spell_LanguageSeq;
+#define GNOME_Spell_LanguageSeq_marshal(x,y,z) CORBA_sequence_GNOME_Spell_Language_marshal((x),(y),(z))
+#define GNOME_Spell_LanguageSeq_demarshal(x,y,z,i) CORBA_sequence_GNOME_Spell_Language_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_GNOME_Spell_LanguageSeq_0)
+#define TC_IMPL_TC_GNOME_Spell_LanguageSeq_0 'S'
+#define TC_IMPL_TC_GNOME_Spell_LanguageSeq_1 'p'
+#define TC_IMPL_TC_GNOME_Spell_LanguageSeq_2 'e'
+#define TC_IMPL_TC_GNOME_Spell_LanguageSeq_3 'l'
+#define TC_IMPL_TC_GNOME_Spell_LanguageSeq_4 'l'
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_GNOME_Spell_LanguageSeq_struct;
+#define TC_GNOME_Spell_LanguageSeq ((CORBA_TypeCode)&TC_GNOME_Spell_LanguageSeq_struct)
+#endif
+#define GNOME_Spell_LanguageSeq__alloc() ((GNOME_Spell_LanguageSeq *)ORBit_small_alloc (TC_CORBA_sequence_GNOME_Spell_Language))
+#define GNOME_Spell_LanguageSeq__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_GNOME_Spell_Language,(m),(d))
+#define GNOME_Spell_LanguageSeq_allocbuf(l) ((GNOME_Spell_Language*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_Spell_Language, (l)))
+#endif
+#if !defined(ORBIT_DECL_GNOME_Spell_Dictionary) && !defined(_GNOME_Spell_Dictionary_defined)
+#define ORBIT_DECL_GNOME_Spell_Dictionary 1
+#define _GNOME_Spell_Dictionary_defined 1
+#define GNOME_Spell_Dictionary__freekids CORBA_Object__freekids
+   typedef CORBA_Object GNOME_Spell_Dictionary;
+   extern CORBA_unsigned_long GNOME_Spell_Dictionary__classid;
+#if !defined(TC_IMPL_TC_GNOME_Spell_Dictionary_0)
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_0 'S'
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_1 'p'
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_2 'e'
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_3 'l'
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_4 'l'
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_GNOME_Spell_Dictionary_struct;
+#define TC_GNOME_Spell_Dictionary ((CORBA_TypeCode)&TC_GNOME_Spell_Dictionary_struct)
+#endif
+#endif
+#undef ex_GNOME_Spell_Dictionary_Error
+#define ex_GNOME_Spell_Dictionary_Error "IDL:GNOME/Spell/Dictionary/Error:1.0"
+#if !defined(_GNOME_Spell_Dictionary_Error_defined)
+#define _GNOME_Spell_Dictionary_Error_defined 1
+   typedef struct GNOME_Spell_Dictionary_Error_type GNOME_Spell_Dictionary_Error;
+   struct GNOME_Spell_Dictionary_Error_type {
+      CORBA_string error;
+   };
+#if !defined(TC_IMPL_TC_GNOME_Spell_Dictionary_Error_0)
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_Error_0 'S'
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_Error_1 'p'
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_Error_2 'e'
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_Error_3 'l'
+#define TC_IMPL_TC_GNOME_Spell_Dictionary_Error_4 'l'
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_GNOME_Spell_Dictionary_Error_struct;
+#define TC_GNOME_Spell_Dictionary_Error ((CORBA_TypeCode)&TC_GNOME_Spell_Dictionary_Error_struct)
+#endif
+#define GNOME_Spell_Dictionary_Error__alloc() ((GNOME_Spell_Dictionary_Error *)ORBit_small_alloc (TC_GNOME_Spell_Dictionary_Error))
+#define GNOME_Spell_Dictionary_Error__freekids(m,d) ORBit_small_freekids (TC_GNOME_Spell_Dictionary_Error,(m),(d))
+#endif
+   /** POA structures **/
+#ifndef _defined_POA_GNOME_Spell_Dictionary
+#define _defined_POA_GNOME_Spell_Dictionary 1
+   typedef struct {
+      void *_private;
+      GNOME_Spell_LanguageSeq *(*getLanguages) (PortableServer_Servant _servant, CORBA_Environment * ev);
+      void (*setLanguage) (PortableServer_Servant _servant, const CORBA_char * language, CORBA_Environment * ev);
+       CORBA_boolean(*checkWord) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev);
+      GNOME_Spell_StringSeq *(*getSuggestions) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev);
+      void (*addWordToSession) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev);
+      void (*addWordToPersonal) (PortableServer_Servant _servant, const CORBA_char * word, const CORBA_char * language, CORBA_Environment * ev);
+      void (*setCorrection) (PortableServer_Servant _servant, const CORBA_char * word, const CORBA_char * replacement, const CORBA_char * language, CORBA_Environment * ev);
+   } POA_GNOME_Spell_Dictionary__epv;
+   typedef struct {
+      PortableServer_ServantBase__epv *_base_epv;
+      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
+      POA_GNOME_Spell_Dictionary__epv *GNOME_Spell_Dictionary_epv;
+   } POA_GNOME_Spell_Dictionary__vepv;
+   typedef struct {
+      void *_private;
+      POA_GNOME_Spell_Dictionary__vepv *vepv;
+   } POA_GNOME_Spell_Dictionary;
+   extern void POA_GNOME_Spell_Dictionary__init(PortableServer_Servant servant, CORBA_Environment * ev);
+   extern void POA_GNOME_Spell_Dictionary__fini(PortableServer_Servant servant, CORBA_Environment * ev);
+#endif				/* _defined_POA_GNOME_Spell_Dictionary */
+   /** skel prototypes **/
+   void _ORBIT_skel_small_GNOME_Spell_Dictionary_getLanguages(POA_GNOME_Spell_Dictionary * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, GNOME_Spell_LanguageSeq * (*_impl_getLanguages) (PortableServer_Servant _servant, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_Spell_Dictionary_setLanguage(POA_GNOME_Spell_Dictionary * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_setLanguage) (PortableServer_Servant _servant, const CORBA_char * language, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_Spell_Dictionary_checkWord(POA_GNOME_Spell_Dictionary * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_checkWord) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_Spell_Dictionary_getSuggestions(POA_GNOME_Spell_Dictionary * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, GNOME_Spell_StringSeq * (*_impl_getSuggestions) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_Spell_Dictionary_addWordToSession(POA_GNOME_Spell_Dictionary * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_addWordToSession) (PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_Spell_Dictionary_addWordToPersonal(POA_GNOME_Spell_Dictionary * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_addWordToPersonal) (PortableServer_Servant _servant, const CORBA_char * word, const CORBA_char * language, CORBA_Environment * ev));
+   void _ORBIT_skel_small_GNOME_Spell_Dictionary_setCorrection(POA_GNOME_Spell_Dictionary * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_setCorrection) (PortableServer_Servant _servant, const CORBA_char * word, const CORBA_char * replacement, const CORBA_char * language, CORBA_Environment * ev));
+   /** stub prototypes **/
+#define GNOME_Spell_Dictionary_ref Bonobo_Unknown_ref
+#define GNOME_Spell_Dictionary_unref Bonobo_Unknown_unref
+#define GNOME_Spell_Dictionary_queryInterface Bonobo_Unknown_queryInterface
+   GNOME_Spell_LanguageSeq *GNOME_Spell_Dictionary_getLanguages(GNOME_Spell_Dictionary _obj, CORBA_Environment * ev);
+   void GNOME_Spell_Dictionary_setLanguage(GNOME_Spell_Dictionary _obj, const CORBA_char * language, CORBA_Environment * ev);
+   CORBA_boolean GNOME_Spell_Dictionary_checkWord(GNOME_Spell_Dictionary _obj, const CORBA_char * word, CORBA_Environment * ev);
+   GNOME_Spell_StringSeq *GNOME_Spell_Dictionary_getSuggestions(GNOME_Spell_Dictionary _obj, const CORBA_char * word, CORBA_Environment * ev);
+   void GNOME_Spell_Dictionary_addWordToSession(GNOME_Spell_Dictionary _obj, const CORBA_char * word, CORBA_Environment * ev);
+   void GNOME_Spell_Dictionary_addWordToPersonal(GNOME_Spell_Dictionary _obj, const CORBA_char * word, const CORBA_char * language, CORBA_Environment * ev);
+   void GNOME_Spell_Dictionary_setCorrection(GNOME_Spell_Dictionary _obj, const CORBA_char * word, const CORBA_char * replacement, const CORBA_char * language, CORBA_Environment * ev);
+   /** more internals **/
+#if !defined(MARSHAL_IMPL_CORBA_sequence_CORBA_string_0)
+#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_0 'S'
+#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_1 'p'
+#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_2 'e'
+#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_3 'l'
+#define MARSHAL_IMPL_CORBA_sequence_CORBA_string_4 'l'
+#endif
+#if !defined(MARSHAL_IMPL_CORBA_sequence_GNOME_Spell_Language_0)
+#define MARSHAL_IMPL_CORBA_sequence_GNOME_Spell_Language_0 'S'
+#define MARSHAL_IMPL_CORBA_sequence_GNOME_Spell_Language_1 'p'
+#define MARSHAL_IMPL_CORBA_sequence_GNOME_Spell_Language_2 'e'
+#define MARSHAL_IMPL_CORBA_sequence_GNOME_Spell_Language_3 'l'
+#define MARSHAL_IMPL_CORBA_sequence_GNOME_Spell_Language_4 'l'
+#endif
+#if !defined(MARSHAL_IMPL_GNOME_Spell_Language_0)
+#define MARSHAL_IMPL_GNOME_Spell_Language_0 'S'
+#define MARSHAL_IMPL_GNOME_Spell_Language_1 'p'
+#define MARSHAL_IMPL_GNOME_Spell_Language_2 'e'
+#define MARSHAL_IMPL_GNOME_Spell_Language_3 'l'
+#define MARSHAL_IMPL_GNOME_Spell_Language_4 'l'
+#endif
+#include <orbit/orb-core/orbit-interface.h>
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+   static
+#else
+   extern
+#endif
+   ORBit_IInterface GNOME_Spell_Dictionary__iinterface;
+#define GNOME_Spell_Dictionary_IMETHODS_LEN 7
+#ifdef ORBIT_IDL_C_IMODULE_Spell
+   static
+#else
+   extern
+#endif
+   ORBit_IMethod GNOME_Spell_Dictionary__imethods[GNOME_Spell_Dictionary_IMETHODS_LEN];
+#ifdef __cplusplus
+}
+#endif				/* __cplusplus */
+#ifndef EXCLUDE_ORBIT_H
+#include <orbit/orbit.h>
+#endif				/* EXCLUDE_ORBIT_H */
+#endif
+#undef ORBIT_IDL_SERIAL
