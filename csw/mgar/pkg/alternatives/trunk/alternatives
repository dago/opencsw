#!/bin/ksh -p

# ksh high-level implentation of linux style "alternatives".
# Author: Philip Brown, phil@bolthole.com, 2010
# @(#) alternatives 1.8@(#)

PRIORITIESDIR=/opt/csw/share/alternatives 
MANUALDIR=/etc/opt/csw/alternatives  #manual override location
AWK=nawk
DEBUG=${DEBUG:-/bin/true}

#echo DEBUG VERSION of $0: dont ship this
#DEBUG=echo

function usage {
	prog=`basename $0`
	print "Usage for $prog :"
	print "  $prog --display {name}"
	print "  $prog --auto {name}"
	print "  $prog --set {name} {/full/path}"
	print "  $prog --config {name}"
	print "  $prog --list"
	print "  "
	print " The following are provided for compatibility, but do not work"
	print " in exactly the same way as linux variants"
	print " See comments in usage function code for more information."
	print "  $prog --install {/full/path/name} {name} {#priority}"
	print "  $prog --remove {name} {/full/path}"

# I dont want to bloat up the usage message, so here's some more docs
#  
# This program is a lightweight 'workalike' to the linux alternatives prog.
# It is written with OpenCSW in mind, and is specificaly tailored for
# our needs. You may find it useful in other fields, but be aware that
# its primary purpose is to be simple, and flexible. NOT an exact clone.
# Part of its flexibility comes from the fact that it is configuration-file
# driven, NOT internal-database-driven
#   The --install and --remove flags, while (hopefully) provided as
# a convenience, do NOT install, or remove, any configuration. They just
# update symlinks, "as appropriate"
# 
# Priorities are driven by configuration files delivered by our packages.
# They get delivered to /opt/csw/share/alternatives, which keeps things
# NFS friendly.
# Thes files should only get "installed" or "removed" on a per-SVR4 package 
# basis normally. (although technically, it would be possible to drop in your
# own config file in either $PRIORITIESDIR or $MANUALDIR, and then
# have things integrate with your own custom non-packaged software).
#
# There is almost NO ERROR CHECKING. There is no saving state of prior actions,
# other than the --set comand. 
# It is up to individual packages to make sure that everyone providing
#  an alternative for {name}, all have the same "slave entries", 
#  if you choose to use slave entries
}


# Usage: find_highest_prio {name}
#   search through all conf files for {name}
# print out the highest priority match. or, potentially nothing.
function find_highest_prio {
	if [[ "$1" == "" ]] ; then
		print INTERNAL ERROR: find_highest_prio called with no args
		return
	fi
	# I hate using cat, but its the only way to avoid nawk throwing a fit.
	cat $PRIORITIESDIR/* $MANUALDIR/* 2>/dev/null |
	$AWK '	BEGIN {save=""}
		$2 == "'$1'" {if($4 > highest){
				save=$0;
				highest=$4
				}
		}
		
		END {print save}
	'
}

if [[ $# -lt 1 ]] ; then
	print error: need an argument
	usage
	exit 1
fi


############################################################
# Start of subroutine area

# Usage: print_alternatives shortname
# This prints only the INSTALLED alternatives lines for named software.
#  Does not display whether or not any have been manually chosen.
# Prints in priority-sorted order
# This is used both as a user-facing display, and also internally
#
function print_alternatives {
	if [[ $# != 1 ]] ; then print ERROR print_alternatives needs an arg; fi
	cat $PRIORITIESDIR/* 2>/dev/null|
		nawk '$2 == "'$1'" {print}' | sort -nr +3
}

# User facing function.
# enables "alternatives --list"
function list_alternatives {
	print "List of installed software that uses the alternatives system:"
	cat $PRIORITIESDIR/* 2>/dev/null| nawk '{print $2}' | sort -u
}

# prints ONLY the manually set alternatives line, if present
function print_manual_set {
	if [[ $# != 1 ]] ; then print ERROR print_manual_set needs an arg; fi
	
	if [[ -f $MANUALDIR/$1 ]] ; then
		nawk '$2 == "'$1'" {print}' $MANUALDIR/$1
	else
		return 1
	fi
}

function fileerr_exit {
	print Debug: potentially should check to see if /opt/csw is
	print  specifically read-only, or we are in jumpstart, or something
	print  before returning a bad status exit, perhaps

	case `/bin/id` in
	  'uid=0('*)
	  	:
		;;
	  *)
	  	echo "Hey! Try running this as root whydoncha?"
		exit 1
	  ;;
	esac

	print If someone other than Phil is seeing this,  please let him know
	
	exit 1
}

# Called only by set_alternative.
#  args:   {target} {shortname} {implementation-path}
# Split out, because one "alternatives" line may have multiple "slave" links
function set_link {
	$DEBUG set_link called with: $1 $2 $3
	if [[ $# -lt 3 ]] ; then
		print ERROR: set_link needs 3 arguments
		return 1
	fi
	
	if [[ -h $1 ]] ; then
		linktarget=`ls -l $1 | nawk '{print $NF}'`
		if [[ "$linktarget" == "$3" ]] ; then
			$DEBUG $1 already linked to $3
			return 0
		fi
		
		$DEBUG removing symlink $1
		/bin/rm -f $1
		if [[ $? -ne 0 ]] ; then
			$DEBUG permission to remove $1 failed
			fileerr_exit
		fi
	fi
	if [[ ! -f $1 ]] ; then
		$DEBUG linking $1 to $3
		ln -s $3 $1
		if [[ $? -ne 0 ]] ; then
			$DEBUG permission to create symlink for $1 failed
			fileerr_exit
		fi
		return 0
	else
		print ERROR: $1 exists, and is not symlink.
		print Not installing $3 as $1
		return 1
	fi

	## Note to self: check existing, and dont attempt to
	## update if already set how we want it?
	## Also, dont crash if /opt/csw is read-only.
	## Just politely print warning, and exit cleanly.
	## At least if running from jumpstart environment?
	## ALSO, be paranoid and dont remove a "real" file, if
	## one already exists in the target space.
	## only a symlink
}


#Used for --remove.
# removes the old symlinks.
# pass in the "normal" cache file format.
# Should be called ONLY IF THERE ARE NO MORE "alternatives" installed
# or if, perhaps, the "current" alternative is the one being removed.
function rm_alternative_links {
	$DEBUG rm_alternative_links called with $@
	# first one is special
	if [[ -h $1 ]] ; then
		rm -f $1
	fi
	shift 4
	while [[ $# -ge 3 ]] ; do
		rm -f $1
		shift 3
	done

}

# set_alternatives: mostly internal function. 
# Usage: set_alternative {shortname} [ignore-path]
#
# Goes and checks both standard configs, and manual config, for best fit.
# Mandatory first argument, is the "shortname" of the alternative.
# Optional second argument implies "remove" mode, and needs to be
#  a full path to one of the main implementations of an alternative.
#  The line containing that, will then be ignored.
#
#
function set_alternative {
	typeset shortname remove_match line
	$DEBUG set_alternative called with $*

	if [[ $# -lt 1 ]] ; then
		print ERROR set_alternative needs an arg; exit 1;
	fi

	shortname="$1"
	remove_match="$2"


	
	line=`print_manual_set $shortname`
	if [[ "$line" != "" ]] ; then
		set $line
		if [[ "$3" = "$remove_match" ]] ; then
			$DEBUG Note: manual choice is currently $line
			rm_alternative_links $line
			line=""
		fi
		if [[ ! -f "$3" ]] ; then
			print $0 Note: manual choice set, but is invalid.
			print Ignoring $3
			line=""
		fi
	fi

	if [[ "$line" = "" ]] ; then
		if [[ "$remove_match" != "" ]] ; then
			line=`print_alternatives $shortname|
				nawk ' $3 != "'$remove_match'" {print}' |
				head -1`
			if [[ "$line" = "" ]] ; then
				line=`print_alternatives $shortname`
				set $line
				if [[ $3 = "$remove_match" ]] ; then
					print Removing last alternative for $shortname
					rm_alternative_links $line
					return 0
				fi
			fi
		else
			line=`print_alternatives $shortname|head -1`
		fi
	fi


	if [[ "$line" != "" ]] ; then
		set $line
		set_link $1 $2 $3
		shift 4
		while [[ "$1" != "" ]] ; do
			set_link $1 $2 $3
			shift 3
		done
		return 0
	fi

	# If we are here, then our "database" is internally
	# inconsistent...?
	print $0: Error 52: should not be in this code section.
	print "Inconsistency with files in $PRIORITIESDIR ?"

	
}

function revert_to_auto {
	case $1 in
		*/*)
			print Error: need short name for --auto
			exit 1
		;;
	esac
	if [[ -f "$MANUALDIR/$1" ]] ; then
		$DEBUG removing manual setting for $1
		rm "$MANUALDIR/$1"
	else
		$DEBUG no manual setting for $1 found
	fi
	set_alternative $1
}

# Usage: set_manual_prio shortname /full/path
function set_manual_prio {
	case $1 in
		*/*)
			print Error: need short name as first arg for --set
			exit 1
		;;
	esac

	if [[ ! -d $MANUALDIR ]] ; then
		mkdir $MANUALDIR 2>/dev/null
	fi
	if [[ ! -d $MANUALDIR ]] ; then
		print Error: $MANUALDIR does not exist. Cannot continue
		exit 1
	fi
	check=`egrep -l "^[^ ]* $1 $2 " $PRIORITIESDIR/*`
	if [[ "$check" == "" ]] ; then
		print Error: no installed match found for $1 $2
		exit 1
	fi
	# Note: target file may have more than one line in it!!

	$DEBUG found match for $1: $check
	rm -f $MANUALDIR/$1
	ln -s $check $MANUALDIR/$1

	set_alternative $1
	
}



function display_choices {
	case $1 in
		*/*)
			print Error: need short name as arg for --display
			exit 1
		;;
	esac

	if [[ -f $MANUALDIR/$1 ]] ; then
		print Manual mode for $1 set. Paths are:
		print_manual_set $1
	fi
	print Installed alternatives for $1 are:
		print_alternatives $1
}

function config_alternative {
	case $1 in
		*/*)
			print Error: need short name as arg for --config
			exit 1
			;;
		"")
			print Error: Need a name for --config
			exit 1
		;;
	esac
	print "Chooser for software '$1'"
	print_alternatives $1 |nawk '{print $4,$1,$3}'
	print "Input the priority number for your desired choice, or 0 to quit"

	read prio
	case $prio in
		0|Q|q)
			print Quitting without change
			exit 0
		;;
	esac
	fullpath=`cat $PRIORITIESDIR/* |
	  nawk '$2 == "'$1'" && $4 == "'$prio'" {print $3}'`

	if [[ "$fullpath" = "" ]] ; then
		print Error: no match for priority $prio
		exit 1
	fi

	set_manual_prio $1 $fullpath
}

############################################################
# Return to "main" area below

## Comment on --remove arg:
## It does not actually **remove* registration of alternative.
## That is left for pkgrm.
## What it does do, is reset link, while ignoring the specified alternative.
## So for strict purposes, it would better be called "--ignore-and-set"
## Left in original flag, but dual-implemented as --ignore
##

if [[ "$1" == "--remove" ]] ; then
	$DEBUG $0 $*
	$DEBUG Note: --remove is really only temporary
	$DEBUG   It works like --ignore
	$DEBUG You must pkgrm or rm the appropriate file in $PRIORITIESDIR
	$DEBUG to remove a "registration" for an alternative
fi



case $1 in
	--install)
		shift
		$DEBUG "($0 Using files in $PRIORITIESDIR)"
		set_alternative $2
		;;
	--remove|--ignore)    #args = shortname /local/path
		shift
		print "(Note: ignoring arguments for --remove except for '$1')"
		$DEBUG "(Using files in $PRIORITIESDIR)"
		set_alternative $1 $2
		;;
	--auto)
		shift
		revert_to_auto $1
		;;
	--list)
		list_alternatives
		;;
	--display)
		shift
		display_choices $1
		;;
	--config)
		shift
		config_alternative $1
		;;
	--set)
		shift
		set_manual_prio $1 $2
		;;
	*)
		print -- $1 is not a recognized command.
		usage
		
		exit 1
		;;
esac


