From 8924be20b35e59a1244ec8c442281d3476cf89fd Mon Sep 17 00:00:00 2001
From: Peter Felecan <pfelecan@opencsw.org>
Date: Tue, 29 Oct 2013 13:39:46 +0100
Subject: [PATCH] fix text relocation remains referenced

---
 avidemux_core/ADM_coreImage/src/ADM_imageUtils.cpp | 30 ++++++++++++++--------
 1 file changed, 20 insertions(+), 10 deletions(-)

diff --git a/avidemux_core/ADM_coreImage/src/ADM_imageUtils.cpp b/avidemux_core/ADM_coreImage/src/ADM_imageUtils.cpp
index 33d3724..dc11a1a 100644
--- a/avidemux_core/ADM_coreImage/src/ADM_imageUtils.cpp
+++ b/avidemux_core/ADM_coreImage/src/ADM_imageUtils.cpp
@@ -44,7 +44,7 @@ int a1,a2;
         
         return 1;
 }
-#ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86)
 static uint8_t tinyAverageMMX(uint8_t *dst, uint8_t *src1, uint8_t *src2,uint32_t l)
 {
 int delta;
@@ -104,7 +104,7 @@ int a1,a2;
 */
 bool ADMImage::merge(ADMImage *src1,ADMImage *src2)
 {
-#ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86)
         if(CpuCaps::hasMMX())
         {
                 tinyAverageMMX(YPLANE(this),YPLANE(src1),YPLANE(src2),(_width*_height*3)>>1);
@@ -144,7 +144,7 @@ static bool blendC(int width, int height,
                 }
         return true;
 }
-#ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86)
 static bool blendMMX(int width, int height,
                     uint8_t *target,uint32_t stride,
                     uint8_t *src1,  uint32_t stride1,
@@ -263,7 +263,7 @@ uint8_t *s1,*s2,*d1;
 bool ADMImage::blend(ADMImage *src1,ADMImage *src2)
 {
     blendFunction *myBlend=blendC;
-#ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86)
     if(CpuCaps::hasMMX())
             myBlend=blendMMX;
     if(CpuCaps::hasSSE())
@@ -305,7 +305,12 @@ uint32_t ww,hh;
         }
         return df;
 }
-#ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86) && !defined(__sun__)
+/*
+  On Solaris this raises the "relocations remain against allocatable
+   but non-writable sections" linker error at:
+   .bss (section) 0x3bb
+ */
 static uint64_t __attribute__((used)) FUNNY_MANGLE(noise64);
 static uint32_t computeDiffMMX(uint8_t  *s1,uint8_t *s2,uint32_t noise,uint32_t l)
 {
@@ -395,7 +400,7 @@ uint32_t result=0;
 uint32_t ADMImage::lumaDiff(ADMImage *src1,ADMImage *src2,uint32_t noise)
 {
 
-#ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86) && !defined(__sun__)
 uint32_t r1,r2;
         if(CpuCaps::hasMMX())
         {
@@ -434,7 +439,7 @@ int a1,a2;
                 }
         return 1;
 }
-#ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86)
 static uint8_t tinySubstractMMX(uint8_t *dst, uint8_t *src1, uint8_t *src2,uint32_t l)
 {
 int delta;
@@ -493,7 +498,7 @@ int ll,rr;
 bool ADMImage::substract(ADMImage *src1,ADMImage *src2)
 {
 
-#ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86)
 uint32_t r1,r2;
         if(CpuCaps::hasMMX())
         {
@@ -589,7 +594,12 @@ static inline void yuv444_C(uint8_t *src,uint8_t *dst,int w,int h,int s)
         src+=4*w;
     }
 }
-#ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86) && !defined(__sun__)
+/*
+  On Solaris this raises the "relocations remain against allocatable
+   but non-writable sections" linker error at:
+   .data (section) 0x1149
+ */
 static inline void yuv444_MMX(uint8_t *src,uint8_t *dst,int w,int h,int s)
 {
 static uint64_t __attribute__((used)) FUNNY_MANGLE(mask) = 0x00ff000000ff0000LL;
@@ -981,7 +991,7 @@ bool ADMImage::convertFromYUV444(uint8_t *from)
     uint8_t *dst=this->GetWritePtr(PLANAR_Y);
     uint8_t *src=from;
 
-    #ifdef ADM_CPU_X86
+#if defined(ADM_CPU_X86) && !defined(__sun__)
         if(CpuCaps::hasMMX())
             yuv444_MMX(src,dst,width,height,stride);            
         else
-- 
1.8.3.4

