diff --git a/ldap/servers/slapd/entry.c b/ldap/servers/slapd/entry.c
index 70c7f13..0348aa8 100644
--- a/ldap/servers/slapd/entry.c
+++ b/ldap/servers/slapd/entry.c
@@ -2076,7 +2076,7 @@ slapi_entry_size(Slapi_Entry *e)
     if (e->e_uniqueid) size += strlen(e->e_uniqueid) + 1;
     if (e->e_dncsnset) size += csnset_size(e->e_dncsnset);
     if (e->e_maxcsn) size += sizeof( CSN );
-    if (e->e_virtual_lock) size += sizeof(Slapi_RWLock);
+    if (e->e_virtual_lock) size += slapi_rwlock_get_size();
     /* Slapi_DN and RDN are included in Slapi_Entry */
     size += (slapi_sdn_get_size(&e->e_sdn) - sizeof(Slapi_DN));
     size += (slapi_rdn_get_size(&e->e_srdn) - sizeof(Slapi_RDN));
diff --git a/ldap/servers/slapd/pw.c b/ldap/servers/slapd/pw.c
index 082f69a..d51d33e 100644
--- a/ldap/servers/slapd/pw.c
+++ b/ldap/servers/slapd/pw.c
@@ -2750,7 +2750,7 @@ pw_get_ext_size(Slapi_Entry *entry, size_t *size)
         return LDAP_SUCCESS;
     }
     *size += sizeof(struct slapi_pw_entry_ext);
-    *size += sizeof(Slapi_RWLock);
+    *size += slapi_rwlock_get_size();
     if (LDAP_SUCCESS == slapi_pw_get_entry_ext(entry, &pw_entry_values)) {
         Slapi_Value *cvalue;
         int idx = valuearray_first_value(pw_entry_values, &cvalue);
diff --git a/ldap/servers/slapd/slapi-plugin.h b/ldap/servers/slapd/slapi-plugin.h
index 7500d8d..0750283 100644
--- a/ldap/servers/slapd/slapi-plugin.h
+++ b/ldap/servers/slapd/slapi-plugin.h
@@ -7841,6 +7841,8 @@ void slapi_free_pw_scheme(PWScheme *pass_scheme);
 #define RDN_IS_CONFLICT  0x2
 int slapi_is_special_rdn(const char *rdn, int flag);
 
+int slapi_rwlock_get_size();
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/ldap/servers/slapd/slapi2nspr.c b/ldap/servers/slapd/slapi2nspr.c
index 2577073..2b976ab 100644
--- a/ldap/servers/slapd/slapi2nspr.c
+++ b/ldap/servers/slapd/slapi2nspr.c
@@ -291,3 +291,17 @@ slapi_rwlock_unlock( Slapi_RWLock *rwlock )
     return ret;
 }
 
+int
+slapi_rwlock_get_size()
+{
+#ifdef USE_POSIX_RWLOCKS
+    return sizeof(pthread_rwlock_t);
+#else
+    /*
+     * NSPR does not provide the size of PRRWLock.
+     * This is a rough estimate to maintain the entry size sane.
+     */
+    return sizeof("slapi_rwlock") + sizeof(void *) * 6;
+#endif
+}
+
