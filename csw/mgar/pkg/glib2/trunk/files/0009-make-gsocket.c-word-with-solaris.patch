From ad86917065596329779af45873629854826f6504 Mon Sep 17 00:00:00 2001
From: Rafael Ostertag <rafisol@opencsw.org>
Date: Sat, 10 Sep 2011 20:01:15 +0200
Subject: [PATCH] make gsocket.c word with solaris

Fixes a bug in gsocket.c preventing proper execution on Solaris. Backported from glib git repository commit af2a905e5480bc7eb82e7a43ef7fead7b3b90dd7
---
 gio/gsocket.c |   37 +++++++++++++++++++++++++++++++++----
 1 files changed, 33 insertions(+), 4 deletions(-)

diff --git a/gio/gsocket.c b/gio/gsocket.c
index 7821227..b53783e 100644
--- a/gio/gsocket.c
+++ b/gio/gsocket.c
@@ -311,7 +311,7 @@ g_socket_details_from_fd (GSocket *socket)
   gint fd;
   guint addrlen;
   guint optlen;
-  int value;
+  int value, family;
   int errsv;
 #ifdef G_OS_WIN32
   /* See bug #611756 */
@@ -372,9 +372,38 @@ g_socket_details_from_fd (GSocket *socket)
       goto err;
     }
 
-  g_assert (G_STRUCT_OFFSET (struct sockaddr, sa_family) +
-	    sizeof address.ss_family <= addrlen);
-  switch (address.ss_family)
+  /* This is a backport from glib git repository commit
+     af2a905e5480bc7eb82e7a43ef7fead7b3b90dd7 */
+
+  if (addrlen > 0)
+    {
+      g_assert (G_STRUCT_OFFSET (struct sockaddr, sa_family) +
+		sizeof address.ss_family <= addrlen);
+      family = address.ss_family;
+    }
+  else
+    {
+      /* On Solaris, this happens if the socket is not yet connected.
+       * But we can use SO_DOMAIN as a workaround there.
+       */
+#ifdef SO_DOMAIN
+      optlen = sizeof family;
+      if (getsockopt (fd, SOL_SOCKET, SO_DOMAIN, (void *)&family, &optlen) != 0)
+	{
+	  errsv = get_socket_errno ();
+	  goto err;
+	}
+#else
+      /* This will translate to G_IO_ERROR_FAILED on either unix or windows */
+      errsv = -1;
+      goto err;
+#endif
+    }
+  
+  /* g_assert (G_STRUCT_OFFSET (struct sockaddr, sa_family) +
+     sizeof address.ss_family <= addrlen); */
+
+  switch (family)
     {
      case G_SOCKET_FAMILY_IPV4:
      case G_SOCKET_FAMILY_IPV6:
-- 
1.7.6.1
