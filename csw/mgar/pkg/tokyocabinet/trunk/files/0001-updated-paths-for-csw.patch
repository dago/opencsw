From c032fb31ec09d251f675bdd4d064cc868b771d99 Mon Sep 17 00:00:00 2001
From: Shawn McDermott <sgtmcd@opencsw.org>
Date: Tue, 20 Sep 2011 14:43:37 +0200
Subject: [PATCH] updated paths for csw

---
 doc/spex-en.html   |   72 ++++++++++++++++++++++++++--------------------------
 doc/spex-ja.html   |   72 ++++++++++++++++++++++++++--------------------------
 man/tokyocabinet.3 |    4 +-
 3 files changed, 74 insertions(+), 74 deletions(-)

diff --git a/doc/spex-en.html b/doc/spex-en.html
index 26c40ee..60ff06c 100644
--- a/doc/spex-en.html
+++ b/doc/spex-en.html
@@ -192,39 +192,39 @@
 
 <p>When a series of work finishes, the following files will be installed.</p>
 
-<pre>/usr/local/include/tcutil.h
-/usr/local/include/tchdb.h
-/usr/local/include/tcbdb.h
-/usr/local/include/tcfdb.h
-/usr/local/include/tctdb.h
-/usr/local/include/tcadb.h
-/usr/local/lib/libtokyocabinet.a
-/usr/local/lib/libtokyocabinet.so.x.y.z
-/usr/local/lib/libtokyocabinet.so.x
-/usr/local/lib/libtokyocabinet.so
-/usr/local/lib/pkgconfig/tokyocabinet.pc
-/usr/local/bin/tcutest
-/usr/local/bin/tcumttest
-/usr/local/bin/tcucodec
-/usr/local/bin/tchtest
-/usr/local/bin/tchmttest
-/usr/local/bin/tchmgr
-/usr/local/bin/tcbmgr
-/usr/local/bin/tcbtest
-/usr/local/bin/tcbmttest
-/usr/local/bin/tcftest
-/usr/local/bin/tcfmttest
-/usr/local/bin/tcfmgr
-/usr/local/bin/tcttest
-/usr/local/bin/tctmttest
-/usr/local/bin/tctmgr
-/usr/local/bin/tcatest
-/usr/local/bin/tcamttest
-/usr/local/bin/tcamgr
-/usr/local/libexec/tcawmgr.cgi
-/usr/local/share/tokyocabinet/...
-/usr/local/man/man1/...
-/usr/local/man/man3/...
+<pre>/opt/csw/include/tcutil.h
+/opt/csw/include/tchdb.h
+/opt/csw/include/tcbdb.h
+/opt/csw/include/tcfdb.h
+/opt/csw/include/tctdb.h
+/opt/csw/include/tcadb.h
+/opt/csw/lib/libtokyocabinet.a
+/opt/csw/lib/libtokyocabinet.so.x.y.z
+/opt/csw/lib/libtokyocabinet.so.x
+/opt/csw/lib/libtokyocabinet.so
+/opt/csw/lib/pkgconfig/tokyocabinet.pc
+/opt/csw/bin/tcutest
+/opt/csw/bin/tcumttest
+/opt/csw/bin/tcucodec
+/opt/csw/bin/tchtest
+/opt/csw/bin/tchmttest
+/opt/csw/bin/tchmgr
+/opt/csw/bin/tcbmgr
+/opt/csw/bin/tcbtest
+/opt/csw/bin/tcbmttest
+/opt/csw/bin/tcftest
+/opt/csw/bin/tcfmttest
+/opt/csw/bin/tcfmgr
+/opt/csw/bin/tcttest
+/opt/csw/bin/tctmttest
+/opt/csw/bin/tctmgr
+/opt/csw/bin/tcatest
+/opt/csw/bin/tcamttest
+/opt/csw/bin/tcamgr
+/opt/csw/libexec/tcawmgr.cgi
+/opt/csw/share/tokyocabinet/...
+/opt/csw/man/man1/...
+/opt/csw/man/man3/...
 </pre>
 
 <h3 id="installation_option">Options of Configure</h3>
@@ -246,14 +246,14 @@
 <li><code>--disable-shared</code> :  avoid to build shared libraries.</li>
 </ul>
 
-<p>`<code>--prefix</code>' and other options are also available as with usual UNIX software packages.  If you want to install Tokyo Cabinet under `<code>/usr</code>' not `<code>/usr/local</code>', specify `<code>--prefix=/usr</code>'.  As well, the library search path does not include `<code>/usr/local/lib</code>', it is necessary to set the environment variable `<code>LD_LIBRARY_PATH</code>' to include `<code>/usr/local/lib</code>' before running applications of Tokyo Cabinet.</p>
+<p>`<code>--prefix</code>' and other options are also available as with usual UNIX software packages.  If you want to install Tokyo Cabinet under `<code>/usr</code>' not `<code>/opt/csw</code>', specify `<code>--prefix=/usr</code>'.  As well, the library search path does not include `<code>/opt/csw/lib</code>', it is necessary to set the environment variable `<code>LD_LIBRARY_PATH</code>' to include `<code>/opt/csw/lib</code>' before running applications of Tokyo Cabinet.</p>
 
 <h3 id="installation_library">How to Use the Library</h3>
 
 <p>Tokyo Cabinet provides API of the C language and it is available by programs conforming to the C89 (ANSI C) standard or the C99 standard.  As the header files of Tokyo Cabinet are provided as `<code>tcutil.h</code>', `<code>tchdb.h</code>', `<code>tcbdb.h</code>', and `<code>tcadb.h</code>', applications should include one or more of them accordingly to use the API.  As the library is provided as `<code>libtokyocabinet.a</code>' and `<code>libtokyocabinet.so</code>' and they depend on `<code>libz.so</code>', `<code>libbz2.so</code>', `<code>librt.so</code>', `<code>libpthread.so</code>', `<code>libm.so</code>', and `<code>libc.so</code>', linker options corresponding to them are required by the build command.  The typical build command is the following.</p>
 
-<pre>gcc -I/usr/local/include tc_example.c -o tc_example \
-  -L/usr/local/lib -ltokyocabinet -lz -lbz2 -lrt -lpthread -lm -lc
+<pre>gcc -I/opt/csw/include tc_example.c -o tc_example \
+  -L/opt/csw/lib -ltokyocabinet -lz -lbz2 -lrt -lpthread -lm -lc
 </pre>
 
 <p>You can also use Tokyo Cabinet in programs written in C++.  Because each header is wrapped in C linkage (`<code>extern "C"</code>' block), you can simply include them into your C++ programs.</p>
diff --git a/doc/spex-ja.html b/doc/spex-ja.html
index 7ab9cd4..1fd4a9d 100644
--- a/doc/spex-ja.html
+++ b/doc/spex-ja.html
@@ -194,39 +194,39 @@
 
 <p>一連の作業が終ると、以下のファイルがインストールされます。</p>
 
-<pre>/usr/local/include/tcutil.h
-/usr/local/include/tchdb.h
-/usr/local/include/tcbdb.h
-/usr/local/include/tcfdb.h
-/usr/local/include/tctdb.h
-/usr/local/include/tcadb.h
-/usr/local/lib/libtokyocabinet.a
-/usr/local/lib/libtokyocabinet.so.x.y.z
-/usr/local/lib/libtokyocabinet.so.x
-/usr/local/lib/libtokyocabinet.so
-/usr/local/lib/pkgconfig/tokyocabinet.pc
-/usr/local/bin/tcutest
-/usr/local/bin/tcumttest
-/usr/local/bin/tcucodec
-/usr/local/bin/tchtest
-/usr/local/bin/tchmttest
-/usr/local/bin/tchmgr
-/usr/local/bin/tcbmgr
-/usr/local/bin/tcbtest
-/usr/local/bin/tcbmttest
-/usr/local/bin/tcftest
-/usr/local/bin/tcfmttest
-/usr/local/bin/tcfmgr
-/usr/local/bin/tcttest
-/usr/local/bin/tctmttest
-/usr/local/bin/tctmgr
-/usr/local/bin/tcatest
-/usr/local/bin/tcamttest
-/usr/local/bin/tcamgr
-/usr/local/libexec/tcawmgr.cgi
-/usr/local/share/tokyocabinet/...
-/usr/local/man/man1/...
-/usr/local/man/man3/...
+<pre>/opt/csw/include/tcutil.h
+/opt/csw/include/tchdb.h
+/opt/csw/include/tcbdb.h
+/opt/csw/include/tcfdb.h
+/opt/csw/include/tctdb.h
+/opt/csw/include/tcadb.h
+/opt/csw/lib/libtokyocabinet.a
+/opt/csw/lib/libtokyocabinet.so.x.y.z
+/opt/csw/lib/libtokyocabinet.so.x
+/opt/csw/lib/libtokyocabinet.so
+/opt/csw/lib/pkgconfig/tokyocabinet.pc
+/opt/csw/bin/tcutest
+/opt/csw/bin/tcumttest
+/opt/csw/bin/tcucodec
+/opt/csw/bin/tchtest
+/opt/csw/bin/tchmttest
+/opt/csw/bin/tchmgr
+/opt/csw/bin/tcbmgr
+/opt/csw/bin/tcbtest
+/opt/csw/bin/tcbmttest
+/opt/csw/bin/tcftest
+/opt/csw/bin/tcfmttest
+/opt/csw/bin/tcfmgr
+/opt/csw/bin/tcttest
+/opt/csw/bin/tctmttest
+/opt/csw/bin/tctmgr
+/opt/csw/bin/tcatest
+/opt/csw/bin/tcamttest
+/opt/csw/bin/tcamgr
+/opt/csw/libexec/tcawmgr.cgi
+/opt/csw/share/tokyocabinet/...
+/opt/csw/man/man1/...
+/opt/csw/man/man3/...
 </pre>
 
 <h3 id="installation_option">configureのオプション</h3>
@@ -248,14 +248,14 @@
 <li><code>--disable-shared</code> : 共有ライブラリのビルドを行わない。</li>
 </ul>
 
-<p>`<code>--prefix</code>' などのオプションも一般的なUNIXソフトウェアのパッケージと同様に利用可能です。`<code>/usr/local</code>' 以下ではなく '<code>/usr</code>' 以下にインストールしたい場合は `<code>--prefix=/usr</code>' を指定してください。なお、ライブラリ検索パスに `<code>/usr/local/lib</code>' が入っていない環境では、Tokyo Cabinetのアプリケーションを実行する際に環境変数 `<code>LD_LIBRARY_PATH</code>' の値に `<code>/usr/local/lib</code>' を含めておくようにしてください。</p>
+<p>`<code>--prefix</code>' などのオプションも一般的なUNIXソフトウェアのパッケージと同様に利用可能です。`<code>/opt/csw</code>' 以下ではなく '<code>/usr</code>' 以下にインストールしたい場合は `<code>--prefix=/usr</code>' を指定してください。なお、ライブラリ検索パスに `<code>/opt/csw/lib</code>' が入っていない環境では、Tokyo Cabinetのアプリケーションを実行する際に環境変数 `<code>LD_LIBRARY_PATH</code>' の値に `<code>/opt/csw/lib</code>' を含めておくようにしてください。</p>
 
 <h3 id="installation_library">ライブラリの使い方</h3>
 
 <p>Tokyo CabinetはC言語のAPIを提供し、それはC89標準（ANSI C）またはC99標準に準拠したプログラムから利用することができます。Tokyo Cabinetヘッダは `<code>tcutil.h</code>'、`<code>tchdb.h</code>'、`<code>tcbdb.h</code>'、`<code>tcadb.h</code>' として提供されますので、適宜それらをアプリケーションのソースコード中でインクルードした上で、APIの各種機能を利用してください。ライブラリは `<code>libtokyocabinet.a</code>' および `<code>libtokyocabinet.so</code>' として提供され、それらは `<code>libz.so</code>'、`<code>libbz2.so</code>', `<code>librt.so</code>', `<code>libpthread.so</code>'、`<code>libm.so</code>'、`<code>libc.so</code>' に依存しますので、アプリケーションプログラムをビルドする際にはそれらに対応するリンカオプションをつけてください。最も典型的なビルド手順は以下のようになります。</p>
 
-<pre>gcc -I/usr/local/include tc_example.c -o tc_example \
-  -L/usr/local/lib -ltokyocabinet -lz -lbz2 -lrt -lpthread -lm -lc
+<pre>gcc -I/opt/csw/include tc_example.c -o tc_example \
+  -L/opt/csw/lib -ltokyocabinet -lz -lbz2 -lrt -lpthread -lm -lc
 </pre>
 
 <p>Tokyo CabinetはC++言語のプログラムからも利用することができます。各ヘッダは暗黙的にCリンケージ（「<code>extern "C"</code>」ブロック）で包まれているので、単にインクルードするだけで利用することができます。</p>
diff --git a/man/tokyocabinet.3 b/man/tokyocabinet.3
index d050da5..ce275ce 100644
--- a/man/tokyocabinet.3
+++ b/man/tokyocabinet.3
@@ -101,9 +101,9 @@ In cases that multiple processes access a database at the same time or some proc
 Tokyo Cabinet provides API of the C language and it is available by programs conforming to the C89 (ANSI C) standard or the C99 standard.  As the header files of Tokyo Cabinet are provided as `\fBtcutil.h\fR', `\fBtchdb.h\fR', and `\fBtcbdb.h\fR', applications should include one or more of them accordingly to use the API.  As the library is provided as `\fBlibtokyocabinet.a\fR' and `\fBlibtokyocabinet.so\fR' and they depends `\fBlibz.so\fR', `\fBlibrt.so\fR', `\fBlibpthread.so\fR', `\fBlibm.so\fR', and `\fBlibc.so\fR', linker options `\fB\-ltokyocabinet\fR', `\fB\-lz\fR', `\fB\-lbz2\fR', `\fB\-lrt\fR', `\fB\-lpthread\fR', `\fB\-lm\fR', and `\fB\-lc\fR' are required for build command.  A typical build command is the following.
 .PP
 .RS
-gcc \-I/usr/local/include tc_example.c \-o tc_example \\
+gcc \-I/opt/csw/include tc_example.c \-o tc_example \\
 .br
-  \-L/usr/local/lib \-ltokyocabinet \-lz \-lbz2 \-lrt \-lpthread \-lm \-lc
+  \-L/opt/csw/lib \-ltokyocabinet \-lz \-lbz2 \-lrt \-lpthread \-lm \-lc
 .RE
 .PP
 You can also use Tokyo Cabinet in programs written in C++.  Because each header is wrapped in C linkage (`\fBextern "C"\fR' block), you can simply include them into your C++ programs.
-- 
1.7.6.1

