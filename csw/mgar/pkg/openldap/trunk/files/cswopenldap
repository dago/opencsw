#!/bin/sh
# Start script for CSW www.blastwave.org package of Openldap.
# slapd can be started by this script.
# For either daemon to start, the minimum requirement is that
#   /opt/csw/etc/openldap/slapd.conf must exist.  It does not
#   exist after the initial package installation, since you may
#   only be using openldap as a client.
#
# Startup options may be overriden by creating and editing either
#  /opt/csw/etc/openldaprc or /etc/opt/csw/openldaprc.  The template
#  for openldaprc is in /opt/csw/share/doc/openldap.  You must use
#  this template.
#
# For example,
#  mkdir -p /etc/opt/csw
#  cp /opt/csw/share/doc/openldap/openldaprc /etc/opt/csw/
#
# If no openldaprc file is available, the daemon starts with defaults.
#
# 2005-08-11  Applied patch from Martin Foster to fix the problem
#             when multiple uri are on the -h option.
# 2006-06-11  Included patch from Ben Klang.  This update allows you
#             to define use a configuration directory for the 'config'
#             backend, cn=config.  The option to use a configuration file
#             is still enabled, if you do not want to use a the new backend.
#             The option SLAPD_EXTRA is added to openldaprc to pass
#             arbitrary flags to slapd.

RETVAL=0

# Source startup options
[ -r /lib/svc/share/smf_include.sh ] && . /lib/svc/share/smf_include.sh

bindir="@bindir@"
sbindir="@sbindir@"
libexecdir="@libexecdir@"

### START OPENCSW ARCHITECTURE SELECTION
# Source the configuration
# This is used to define the binary architeture to run

# Check the old location first
[ -r @prefix@/etc/csw.conf ] && . @prefix@/etc/csw.conf

# Check the current location, its content overrides the previous one
[ -r @sysconfdir@/csw.conf ] && . @sysconfdir@/csw.conf

# If the package-specific variable is not set, try the default
if [ -z "$openldap_arch" ]; then
  if [ -n "$default_arch" ]; then
    openldap_arch="$default_arch"
  fi
else
  # In that specific case, by default, there is no subdir
  if [ "$openldap_arch" = "i386" -o "$openldap_arch" = "sparc" ]; then
    openldap_arch=""
  fi
fi

# If a value was found
if [ -n "$openldap_arch" ]; then
  if [ "$openldap_arch" = "kernel" ]; then
    # Use the system's default arch
    openldap_arch=`isainfo -k`
  fi

  # Add the architecture suffix to the executables' directories, if it exists
  # The binaries themselves are tested below, so the script should fail
  # mostly gracefully if a non-present arch is set up.
  if [ -d "$bindir/$openldap_arch" -a \
       -d "$sbindir/$openldap_arch" -a \
       -d "$libexecdir/$openldap_arch" ]; then
    bindir="$bindir/$openldap_arch"
    sbindir="$sbindir/$openldap_arch"
    libexecdir="$libexecdir/$openldap_arch"
  fi
fi
### END OPENCSW ARCHITECTURE SELECTION

SLAPD=$libexecdir/slapd

# Make sure required vars are set.  Actually these are the compiled defaults
DEF_SLAPD_CONFIG_FILE=@sysconfdir@/openldap/slapd.conf
DEF_SLAPD_CONFIG_DIR=@sysconfdir@/openldap/slapd.d

# If a conf file has been created, assume we should start up.

start_it() {
    # If none of the default or defined configuration files or directories
    #   exist, exit this script.
    ([ ! -r "$DEF_SLAPD_CONFIG_FILE" ] && [ ! -x "$DEF_SLAPD_CONFIG_DIR" ] && [ ! -r "$SLAPD_CONFIG_FILE" ] && [ ! -x "$SLAPD_CONFIG_DIR" ]) && \
        return 1

    if kill -0 `pgrep -x slapd` > /dev/null 2>&1 ; then
        echo "openldap-slapd (`pgrep -x slapd`) seems to be running."
        return 1
    fi

    printf "%-60s" "Starting openldap-slapd: "
       START="$SLAPD"

       if [ -n "$SLAPD_IPV4_ONLY" ] ; then START="$START -4"; fi
       if [ -n "$SLAPD_IPV6_ONLY" ] ; then START="$START -6"; fi
       if [ -n "$SLAPD_DEBUG_LEVEL" ] ; then START="$START -d $SLAPD_DEBUG_LEVEL"; fi
       if [ -n "$SLAPD_CONFIG_FILE" ] ; then START="$START -f $SLAPD_CONFIG_FILE"; fi
       if [ -n "$SLAPD_CONFIG_DIR" ] ; then START="$START -F $SLAPD_CONFIG_DIR"; fi
       if [ -n "$SLAPD_GROUP" ] ; then START="$START -g $SLAPD_GROUP"; fi
       if [ -n "$SLAPD_URL_LIST" ] ; then START="$START -h \"$SLAPD_URL_LIST\""; fi
       if [ -n "$SLAPD_SYSLOG_FACILITY" ] ; then START="$START -l $SLAPD_SYSLOG_FACILITY"; fi
       if [ -n "$SLAPD_SERVICE_NAME" ] ; then START="$START -n $SLAPD_SERVICE_NAME"; fi
       if [ -n "$SLAPD_DIRECTORY" ] ; then START="$START -r $SLAPD_DIRECTORY"; fi
       if [ -n "$SLAPD_SYSLOG_LEVEL" ] ; then START="$START -s $SLAPD_SYSLOG_LEVEL"; fi
       if [ -n "$SLAPD_SYNTAX_CHECK" ] ; then START="$START -t"; fi
       if [ -n "$SLAPD_USER" ] ; then START="$START -u $SLAPD_USER"; fi
       if [ -n "$SLAPD_EXTRA" ] ; then START="$START $SLAPD_EXTRA"; fi
       if [ -n "$SLAPD_MAXFDS" ] ; then ulimit -n "$SLAPD_MAXFDS"; fi

       # Run it
       sh -c "$START"
    
    RETVAL=$?
    if [ $RETVAL = 0 ] ; then
	echo "[  OK  ]"
    else
	echo "[FAILED]"
	return 1
    fi

    return 0
}

stop_it() {

    [ "`pgrep -x slapd`x" = "x" ] && echo "openldap-slapd is not running." && return 1

    printf "%-60s" "Shutting down openldap-slapd: "
    if test -n "`pgrep -x slapd`" ; then
	kill `pgrep -x slapd` >/dev/null 2>&1
	RETVAL=$?
    else
	RETVAL=1
    fi
    if [ $RETVAL = 0 ] ; then
	echo "[  OK  ]"
    else
	echo "[FAILED]"
    fi

    return $RETVAL
}

case $1 in
    start)
    start_it
    ;;

    stop)
    stop_it
    ;;

    restart)
    stop_it
    while pgrep -x slapd > /dev/null
      do
      sleep 3
    done
    start_it
    ;;

    *)
    echo "Usage: $0  { start | stop | restart } "
    ;;
esac

exit $RETVAL
