From 166f665729d0fd3c13bd8527822e5e829c15995d Mon Sep 17 00:00:00 2001
From: Dagobert Michelsen <dam@opencsw.org>
Date: Thu, 23 Feb 2012 16:27:32 +0100
Subject: [PATCH] Use named union

---
 girepository/cmph/chd.c    |    2 +-
 girepository/cmph/chd_ph.c |   38 +++++++++++++++++++-------------------
 2 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/girepository/cmph/chd.c b/girepository/cmph/chd.c
index 7fb3b8b..70ce8d8 100644
--- a/girepository/cmph/chd.c
+++ b/girepository/cmph/chd.c
@@ -203,7 +203,7 @@ int chd_dump(cmph_t *mphf, FILE *fd)
 	nbytes = fwrite(&data->packed_chd_phf_size, sizeof(cmph_uint32), (size_t)1, fd);
 	nbytes = fwrite(data->packed_chd_phf, data->packed_chd_phf_size, (size_t)1, fd);
 
-	DEBUGP("Dumping compressed rank structure with %u bytes to disk\n", buflen);
+	DEBUGP("Dumping compressed rank structure with %u bytes to disk\n", data->packed_cr_size);
 	nbytes = fwrite(&data->packed_cr_size, sizeof(cmph_uint32), (size_t)1, fd);
 	nbytes = fwrite(data->packed_cr, data->packed_cr_size, (size_t)1, fd);
 	
diff --git a/girepository/cmph/chd_ph.c b/girepository/cmph/chd_ph.c
index 71f83fb..5b7ab1d 100644
--- a/girepository/cmph/chd_ph.c
+++ b/girepository/cmph/chd_ph.c
@@ -46,7 +46,7 @@ struct _chd_ph_bucket_t
 	{
 		cmph_uint32 size;
 		cmph_uint32 bucket_id;
-	};
+	} u;
 };
 
 typedef struct _chd_ph_bucket_t chd_ph_bucket_t;
@@ -75,9 +75,9 @@ void chd_ph_bucket_clean(chd_ph_bucket_t * buckets, cmph_uint32 nbuckets)
 	register cmph_uint32 i = 0;
 	assert(buckets);
 	for(i = 0; i < nbuckets; i++)
-		buckets[i].size = 0;
+		buckets[i].u.size = 0;
 }
-static cmph_uint8 chd_ph_bucket_insert(chd_ph_bucket_t * buckets,chd_ph_map_item_t * map_items, chd_ph_item_t * items,
+cmph_uint8 chd_ph_bucket_insert(chd_ph_bucket_t * buckets,chd_ph_map_item_t * map_items, chd_ph_item_t * items,
 				cmph_uint32 nbuckets,cmph_uint32 item_idx)
 {
 	register cmph_uint32 i = 0;
@@ -86,7 +86,7 @@ static cmph_uint8 chd_ph_bucket_insert(chd_ph_bucket_t * buckets,chd_ph_map_item
 	register chd_ph_bucket_t * bucket = buckets + tmp_map_item->bucket_num;
 	tmp_item = items + bucket->items_list;
 	
-	for(i = 0; i < bucket->size; i++)
+	for(i = 0; i < bucket->u.size; i++)
 	{
 		if(tmp_item->f == tmp_map_item->f && tmp_item->h == tmp_map_item->h)
 		{
@@ -97,7 +97,7 @@ static cmph_uint8 chd_ph_bucket_insert(chd_ph_bucket_t * buckets,chd_ph_map_item
 	};
 	tmp_item->f = tmp_map_item->f;
 	tmp_item->h = tmp_map_item->h;
-	bucket->size++;
+	bucket->u.size++;
 	return 1;
 };
 void chd_ph_bucket_destroy(chd_ph_bucket_t * buckets)
@@ -251,19 +251,19 @@ cmph_uint8 chd_ph_mapping(cmph_config_t *mph, chd_ph_bucket_t * buckets, chd_ph_
 // 				DEBUGP("BUCKET = %u -- SIZE = %u -- MAXIMUM SIZE = %u\n", g, buckets[g].size, (chd_ph->keys_per_bucket << 2));
 // 				goto error;
 // 			}
-			buckets[g].size++;
-			if(buckets[g].size > *max_bucket_size)
+			buckets[g].u.size++;
+			if(buckets[g].u.size > *max_bucket_size)
 			{
-				  *max_bucket_size = buckets[g].size;
+				  *max_bucket_size = buckets[g].u.size;
 			}
 		}
 		buckets[0].items_list = 0;
 		for(i = 1; i < chd_ph->nbuckets; i++)
 		{
-			buckets[i].items_list = buckets[i-1].items_list + buckets[i - 1].size;
-			buckets[i - 1].size = 0;
+			buckets[i].items_list = buckets[i-1].items_list + buckets[i - 1].u.size;
+			buckets[i - 1].u.size = 0;
 		};
-		buckets[i - 1].size = 0;
+		buckets[i - 1].u.size = 0;
 		for(i = 0; i < chd_ph->m; i++)
 		{
 			map_item = (map_items + i);
@@ -303,7 +303,7 @@ chd_ph_sorted_list_t * chd_ph_ordering(chd_ph_bucket_t ** _buckets, chd_ph_item_
 	// Determine size of each list of buckets
 	for(i = 0; i < nbuckets; i++)
 	{
-		bucket_size = input_buckets[i].size;
+		bucket_size = input_buckets[i].u.size;
 		if(bucket_size == 0)
 			continue;
 		sorted_lists[bucket_size].size++;
@@ -322,14 +322,14 @@ chd_ph_sorted_list_t * chd_ph_ordering(chd_ph_bucket_t ** _buckets, chd_ph_item_
 	
 	for(i = 0; i < nbuckets; i++)
 	{
-		bucket_size = input_buckets[i].size;
+		bucket_size = input_buckets[i].u.size;
 		if(bucket_size == 0)
 		{
 // 			non_empty_buckets--;
 			continue;
 		};
 		position = sorted_lists[bucket_size].buckets_list + sorted_lists[bucket_size].size;
-		output_buckets[position].bucket_id = i;
+		output_buckets[position].u.bucket_id = i;
 		output_buckets[position].items_list = input_buckets[i].items_list;
 		sorted_lists[bucket_size].size++;
 	};
@@ -450,7 +450,7 @@ static inline cmph_uint8 place_bucket(chd_ph_config_data_t *chd_ph, chd_ph_bucke
 	{
 		if(place_bucket_probe(chd_ph, buckets, items, probe0_num, probe1_num, bucket_num,size))
 		{
-			disp_table[buckets[bucket_num].bucket_id] = probe0_num + probe1_num * chd_ph->n;
+			disp_table[buckets[bucket_num].u.bucket_id] = probe0_num + probe1_num * chd_ph->n;
 			return 1;
 		}
 		probe0_num++;
@@ -517,7 +517,7 @@ static inline cmph_uint8 place_buckets2(chd_ph_config_data_t *chd_ph, chd_ph_buc
 				// if bucket is successfully placed remove it from list
 				if(place_bucket_probe(chd_ph, buckets, items, probe0_num, probe1_num, curr_bucket, i))
 				{	
-					disp_table[buckets[curr_bucket].bucket_id] = probe0_num + probe1_num * chd_ph->n;
+					disp_table[buckets[curr_bucket].u.bucket_id] = probe0_num + probe1_num * chd_ph->n;
 // 					DEBUGP("BUCKET %u PLACED --- DISPLACEMENT = %u\n", curr_bucket, disp_table[curr_bucket]);
 				} 
 				else
@@ -528,7 +528,7 @@ static inline cmph_uint8 place_buckets2(chd_ph_config_data_t *chd_ph, chd_ph_buc
 					bucket_id = buckets[non_placed_bucket + sorted_lists[i].buckets_list].bucket_id;
 #endif
 					buckets[non_placed_bucket + sorted_lists[i].buckets_list].items_list = buckets[curr_bucket].items_list;
-					buckets[non_placed_bucket + sorted_lists[i].buckets_list].bucket_id = buckets[curr_bucket].bucket_id;
+					buckets[non_placed_bucket + sorted_lists[i].buckets_list].u.bucket_id = buckets[curr_bucket].u.bucket_id;
 #ifdef DEBUG		
 					buckets[curr_bucket].items_list=items_list;
 					buckets[curr_bucket].bucket_id=bucket_id;
@@ -589,8 +589,8 @@ static inline cmph_uint8 chd_ph_check_bin_hashing(chd_ph_config_data_t *chd_ph,
 		{
 			j = bucket_size;
 			item = items + buckets[i].items_list;
-			probe0_num = disp_table[buckets[i].bucket_id] % chd_ph->n;
-			probe1_num = disp_table[buckets[i].bucket_id] / chd_ph->n;
+			probe0_num = disp_table[buckets[i].u.bucket_id] % chd_ph->n;
+			probe1_num = disp_table[buckets[i].u.bucket_id] / chd_ph->n;
 			for(; j > 0; j--)
 			{
 				m++;
-- 
1.7.9

