#!/opt/csw/bin/perl

# This is a tool to make Makefiles for CPAN modules
# Usage:
#   makemake My::Module
# It generate My-Module/trunk/Makefile and modified it accordingly. If the Makefile is already there it
# it overwritten and can be inspected with "svn diff".

use strict;
use warnings;
use feature ':5.10';
use Cwd; # was use File::chdir;
use CPAN;
use YAML qw(LoadFile);
use File::Path;
use File::Temp qw(:POSIX);
use Module::Version 'get_version';
use Parallel::ForkManager;
use version 0.77;   # get latest bug-fixes and API
use Data::Dumper;
use LWP::UserAgent; # For online retreival of catalogname for package
use Parallel::ForkManager;
use JSON;

# These three routines are used to capture the output of sub processes and
# perl routines (such as CPAN::Module::get) into a log file.  If the command
# completes successfuly, the log file is thrown away.  If the command fails,
# the log file is printed along with an error message by calling fail.

### Variables ###
my ( $verbose, $logfile, $pgm );
my $cpandir = getcwd;


### User input ###
my $modname = shift(@ARGV);
if ( !defined $modname ) {
	say STDERR "Please supply the module name as a parameter.\nBaling out...";
	exit(1);
}

### Main ###

logoutput(); # Start logging
my $mod = ( CPAN::Shell->expand( "Module", $modname ) )[0]
	or die "can not locate CPAN module $modname";
endlog();    # End logging

# We need this so dependencies can be retreived
#logoutput();
#close( STDIN );
#$mod->distribution->make;
#endlog();
# print "Make done\n";

my $filename = $mod->cpan_file;
my $author   = ( split( /\//, $filename ) )[2];
my $author1  = substr( $author, 0, 1 );
my $author2  = substr( $author, 0, 2 );
print STDERR "WARNING: Strange username, CPAN lists " . $mod->userid . " but module is stored for $author\n"
	if ( $author ne $mod->userid );

my ( $notstandard, $fileonly ) = ( $filename =~ m,^${author1}/${author2}/${author}/(.*/)?([^/]+)$, );

# That is the version of the module which may be different than the one from the file
# my $version = $mod->cpan_version;
my ( $name, $fileversion ) = ( $fileonly =~ /^(\D+)-(\d+(?:\.\d+)*)/ );

#print "filename: $filename\n";
#print "notstandard: $notstandard\n";
#print "fileonly: $fileonly\n";
#print "name: $name\n";
#print "fileversion: $fileversion\n";
#print "author: $author\n";

my $cswpkg = lc($modname);
$cswpkg =~ s/::/-/g;
$cswpkg = "CSWpm-" . $cswpkg;

my $cswcatalog = lc($modname);
$cswcatalog =~ s/::/_/g;
$cswcatalog = "pm_" . $cswcatalog;


# print "DSLIP: ", Dumper( $mod->dslip_status() );
my $dslip   = $mod->dslip_status;
my $archall = (
	  !defined $dslip->{L} ? 2
	: $dslip->{L} eq 'p' ? 1
	: 0
);

logoutput();
$mod->distribution->get;
endlog();

#$mod->distribution->make;
my $distdir = $mod->distribution->dir;

my ( @build_dep_pkgs, @recommended_pkgs, @runtime_dep_pkgs );

my $license;
my $license_resource;
my $description;
if ( -f "$distdir/META.yml" ) {
	my $meta = LoadFile("$distdir/META.yml");

	$description      = $meta->{abstract} if ( exists $meta->{abstract} );
	$license          = $meta->{license};
        $license_resource = $meta->{resources}->{license};

	my $req            = $meta->{requires};
	# my $recommends     = $meta->{recommends};
	my $build_requires = $meta->{build_requires};

	@build_dep_pkgs   = dep_pkgs($build_requires);
	# @recommended_pkgs = dep_pkgs($recommends);
	@runtime_dep_pkgs = dep_pkgs($req);

}

$description //= $mod->description;	# Changed to defined from false or
$description //= $mod->manpage_headline;
$description //= $mod->distribution->as_glimpse;
$description //= "";
$description = ucfirst($description);
$description =~ s/\.$//;		# Strip trailing .
chomp($description);

# Come back from cpan module build directory to GAR cpan/
chdir($cpandir) or die($!);

if ( !-d $name ) {
	system("pwd; gmake newpkg-$name");
}

open( my $mf_fh, '>', "$name/trunk/Makefile" ) or die "Couldn't write to $name/trunk/Makefile";

say {$mf_fh} "NAME = $name";
say {$mf_fh} "VERSION = $fileversion";
say {$mf_fh} 'CATEGORIES = cpan';
say {$mf_fh} 'GARTYPE = v2';
say {$mf_fh} "AUTHOR = $author";
say {$mf_fh} "";
say {$mf_fh} "DESCRIPTION = $description";
say {$mf_fh} "define BLURB";
say {$mf_fh} "endef";
say {$mf_fh} "";

my $upstreaminfo = 0;
if ($notstandard) {
	say {$mf_fh} "MASTER_SITES = \$(addsuffix ${notstandard},\$(CPAN_MIRRORS))";
	$upstreaminfo = 1;
}
if ( $fileonly ne "${name}-${fileversion}.tar.gz" ) {
	say {$mf_fh} "MODDIST = $fileonly";
	$upstreaminfo = 1;
}
say {$mf_fh} "" if ($upstreaminfo);

say {$mf_fh} "CATALOG_RELEASE = unstable";
say {$mf_fh} "";

my $license_found;
foreach my $file (qw(LICENSE LICENSE.LGPL COPYING Copying COPYRIGHT Artistic ARTISTIC GPL)) {
	if ( -f "$distdir/$file" ) {
		say {$mf_fh} "LICENSE = $file\n";
		$license_found = 1;
		last;
	}
}
unless( $license_found ) {
  print {$mf_fh} "LICENSE_TEXT = This module is licensed under the $license license";
  print {$mf_fh} ", please see for details $license_resource" if( defined $license_resource );
  print {$mf_fh} "\n\n";
}

if (@build_dep_pkgs) {
	foreach my $p (@build_dep_pkgs) {
		say {$mf_fh} "BUILD_DEP_PKGS += $p";
	}
	say {$mf_fh} "";
}

say {$mf_fh} "PACKAGES += $cswpkg";
say {$mf_fh} "CATALOGNAME_$cswpkg = $cswcatalog";
say {$mf_fh} "SPKG_DESC_$cswpkg = $description";

# Do we have the package in the catalog and has it the same name?
# dam@login [login]:/home/dam >  curl -s http://buildfarm.opencsw.org/pkgdb/rest/catalogs/current/sparc/SunOS5.9/pkgnames/CSWvim/
# {"maintainer_full_name": "Dagobert Michelsen", "version_string": "7.3.055,REV=2010.11.25", "basename": "vim-7.3.055,REV=2010.11.25-SunOS5.9-sparc-CSW.pkg.gz", "maintainer_email": "dam@opencsw.org", "mtime": "2010-11-27 05:31:11", "file_basename": "vim-7.3.055,REV=2010.11.25-SunOS5.9-sparc-CSW.pkg.gz", "arch": "sparc", "osrel": "SunOS5.9", "size": 1026296, "md5_sum": "96bda1535071daa08372ceee7787b17b", "pkgname": "CSWvim", "rev": "2010.11.25", "filename_arch": "sparc", "version": "7.3.055,REV=2010.11.25", "cadam@login [login]:/home/dam >
# Or does it need to be obsoleted?

say {$mf_fh} "# There was no information if this is pure Perl or not. Please remove if necessary." if ( $archall == 2 );
say {$mf_fh} "ARCHALL_$cswpkg = 1" if ($archall);

foreach my $p (@runtime_dep_pkgs) {
	say {$mf_fh} "RUNTIME_DEP_PKGS_$cswpkg += $p";
}

# Is this an obsoletion for an old package?
my @oldpkgs = mod2pkg($modname);
if ( @oldpkgs > 1 ) {
	say STDERR "ERROR: More than one package for module '$modname' found: @oldpkgs";
}
foreach my $oldpkg (@oldpkgs) {
	if( $cswpkg eq $oldpkg ) {
		say STDERR "A previous version of this package $cswpkg has been released";
		next;
	}
	say STDERR "A previous version of this package $cswpkg was released, but was named $oldpkg then";

	say {$mf_fh} "OBSOLETED_BY_$cswpkg += $oldpkg";

	my $data = getpkgdata( $oldpkg );
	if( $data ) {
		my $cname = $data->{catalogname};
		say {$mf_fh} "CATALOGNAME_$oldpkg = ${cname}_stub";
	}

}

say {$mf_fh} "";
say {$mf_fh} "include gar/category.mk";

close($mf_fh) or warn($!);
chdir("$name/trunk") or die($!);
system('mgar', 'spotless') == 0 or die($!);
system('mgar', 'makesum') == 0 or die($!);
system('mgar', 'package') == 0 or die($!);

say 'Done.';

### Subroutines ###

sub dep_pkgs {
	my $req = shift @_;
	my %result;
	foreach my $modname ( keys %$req ) {
		my $version = version->parse( $req->{$modname} );
		if ( $modname eq "perl" ) {
			if ( version->parse($^V) < $version ) {
				die "requires perl version $version, this is " . version->parse($^V);
			}
			next;
		}

		if( get_version( $modname ) ) {
			if ( $version > version->parse( get_version($modname) ) ) {
				say STDERR "Version of $modname is too old. Required is $version, installed is ",
					get_version($modname);
				# XXX: Is there something newer in the catalog?
				# XXX: If not, recommend updating the recipe with makemake
			}
		} else {
			# The module is not installed
			# XXX: Compare against package version in the catalog
		}

		my @pkgs = mod2pkg($modname);
		if ( @pkgs > 1 ) {
			print STDERR "ERROR: More than one package for module '$modname' found: @pkgs\n";
		}
		my $pkg = $pkgs[0];
		if ($pkg) {
			say STDERR "Packages for module '$modname': ", join( ", ", @pkgs );
			next if ( $pkg eq 'CSWperl' );

			my ( $guessedpkg, $dirname ) = guess_name_from_module($modname);

			if( $pkg ne $guessedpkg ) {
				print STDERR "ERROR: Found package name '$pkg' is not consistent to the " .
					"canonical '$guessedpkg', please invoke  makemake $modname\n";
			}

			system( '/usr/bin/pkginfo', '-q', $pkg );

			if ($? == -1) {
				print "failed to execute: $!\n";
			} elsif ($? & 127) {
				printf "child died with signal %d, %s coredump\n",
				($? & 127),  ($? & 128) ? 'with' : 'without';
			} else {
				my $ev = $? >> 8;
				if( $ev ne 0 ) {
					say STDERR "ERROR: The needed package $pkg is not installed";
				}
			}
		} else {
			print STDERR "MISSING package for '$modname'\n";

			# Guess name of missing module
			my $dirname;
			( $pkg, $dirname ) = guess_name_from_module($modname);
			if ($pkg) {
				if ( !-d $dirname ) {
					print STDERR "MISSING $pkg directory '$dirname', to build please invoke   makemake $modname\n";
				} else {
					print STDERR "MISSING $pkg Please build and install module in $dirname\n";
				}
			}
		}
		$result{$pkg} = 1 if ($pkg);
	}

	return keys %result;
}

sub endlog {
	if ( !$verbose ) {

		# Reference fh to silence warning
		select(OLDERR); select(OLDOUT);

		# Restore output.
		select(STDOUT);
		close(STDOUT);
		open( STDOUT, ">&OLDOUT" );
		close(STDERR);
		open( STDERR, ">&OLDERR" );

		rmtree($logfile);
	}
}

sub fail {
	close(STDOUT);
	open( STDOUT, ">&OLDOUT" );
	close(STDERR);
	open( STDERR, ">&OLDERR" );
	open( LOG,    "< $logfile" )
		or die "$pgm: Error, @_ - can't open log\n";
	print STDERR foreach <LOG>;
	close(LOG);
	rmtree($logfile);
	die "\n$pgm: Error, @_\n";
}

sub guess_name_from_module {
	my $modname = shift @_;
	my $mod = ( CPAN::Shell->expand( "Module", $modname ) )[0];
	if ( !$mod ) {
		print STDERR "ERROR: Can not find module $modname/n";
		return;
	}
	my $filename = $mod->distribution->base_id;
	my ( $name, $fileversion ) = ( $filename =~ /^(\D+)-(\d+(?:\.\d+)*)/ );
	my $dirname = $name;
	my $pkgname = lc($name);
	$pkgname = "CSWpm-" . $pkgname;
	return ( $pkgname, $dirname );
}

sub logoutput {
	if ( !$verbose ) {
		$logfile = tmpnam();
		open( OLDOUT, '>&STDOUT' );
		open( OLDERR, '>&STDERR' );
		open( STDOUT, "> $logfile" );
		open( STDERR, "> $logfile" );
	}
}

sub mod2pkg {
	my $modname = shift @_;

	my %pkgs;
	my $ua = LWP::UserAgent->new;
	$ua->timeout(600);

	my $modpath = $modname;
	$modpath =~ s,::,/,g;
	$modpath .= '.pm';

	my $pm = new Parallel::ForkManager( 15, "/tmp/makemake" );

	$pm -> run_on_finish ( # called BEFORE the first call to start()
		sub {
			my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;

			if (defined($data_structure_reference)) {
				my ($pkg) = @{$data_structure_reference};
				$pkgs{$pkg} = 1 if( defined $pkg );
			} else {
				print qq|No message received from child process $pid!\n|;
			}
		}
	);

	foreach my $prefix (@INC) {
		$pm->start() and next;
		my $response = $ua->get( "http://buildfarm.opencsw.org/pkgdb/rest/catalogs/unstable/sparc/SunOS5.10/pkgname-by-filename?filename=$prefix/$modpath" );
		my $json;
		if ($response->is_success) {
			$json = $response->decoded_content;  # or whatever
		} else {
			print Dumper( $response );
			die $response->status_line;
		}

		my $p = defined $json ? decode_json( $json ) : [];

		$pm->finish( 0, $p );
	}

	$pm->wait_all_children;

	# print "Matched packages: ", join( ", ", keys %pkgs ), "\n";

	# Perl may provide the functionality itself, although there is a more up-to-date module
	return ( exists $pkgs{CSWperl} ? "CSWperl" : keys %pkgs );
}


sub path2pkg {
	my @pathes = @_;

	return () if ( @pathes == 0 );

	my %pkgs;
	open P, "/home/dam/mgar/gar/v2/bin/pkgdb show filename " . join( " ", @pathes ) . " |"
		or die "Cannot open gar/bin/pkgdb";
	while (<P>) {
		my $path = shift @pathes;
		$pkgs{$path} = [ split( /\s+/, $_ ) ];
	}
	close P;

	return %pkgs;
}

sub getpkgdata {
	my ($pkg) = @_;

	my $ua = LWP::UserAgent->new;
	$ua->timeout(300);
	$ua->proxy( [ 'http', 'ftp' ], 'http://proxy:3128' );

	my $catalog = "unstable";
	my $arch    = "sparc";
	my $rel     = "SunOS5.10";

	my $url = "http://buildfarm.opencsw.org/pkgdb/rest/catalogs/$catalog/$arch/$rel/pkgnames/$pkg/";

	my $response = $ua->get($url);

	# version is "version": "1.6.4,REV=2011.11.24"

	my $data;
	if ( $response->is_success ) {
		my $json_string = $response->decoded_content; # or whatever
		if ( $json_string eq "null" ) {
			say STDERR "Couldn't find package $pkg in $catalog:$arch:$rel";
		} else {
			$data  = decode_json $json_string;
		}
	} else {
		print STDERR "Error getting $url\n" . $response->status_line;
	}

	return $data;
}
