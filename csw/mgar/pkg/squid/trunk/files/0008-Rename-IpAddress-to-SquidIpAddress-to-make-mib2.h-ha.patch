From a5b58ab2e6c0def501de7d2b44435925ef1facac Mon Sep 17 00:00:00 2001
From: Juraj Lutter <wilbury@opencsw.org>
Date: Wed, 23 May 2012 14:30:09 +0200
Subject: [PATCH] Rename IpAddress to SquidIpAddress to make mib2.h happy.

---
 ChangeLog                                |    2 +-
 snmplib/parse.c                          |    2 +-
 src/AccessLogEntry.h                     |    4 +-
 src/ClientInfo.h                         |    2 +-
 src/CompositePoolNode.h                  |    2 +-
 src/ConnectionDetail.h                   |    4 +-
 src/DiskIO/DiskDaemon/DiskdIOStrategy.cc |    2 +-
 src/HierarchyLogEntry.h                  |    2 +-
 src/HttpRequest.h                        |    8 +-
 src/ICP.h                                |   18 ++--
 src/PeerSelectState.h                    |    6 +-
 src/ProtoPort.h                          |    2 +-
 src/acl/Arp.cc                           |    8 +-
 src/acl/Asn.cc                           |   28 +++---
 src/acl/Asn.h                            |   12 +--
 src/acl/DestinationAsn.h                 |    2 +-
 src/acl/FilledChecklist.h                |    6 +-
 src/acl/Ip.cc                            |   14 +--
 src/acl/Ip.h                             |   12 +--
 src/acl/SourceAsn.h                      |    2 +-
 src/adaptation/icap/ModXact.cc           |    2 +-
 src/adaptation/icap/Xaction.cc           |    6 +-
 src/auth/AclMaxUserIp.cc                 |    2 +-
 src/auth/AclMaxUserIp.h                  |    2 +-
 src/auth/User.cc                         |    4 +-
 src/auth/User.h                          |    4 +-
 src/auth/UserRequest.cc                  |    8 +-
 src/auth/UserRequest.h                   |    8 +-
 src/auth/digest/auth_digest.cc           |    2 +-
 src/cache_cf.cc                          |    8 +-
 src/client_db.cc                         |   16 ++--
 src/client_side.cc                       |    6 +-
 src/client_side.h                        |    6 +-
 src/client_side_reply.cc                 |   10 +-
 src/client_side_reply.h                  |    4 +-
 src/client_side_request.cc               |    6 +-
 src/comm.cc                              |   20 ++--
 src/comm.h                               |   12 +--
 src/delay_pools.cc                       |   18 ++--
 src/dns_internal.cc                      |   20 ++--
 src/errorpage.h                          |    2 +-
 src/esi/Esi.cc                           |    2 +-
 src/external_acl.cc                      |    2 +-
 src/fde.h                                |    4 +-
 src/forward.cc                           |   14 +--
 src/forward.h                            |    4 +-
 src/fqdncache.cc                         |    6 +-
 src/ftp.cc                               |   12 +--
 src/globals.h                            |    4 +-
 src/helper.h                             |    8 +-
 src/htcp.cc                              |   62 ++++++------
 src/htcp.h                               |    4 +-
 src/http.cc                              |    2 +-
 src/icmp/Icmp.cc                         |    2 +-
 src/icmp/Icmp.h                          |    8 +-
 src/icmp/Icmp4.cc                        |    2 +-
 src/icmp/Icmp4.h                         |    2 +-
 src/icmp/Icmp6.cc                        |    2 +-
 src/icmp/Icmp6.h                         |    2 +-
 src/icmp/IcmpPinger.h                    |    2 +-
 src/icmp/IcmpSquid.cc                    |    8 +-
 src/icmp/IcmpSquid.h                     |    4 +-
 src/icmp/net_db.cc                       |   32 +++----
 src/icmp/net_db.h                        |   10 +-
 src/icmp/testIcmp.h                      |    2 +-
 src/icp_v2.cc                            |   30 +++---
 src/icp_v3.cc                            |    4 +-
 src/ident/Ident.cc                       |    8 +-
 src/ident/Ident.h                        |    4 +-
 src/internal.cc                          |    2 +-
 src/ip/IpAddress.cc                      |  150 +++++++++++++++---------------
 src/ip/IpAddress.h                       |   74 +++++++--------
 src/ip/IpIntercept.cc                    |   22 ++---
 src/ip/IpIntercept.h                     |   18 ++--
 src/ip/testIpAddress.cc                  |   52 +++++------
 src/ipc.cc                               |    6 +-
 src/ipc_win32.cc                         |   16 ++--
 src/ipcache.cc                           |   38 ++++----
 src/neighbors.cc                         |   14 +--
 src/pconn.cc                             |    6 +-
 src/pconn.h                              |    8 +-
 src/protos.h                             |   32 +++----
 src/redirect.cc                          |    4 +-
 src/send-announce.cc                     |    2 +-
 src/snmp_agent.cc                        |    2 +-
 src/snmp_core.cc                         |   12 +--
 src/ssl/context_storage.cc               |   20 ++--
 src/ssl/context_storage.h                |    8 +-
 src/structs.h                            |   28 +++---
 src/tests/stub_comm.cc                   |    2 +-
 src/tools.cc                             |    2 +-
 src/tunnel.cc                            |    2 +-
 src/unlinkd.cc                           |    2 +-
 src/wccp.cc                              |    4 +-
 src/wccp2.cc                             |    6 +-
 src/win32.cc                             |    6 +-
 tools/cachemgr.cc                        |    2 +-
 tools/squidclient.cc                     |   10 +-
 98 files changed, 550 insertions(+), 550 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 659c70c..c4dd31f 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -306,7 +306,7 @@ Changes to squid-3.1.4 (30 May 2010):
 	- Bug 2633: Fix Ecap::HeaderRep::value(name) fails when there is no named header field
 	- Change LDAP helpers to default to LDAP version 3 if available
 	- Add Joomla and Salted Hash support to squid_db_auth helper
-	- Fixed IpAddress port printing for ports higher than 9999
+	- Fixed SquidIpAddress port printing for ports higher than 9999
 	- Disable chunked memory pooling by default.
 	- ... and several build errors.
 
diff --git a/snmplib/parse.c b/snmplib/parse.c
index 517b01d..c41eadb 100644
--- a/snmplib/parse.c
+++ b/snmplib/parse.c
@@ -186,7 +186,7 @@ struct tok tokens[] = {
     {"OF", sizeof("OF") - 1, OF},
     {"SEQUENCE", sizeof("SEQUENCE") - 1, SEQUENCE},
     {"NULL", sizeof("NULL") - 1, NUL},
-    {"IpAddress", sizeof("IpAddress") - 1, IPADDR},
+    {"SquidIpAddress", sizeof("SquidIpAddress") - 1, IPADDR},
     {"INTEGER", sizeof("INTEGER") - 1, INTEGER},
     {"Counter", sizeof("Counter") - 1, COUNTER},
     {"read-only", sizeof("read-only") - 1, READONLY},
diff --git a/src/AccessLogEntry.h b/src/AccessLogEntry.h
index cd5e3c2..bc0e76a 100644
--- a/src/AccessLogEntry.h
+++ b/src/AccessLogEntry.h
@@ -103,7 +103,7 @@ public:
         {;
         }
 
-        IpAddress caddr;
+        SquidIpAddress caddr;
         int64_t requestSize;
         int64_t replySize;
         int requestHeadersSize; ///< received, including request line
@@ -170,7 +170,7 @@ public:
     public:
         IcapLogEntry():request(NULL),reply(NULL),outcome(Adaptation::Icap::xoUnknown),trTime(0),ioTime(0),resStatus(HTTP_STATUS_NONE) {}
 
-        IpAddress hostAddr; ///< ICAP server IP address
+        SquidIpAddress hostAddr; ///< ICAP server IP address
         String serviceName;        ///< ICAP service name
         String reqUri;             ///< ICAP Request-URI
         Adaptation::Icap::ICAP::Method reqMethod; ///< ICAP request method
diff --git a/src/ClientInfo.h b/src/ClientInfo.h
index 52c63d0..1e27613 100644
--- a/src/ClientInfo.h
+++ b/src/ClientInfo.h
@@ -11,7 +11,7 @@ class ClientInfo
 public:
     hash_link hash;             /* must be first */
 
-    IpAddress addr;
+    SquidIpAddress addr;
 
     struct {
         int result_hist[LOG_TYPE_MAX];
diff --git a/src/CompositePoolNode.h b/src/CompositePoolNode.h
index ccecf4a..69843e8 100644
--- a/src/CompositePoolNode.h
+++ b/src/CompositePoolNode.h
@@ -76,7 +76,7 @@ public:
     public:
         CompositeSelectionDetails() {}
 
-        IpAddress src_addr;
+        SquidIpAddress src_addr;
         AuthUserRequest *user;
         String tag;
     };
diff --git a/src/ConnectionDetail.h b/src/ConnectionDetail.h
index 519a5a1..f3e7027 100644
--- a/src/ConnectionDetail.h
+++ b/src/ConnectionDetail.h
@@ -44,9 +44,9 @@ public:
 
     ConnectionDetail();
 
-    IpAddress me;
+    SquidIpAddress me;
 
-    IpAddress peer;
+    SquidIpAddress peer;
 };
 
 #endif
diff --git a/src/DiskIO/DiskDaemon/DiskdIOStrategy.cc b/src/DiskIO/DiskDaemon/DiskdIOStrategy.cc
index 54ba1a0..f443e79 100644
--- a/src/DiskIO/DiskDaemon/DiskdIOStrategy.cc
+++ b/src/DiskIO/DiskDaemon/DiskdIOStrategy.cc
@@ -157,7 +157,7 @@ DiskdIOStrategy::init()
     char skey1[32];
     char skey2[32];
     char skey3[32];
-    IpAddress localhost;
+    SquidIpAddress localhost;
 
     ikey = (getpid() << 10) + (instanceID << 2);
     ikey &= 0x7fffffff;
diff --git a/src/HierarchyLogEntry.h b/src/HierarchyLogEntry.h
index ebeba2b..f57c9c7 100644
--- a/src/HierarchyLogEntry.h
+++ b/src/HierarchyLogEntry.h
@@ -63,7 +63,7 @@ public:
     int64_t peer_response_time; ///< last peer response delay
     timeval first_conn_start; ///< first connection use among all peers
     int64_t total_response_time; ///< cumulative for all peers
-    IpAddress peer_local_addr; ///< local IP:port of the last server-side connection
+    SquidIpAddress peer_local_addr; ///< local IP:port of the last server-side connection
 };
 
 extern void hierarchyNote(HierarchyLogEntry *, hier_code, const char *);
diff --git a/src/HttpRequest.h b/src/HttpRequest.h
index efd3063..5c1a8d2 100644
--- a/src/HttpRequest.h
+++ b/src/HttpRequest.h
@@ -147,7 +147,7 @@ private:
 #endif
 
 public:
-    IpAddress host_addr;
+    SquidIpAddress host_addr;
 
     AuthUserRequest *auth_user_request;
 
@@ -165,13 +165,13 @@ public:
 
     int imslen;
 
-    IpAddress client_addr;
+    SquidIpAddress client_addr;
 
 #if FOLLOW_X_FORWARDED_FOR
-    IpAddress indirect_client_addr;
+    SquidIpAddress indirect_client_addr;
 #endif /* FOLLOW_X_FORWARDED_FOR */
 
-    IpAddress my_addr;
+    SquidIpAddress my_addr;
 
     HierarchyLogEntry hier;
 
diff --git a/src/ICP.h b/src/ICP.h
index 3864f70..14fe535 100644
--- a/src/ICP.h
+++ b/src/ICP.h
@@ -68,7 +68,7 @@ struct _icp_common_t {
     _icp_common_t();
     _icp_common_t(char *buf, unsigned int len);
 
-    void handleReply(char *buf, IpAddress &from);
+    void handleReply(char *buf, SquidIpAddress &from);
     static _icp_common_t *createMessage(icp_opcode opcode, int flags, const char *url, int reqnum, int pad);
     icp_opcode getOpCode() const;
 #endif
@@ -99,7 +99,7 @@ public:
     HttpRequest *request;
     int fd;
 
-    IpAddress from;
+    SquidIpAddress from;
     char *url;
 };
 
@@ -107,7 +107,7 @@ public:
 
 /// \ingroup ServerProtocolICPAPI
 struct icpUdpData {
-    IpAddress address;
+    SquidIpAddress address;
     void *msg;
     size_t len;
     icpUdpData *next;
@@ -122,25 +122,25 @@ struct icpUdpData {
 };
 
 /// \ingroup ServerProtocolICPAPI
-HttpRequest* icpGetRequest(char *url, int reqnum, int fd, IpAddress &from);
+HttpRequest* icpGetRequest(char *url, int reqnum, int fd, SquidIpAddress &from);
 
 /// \ingroup ServerProtocolICPAPI
-int icpAccessAllowed(IpAddress &from, HttpRequest * icp_request);
+int icpAccessAllowed(SquidIpAddress &from, HttpRequest * icp_request);
 
 /// \ingroup ServerProtocolICPAPI
-SQUIDCEXTERN void icpCreateAndSend(icp_opcode, int flags, char const *url, int reqnum, int pad, int fd, const IpAddress &from);
+SQUIDCEXTERN void icpCreateAndSend(icp_opcode, int flags, char const *url, int reqnum, int pad, int fd, const SquidIpAddress &from);
 
 /// \ingroup ServerProtocolICPAPI
 extern icp_opcode icpGetCommonOpcode();
 
 /// \ingroup ServerProtocolICPAPI
-SQUIDCEXTERN int icpUdpSend(int, const IpAddress &, icp_common_t *, log_type, int);
+SQUIDCEXTERN int icpUdpSend(int, const SquidIpAddress &, icp_common_t *, log_type, int);
 
 /// \ingroup ServerProtocolICPAPI
 SQUIDCEXTERN log_type icpLogFromICPCode(icp_opcode opcode);
 
 /// \ingroup ServerProtocolICPAPI
-void icpDenyAccess(IpAddress &from, char *url, int reqnum, int fd);
+void icpDenyAccess(SquidIpAddress &from, char *url, int reqnum, int fd);
 
 /// \ingroup ServerProtocolICPAPI
 SQUIDCEXTERN PF icpHandleUdp;
@@ -149,7 +149,7 @@ SQUIDCEXTERN PF icpHandleUdp;
 SQUIDCEXTERN PF icpUdpSendQueue;
 
 /// \ingroup ServerProtocolICPAPI
-SQUIDCEXTERN void icpHandleIcpV3(int, IpAddress &, char *, int);
+SQUIDCEXTERN void icpHandleIcpV3(int, SquidIpAddress &, char *, int);
 
 /// \ingroup ServerProtocolICPAPI
 SQUIDCEXTERN int icpCheckUdpHit(StoreEntry *, HttpRequest * request);
diff --git a/src/PeerSelectState.h b/src/PeerSelectState.h
index b56e9db..f6fc3f4 100644
--- a/src/PeerSelectState.h
+++ b/src/PeerSelectState.h
@@ -52,16 +52,16 @@ public:
     void *callback_data;
     FwdServer *servers;
     /*
-     * Why are these IpAddress instead of peer *?  Because a
+     * Why are these SquidIpAddress instead of peer *?  Because a
      * peer structure can become invalid during the peer selection
      * phase, specifically after a reconfigure.  Thus we need to lookup
      * the peer * based on the address when we are finally ready to
      * reference the peer structure.
      */
 
-    IpAddress first_parent_miss;
+    SquidIpAddress first_parent_miss;
 
-    IpAddress closest_parent_miss;
+    SquidIpAddress closest_parent_miss;
     /*
      * ->hit can be peer* because it should only be
      * accessed during the thread when it is set
diff --git a/src/ProtoPort.h b/src/ProtoPort.h
index e280b67..73a734e 100644
--- a/src/ProtoPort.h
+++ b/src/ProtoPort.h
@@ -16,7 +16,7 @@ struct http_port_list {
 
     http_port_list *next;
 
-    IpAddress s;
+    SquidIpAddress s;
     char *protocol;            /* protocol name */
     char *name;                /* visible name */
     char *defaultsite;         /* default web site */
diff --git a/src/acl/Arp.cc b/src/acl/Arp.cc
index dd4e971..cc81230 100644
--- a/src/acl/Arp.cc
+++ b/src/acl/Arp.cc
@@ -43,7 +43,7 @@
 
 struct arpreq {
 
-    IpAddress arp_pa;   /* protocol address */
+    SquidIpAddress arp_pa;   /* protocol address */
 
     struct sockaddr arp_ha;   /* hardware address */
     int arp_flags;            /* flags */
@@ -82,7 +82,7 @@ struct arpreq {
 #endif
 static void aclParseArpList(SplayNode<acl_arp_data *> **curlist);
 static int decode_eth(const char *asc, char *eth);
-static int aclMatchArp(SplayNode<acl_arp_data *> **dataptr, IpAddress &c);
+static int aclMatchArp(SplayNode<acl_arp_data *> **dataptr, SquidIpAddress &c);
 static SplayNode<acl_arp_data *>::SPLAYCMP aclArpCompare;
 static SplayNode<acl_arp_data *>::SPLAYWALKEE aclDumpArpListWalkee;
 
@@ -240,14 +240,14 @@ ACLARP::match(ACLChecklist *cl)
 /* aclMatchArp */
 /***************/
 int
-aclMatchArp(SplayNode<acl_arp_data *> **dataptr, IpAddress &c)
+aclMatchArp(SplayNode<acl_arp_data *> **dataptr, SquidIpAddress &c)
 {
     struct arpreq arpReq;
 #if !defined(_SQUID_WIN32_)
     struct sockaddr_in *sa = NULL;
 #endif
 
-    IpAddress ipAddr = c;
+    SquidIpAddress ipAddr = c;
     ipAddr.SetPort(0);  // ARP will fail if the port is included in the match.
 
 #if defined(_SQUID_LINUX_)
diff --git a/src/acl/Asn.cc b/src/acl/Asn.cc
index 6442a8a..378ba45 100644
--- a/src/acl/Asn.cc
+++ b/src/acl/Asn.cc
@@ -60,9 +60,9 @@ class m_ADDR
 {
 public:
     uint8_t len;
-    IpAddress addr;
+    SquidIpAddress addr;
 
-    m_ADDR() : len(sizeof(IpAddress)) {};
+    m_ADDR() : len(sizeof(SquidIpAddress)) {};
 };
 
 /* END of definitions for radix tree entries */
@@ -135,7 +135,7 @@ static OBJH asnStats;
 /* PUBLIC */
 
 int
-asnMatchIp(CbDataList<int> *data, IpAddress &addr)
+asnMatchIp(CbDataList<int> *data, SquidIpAddress &addr)
 {
     struct squid_radix_node *rn;
     as_info *e;
@@ -401,8 +401,8 @@ asnAddNet(char *as_string, int as_number)
     CbDataList<int> *q = NULL;
     as_info *asinfo = NULL;
 
-    IpAddress mask;
-    IpAddress addr;
+    SquidIpAddress mask;
+    SquidIpAddress addr;
     char *t;
     int bitl;
 
@@ -520,8 +520,8 @@ printRadixNode(struct squid_radix_node *rn, void *_sentry)
     CbDataList<int> *q;
     as_info *asinfo;
     char buf[MAX_IPSTRLEN];
-    IpAddress addr;
-    IpAddress mask;
+    SquidIpAddress addr;
+    SquidIpAddress mask;
 
     assert(e);
     assert(e->e_info);
@@ -549,7 +549,7 @@ ACLASN::~ACLASN()
 
 bool
 
-ACLASN::match(IpAddress toMatch)
+ACLASN::match(SquidIpAddress toMatch)
 {
     return asnMatchIp(data, toMatch);
 }
@@ -592,7 +592,7 @@ ACLASN::parse()
     }
 }
 
-ACLData<IpAddress> *
+ACLData<SquidIpAddress> *
 ACLASN::clone() const
 {
     if (data)
@@ -603,18 +603,18 @@ ACLASN::clone() const
 
 /* explicit template instantiation required for some systems */
 
-template class ACLStrategised<IpAddress>;
+template class ACLStrategised<SquidIpAddress>;
 
 ACL::Prototype ACLASN::SourceRegistryProtoype(&ACLASN::SourceRegistryEntry_, "src_as");
 
-ACLStrategised<IpAddress> ACLASN::SourceRegistryEntry_(new ACLASN, ACLSourceASNStrategy::Instance(), "src_as");
+ACLStrategised<SquidIpAddress> ACLASN::SourceRegistryEntry_(new ACLASN, ACLSourceASNStrategy::Instance(), "src_as");
 
 ACL::Prototype ACLASN::DestinationRegistryProtoype(&ACLASN::DestinationRegistryEntry_, "dst_as");
 
-ACLStrategised<IpAddress> ACLASN::DestinationRegistryEntry_(new ACLASN, ACLDestinationASNStrategy::Instance(), "dst_as");
+ACLStrategised<SquidIpAddress> ACLASN::DestinationRegistryEntry_(new ACLASN, ACLDestinationASNStrategy::Instance(), "dst_as");
 
 int
-ACLSourceASNStrategy::match (ACLData<IpAddress> * &data, ACLFilledChecklist *checklist)
+ACLSourceASNStrategy::match (ACLData<SquidIpAddress> * &data, ACLFilledChecklist *checklist)
 {
     return data->match(checklist->src_addr);
 }
@@ -647,7 +647,7 @@ ACLDestinationASNStrategy::match (ACLData<MatchType> * &data, ACLFilledChecklist
         debugs(28, 3, "asnMatchAcl: Can't yet compare '" << "unknown" /*name*/ << "' ACL for '" << checklist->request->GetHost() << "'");
         checklist->changeState (DestinationIPLookup::Instance());
     } else {
-        IpAddress noaddr;
+        SquidIpAddress noaddr;
         noaddr.SetNoAddr();
         return data->match(noaddr);
     }
diff --git a/src/acl/Asn.h b/src/acl/Asn.h
index 557249a..8a8b996 100644
--- a/src/acl/Asn.h
+++ b/src/acl/Asn.h
@@ -38,7 +38,7 @@
 #include "acl/Checklist.h"
 #include "ip/IpAddress.h"
 
-SQUIDCEXTERN int asnMatchIp(CbDataList<int> *, IpAddress &);
+SQUIDCEXTERN int asnMatchIp(CbDataList<int> *, SquidIpAddress &);
 
 /// \ingroup ACLAPI
 SQUIDCEXTERN void asnInit(void);
@@ -47,7 +47,7 @@ SQUIDCEXTERN void asnInit(void);
 SQUIDCEXTERN void asnFreeMemory(void);
 
 /// \ingroup ACLAPI
-class ACLASN : public ACLData<IpAddress>
+class ACLASN : public ACLData<SquidIpAddress>
 {
 
 public:
@@ -55,18 +55,18 @@ public:
 
     virtual ~ACLASN();
 
-    virtual bool match(IpAddress);
+    virtual bool match(SquidIpAddress);
     virtual wordlist *dump();
     virtual void parse();
     bool empty() const;
-    virtual ACLData<IpAddress> *clone() const;
+    virtual ACLData<SquidIpAddress> *clone() const;
     virtual void prepareForUse();
 
 private:
     static ACL::Prototype SourceRegistryProtoype;
-    static ACLStrategised<IpAddress> SourceRegistryEntry_;
+    static ACLStrategised<SquidIpAddress> SourceRegistryEntry_;
     static ACL::Prototype DestinationRegistryProtoype;
-    static ACLStrategised<IpAddress> DestinationRegistryEntry_;
+    static ACLStrategised<SquidIpAddress> DestinationRegistryEntry_;
     CbDataList<int> *data;
 };
 
diff --git a/src/acl/DestinationAsn.h b/src/acl/DestinationAsn.h
index efaaade..e50fc26 100644
--- a/src/acl/DestinationAsn.h
+++ b/src/acl/DestinationAsn.h
@@ -37,7 +37,7 @@
 #include "ip/IpAddress.h"
 
 /// \ingroup ACLAPI
-class ACLDestinationASNStrategy : public ACLStrategy<IpAddress>
+class ACLDestinationASNStrategy : public ACLStrategy<SquidIpAddress>
 {
 
 public:
diff --git a/src/acl/FilledChecklist.h b/src/acl/FilledChecklist.h
index dd95724..b340914 100644
--- a/src/acl/FilledChecklist.h
+++ b/src/acl/FilledChecklist.h
@@ -43,9 +43,9 @@ public:
     virtual bool hasReply() const { return reply != NULL; }
 
 public:
-    IpAddress src_addr;
-    IpAddress dst_addr;
-    IpAddress my_addr;
+    SquidIpAddress src_addr;
+    SquidIpAddress dst_addr;
+    SquidIpAddress my_addr;
     struct peer *dst_peer;
     char *dst_rdns;
 
diff --git a/src/acl/Ip.cc b/src/acl/Ip.cc
index 14be32b..32a5242 100644
--- a/src/acl/Ip.cc
+++ b/src/acl/Ip.cc
@@ -125,7 +125,7 @@ acl_ip_data::toStr(char *buf, int len) const
 int
 aclIpAddrNetworkCompare(acl_ip_data * const &p, acl_ip_data * const &q)
 {
-    IpAddress A = p->addr1;
+    SquidIpAddress A = p->addr1;
 
     /* apply netmask */
     A.ApplyMask(q->mask);
@@ -192,7 +192,7 @@ acl_ip_data::NetworkCompare(acl_ip_data * const & a, acl_ip_data * const &b)
  * This function should NOT be called if 'asc' is a hostname!
  */
 bool
-acl_ip_data::DecodeMask(const char *asc, IpAddress &mask, int ctype)
+acl_ip_data::DecodeMask(const char *asc, SquidIpAddress &mask, int ctype)
 {
     char junk;
     int a1 = 0;
@@ -252,7 +252,7 @@ acl_ip_data::FactoryParse(const char *t)
     LOCAL_ARRAY(char, mask, 256);
     acl_ip_data *r = NULL;
     acl_ip_data **Q = NULL;
-    IpAddress temp;
+    SquidIpAddress temp;
     char c;
     unsigned int changed;
     acl_ip_data *q = new acl_ip_data;
@@ -400,13 +400,13 @@ acl_ip_data::FactoryParse(const char *t)
         /*
          * Note, must use plain xgetaddrinfo() here because at startup
          * ipcache hasn't been initialized
-         * TODO: offload this to one of the IpAddress lookups.
+         * TODO: offload this to one of the SquidIpAddress lookups.
          */
 
         debugs(28, 5, "aclIpParseIpData: Lookup Host/IP " << addr1);
         struct addrinfo *hp = NULL, *x = NULL;
         struct addrinfo hints;
-        IpAddress *prev_addr = NULL;
+        SquidIpAddress *prev_addr = NULL;
 
         memset(&hints, 0, sizeof(struct addrinfo));
 
@@ -552,7 +552,7 @@ ACLIP::empty () const
 }
 
 int
-ACLIP::match(IpAddress &clientip)
+ACLIP::match(SquidIpAddress &clientip)
 {
     static acl_ip_data ClientAddress;
     /*
@@ -572,4 +572,4 @@ ACLIP::match(IpAddress &clientip)
 
 acl_ip_data::acl_ip_data () :addr1(), addr2(), mask(), next (NULL) {}
 
-acl_ip_data::acl_ip_data (IpAddress const &anAddress1, IpAddress const &anAddress2, IpAddress const &aMask, acl_ip_data *aNext) : addr1(anAddress1), addr2(anAddress2), mask(aMask), next(aNext) {}
+acl_ip_data::acl_ip_data (SquidIpAddress const &anAddress1, SquidIpAddress const &anAddress2, SquidIpAddress const &aMask, acl_ip_data *aNext) : addr1(anAddress1), addr2(anAddress2), mask(aMask), next(aNext) {}
diff --git a/src/acl/Ip.h b/src/acl/Ip.h
index 9ff8cea..8cac599 100644
--- a/src/acl/Ip.h
+++ b/src/acl/Ip.h
@@ -47,20 +47,20 @@ public:
 
     acl_ip_data ();
 
-    acl_ip_data (IpAddress const &, IpAddress const &, IpAddress const &, acl_ip_data *);
+    acl_ip_data (SquidIpAddress const &, SquidIpAddress const &, SquidIpAddress const &, acl_ip_data *);
     void toStr(char *buf, int len) const;
 
-    IpAddress addr1;
+    SquidIpAddress addr1;
 
-    IpAddress addr2;
+    SquidIpAddress addr2;
 
-    IpAddress mask; /**< \todo This should perhapse be stored as a CIDR range now instead of a full IP mask. */
+    SquidIpAddress mask; /**< \todo This should perhapse be stored as a CIDR range now instead of a full IP mask. */
 
     acl_ip_data *next;		/**< used for parsing, not for storing */
 
 private:
 
-    static bool DecodeMask(const char *asc, IpAddress &mask, int string_format_type);
+    static bool DecodeMask(const char *asc, SquidIpAddress &mask, int string_format_type);
 };
 
 MEMPROXY_CLASS_INLINE(acl_ip_data);
@@ -88,7 +88,7 @@ public:
 
 protected:
 
-    int match(IpAddress &);
+    int match(SquidIpAddress &);
     IPSplay *data;
 
 private:
diff --git a/src/acl/SourceAsn.h b/src/acl/SourceAsn.h
index ffd8abc..cfb86f4 100644
--- a/src/acl/SourceAsn.h
+++ b/src/acl/SourceAsn.h
@@ -40,7 +40,7 @@ class ACLChecklist;
 #include "acl/Strategy.h"
 #include "ip/IpAddress.h"
 
-class ACLSourceASNStrategy : public ACLStrategy<IpAddress>
+class ACLSourceASNStrategy : public ACLStrategy<SquidIpAddress>
 {
 
 public:
diff --git a/src/adaptation/icap/ModXact.cc b/src/adaptation/icap/ModXact.cc
index c719cbd..f86e70a 100644
--- a/src/adaptation/icap/ModXact.cc
+++ b/src/adaptation/icap/ModXact.cc
@@ -1271,7 +1271,7 @@ void Adaptation::Icap::ModXact::makeRequestHeaders(MemBuf &buf)
     }
 
     if (TheConfig.send_client_ip && request) {
-        IpAddress client_addr;
+        SquidIpAddress client_addr;
 #if FOLLOW_X_FORWARDED_FOR
         if (TheConfig.icap_uses_indirect_client) {
             client_addr = request->indirect_client_addr;
diff --git a/src/adaptation/icap/Xaction.cc b/src/adaptation/icap/Xaction.cc
index ba7d6a7..1e90830 100644
--- a/src/adaptation/icap/Xaction.cc
+++ b/src/adaptation/icap/Xaction.cc
@@ -88,7 +88,7 @@ void Adaptation::Icap::Xaction::start()
 // TODO: obey service-specific, OPTIONS-reported connection limit
 void Adaptation::Icap::Xaction::openConnection()
 {
-    IpAddress client_addr;
+    SquidIpAddress client_addr;
 
     Must(connection < 0);
 
@@ -117,7 +117,7 @@ void Adaptation::Icap::Xaction::openConnection()
 
     disableRetries(); // we only retry pconn failures
 
-    IpAddress outgoing;
+    SquidIpAddress outgoing;
     if (!Ip::EnableIpv6 && !outgoing.SetIPv4()) {
         debugs(31, DBG_CRITICAL, "ERROR: IPv6 is disabled. " << outgoing << " is not an IPv4 address.");
         dieOnConnectionFailure(); // throws
@@ -185,7 +185,7 @@ void Adaptation::Icap::Xaction::closeConnection()
         }
 
         if (reuseConnection) {
-            IpAddress client_addr;
+            SquidIpAddress client_addr;
             //status() adds leading spaces.
             debugs(93,3, HERE << "pushing pconn" << status());
             AsyncCall::Pointer call = NULL;
diff --git a/src/auth/AclMaxUserIp.cc b/src/auth/AclMaxUserIp.cc
index 881ea82..2a5bcd3 100644
--- a/src/auth/AclMaxUserIp.cc
+++ b/src/auth/AclMaxUserIp.cc
@@ -114,7 +114,7 @@ ACLMaxUserIP::parse()
 int
 ACLMaxUserIP::match(AuthUserRequest * auth_user_request,
 
-                    IpAddress const &src_addr)
+                    SquidIpAddress const &src_addr)
 {
     /*
      * the logic for flush the ip list when the limit is hit vs keep
diff --git a/src/auth/AclMaxUserIp.h b/src/auth/AclMaxUserIp.h
index 9b9bcf0..199d83e 100644
--- a/src/auth/AclMaxUserIp.h
+++ b/src/auth/AclMaxUserIp.h
@@ -69,7 +69,7 @@ private:
     static Prototype RegistryProtoype;
     static ACLMaxUserIP RegistryEntry_;
 
-    int match(AuthUserRequest *, IpAddress const &);
+    int match(AuthUserRequest *, SquidIpAddress const &);
     char const *class_;
     int maximum;
 
diff --git a/src/auth/User.cc b/src/auth/User.cc
index a972018..8a222cf 100644
--- a/src/auth/User.cc
+++ b/src/auth/User.cc
@@ -238,7 +238,7 @@ AuthUser::clearIp()
 }
 
 void
-AuthUser::removeIp(IpAddress ipaddr)
+AuthUser::removeIp(SquidIpAddress ipaddr)
 {
     auth_user_ip_t *ipdata = (auth_user_ip_t *) ip_list.head;
 
@@ -261,7 +261,7 @@ AuthUser::removeIp(IpAddress ipaddr)
 }
 
 void
-AuthUser::addIp(IpAddress ipaddr)
+AuthUser::addIp(SquidIpAddress ipaddr)
 {
     auth_user_ip_t *ipdata = (auth_user_ip_t *) ip_list.head;
     int found = 0;
diff --git a/src/auth/User.h b/src/auth/User.h
index 47a9933..70bc267 100644
--- a/src/auth/User.h
+++ b/src/auth/User.h
@@ -85,8 +85,8 @@ public:
     _SQUID_INLINE_ char const *username() const;
     _SQUID_INLINE_ void username(char const *);
     void clearIp();
-    void removeIp(IpAddress);
-    void addIp(IpAddress);
+    void removeIp(SquidIpAddress);
+    void addIp(SquidIpAddress);
     _SQUID_INLINE_ void addRequest(AuthUserRequest *);
 
     void lock();
diff --git a/src/auth/UserRequest.cc b/src/auth/UserRequest.cc
index 285e19c..ab15343 100644
--- a/src/auth/UserRequest.cc
+++ b/src/auth/UserRequest.cc
@@ -200,7 +200,7 @@ AuthUserRequest::denyMessage(char const * const default_message)
 }
 
 static void
-authenticateAuthUserRequestSetIp(AuthUserRequest * auth_user_request, IpAddress &ipaddr)
+authenticateAuthUserRequestSetIp(AuthUserRequest * auth_user_request, SquidIpAddress &ipaddr)
 {
     AuthUser *auth_user = auth_user_request->user();
 
@@ -211,7 +211,7 @@ authenticateAuthUserRequestSetIp(AuthUserRequest * auth_user_request, IpAddress
 }
 
 void
-authenticateAuthUserRequestRemoveIp(AuthUserRequest * auth_user_request, IpAddress const &ipaddr)
+authenticateAuthUserRequestRemoveIp(AuthUserRequest * auth_user_request, SquidIpAddress const &ipaddr)
 {
     AuthUser *auth_user = auth_user_request->user();
 
@@ -328,7 +328,7 @@ authTryGetUser (AuthUserRequest **auth_user_request, ConnStateData * conn, HttpR
  * Caller is responsible for locking and unlocking their *auth_user_request!
  */
 auth_acl_t
-AuthUserRequest::authenticate(AuthUserRequest ** auth_user_request, http_hdr_type headertype, HttpRequest * request, ConnStateData * conn, IpAddress &src_addr)
+AuthUserRequest::authenticate(AuthUserRequest ** auth_user_request, http_hdr_type headertype, HttpRequest * request, ConnStateData * conn, SquidIpAddress &src_addr)
 {
     const char *proxy_auth;
     assert(headertype != 0);
@@ -503,7 +503,7 @@ AuthUserRequest::authenticate(AuthUserRequest ** auth_user_request, http_hdr_typ
 
 auth_acl_t
 
-AuthUserRequest::tryToAuthenticateAndSetAuthUser(AuthUserRequest ** auth_user_request, http_hdr_type headertype, HttpRequest * request, ConnStateData * conn, IpAddress &src_addr)
+AuthUserRequest::tryToAuthenticateAndSetAuthUser(AuthUserRequest ** auth_user_request, http_hdr_type headertype, HttpRequest * request, ConnStateData * conn, SquidIpAddress &src_addr)
 {
     /* If we have already been called, return the cached value */
     AuthUserRequest *t = authTryGetUser (auth_user_request, conn, request);
diff --git a/src/auth/UserRequest.h b/src/auth/UserRequest.h
index 6119176..8ca1488 100644
--- a/src/auth/UserRequest.h
+++ b/src/auth/UserRequest.h
@@ -48,7 +48,7 @@ struct AuthUserIP {
     dlink_node node;
     /* IP addr this user authenticated from */
 
-    IpAddress ipaddr;
+    SquidIpAddress ipaddr;
     time_t ip_expiretime;
 };
 
@@ -108,7 +108,7 @@ public:
 
     virtual void user(AuthUser *aUser) {_auth_user=aUser;}
 
-    static auth_acl_t tryToAuthenticateAndSetAuthUser(AuthUserRequest **, http_hdr_type, HttpRequest *, ConnStateData *, IpAddress &);
+    static auth_acl_t tryToAuthenticateAndSetAuthUser(AuthUserRequest **, http_hdr_type, HttpRequest *, ConnStateData *, SquidIpAddress &);
     static void addReplyAuthHeader(HttpReply * rep, AuthUserRequest * auth_user_request, HttpRequest * request, int accelerated, int internal);
 
     AuthUserRequest();
@@ -146,7 +146,7 @@ public:
 
 private:
 
-    static auth_acl_t authenticate(AuthUserRequest ** auth_user_request, http_hdr_type headertype, HttpRequest * request, ConnStateData * conn, IpAddress &src_addr);
+    static auth_acl_t authenticate(AuthUserRequest ** auth_user_request, http_hdr_type headertype, HttpRequest * request, ConnStateData * conn, SquidIpAddress &src_addr);
 
     /** return a message on the 407 error pages */
     char *message;
@@ -176,7 +176,7 @@ extern void authenticateFixHeader(HttpReply *, AuthUserRequest *, HttpRequest *,
 extern void authenticateAddTrailer(HttpReply *, AuthUserRequest *, HttpRequest *, int);
 
 /// \ingroup AuthAPI
-extern void authenticateAuthUserRequestRemoveIp(AuthUserRequest *, IpAddress const &);
+extern void authenticateAuthUserRequestRemoveIp(AuthUserRequest *, SquidIpAddress const &);
 /// \ingroup AuthAPI
 extern void authenticateAuthUserRequestClearIp(AuthUserRequest *);
 /// \ingroup AuthAPI
diff --git a/src/auth/digest/auth_digest.cc b/src/auth/digest/auth_digest.cc
index 933ad0a..87f5c87 100644
--- a/src/auth/digest/auth_digest.cc
+++ b/src/auth/digest/auth_digest.cc
@@ -678,7 +678,7 @@ AuthDigestUserRequest::authenticate(HttpRequest * request, ConnStateData * conn,
             } else {
                 const char *useragent = request->header.getStr(HDR_USER_AGENT);
 
-                static IpAddress last_broken_addr;
+                static SquidIpAddress last_broken_addr;
                 static int seen_broken_client = 0;
 
                 if (!seen_broken_client) {
diff --git a/src/cache_cf.cc b/src/cache_cf.cc
index 17d11db..088460b 100644
--- a/src/cache_cf.cc
+++ b/src/cache_cf.cc
@@ -1107,14 +1107,14 @@ free_acl_access(acl_access ** head)
 }
 
 static void
-dump_address(StoreEntry * entry, const char *name, IpAddress &addr)
+dump_address(StoreEntry * entry, const char *name, SquidIpAddress &addr)
 {
     char buf[MAX_IPSTRLEN];
     storeAppendPrintf(entry, "%s %s\n", name, addr.NtoA(buf,MAX_IPSTRLEN) );
 }
 
 static void
-parse_address(IpAddress *addr)
+parse_address(SquidIpAddress *addr)
 {
     char *token = strtok(NULL, w_space);
 
@@ -1134,7 +1134,7 @@ parse_address(IpAddress *addr)
 }
 
 static void
-free_address(IpAddress *addr)
+free_address(SquidIpAddress *addr)
 {
     addr->SetEmpty();
 }
@@ -2956,7 +2956,7 @@ parse_IpAddress_list_token(IpAddress_list ** head, char *token)
     char *host;
     char *tmp;
 
-    IpAddress ipa;
+    SquidIpAddress ipa;
     unsigned short port;
     IpAddress_list *s;
 
diff --git a/src/client_db.cc b/src/client_db.cc
index b91c034..1aea7c0 100644
--- a/src/client_db.cc
+++ b/src/client_db.cc
@@ -44,7 +44,7 @@
 
 static hash_table *client_table = NULL;
 
-static ClientInfo *clientdbAdd(const IpAddress &addr);
+static ClientInfo *clientdbAdd(const SquidIpAddress &addr);
 static FREE clientdbFreeItem;
 static void clientdbStartGC(void);
 static void clientdbScheduledGC(void *);
@@ -58,7 +58,7 @@ static int cleanup_removed;
 
 static ClientInfo *
 
-clientdbAdd(const IpAddress &addr)
+clientdbAdd(const SquidIpAddress &addr)
 {
     ClientInfo *c;
     char *buf = new char[MAX_IPSTRLEN];
@@ -96,7 +96,7 @@ clientdbInit(void)
 }
 
 void
-clientdbUpdate(const IpAddress &addr, log_type ltype, protocol_t p, size_t size)
+clientdbUpdate(const SquidIpAddress &addr, log_type ltype, protocol_t p, size_t size)
 {
     char key[MAX_IPSTRLEN];
     ClientInfo *c;
@@ -140,7 +140,7 @@ clientdbUpdate(const IpAddress &addr, log_type ltype, protocol_t p, size_t size)
  * -1.  To get the current value, simply call with delta = 0.
  */
 int
-clientdbEstablished(const IpAddress &addr, int delta)
+clientdbEstablished(const SquidIpAddress &addr, int delta)
 {
     char key[MAX_IPSTRLEN];
     ClientInfo *c;
@@ -167,7 +167,7 @@ clientdbEstablished(const IpAddress &addr, int delta)
 #define CUTOFF_SECONDS 3600
 int
 
-clientdbCutoffDenied(const IpAddress &addr)
+clientdbCutoffDenied(const SquidIpAddress &addr)
 {
     char key[MAX_IPSTRLEN];
     int NR;
@@ -381,8 +381,8 @@ clientdbStartGC(void)
 
 #if SQUID_SNMP
 
-IpAddress *
-client_entry(IpAddress *current)
+SquidIpAddress *
+client_entry(SquidIpAddress *current)
 {
     ClientInfo *c = NULL;
     char key[MAX_IPSTRLEN];
@@ -415,7 +415,7 @@ snmp_meshCtblFn(variable_list * Var, snint * ErrP)
 {
     char key[MAX_IPSTRLEN];
     ClientInfo *c = NULL;
-    IpAddress keyIp;
+    SquidIpAddress keyIp;
 
     *ErrP = SNMP_ERR_NOERROR;
     MemBuf tmp;
diff --git a/src/client_side.cc b/src/client_side.cc
index d156b88..1338880 100644
--- a/src/client_side.cc
+++ b/src/client_side.cc
@@ -183,7 +183,7 @@ static void connNoteUseOfBuffer(ConnStateData* conn, size_t byteCount);
 static int connKeepReadingIncompleteRequest(ConnStateData * conn);
 static void connCancelIncompleteRequests(ConnStateData * conn);
 
-static ConnStateData *connStateCreate(const IpAddress &peer, const IpAddress &me, int fd, http_port_list *port);
+static ConnStateData *connStateCreate(const SquidIpAddress &peer, const SquidIpAddress &me, int fd, http_port_list *port);
 
 
 int
@@ -3078,7 +3078,7 @@ okToAccept()
 }
 
 ConnStateData *
-connStateCreate(const IpAddress &peer, const IpAddress &me, int fd, http_port_list *port)
+connStateCreate(const SquidIpAddress &peer, const SquidIpAddress &me, int fd, http_port_list *port)
 {
     ConnStateData *result = new ConnStateData;
 
@@ -3091,7 +3091,7 @@ connStateCreate(const IpAddress &peer, const IpAddress &me, int fd, http_port_li
     result->port = cbdataReference(port);
 
     if (port->intercepted || port->spoof_client_ip) {
-        IpAddress client, dst;
+        SquidIpAddress client, dst;
 
         if (IpInterceptor.NatLookup(fd, me, peer, client, dst) == 0) {
             result->me = client;
diff --git a/src/client_side.h b/src/client_side.h
index 9f5f07a..fb9577d 100644
--- a/src/client_side.h
+++ b/src/client_side.h
@@ -185,11 +185,11 @@ public:
      */
     ClientSocketContext::Pointer currentobject;
 
-    IpAddress peer;
+    SquidIpAddress peer;
 
-    IpAddress me;
+    SquidIpAddress me;
 
-    IpAddress log_addr;
+    SquidIpAddress log_addr;
     char rfc931[USER_IDENT_SZ];
     int nrequests;
 
diff --git a/src/client_side_reply.cc b/src/client_side_reply.cc
index c7e3f81..75fa608 100644
--- a/src/client_side_reply.cc
+++ b/src/client_side_reply.cc
@@ -64,7 +64,7 @@ CBDATA_CLASS_INIT(clientReplyContext);
 
 /* Local functions */
 extern "C" CSS clientReplyStatus;
-extern ErrorState *clientBuildError(err_type, http_status, char const *, IpAddress &, HttpRequest *);
+extern ErrorState *clientBuildError(err_type, http_status, char const *, SquidIpAddress &, HttpRequest *);
 
 /* privates */
 
@@ -94,7 +94,7 @@ clientReplyContext::clientReplyContext(ClientHttpRequest *clientContext) : http
 void
 clientReplyContext::setReplyToError(
     err_type err, http_status status, const HttpRequestMethod& method, char const *uri,
-    IpAddress &addr, HttpRequest * failedrequest, const char *unparsedrequest,
+    SquidIpAddress &addr, HttpRequest * failedrequest, const char *unparsedrequest,
     AuthUserRequest * auth_user_request)
 {
     ErrorState *errstate =
@@ -1797,7 +1797,7 @@ clientReplyContext::next() const
 void
 clientReplyContext::sendBodyTooLargeError()
 {
-    IpAddress tmp_noaddr;
+    SquidIpAddress tmp_noaddr;
     tmp_noaddr.SetNoAddr(); // TODO: make a global const
     http->logType = LOG_TCP_DENIED_REPLY;
     ErrorState *err = clientBuildError(ERR_TOO_BIG, HTTP_FORBIDDEN, NULL,
@@ -1920,7 +1920,7 @@ clientReplyContext::processReplyAccessResult(bool accessAllowed)
         if (page_id == ERR_NONE)
             page_id = ERR_ACCESS_DENIED;
 
-        IpAddress tmp_noaddr;
+        SquidIpAddress tmp_noaddr;
         tmp_noaddr.SetNoAddr();
         err = clientBuildError(page_id, HTTP_FORBIDDEN, NULL,
                                http->getConn() != NULL ? http->getConn()->peer : tmp_noaddr,
@@ -2151,7 +2151,7 @@ clientReplyContext::createStoreEntry(const HttpRequestMethod& m, request_flags r
 
 ErrorState *
 clientBuildError(err_type page_id, http_status status, char const *url,
-                 IpAddress &src_addr, HttpRequest * request)
+                 SquidIpAddress &src_addr, HttpRequest * request)
 {
     ErrorState *err = errorCon(page_id, status, request);
     err->src_addr = src_addr;
diff --git a/src/client_side_reply.h b/src/client_side_reply.h
index c979fe4..221161f 100644
--- a/src/client_side_reply.h
+++ b/src/client_side_reply.h
@@ -38,7 +38,7 @@
 #include "client_side_request.h"
 
 class ErrorState;
-class IpAddress;
+class SquidIpAddress;
 
 /* XXX make static method */
 
@@ -72,7 +72,7 @@ public:
     int storeOKTransferDone() const;
     int storeNotOKTransferDone() const;
 
-    void setReplyToError(err_type, http_status, const HttpRequestMethod&, char const *, IpAddress &, HttpRequest *, const char *, AuthUserRequest *);
+    void setReplyToError(err_type, http_status, const HttpRequestMethod&, char const *, SquidIpAddress &, HttpRequest *, const char *, AuthUserRequest *);
     void createStoreEntry(const HttpRequestMethod& m, request_flags flags);
     void removeStoreReference(store_client ** scp, StoreEntry ** ep);
     void removeClientStoreReference(store_client **scp, ClientHttpRequest *http);
diff --git a/src/client_side_request.cc b/src/client_side_request.cc
index 531e437..803feb4 100644
--- a/src/client_side_request.cc
+++ b/src/client_side_request.cc
@@ -452,7 +452,7 @@ clientFollowXForwardedForCheck(int answer, void *data)
         const char *p;
         const char *asciiaddr;
         int l;
-        IpAddress addr;
+        SquidIpAddress addr;
         p = request->x_forwarded_for_iterator.termedBuf();
         l = request->x_forwarded_for_iterator.size();
 
@@ -628,7 +628,7 @@ ClientRequestContext::clientAccessCheckDone(int answer)
         clientStreamNode *node = (clientStreamNode *)http->client_stream.tail->prev->data;
         clientReplyContext *repContext = dynamic_cast<clientReplyContext *>(node->data.getRaw());
         assert (repContext);
-        IpAddress tmpnoaddr;
+        SquidIpAddress tmpnoaddr;
         tmpnoaddr.SetNoAddr();
         repContext->setReplyToError(page_id, status,
                                     http->request->method, NULL,
@@ -1579,7 +1579,7 @@ ClientHttpRequest::handleAdaptationFailure(bool bypassable)
     // The original author of the code also wanted to pass an errno to
     // setReplyToError, but it seems unlikely that the errno reflects the
     // true cause of the error at this point, so I did not pass it.
-    IpAddress noAddr;
+    SquidIpAddress noAddr;
     noAddr.SetNoAddr();
     ConnStateData * c = getConn();
     repContext->setReplyToError(ERR_ICAP_FAILURE, HTTP_INTERNAL_SERVER_ERROR,
diff --git a/src/comm.cc b/src/comm.cc
index aff238b..c864653 100644
--- a/src/comm.cc
+++ b/src/comm.cc
@@ -208,11 +208,11 @@ public:
 // defaults given by client
     char *host;
     unsigned short default_port;
-    IpAddress default_addr;
+    SquidIpAddress default_addr;
     // NP: CANNOT store the default addr:port together as it gets set/reset differently.
 
     DnsLookupDetails dns; ///< host lookup details
-    IpAddress S;
+    SquidIpAddress S;
     AsyncCall::Pointer callback;
 
     int fd;
@@ -498,7 +498,7 @@ comm_read_cancel(int fd, AsyncCall::Pointer &callback)
  * synchronous wrapper around udp socket functions
  */
 int
-comm_udp_recvfrom(int fd, void *buf, size_t len, int flags, IpAddress &from)
+comm_udp_recvfrom(int fd, void *buf, size_t len, int flags, SquidIpAddress &from)
 {
     statCounter.syscalls.sock.recvfroms++;
     int x = 0;
@@ -522,7 +522,7 @@ comm_udp_recvfrom(int fd, void *buf, size_t len, int flags, IpAddress &from)
 int
 comm_udp_recv(int fd, void *buf, size_t len, int flags)
 {
-    IpAddress nul;
+    SquidIpAddress nul;
     return comm_udp_recvfrom(fd, buf, len, flags, nul);
 }
 
@@ -549,7 +549,7 @@ comm_has_incomplete_write(int fd)
 unsigned short
 comm_local_port(int fd)
 {
-    IpAddress temp;
+    SquidIpAddress temp;
     struct addrinfo *addr = NULL;
     fde *F = &fd_table[fd];
 
@@ -614,7 +614,7 @@ commBind(int s, struct addrinfo &inaddr)
 int
 comm_open(int sock_type,
           int proto,
-          IpAddress &addr,
+          SquidIpAddress &addr,
           int flags,
           const char *note)
 {
@@ -624,7 +624,7 @@ comm_open(int sock_type,
 int
 comm_open_listener(int sock_type,
                    int proto,
-                   IpAddress &addr,
+                   SquidIpAddress &addr,
                    int flags,
                    const char *note)
 {
@@ -699,7 +699,7 @@ comm_set_transparent(int fd)
 int
 comm_openex(int sock_type,
             int proto,
-            IpAddress &addr,
+            SquidIpAddress &addr,
             int flags,
             unsigned char TOS,
             const char *note)
@@ -1229,7 +1229,7 @@ int commSetTimeout(int fd, int timeout, AsyncCall::Pointer &callback)
 }
 
 int
-comm_connect_addr(int sock, const IpAddress &address)
+comm_connect_addr(int sock, const SquidIpAddress &address)
 {
     comm_err_t status = COMM_OK;
     fde *F = &fd_table[sock];
@@ -1653,7 +1653,7 @@ _comm_close(int fd, char const *file, int line)
 /* Send a udp datagram to specified TO_ADDR. */
 int
 comm_udp_sendto(int fd,
-                const IpAddress &to_addr,
+                const SquidIpAddress &to_addr,
                 const void *buf,
                 int len)
 {
diff --git a/src/comm.h b/src/comm.h
index 2c9a5bc..d1e58ef 100644
--- a/src/comm.h
+++ b/src/comm.h
@@ -49,11 +49,11 @@ SQUIDCEXTERN void comm_lingering_close(int fd);
 SQUIDCEXTERN void commConnectStart(int fd, const char *, unsigned short, CNCB *, void *);
 void commConnectStart(int fd, const char *, unsigned short, AsyncCall::Pointer &cb);
 
-SQUIDCEXTERN int comm_connect_addr(int sock, const IpAddress &addr);
+SQUIDCEXTERN int comm_connect_addr(int sock, const SquidIpAddress &addr);
 SQUIDCEXTERN void comm_init(void);
 SQUIDCEXTERN void comm_exit(void);
 
-SQUIDCEXTERN int comm_open(int, int, IpAddress &, int, const char *note);
+SQUIDCEXTERN int comm_open(int, int, SquidIpAddress &, int, const char *note);
 
 /**
  * Open a port specially bound for listening or sending through a specific port.
@@ -70,16 +70,16 @@ SQUIDCEXTERN int comm_open(int, int, IpAddress &, int, const char *note);
  * (in debugs or cachemgr) will occur in Native IPv4 format.
  * A reconfigure is needed to reset the stored IP in most cases and attempt a port re-open.
  */
-SQUIDCEXTERN int comm_open_listener(int sock_type, int proto, IpAddress &addr, int flags, const char *note);
+SQUIDCEXTERN int comm_open_listener(int sock_type, int proto, SquidIpAddress &addr, int flags, const char *note);
 
-SQUIDCEXTERN int comm_openex(int, int, IpAddress &, int, unsigned char TOS, const char *);
+SQUIDCEXTERN int comm_openex(int, int, SquidIpAddress &, int, unsigned char TOS, const char *);
 SQUIDCEXTERN unsigned short comm_local_port(int fd);
 SQUIDCEXTERN int comm_set_tos(int fd, int tos);
 
 SQUIDCEXTERN void commSetSelect(int, unsigned int, PF *, void *, time_t);
 SQUIDCEXTERN void commResetSelect(int);
 
-SQUIDCEXTERN int comm_udp_sendto(int sock, const IpAddress &to, const void *buf, int buflen);
+SQUIDCEXTERN int comm_udp_sendto(int sock, const SquidIpAddress &to, const void *buf, int buflen);
 extern void comm_write(int fd, const char *buf, int len, IOCB *callback, void *callback_data, FREE *func);
 extern void comm_write(int fd, const char *buf, int size, AsyncCall::Pointer &callback, FREE * free_func = NULL);
 SQUIDCEXTERN void comm_write_mbuf(int fd, MemBuf *mb, IOCB * handler, void *handler_data);
@@ -115,7 +115,7 @@ extern void comm_read(int fd, char *buf, int len, IOCB *handler, void *data);
 extern void comm_read(int fd, char *buf, int len, AsyncCall::Pointer &callback);
 extern void comm_read_cancel(int fd, IOCB *callback, void *data);
 extern void comm_read_cancel(int fd, AsyncCall::Pointer &callback);
-extern int comm_udp_recvfrom(int fd, void *buf, size_t len, int flags, IpAddress &from);
+extern int comm_udp_recvfrom(int fd, void *buf, size_t len, int flags, SquidIpAddress &from);
 extern int comm_udp_recv(int fd, void *buf, size_t len, int flags);
 extern ssize_t comm_udp_send(int s, const void *buf, size_t len, int flags);
 extern bool comm_has_incomplete_write(int);
diff --git a/src/delay_pools.cc b/src/delay_pools.cc
index da7c0b3..6cf8fc9 100644
--- a/src/delay_pools.cc
+++ b/src/delay_pools.cc
@@ -159,7 +159,7 @@ protected:
 
     virtual char const *label() const = 0;
 
-    virtual unsigned int makeKey(IpAddress &src_addr) const = 0;
+    virtual unsigned int makeKey(SquidIpAddress &src_addr) const = 0;
 
     DelaySpec spec;
 
@@ -190,7 +190,7 @@ public:
 
 protected:
     virtual char const *label() const {return "Individual";}
-    virtual unsigned int makeKey(IpAddress &src_addr) const;
+    virtual unsigned int makeKey(SquidIpAddress &src_addr) const;
 };
 
 /// \ingroup DelayPoolsInternal
@@ -203,7 +203,7 @@ public:
 
 protected:
     virtual char const *label() const {return "Network";}
-    virtual unsigned int makeKey (IpAddress &src_addr) const;
+    virtual unsigned int makeKey (SquidIpAddress &src_addr) const;
 };
 
 /* don't use remote storage for these */
@@ -247,9 +247,9 @@ protected:
 
     virtual char const *label() const {return "Individual";}
 
-    virtual unsigned int makeKey (IpAddress &src_addr) const;
+    virtual unsigned int makeKey (SquidIpAddress &src_addr) const;
 
-    unsigned char makeHostKey (IpAddress &src_addr) const;
+    unsigned char makeHostKey (SquidIpAddress &src_addr) const;
 
     DelaySpec spec;
     VectorMap<unsigned char, ClassCBucket> buckets;
@@ -855,7 +855,7 @@ VectorPool::Id::bytesIn(int qty)
 }
 
 unsigned int
-IndividualPool::makeKey (IpAddress &src_addr) const
+IndividualPool::makeKey (SquidIpAddress &src_addr) const
 {
     /* IPv4 required for this pool */
     if ( !src_addr.IsIPv4() )
@@ -881,7 +881,7 @@ ClassCNetPool::operator delete (void *address)
 }
 
 unsigned int
-ClassCNetPool::makeKey (IpAddress &src_addr) const
+ClassCNetPool::makeKey (SquidIpAddress &src_addr) const
 {
     /* IPv4 required for this pool */
     if ( !src_addr.IsIPv4() )
@@ -954,7 +954,7 @@ ClassCHostPool::keyAllocated (unsigned char const key) const
 }
 
 unsigned char
-ClassCHostPool::makeHostKey (IpAddress &src_addr) const
+ClassCHostPool::makeHostKey (SquidIpAddress &src_addr) const
 {
     /* IPv4 required for this pool */
     if ( !src_addr.IsIPv4() )
@@ -967,7 +967,7 @@ ClassCHostPool::makeHostKey (IpAddress &src_addr) const
 }
 
 unsigned int
-ClassCHostPool::makeKey (IpAddress &src_addr) const
+ClassCHostPool::makeKey (SquidIpAddress &src_addr) const
 {
     /* IPv4 required for this pool */
     if ( !src_addr.IsIPv4() )
diff --git a/src/dns_internal.cc b/src/dns_internal.cc
index 52087de..06d5e1a 100644
--- a/src/dns_internal.cc
+++ b/src/dns_internal.cc
@@ -138,7 +138,7 @@ struct _nsvc {
 };
 
 struct _ns {
-    IpAddress S;
+    SquidIpAddress S;
     int nqueries;
     int nreplies;
     nsvc *vc;
@@ -181,7 +181,7 @@ static void idnsSendQuery(idns_query * q);
 static IOCB idnsReadVCHeader;
 static void idnsDoSendQueryVC(nsvc *vc);
 
-static int idnsFromKnownNameserver(IpAddress const &from);
+static int idnsFromKnownNameserver(SquidIpAddress const &from);
 static idns_query *idnsFindQuery(unsigned short id);
 static void idnsGrokReply(const char *buf, size_t sz);
 static PF idnsRead;
@@ -192,7 +192,7 @@ static void idnsRcodeCount(int, int);
 static void
 idnsAddNameserver(const char *buf)
 {
-    IpAddress A;
+    SquidIpAddress A;
 
     if (!(A = buf)) {
         debugs(78, 0, "WARNING: rejecting '" << buf << "' as a name server, because it is not a numeric IP address");
@@ -745,7 +745,7 @@ idnsInitVC(int ns)
     nameservers[ns].vc = vc;
     vc->ns = ns;
 
-    IpAddress addr;
+    SquidIpAddress addr;
 
     if (!Config.Addrs.udp_outgoing.IsNoAddr())
         addr = Config.Addrs.udp_outgoing;
@@ -863,7 +863,7 @@ idnsSendQuery(idns_query * q)
 }
 
 static int
-idnsFromKnownNameserver(IpAddress const &from)
+idnsFromKnownNameserver(SquidIpAddress const &from)
 {
     int i;
 
@@ -1163,7 +1163,7 @@ idnsRead(int fd, void *data)
     int max = INCOMING_DNS_MAX;
     static char rbuf[SQUID_UDP_SO_RCVBUF];
     int ns;
-    IpAddress from;
+    SquidIpAddress from;
 
     debugs(78, 3, "idnsRead: starting with FD " << fd);
 
@@ -1178,7 +1178,7 @@ idnsRead(int fd, void *data)
      *  The cause of this is still unknown, however copying the data appears
      *  to allow it to be passed further without this erasure.
      */
-    IpAddress bugbypass;
+    SquidIpAddress bugbypass;
 
     while (max--) {
         len = comm_udp_recvfrom(fd, rbuf, SQUID_UDP_SO_RCVBUF, 0, bugbypass);
@@ -1386,14 +1386,14 @@ idnsInit(void)
     CBDATA_INIT_TYPE(idns_query);
 
     if (DnsSocketA < 0 && DnsSocketB < 0) {
-        IpAddress addrA; // since we don't want to alter Config.Addrs.udp_* and dont have one of our own.
+        SquidIpAddress addrA; // since we don't want to alter Config.Addrs.udp_* and dont have one of our own.
 
         if (!Config.Addrs.udp_outgoing.IsNoAddr())
             addrA = Config.Addrs.udp_outgoing;
         else
             addrA = Config.Addrs.udp_incoming;
 
-        IpAddress addrB = addrA;
+        SquidIpAddress addrB = addrA;
         addrA.SetIPv4();
 
         if (Ip::EnableIpv6 && addrB.IsIPv6()) {
@@ -1591,7 +1591,7 @@ idnsALookup(const char *name, IDNSCB * callback, void *data)
 }
 
 void
-idnsPTRLookup(const IpAddress &addr, IDNSCB * callback, void *data)
+idnsPTRLookup(const SquidIpAddress &addr, IDNSCB * callback, void *data)
 {
     idns_query *q;
 
diff --git a/src/errorpage.h b/src/errorpage.h
index 4d58370..1b9e8df 100644
--- a/src/errorpage.h
+++ b/src/errorpage.h
@@ -136,7 +136,7 @@ public:
     String dnsError; ///< DNS lookup error message
     time_t ttl;
 
-    IpAddress src_addr;
+    SquidIpAddress src_addr;
     char *redirect_url;
     ERCB *callback;
     void *callback_data;
diff --git a/src/esi/Esi.cc b/src/esi/Esi.cc
index a456bdb..cbbef95 100644
--- a/src/esi/Esi.cc
+++ b/src/esi/Esi.cc
@@ -1441,7 +1441,7 @@ ESIContext::freeResources ()
     /* don't touch incoming, it's a pointer into buffered anyway */
 }
 
-extern ErrorState *clientBuildError (err_type, http_status, char const *, IpAddress &, HttpRequest *);
+extern ErrorState *clientBuildError (err_type, http_status, char const *, SquidIpAddress &, HttpRequest *);
 
 
 /* This can ONLY be used before we have sent *any* data to the client */
diff --git a/src/external_acl.cc b/src/external_acl.cc
index 10da9d8..d749718 100644
--- a/src/external_acl.cc
+++ b/src/external_acl.cc
@@ -131,7 +131,7 @@ public:
         QUOTE_METHOD_URL
     } quote;
 
-    IpAddress local_addr;
+    SquidIpAddress local_addr;
 };
 
 struct _external_acl_format {
diff --git a/src/fde.h b/src/fde.h
index 8bad6ca..435f9ec 100644
--- a/src/fde.h
+++ b/src/fde.h
@@ -55,7 +55,7 @@ public:
     unsigned int type;
     unsigned short remote_port;
 
-    IpAddress local_addr;
+    SquidIpAddress local_addr;
     unsigned char tos;
     int sock_family;
     char ipaddr[MAX_IPSTRLEN];            /* dotted decimal address of peer */
@@ -121,7 +121,7 @@ private:
         halfClosedReader = NULL;
         // XXX: the following memset may corrupt or leak new or changed members
         memset(this, 0, sizeof(fde));
-        local_addr.SetEmpty(); // IpAddress likes to be setup nicely.
+        local_addr.SetEmpty(); // SquidIpAddress likes to be setup nicely.
     }
 
 };
diff --git a/src/forward.cc b/src/forward.cc
index 7645324..a011649 100644
--- a/src/forward.cc
+++ b/src/forward.cc
@@ -798,9 +798,9 @@ FwdState::connectStart()
     int ctimeout;
     int ftimeout = Config.Timeout.forward - (squid_curtime - start_t);
 
-    IpAddress outgoing;
+    SquidIpAddress outgoing;
     unsigned short tos;
-    IpAddress client_addr;
+    SquidIpAddress client_addr;
     assert(fs);
     assert(server_fd == -1);
     debugs(17, 3, "fwdConnectStart: " << url);
@@ -1266,7 +1266,7 @@ FwdState::reforwardableStatus(http_status s)
  *  -  address of the client for which we made the connection
  */
 void
-FwdState::pconnPush(int fd, const peer *_peer, const HttpRequest *req, const char *domain, IpAddress &client_addr)
+FwdState::pconnPush(int fd, const peer *_peer, const HttpRequest *req, const char *domain, SquidIpAddress &client_addr)
 {
     if (_peer) {
         fwdPconnPool->push(fd, _peer->name, _peer->http_port, domain, client_addr);
@@ -1380,12 +1380,12 @@ fwdServerFree(FwdServer * fs)
     memFree(fs, MEM_FWD_SERVER);
 }
 
-static IpAddress
+static SquidIpAddress
 aclMapAddr(acl_address * head, ACLChecklist * ch)
 {
     acl_address *l;
 
-    IpAddress addr;
+    SquidIpAddress addr;
 
     for (l = head; l; l = l->next) {
         if (!l->aclList || ch->matchAclListFast(l->aclList))
@@ -1413,7 +1413,7 @@ aclMapTOS(acl_tos * head, ACLChecklist * ch)
     return 0;
 }
 
-IpAddress
+SquidIpAddress
 getOutgoingAddr(HttpRequest * request, struct peer *dst_peer)
 {
     if (request && request->flags.spoof_client_ip) {
@@ -1423,7 +1423,7 @@ getOutgoingAddr(HttpRequest * request, struct peer *dst_peer)
     }
 
     if (!Config.accessList.outgoing_address) {
-        return IpAddress(); // anything will do.
+        return SquidIpAddress(); // anything will do.
     }
 
     ACLFilledChecklist ch(NULL, request, NULL);
diff --git a/src/forward.h b/src/forward.h
index 4023774..a217f65 100644
--- a/src/forward.h
+++ b/src/forward.h
@@ -44,7 +44,7 @@ public:
     bool checkRetry();
     bool checkRetriable();
     void dispatch();
-    void pconnPush(int fd, const peer *_peer, const HttpRequest *req, const char *domain, IpAddress &client_addr);
+    void pconnPush(int fd, const peer *_peer, const HttpRequest *req, const char *domain, SquidIpAddress &client_addr);
 
     bool dontRetry() { return flags.dont_retry; }
 
@@ -101,7 +101,7 @@ private:
         unsigned int forward_completed:1;
     } flags;
 
-    IpAddress src; /* Client address for this connection. Needed for transparent operations. */
+    SquidIpAddress src; /* Client address for this connection. Needed for transparent operations. */
 
     // NP: keep this last. It plays with private/public
     CBDATA_CLASS2(FwdState);
diff --git a/src/fqdncache.cc b/src/fqdncache.cc
index 6a79b5f..4fae189 100644
--- a/src/fqdncache.cc
+++ b/src/fqdncache.cc
@@ -526,7 +526,7 @@ fqdncacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error
  * 			and does not affect the FQDN cache.
  */
 void
-fqdncache_nbgethostbyaddr(IpAddress &addr, FQDNH * handler, void *handlerData)
+fqdncache_nbgethostbyaddr(SquidIpAddress &addr, FQDNH * handler, void *handlerData)
 {
     fqdncache_entry *f = NULL;
     char name[MAX_IPSTRLEN];
@@ -644,7 +644,7 @@ fqdncache_init(void)
  *
  */
 const char *
-fqdncache_gethostbyaddr(IpAddress &addr, int flags)
+fqdncache_gethostbyaddr(SquidIpAddress &addr, int flags)
 {
     char name[MAX_IPSTRLEN];
     fqdncache_entry *f = NULL;
@@ -752,7 +752,7 @@ dummy_handler(const char *, const DnsLookupDetails &, void *)
 
 /// \ingroup FQDNCacheAPI
 const char *
-fqdnFromAddr(IpAddress &addr)
+fqdnFromAddr(SquidIpAddress &addr)
 {
     const char *n;
     static char buf[MAX_IPSTRLEN];
diff --git a/src/ftp.cc b/src/ftp.cc
index 5d4f5cd..a1eb048 100644
--- a/src/ftp.cc
+++ b/src/ftp.cc
@@ -2453,7 +2453,7 @@ ftpReadEPSV(FtpStateData* ftpState)
     int code = ftpState->ctrl.replycode;
     char h1, h2, h3, h4;
     unsigned short port;
-    IpAddress ipa_remote;
+    SquidIpAddress ipa_remote;
     int fd = ftpState->data.fd;
     char *buf;
     debugs(9, 3, HERE);
@@ -2575,7 +2575,7 @@ ftpReadEPSV(FtpStateData* ftpState)
 static void
 ftpSendPassive(FtpStateData * ftpState)
 {
-    IpAddress addr;
+    SquidIpAddress addr;
     struct addrinfo *AI = NULL;
 
     /** Checks the server control channel is still available before running. */
@@ -2758,7 +2758,7 @@ ftpReadPasv(FtpStateData * ftpState)
     int p1, p2;
     int n;
     unsigned short port;
-    IpAddress ipa_remote;
+    SquidIpAddress ipa_remote;
     int fd = ftpState->data.fd;
     char *buf;
     LOCAL_ARRAY(char, ipaddr, 1024);
@@ -2866,7 +2866,7 @@ ftpOpenListenSocket(FtpStateData * ftpState, int fallback)
 {
     int fd;
 
-    IpAddress addr;
+    SquidIpAddress addr;
     struct addrinfo *AI = NULL;
     int on = 1;
     int x = 0;
@@ -2933,7 +2933,7 @@ ftpSendPORT(FtpStateData * ftpState)
 {
     int fd;
 
-    IpAddress ipa;
+    SquidIpAddress ipa;
     struct addrinfo *AI = NULL;
     unsigned char *addrptr;
     unsigned char *portptr;
@@ -3014,7 +3014,7 @@ ftpSendEPRT(FtpStateData * ftpState)
     }
 
     int fd;
-    IpAddress addr;
+    SquidIpAddress addr;
     struct addrinfo *AI = NULL;
     char buf[MAX_IPSTRLEN];
 
diff --git a/src/globals.h b/src/globals.h
index 5145c5a..a3b364a 100644
--- a/src/globals.h
+++ b/src/globals.h
@@ -114,8 +114,8 @@ extern "C" {
 
     extern struct acl_deny_info_list *DenyInfoList;	/* NULL */
 
-//MOVED:icp_v2.cc    extern IpAddress theOutICPAddr;
-//MOVED:snmp_core.cc    extern IpAddress theOutSNMPAddr;
+//MOVED:icp_v2.cc    extern SquidIpAddress theOutICPAddr;
+//MOVED:snmp_core.cc    extern SquidIpAddress theOutSNMPAddr;
 
     extern struct timeval squid_start;
     extern int shutting_down;	/* 0 */
diff --git a/src/helper.h b/src/helper.h
index 317f024..4573b58 100644
--- a/src/helper.h
+++ b/src/helper.h
@@ -62,7 +62,7 @@ struct _helper {
     int n_running;            ///< Total helper children objects currently existing
     int n_active;             ///< Count of helper children active (not shutting down)
     int ipc_type;
-    IpAddress addr;
+    SquidIpAddress addr;
     unsigned int concurrency;
     time_t last_queue_warn;
     time_t last_restart;
@@ -85,7 +85,7 @@ struct _helper_stateful {
     int n_running;            ///< Total helper children objects currently existing
     int n_active;             ///< Count of helper children active (not shutting down)
     int ipc_type;
-    IpAddress addr;
+    SquidIpAddress addr;
     MemAllocator *datapool;
     HLPSAVAIL *IsAvailable;
     HLPSONEQ *OnEmptyQueue;
@@ -104,7 +104,7 @@ struct _helper_stateful {
 struct _helper_server {
     int index;
     int pid;
-    IpAddress addr;
+    SquidIpAddress addr;
     int rfd;
     int wfd;
     MemBuf *wqueue;
@@ -140,7 +140,7 @@ class helper_stateful_request;
 struct _helper_stateful_server {
     int index;
     int pid;
-    IpAddress addr;
+    SquidIpAddress addr;
     int rfd;
     int wfd;
     /* MemBuf wqueue; */
diff --git a/src/htcp.cc b/src/htcp.cc
index e3b0e89..9c423f3 100644
--- a/src/htcp.cc
+++ b/src/htcp.cc
@@ -154,7 +154,7 @@ public:
     void checkHit();
     void checkedHit(StoreEntry *e);
 
-    void setFrom (IpAddress &from);
+    void setFrom (SquidIpAddress &from);
     void setDataHeader (htcpDataHeader *);
     char *method;
     char *uri;
@@ -165,7 +165,7 @@ public:
 private:
     HttpRequest *checkHitRequest;
 
-    IpAddress from; // was a ptr. return to such IFF needed. otherwise copy should do.
+    SquidIpAddress from; // was a ptr. return to such IFF needed. otherwise copy should do.
     htcpDataHeader *dhdr;
 };
 
@@ -233,7 +233,7 @@ static int htcpOutSocket = -1;
 static u_int32_t queried_id[N_QUERIED_KEYS];
 static cache_key queried_keys[N_QUERIED_KEYS][SQUID_MD5_DIGEST_LENGTH];
 
-static IpAddress queried_addr[N_QUERIED_KEYS];
+static SquidIpAddress queried_addr[N_QUERIED_KEYS];
 static MemAllocator *htcpDetailPool = NULL;
 
 static int old_squid_format = 0;
@@ -252,26 +252,26 @@ static ssize_t htcpBuildTstOpData(char *buf, size_t buflen, htcpStuff * stuff);
 static void htcpFreeSpecifier(htcpSpecifier * s);
 static void htcpFreeDetail(htcpDetail * s);
 
-static void htcpHandleMsg(char *buf, int sz, IpAddress &from);
+static void htcpHandleMsg(char *buf, int sz, SquidIpAddress &from);
 
-static void htcpLogHtcp(IpAddress &, int, log_type, const char *);
-static void htcpHandleMon(htcpDataHeader *, char *buf, int sz, IpAddress &from);
+static void htcpLogHtcp(SquidIpAddress &, int, log_type, const char *);
+static void htcpHandleMon(htcpDataHeader *, char *buf, int sz, SquidIpAddress &from);
 
-static void htcpHandleNop(htcpDataHeader *, char *buf, int sz, IpAddress &from);
+static void htcpHandleNop(htcpDataHeader *, char *buf, int sz, SquidIpAddress &from);
 
-static void htcpHandleSet(htcpDataHeader *, char *buf, int sz, IpAddress &from);
+static void htcpHandleSet(htcpDataHeader *, char *buf, int sz, SquidIpAddress &from);
 
-static void htcpHandleTst(htcpDataHeader *, char *buf, int sz, IpAddress &from);
+static void htcpHandleTst(htcpDataHeader *, char *buf, int sz, SquidIpAddress &from);
 
 static void htcpRecv(int fd, void *data);
 
-static void htcpSend(const char *buf, int len, IpAddress &to);
+static void htcpSend(const char *buf, int len, SquidIpAddress &to);
 
-static void htcpTstReply(htcpDataHeader *, StoreEntry *, htcpSpecifier *, IpAddress &);
+static void htcpTstReply(htcpDataHeader *, StoreEntry *, htcpSpecifier *, SquidIpAddress &);
 
-static void htcpHandleTstRequest(htcpDataHeader *, char *buf, int sz, IpAddress &from);
+static void htcpHandleTstRequest(htcpDataHeader *, char *buf, int sz, SquidIpAddress &from);
 
-static void htcpHandleTstResponse(htcpDataHeader *, char *, int, IpAddress &);
+static void htcpHandleTstResponse(htcpDataHeader *, char *, int, SquidIpAddress &);
 
 static void
 htcpHexdump(const char *tag, const char *s, int sz)
@@ -594,7 +594,7 @@ htcpBuildPacket(char *buf, size_t buflen, htcpStuff * stuff)
 
 static void
 
-htcpSend(const char *buf, int len, IpAddress &to)
+htcpSend(const char *buf, int len, SquidIpAddress &to)
 {
     int x;
 
@@ -618,7 +618,7 @@ htcpSend(const char *buf, int len, IpAddress &to)
 
 void
 
-htcpSpecifier::setFrom (IpAddress &aSocket)
+htcpSpecifier::setFrom (SquidIpAddress &aSocket)
 {
     from = aSocket;
 }
@@ -848,7 +848,7 @@ htcpUnpackDetail(char *buf, int sz)
 }
 
 static int
-htcpAccessCheck(acl_access * acl, htcpSpecifier * s, IpAddress &from)
+htcpAccessCheck(acl_access * acl, htcpSpecifier * s, SquidIpAddress &from)
 {
     /* default deny if no access list present */
     if (!acl)
@@ -862,7 +862,7 @@ htcpAccessCheck(acl_access * acl, htcpSpecifier * s, IpAddress &from)
 }
 
 static void
-htcpTstReply(htcpDataHeader * dhdr, StoreEntry * e, htcpSpecifier * spec, IpAddress &from)
+htcpTstReply(htcpDataHeader * dhdr, StoreEntry * e, htcpSpecifier * spec, SquidIpAddress &from)
 {
     htcpStuff stuff;
     static char pkt[8192];
@@ -951,7 +951,7 @@ htcpTstReply(htcpDataHeader * dhdr, StoreEntry * e, htcpSpecifier * spec, IpAddr
 
 static void
 
-htcpClrReply(htcpDataHeader * dhdr, int purgeSucceeded, IpAddress &from)
+htcpClrReply(htcpDataHeader * dhdr, int purgeSucceeded, SquidIpAddress &from)
 {
     htcpStuff stuff;
     static char pkt[8192];
@@ -988,7 +988,7 @@ htcpClrReply(htcpDataHeader * dhdr, int purgeSucceeded, IpAddress &from)
 
 static void
 
-htcpHandleNop(htcpDataHeader * hdr, char *buf, int sz, IpAddress &from)
+htcpHandleNop(htcpDataHeader * hdr, char *buf, int sz, SquidIpAddress &from)
 {
     debugs(31, 3, "htcpHandleNop: Unimplemented");
 }
@@ -1085,7 +1085,7 @@ htcpClrStore(const htcpSpecifier * s)
 
 static void
 
-htcpHandleTst(htcpDataHeader * hdr, char *buf, int sz, IpAddress &from)
+htcpHandleTst(htcpDataHeader * hdr, char *buf, int sz, SquidIpAddress &from)
 {
     debugs(31, 3, "htcpHandleTst: sz = " << sz);
 
@@ -1100,12 +1100,12 @@ HtcpReplyData::HtcpReplyData() : hdr(hoHtcpReply)
 
 static void
 
-htcpHandleTstResponse(htcpDataHeader * hdr, char *buf, int sz, IpAddress &from)
+htcpHandleTstResponse(htcpDataHeader * hdr, char *buf, int sz, SquidIpAddress &from)
 {
     htcpReplyData htcpReply;
     cache_key *key = NULL;
 
-    IpAddress *peer;
+    SquidIpAddress *peer;
     htcpDetail *d = NULL;
     char *t;
 
@@ -1172,7 +1172,7 @@ htcpHandleTstResponse(htcpDataHeader * hdr, char *buf, int sz, IpAddress &from)
 
 static void
 
-htcpHandleTstRequest(htcpDataHeader * dhdr, char *buf, int sz, IpAddress &from)
+htcpHandleTstRequest(htcpDataHeader * dhdr, char *buf, int sz, SquidIpAddress &from)
 {
     /* buf should be a SPECIFIER */
     htcpSpecifier *s;
@@ -1233,20 +1233,20 @@ htcpSpecifier::checkedHit(StoreEntry *e)
 
 static void
 
-htcpHandleMon(htcpDataHeader * hdr, char *buf, int sz, IpAddress &from)
+htcpHandleMon(htcpDataHeader * hdr, char *buf, int sz, SquidIpAddress &from)
 {
     debugs(31, 3, "htcpHandleMon: Unimplemented");
 }
 
 static void
 
-htcpHandleSet(htcpDataHeader * hdr, char *buf, int sz, IpAddress &from)
+htcpHandleSet(htcpDataHeader * hdr, char *buf, int sz, SquidIpAddress &from)
 {
     debugs(31, 3, "htcpHandleSet: Unimplemented");
 }
 
 static void
-htcpHandleClr(htcpDataHeader * hdr, char *buf, int sz, IpAddress &from)
+htcpHandleClr(htcpDataHeader * hdr, char *buf, int sz, SquidIpAddress &from)
 {
     htcpSpecifier *s;
     /* buf[0/1] is reserved and reason */
@@ -1341,7 +1341,7 @@ htcpForwardClr(char *buf, int sz)
  * hands it off to other functions to break apart message-specific data.
  */
 static void
-htcpHandleMsg(char *buf, int sz, IpAddress &from)
+htcpHandleMsg(char *buf, int sz, SquidIpAddress &from)
 {
     htcpHeader htcpHdr;
     htcpDataHeader hdr;
@@ -1461,7 +1461,7 @@ htcpRecv(int fd, void *data)
 {
     static char buf[8192];
     int len;
-    static IpAddress from;
+    static SquidIpAddress from;
 
     /* Receive up to 8191 bytes, leaving room for a null */
 
@@ -1491,7 +1491,7 @@ htcpInit(void)
         return;
     }
 
-    IpAddress incomingAddr = Config.Addrs.udp_incoming;
+    SquidIpAddress incomingAddr = Config.Addrs.udp_incoming;
     incomingAddr.SetPort(Config.Port.htcp);
 
     if (!Ip::EnableIpv6 && !incomingAddr.SetIPv4()) {
@@ -1519,7 +1519,7 @@ htcpInit(void)
     debugs(31, 1, "Accepting HTCP messages on port " << Config.Port.htcp << ", FD " << htcpInSocket << ".");
 
     if (!Config.Addrs.udp_outgoing.IsNoAddr()) {
-        IpAddress outgoingAddr = Config.Addrs.udp_outgoing;
+        SquidIpAddress outgoingAddr = Config.Addrs.udp_outgoing;
         outgoingAddr.SetPort(Config.Port.htcp);
 
         if (!Ip::EnableIpv6 && !outgoingAddr.SetIPv4()) {
@@ -1730,7 +1730,7 @@ htcpSocketClose(void)
 }
 
 static void
-htcpLogHtcp(IpAddress &caddr, int opcode, log_type logcode, const char *url)
+htcpLogHtcp(SquidIpAddress &caddr, int opcode, log_type logcode, const char *url)
 {
     AccessLogEntry al;
     if (LOG_TAG_NONE == logcode)
diff --git a/src/htcp.h b/src/htcp.h
index bcbc00b..d7228a6 100644
--- a/src/htcp.h
+++ b/src/htcp.h
@@ -35,7 +35,7 @@
 #include "HttpHeader.h"
 #include "typedefs.h"
 
-class IpAddress;
+class SquidIpAddress;
 
 /// \ingroup ServerProtocolHTCP
 class HtcpReplyData
@@ -60,7 +60,7 @@ public:
 typedef class HtcpReplyData htcpReplyData;
 
 /// \ingroup ServerProtocolHTCP
-SQUIDCEXTERN void neighborsHtcpReply(const cache_key *, htcpReplyData *, const IpAddress &);
+SQUIDCEXTERN void neighborsHtcpReply(const cache_key *, htcpReplyData *, const SquidIpAddress &);
 
 /// \ingroup ServerProtocolHTCP
 SQUIDCEXTERN void htcpInit(void);
diff --git a/src/http.cc b/src/http.cc
index 4352b5e..4f052f6 100644
--- a/src/http.cc
+++ b/src/http.cc
@@ -1296,7 +1296,7 @@ void
 HttpStateData::processReplyBody()
 {
     AsyncCall::Pointer call;
-    IpAddress client_addr;
+    SquidIpAddress client_addr;
     bool ispinned = false;
 
     if (!flags.headers_parsed) {
diff --git a/src/icmp/Icmp.cc b/src/icmp/Icmp.cc
index c660197..94d1ff2 100644
--- a/src/icmp/Icmp.cc
+++ b/src/icmp/Icmp.cc
@@ -107,7 +107,7 @@ Icmp::ipHops(int ttl)
 }
 
 void
-Icmp::Log(const IpAddress &addr, const u_int8_t type, const char* pkt_str, const int rtt, const int hops)
+Icmp::Log(const SquidIpAddress &addr, const u_int8_t type, const char* pkt_str, const int rtt, const int hops)
 {
     debugs(42, 2, "pingerLog: " << std::setw(9) << current_time.tv_sec  <<
            "." << std::setfill('0') << std::setw(6) <<
diff --git a/src/icmp/Icmp.h b/src/icmp/Icmp.h
index f30d7f6..da936b0 100644
--- a/src/icmp/Icmp.h
+++ b/src/icmp/Icmp.h
@@ -45,7 +45,7 @@
 
 /* This is a line-data format struct. DO NOT alter. */
 struct pingerEchoData {
-    IpAddress to;
+    SquidIpAddress to;
     unsigned char opcode;
     int psize;
     char payload[PINGER_PAYLOAD_SZ];
@@ -53,7 +53,7 @@ struct pingerEchoData {
 
 /* This is a line-data format struct. DO NOT alter. */
 struct pingerReplyData {
-    IpAddress from;
+    SquidIpAddress from;
     unsigned char opcode;
     int rtt;
     int hops;
@@ -107,7 +107,7 @@ public:
      *                Content longer than MAX_PAYLOAD will be truncated.
      \param len       Length of the payload in bytes if any is to be sent or 0.
      */
-    virtual void SendEcho(IpAddress &to, int opcode, const char *payload=NULL, int len=0) =0;
+    virtual void SendEcho(SquidIpAddress &to, int opcode, const char *payload=NULL, int len=0) =0;
 
     /// Handle ICMP responses.
     virtual void Recv(void) =0;
@@ -135,7 +135,7 @@ protected:
     int ipHops(int ttl);
 
     /// Log the packet.
-    void Log(const IpAddress &addr, const u_int8_t type, const char* pkt_str, const int rtt, const int hops);
+    void Log(const SquidIpAddress &addr, const u_int8_t type, const char* pkt_str, const int rtt, const int hops);
 
     /* no use wasting memory */
     int icmp_sock;
diff --git a/src/icmp/Icmp4.cc b/src/icmp/Icmp4.cc
index 20382d0..92bb2b2 100644
--- a/src/icmp/Icmp4.cc
+++ b/src/icmp/Icmp4.cc
@@ -90,7 +90,7 @@ Icmp4::Open(void)
 }
 
 void
-Icmp4::SendEcho(IpAddress &to, int opcode, const char *payload, int len)
+Icmp4::SendEcho(SquidIpAddress &to, int opcode, const char *payload, int len)
 {
     int x;
     LOCAL_ARRAY(char, pkt, MAX_PKT4_SZ);
diff --git a/src/icmp/Icmp4.h b/src/icmp/Icmp4.h
index 101d563..b67f25c 100644
--- a/src/icmp/Icmp4.h
+++ b/src/icmp/Icmp4.h
@@ -170,7 +170,7 @@ public:
     virtual int Open();
 
 #if USE_ICMP
-    virtual void SendEcho(IpAddress &, int, const char*, int);
+    virtual void SendEcho(SquidIpAddress &, int, const char*, int);
     virtual void Recv(void);
 #endif
 };
diff --git a/src/icmp/Icmp6.cc b/src/icmp/Icmp6.cc
index 945916d..cb84858 100644
--- a/src/icmp/Icmp6.cc
+++ b/src/icmp/Icmp6.cc
@@ -133,7 +133,7 @@ Icmp6::Open(void)
  * Generates an RFC 4443 Icmp6 ECHO Packet and sends into the network.
  */
 void
-Icmp6::SendEcho(IpAddress &to, int opcode, const char *payload, int len)
+Icmp6::SendEcho(SquidIpAddress &to, int opcode, const char *payload, int len)
 {
     int x;
     LOCAL_ARRAY(char, pkt, MAX_PKT6_SZ);
diff --git a/src/icmp/Icmp6.h b/src/icmp/Icmp6.h
index 7b688f1..24599cd 100644
--- a/src/icmp/Icmp6.h
+++ b/src/icmp/Icmp6.h
@@ -74,7 +74,7 @@ public:
     virtual int Open();
 
 #if USE_ICMP
-    virtual void SendEcho(IpAddress &, int, const char*, int);
+    virtual void SendEcho(SquidIpAddress &, int, const char*, int);
     virtual void Recv(void);
 #endif
 };
diff --git a/src/icmp/IcmpPinger.h b/src/icmp/IcmpPinger.h
index f51609e..6bd1d8b 100644
--- a/src/icmp/IcmpPinger.h
+++ b/src/icmp/IcmpPinger.h
@@ -62,7 +62,7 @@ public:
 
 private:
     // unused in IcmpPinger
-    virtual void SendEcho(IpAddress &to, int opcode, const char *payload, int len) {};
+    virtual void SendEcho(SquidIpAddress &to, int opcode, const char *payload, int len) {};
 
     /**
      * Control channel(s) to squid.
diff --git a/src/icmp/IcmpSquid.cc b/src/icmp/IcmpSquid.cc
index 6250a67..d9ec784 100644
--- a/src/icmp/IcmpSquid.cc
+++ b/src/icmp/IcmpSquid.cc
@@ -70,7 +70,7 @@ IcmpSquid::~IcmpSquid()
 #if USE_ICMP
 
 void
-IcmpSquid::SendEcho(IpAddress &to, int opcode, const char *payload, int len)
+IcmpSquid::SendEcho(SquidIpAddress &to, int opcode, const char *payload, int len)
 {
     static pingerEchoData pecho;
     int x, slen;
@@ -142,7 +142,7 @@ IcmpSquid::Recv()
     int n;
     static int fail_count = 0;
     pingerReplyData preply;
-    static IpAddress F;
+    static SquidIpAddress F;
 
     commSetSelect(icmp_sock, COMM_SELECT_READ, icmpSquidRecv, NULL, 0);
     memset(&preply, '\0', sizeof(pingerReplyData));
@@ -197,7 +197,7 @@ IcmpSquid::Recv()
 #endif /* USE_ICMP */
 
 void
-IcmpSquid::DomainPing(IpAddress &to, const char *domain)
+IcmpSquid::DomainPing(SquidIpAddress &to, const char *domain)
 {
 #if USE_ICMP
     debugs(37, 4, HERE << "'" << domain << "' (" << to << ")");
@@ -212,7 +212,7 @@ IcmpSquid::Open(void)
     const char *args[2];
     int rfd;
     int wfd;
-    IpAddress localhost;
+    SquidIpAddress localhost;
 
     /* User configured disabled. */
     if (!Config.pinger.enable) {
diff --git a/src/icmp/IcmpSquid.h b/src/icmp/IcmpSquid.h
index 108e081..886e0e9 100644
--- a/src/icmp/IcmpSquid.h
+++ b/src/icmp/IcmpSquid.h
@@ -52,10 +52,10 @@ public:
     virtual int Open();
     virtual void Close();
 
-    void DomainPing(IpAddress &to, const char *domain);
+    void DomainPing(SquidIpAddress &to, const char *domain);
 
 #if USE_ICMP
-    virtual void SendEcho(IpAddress &to, int opcode, const char* payload=NULL, int len=0);
+    virtual void SendEcho(SquidIpAddress &to, int opcode, const char* payload=NULL, int len=0);
     virtual void Recv(void);
 #endif
 };
diff --git a/src/icmp/net_db.cc b/src/icmp/net_db.cc
index 009ab31..1241167 100644
--- a/src/icmp/net_db.cc
+++ b/src/icmp/net_db.cc
@@ -81,10 +81,10 @@ typedef struct {
 static hash_table *addr_table = NULL;
 static hash_table *host_table = NULL;
 
-IpAddress networkFromInaddr(const IpAddress &a);
+SquidIpAddress networkFromInaddr(const SquidIpAddress &a);
 static void netdbRelease(netdbEntry * n);
 
-static void netdbHashInsert(netdbEntry * n, IpAddress &addr);
+static void netdbHashInsert(netdbEntry * n, SquidIpAddress &addr);
 static void netdbHashDelete(const char *key);
 static void netdbHostInsert(netdbEntry * n, const char *hostname);
 static void netdbHostDelete(const net_db_name * x);
@@ -109,7 +109,7 @@ static void netdbExchangeDone(void *);
 static wordlist *peer_names = NULL;
 
 static void
-netdbHashInsert(netdbEntry * n, IpAddress &addr)
+netdbHashInsert(netdbEntry * n, SquidIpAddress &addr)
 {
     networkFromInaddr(addr).NtoA(n->network, MAX_IPSTRLEN);
     n->hash.key = n->network;
@@ -245,7 +245,7 @@ netdbPurgeLRU(void)
 }
 
 static netdbEntry *
-netdbLookupAddr(const IpAddress &addr)
+netdbLookupAddr(const SquidIpAddress &addr)
 {
     netdbEntry *n;
     char *key = new char[MAX_IPSTRLEN];
@@ -256,7 +256,7 @@ netdbLookupAddr(const IpAddress &addr)
 }
 
 static netdbEntry *
-netdbAdd(IpAddress &addr)
+netdbAdd(SquidIpAddress &addr)
 {
     netdbEntry *n;
 
@@ -274,7 +274,7 @@ netdbAdd(IpAddress &addr)
 static void
 netdbSendPing(const ipcache_addrs *ia, const DnsLookupDetails &, void *data)
 {
-    IpAddress addr;
+    SquidIpAddress addr;
     char *hostname = NULL;
     static_cast<generic_cbdata *>(data)->unwrap(&hostname);
     netdbEntry *n;
@@ -339,10 +339,10 @@ netdbSendPing(const ipcache_addrs *ia, const DnsLookupDetails &, void *data)
     xfree(hostname);
 }
 
-IpAddress
-networkFromInaddr(const IpAddress &in)
+SquidIpAddress
+networkFromInaddr(const SquidIpAddress &in)
 {
-    IpAddress out;
+    SquidIpAddress out;
 
     out = in;
 
@@ -532,7 +532,7 @@ netdbReloadState(void)
     netdbEntry *n;
     netdbEntry N;
 
-    IpAddress addr;
+    SquidIpAddress addr;
     int count = 0;
 
     struct timeval start = current_time;
@@ -673,7 +673,7 @@ netdbFreeNameEntry(void *data)
 static void
 netdbExchangeHandleReply(void *data, StoreIOBuffer receivedData)
 {
-    IpAddress addr;
+    SquidIpAddress addr;
 
     netdbExchangeState *ex = (netdbExchangeState *)data;
     int rec_sz = 0;
@@ -933,7 +933,7 @@ netdbPingSite(const char *hostname)
 }
 
 void
-netdbHandlePingReply(const IpAddress &from, int hops, int rtt)
+netdbHandlePingReply(const SquidIpAddress &from, int hops, int rtt)
 {
 #if USE_ICMP
     netdbEntry *n;
@@ -980,7 +980,7 @@ netdbFreeMemory(void)
 
 #if 0 // AYJ: Looks to be unused code.
 int
-netdbHops(IpAddress &addr)
+netdbHops(SquidIpAddress &addr)
 {
 #if USE_ICMP
     netdbEntry *n = netdbLookupAddr(addr);
@@ -1147,7 +1147,7 @@ netdbUpdatePeer(HttpRequest * r, peer * e, int irtt, int ihops)
 }
 
 void
-netdbExchangeUpdatePeer(IpAddress &addr, peer * e, double rtt, double hops)
+netdbExchangeUpdatePeer(SquidIpAddress &addr, peer * e, double rtt, double hops)
 {
 #if USE_ICMP
     netdbEntry *n;
@@ -1189,7 +1189,7 @@ netdbExchangeUpdatePeer(IpAddress &addr, peer * e, double rtt, double hops)
 }
 
 void
-netdbDeleteAddrNetwork(IpAddress &addr)
+netdbDeleteAddrNetwork(SquidIpAddress &addr)
 {
 #if USE_ICMP
     netdbEntry *n = netdbLookupAddr(addr);
@@ -1210,7 +1210,7 @@ netdbBinaryExchange(StoreEntry * s)
     HttpReply *reply = new HttpReply;
 #if USE_ICMP
 
-    IpAddress addr;
+    SquidIpAddress addr;
 
     netdbEntry *n;
     int i;
diff --git a/src/icmp/net_db.h b/src/icmp/net_db.h
index 151f50d..2db8bc4 100644
--- a/src/icmp/net_db.h
+++ b/src/icmp/net_db.h
@@ -3,7 +3,7 @@
 
 #include "config.h"
 
-class IpAddress;
+class SquidIpAddress;
 class StoreEntry;
 class HttpRequest;
 
@@ -13,12 +13,12 @@ class HttpRequest;
 
 SQUIDCEXTERN void netdbInit(void);
 
-SQUIDCEXTERN void netdbHandlePingReply(const IpAddress &from, int hops, int rtt);
+SQUIDCEXTERN void netdbHandlePingReply(const SquidIpAddress &from, int hops, int rtt);
 SQUIDCEXTERN void netdbPingSite(const char *hostname);
 SQUIDCEXTERN void netdbDump(StoreEntry *);
 
 #if 0 // AYJ: Looks to be unused now.
-SQUIDCEXTERN int netdbHops(IpAddress &);
+SQUIDCEXTERN int netdbHops(SquidIpAddress &);
 #endif
 
 SQUIDCEXTERN void netdbFreeMemory(void);
@@ -26,11 +26,11 @@ SQUIDCEXTERN int netdbHostHops(const char *host);
 SQUIDCEXTERN int netdbHostRtt(const char *host);
 SQUIDCEXTERN void netdbUpdatePeer(HttpRequest *, peer * e, int rtt, int hops);
 
-SQUIDCEXTERN void netdbDeleteAddrNetwork(IpAddress &addr);
+SQUIDCEXTERN void netdbDeleteAddrNetwork(SquidIpAddress &addr);
 SQUIDCEXTERN void netdbBinaryExchange(StoreEntry *);
 SQUIDCEXTERN void netdbExchangeStart(void *);
 
-SQUIDCEXTERN void netdbExchangeUpdatePeer(IpAddress &, peer *, double, double);
+SQUIDCEXTERN void netdbExchangeUpdatePeer(SquidIpAddress &, peer *, double, double);
 SQUIDCEXTERN peer *netdbClosestParent(HttpRequest *);
 SQUIDCEXTERN void netdbHostData(const char *host, int *samp, int *rtt, int *hops);
 
diff --git a/src/icmp/testIcmp.h b/src/icmp/testIcmp.h
index e0692bf..cf99bbf 100644
--- a/src/icmp/testIcmp.h
+++ b/src/icmp/testIcmp.h
@@ -15,7 +15,7 @@ public:
     virtual void Close() {};
 
     /// Construct ECHO request
-    virtual void SendEcho(IpAddress &to, int opcode, const char *payload, int len) {};
+    virtual void SendEcho(SquidIpAddress &to, int opcode, const char *payload, int len) {};
 
     /// Handle ICMP responses.
     virtual void Recv(void) {};
diff --git a/src/icp_v2.cc b/src/icp_v2.cc
index bb8143b..0fbd544 100644
--- a/src/icp_v2.cc
+++ b/src/icp_v2.cc
@@ -52,10 +52,10 @@
 #include "rfc1738.h"
 
 /// \ingroup ServerProtocolICPInternal2
-static void icpLogIcp(const IpAddress &, log_type, int, const char *, int);
+static void icpLogIcp(const SquidIpAddress &, log_type, int, const char *, int);
 
 /// \ingroup ServerProtocolICPInternal2
-static void icpHandleIcpV2(int, IpAddress &, char *, int);
+static void icpHandleIcpV2(int, SquidIpAddress &, char *, int);
 
 /// \ingroup ServerProtocolICPInternal2
 static void icpCount(void *, int, size_t, int);
@@ -70,7 +70,7 @@ static icpUdpData *IcpQueueHead = NULL;
 static icpUdpData *IcpQueueTail = NULL;
 
 /// \ingroup ServerProtocolICPInternal2
-IpAddress theOutICPAddr;
+SquidIpAddress theOutICPAddr;
 
 /* icp_common_t */
 _icp_common_t::_icp_common_t() : opcode(ICP_INVALID), version(0), length(0), reqnum(0), flags(0), pad(0), shostid(0)
@@ -175,7 +175,7 @@ ICP2State::created(StoreEntry *newEntry)
 
 /// \ingroup ServerProtocolICPInternal2
 static void
-icpLogIcp(const IpAddress &caddr, log_type logcode, int len, const char *url, int delay)
+icpLogIcp(const SquidIpAddress &caddr, log_type logcode, int len, const char *url, int delay)
 {
     AccessLogEntry al;
 
@@ -272,7 +272,7 @@ _icp_common_t::createMessage(
 
 int
 icpUdpSend(int fd,
-           const IpAddress &to,
+           const SquidIpAddress &to,
            icp_common_t * msg,
            log_type logcode,
            int delay)
@@ -382,14 +382,14 @@ icpLogFromICPCode(icp_opcode opcode)
 }
 
 void
-icpCreateAndSend(icp_opcode opcode, int flags, char const *url, int reqnum, int pad, int fd, const IpAddress &from)
+icpCreateAndSend(icp_opcode opcode, int flags, char const *url, int reqnum, int pad, int fd, const SquidIpAddress &from)
 {
     icp_common_t *reply = _icp_common_t::createMessage(opcode, flags, url, reqnum, pad);
     icpUdpSend(fd, from, reply, icpLogFromICPCode(opcode), 0);
 }
 
 void
-icpDenyAccess(IpAddress &from, char *url, int reqnum, int fd)
+icpDenyAccess(SquidIpAddress &from, char *url, int reqnum, int fd)
 {
     debugs(12, 2, "icpDenyAccess: Access Denied for " << from << " by " << AclMatchedName << ".");
 
@@ -405,7 +405,7 @@ icpDenyAccess(IpAddress &from, char *url, int reqnum, int fd)
 }
 
 int
-icpAccessAllowed(IpAddress &from, HttpRequest * icp_request)
+icpAccessAllowed(SquidIpAddress &from, HttpRequest * icp_request)
 {
     /* absent an explicit allow, we deny all */
     if (!Config.accessList.icp)
@@ -428,7 +428,7 @@ icpGetUrlToSend(char *url)
 }
 
 HttpRequest *
-icpGetRequest(char *url, int reqnum, int fd, IpAddress &from)
+icpGetRequest(char *url, int reqnum, int fd, SquidIpAddress &from)
 {
     if (strpbrk(url, w_space)) {
         url = rfc1738_escape(url);
@@ -446,7 +446,7 @@ icpGetRequest(char *url, int reqnum, int fd, IpAddress &from)
 }
 
 static void
-doV2Query(int fd, IpAddress &from, char *buf, icp_common_t header)
+doV2Query(int fd, SquidIpAddress &from, char *buf, icp_common_t header)
 {
     int rtt = 0;
     int src_rtt = 0;
@@ -497,7 +497,7 @@ doV2Query(int fd, IpAddress &from, char *buf, icp_common_t header)
 }
 
 void
-_icp_common_t::handleReply(char *buf, IpAddress &from)
+_icp_common_t::handleReply(char *buf, SquidIpAddress &from)
 {
     if (neighbors_do_private_keys && reqnum == 0) {
         debugs(12, 0, "icpHandleIcpV2: Neighbor " << from << " returned reqnum = 0");
@@ -514,7 +514,7 @@ _icp_common_t::handleReply(char *buf, IpAddress &from)
 }
 
 static void
-icpHandleIcpV2(int fd, IpAddress &from, char *buf, int len)
+icpHandleIcpV2(int fd, SquidIpAddress &from, char *buf, int len)
 {
     if (len <= 0) {
         debugs(12, 3, "icpHandleIcpV2: ICP message is too small");
@@ -567,7 +567,7 @@ static void
 icpPktDump(icp_common_t * pkt)
 {
 
-    IpAddress a;
+    SquidIpAddress a;
 
     debugs(12, 9, "opcode:     " << std::setw(3) << pkt->opcode  << " " << icp_opcode_str[pkt->opcode]);
     debugs(12, 9, "version: "<< std::left << std::setw(8) << pkt->version);
@@ -586,7 +586,7 @@ icpHandleUdp(int sock, void *data)
 {
     int *N = &incoming_sockets_accepted;
 
-    IpAddress from;
+    SquidIpAddress from;
     LOCAL_ARRAY(char, buf, SQUID_UDP_SO_RCVBUF);
     int len;
     int icp_version;
@@ -653,7 +653,7 @@ icpConnectionsOpen(void)
 {
     u_int16_t port;
 
-    IpAddress addr;
+    SquidIpAddress addr;
 
     struct addrinfo *xai = NULL;
     int x;
diff --git a/src/icp_v3.cc b/src/icp_v3.cc
index 52434d9..5dc72db 100644
--- a/src/icp_v3.cc
+++ b/src/icp_v3.cc
@@ -56,7 +56,7 @@ public:
 
 /// \ingroup ServerProtocolICPInternal3
 static void
-doV3Query(int fd, IpAddress &from, char *buf, icp_common_t header)
+doV3Query(int fd, SquidIpAddress &from, char *buf, icp_common_t header)
 {
     /* We have a valid packet */
     char *url = buf + sizeof(icp_common_t) + sizeof(u_int32_t);
@@ -109,7 +109,7 @@ ICP3State::created(StoreEntry *newEntry)
 /// \ingroup ServerProtocolICPInternal3
 /* Currently Harvest cached-2.x uses ICP_VERSION_3 */
 void
-icpHandleIcpV3(int fd, IpAddress&from, char *buf, int len)
+icpHandleIcpV3(int fd, SquidIpAddress&from, char *buf, int len)
 {
     if (len <= 0) {
         debugs(12, 3, "icpHandleIcpV3: ICP message is too small");
diff --git a/src/ident/Ident.cc b/src/ident/Ident.cc
index 43c05e2..83a8c50 100644
--- a/src/ident/Ident.cc
+++ b/src/ident/Ident.cc
@@ -58,9 +58,9 @@ typedef struct _IdentStateData {
     hash_link hash;		/* must be first */
     int fd;			/* IDENT fd */
 
-    IpAddress me;
+    SquidIpAddress me;
 
-    IpAddress my_peer;
+    SquidIpAddress my_peer;
     IdentClient *clients;
     char buf[4096];
 } IdentStateData;
@@ -214,7 +214,7 @@ CBDATA_TYPE(IdentStateData);
  * start a TCP connection to the peer host on port 113
  */
 void
-Ident::Start(IpAddress &me, IpAddress &my_peer, IDCB * callback, void *data)
+Ident::Start(SquidIpAddress &me, SquidIpAddress &my_peer, IDCB * callback, void *data)
 {
     IdentStateData *state;
     int fd;
@@ -235,7 +235,7 @@ Ident::Start(IpAddress &me, IpAddress &my_peer, IDCB * callback, void *data)
         return;
     }
 
-    IpAddress addr = me;
+    SquidIpAddress addr = me;
     addr.SetPort(0); // NP: use random port for secure outbound to IDENT_PORT
 
     fd = comm_open_listener(SOCK_STREAM,
diff --git a/src/ident/Ident.h b/src/ident/Ident.h
index fe035f2..6a3a705 100644
--- a/src/ident/Ident.h
+++ b/src/ident/Ident.h
@@ -15,7 +15,7 @@
 
 #include "cbdata.h"
 
-class IpAddress;
+class SquidIpAddress;
 
 namespace Ident
 {
@@ -28,7 +28,7 @@ namespace Ident
  * Self-registers with a global ident lookup manager,
  * will call Ident::Init() itself if the manager has not been initialized already.
  */
-void Start(IpAddress &me, IpAddress &my_peer, IDCB * callback, void *cbdata);
+void Start(SquidIpAddress &me, SquidIpAddress &my_peer, IDCB * callback, void *cbdata);
 
 /**
  \ingroup IdentAPI
diff --git a/src/internal.cc b/src/internal.cc
index c3edf1c..903971f 100644
--- a/src/internal.cc
+++ b/src/internal.cc
@@ -102,7 +102,7 @@ internalRemoteUri(const char *host, unsigned short port, const char *dir, const
     Tolower(lc_host);
 
     /* check for an IP address and format appropriately if found */
-    IpAddress test = lc_host;
+    SquidIpAddress test = lc_host;
     if ( !test.IsAnyAddr() ) {
         test.ToHostname(lc_host,SQUIDHOSTNAMELEN);
     }
diff --git a/src/ip/IpAddress.cc b/src/ip/IpAddress.cc
index 8ea0d06..0dc5c9c 100644
--- a/src/ip/IpAddress.cc
+++ b/src/ip/IpAddress.cc
@@ -14,7 +14,7 @@
  *  developed and/or copyrighted by other sources.  Please see the
  *  CREDITS file for full details.
  *
- *  This IpAddress code is copyright (C) 2007 by Treehouse Networks Ltd
+ *  This SquidIpAddress code is copyright (C) 2007 by Treehouse Networks Ltd
  *  of New Zealand. It is published and Lisenced as an extension of
  *  squid under the same conditions as the main squid application.
  *
@@ -59,32 +59,32 @@
 #ifndef SQUID_DEBUG
 #    define debugs(a,b,c)        //  drop.
 #else
-#warning "IpAddress built with Debugs!!"
+#warning "SquidIpAddress built with Debugs!!"
 #    include "../src/Debug.h"
 #endif
 
 /* Debugging only. Dump the address content when a fatal assert is encountered. */
 #define IASSERT(a,b)  \
 	if(!(b)){	printf("assert \"%s\" at line %d\n", a, __LINE__); \
-		printf("IpAddress invalid? with IsIPv4()=%c, IsIPv6()=%c\n",(IsIPv4()?'T':'F'),(IsIPv6()?'T':'F')); \
+		printf("SquidIpAddress invalid? with IsIPv4()=%c, IsIPv6()=%c\n",(IsIPv4()?'T':'F'),(IsIPv6()?'T':'F')); \
 		printf("ADDRESS:"); \
 		for(unsigned int i = 0; i < sizeof(m_SocketAddr.sin6_addr); i++) { \
 			printf(" %x", m_SocketAddr.sin6_addr.s6_addr[i]); \
 		} printf("\n"); assert(b); \
 	}
 
-IpAddress::IpAddress()
+SquidIpAddress::SquidIpAddress()
 {
     SetEmpty();
 }
 
-IpAddress::~IpAddress()
+SquidIpAddress::~SquidIpAddress()
 {
-    memset(this,0,sizeof(IpAddress));
+    memset(this,0,sizeof(SquidIpAddress));
 }
 
 int
-IpAddress::GetCIDR() const
+SquidIpAddress::GetCIDR() const
 {
     uint8_t shift,byte;
     uint8_t bit,caught;
@@ -126,7 +126,7 @@ IpAddress::GetCIDR() const
     return len;
 }
 
-const int IpAddress::ApplyMask(IpAddress const &mask_addr)
+const int SquidIpAddress::ApplyMask(SquidIpAddress const &mask_addr)
 {
     uint32_t *p1 = (uint32_t*)(&m_SocketAddr.sin6_addr);
     uint32_t const *p2 = (uint32_t const *)(&mask_addr.m_SocketAddr.sin6_addr);
@@ -143,7 +143,7 @@ const int IpAddress::ApplyMask(IpAddress const &mask_addr)
     return changes;
 }
 
-bool IpAddress::ApplyMask(const unsigned int cidr, int mtype)
+bool SquidIpAddress::ApplyMask(const unsigned int cidr, int mtype)
 {
     uint8_t clearbits = 0;
     uint8_t* p = NULL;
@@ -182,53 +182,53 @@ bool IpAddress::ApplyMask(const unsigned int cidr, int mtype)
     return true;
 }
 
-bool IpAddress::IsSockAddr() const
+bool SquidIpAddress::IsSockAddr() const
 {
     return (m_SocketAddr.sin6_port != 0);
 }
 
-bool IpAddress::IsIPv4() const
+bool SquidIpAddress::IsIPv4() const
 {
     return IsAnyAddr() || IsNoAddr() || IN6_IS_ADDR_V4MAPPED( &m_SocketAddr.sin6_addr );
 }
 
-bool IpAddress::IsIPv6() const
+bool SquidIpAddress::IsIPv6() const
 {
     return IsAnyAddr() || IsNoAddr() || !IN6_IS_ADDR_V4MAPPED( &m_SocketAddr.sin6_addr );
 }
 
-bool IpAddress::IsAnyAddr() const
+bool SquidIpAddress::IsAnyAddr() const
 {
     return IN6_IS_ADDR_UNSPECIFIED( &m_SocketAddr.sin6_addr );
 }
 
 /// NOTE: Does NOT clear the Port stored. Ony the Address and Type.
-void IpAddress::SetAnyAddr()
+void SquidIpAddress::SetAnyAddr()
 {
     memset(&m_SocketAddr.sin6_addr, 0, sizeof(struct in6_addr) );
 }
 
-/// NOTE: completely empties the IpAddress structure. Address, Port, Type, everything.
-void IpAddress::SetEmpty()
+/// NOTE: completely empties the SquidIpAddress structure. Address, Port, Type, everything.
+void SquidIpAddress::SetEmpty()
 {
     memset(&m_SocketAddr, 0, sizeof(m_SocketAddr) );
 }
 
-const struct in6_addr IpAddress::v4_localhost = {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+const struct in6_addr SquidIpAddress::v4_localhost = {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x01 }}
 };
-const struct in6_addr IpAddress::v4_anyaddr = {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+const struct in6_addr SquidIpAddress::v4_anyaddr = {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }}
 };
-const struct in6_addr IpAddress::v4_noaddr = {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+const struct in6_addr SquidIpAddress::v4_noaddr = {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }}
 };
-const struct in6_addr IpAddress::v6_noaddr = {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+const struct in6_addr SquidIpAddress::v6_noaddr = {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
             0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }}
 };
 
 
-bool IpAddress::SetIPv4()
+bool SquidIpAddress::SetIPv4()
 {
     if ( IsLocalhost() ) {
         m_SocketAddr.sin6_addr = v4_localhost;
@@ -247,12 +247,12 @@ bool IpAddress::SetIPv4()
     return false;
 }
 
-bool IpAddress::IsLocalhost() const
+bool SquidIpAddress::IsLocalhost() const
 {
     return IN6_IS_ADDR_LOOPBACK( &m_SocketAddr.sin6_addr ) || IN6_ARE_ADDR_EQUAL( &m_SocketAddr.sin6_addr, &v4_localhost );
 }
 
-void IpAddress::SetLocalhost()
+void SquidIpAddress::SetLocalhost()
 {
     if (Ip::EnableIpv6) {
         m_SocketAddr.sin6_addr = in6addr_loopback;
@@ -263,19 +263,19 @@ void IpAddress::SetLocalhost()
     }
 }
 
-bool IpAddress::IsNoAddr() const
+bool SquidIpAddress::IsNoAddr() const
 {
     // IFF the address == 0xff..ff (all ones)
     return IN6_ARE_ADDR_EQUAL( &m_SocketAddr.sin6_addr, &v6_noaddr );
 }
 
-void IpAddress::SetNoAddr()
+void SquidIpAddress::SetNoAddr()
 {
     memset(&m_SocketAddr.sin6_addr, 0xFF, sizeof(struct in6_addr) );
     m_SocketAddr.sin6_family = AF_INET6;
 }
 
-bool IpAddress::GetReverseString6(char buf[MAX_IPSTRLEN], const struct in6_addr &dat) const
+bool SquidIpAddress::GetReverseString6(char buf[MAX_IPSTRLEN], const struct in6_addr &dat) const
 {
     char *p = buf;
     unsigned char const *r = dat.s6_addr;
@@ -301,7 +301,7 @@ bool IpAddress::GetReverseString6(char buf[MAX_IPSTRLEN], const struct in6_addr
     return true;
 }
 
-bool IpAddress::GetReverseString4(char buf[MAX_IPSTRLEN], const struct in_addr &dat) const
+bool SquidIpAddress::GetReverseString4(char buf[MAX_IPSTRLEN], const struct in_addr &dat) const
 {
     unsigned int i = (unsigned int) ntohl(dat.s_addr);
     snprintf(buf, 32, "%u.%u.%u.%u.in-addr.arpa.",
@@ -312,7 +312,7 @@ bool IpAddress::GetReverseString4(char buf[MAX_IPSTRLEN], const struct in_addr &
     return true;
 }
 
-bool IpAddress::GetReverseString(char buf[MAX_IPSTRLEN], int show_type) const
+bool SquidIpAddress::GetReverseString(char buf[MAX_IPSTRLEN], int show_type) const
 {
 
     if (show_type == AF_UNSPEC) {
@@ -333,29 +333,29 @@ bool IpAddress::GetReverseString(char buf[MAX_IPSTRLEN], int show_type) const
     return false;
 }
 
-IpAddress& IpAddress::operator =(const IpAddress &s)
+SquidIpAddress& SquidIpAddress::operator =(const SquidIpAddress &s)
 {
-    memcpy(this, &s, sizeof(IpAddress));
+    memcpy(this, &s, sizeof(SquidIpAddress));
     return *this;
 };
 
-IpAddress::IpAddress(const char*s)
+SquidIpAddress::SquidIpAddress(const char*s)
 {
     SetEmpty();
     LookupHostIP(s, true);
 }
 
-bool IpAddress::operator =(const char* s)
+bool SquidIpAddress::operator =(const char* s)
 {
     return LookupHostIP(s, true);
 }
 
-bool IpAddress::GetHostByName(const char* s)
+bool SquidIpAddress::GetHostByName(const char* s)
 {
     return LookupHostIP(s, false);
 }
 
-bool IpAddress::LookupHostIP(const char *s, bool nodns)
+bool SquidIpAddress::LookupHostIP(const char *s, bool nodns)
 {
     int err = 0;
 
@@ -400,13 +400,13 @@ bool IpAddress::LookupHostIP(const char *s, bool nodns)
     return true;
 }
 
-IpAddress::IpAddress(struct sockaddr_in const &s)
+SquidIpAddress::SquidIpAddress(struct sockaddr_in const &s)
 {
     SetEmpty();
     operator=(s);
 };
 
-IpAddress& IpAddress::operator =(struct sockaddr_in const &s)
+SquidIpAddress& SquidIpAddress::operator =(struct sockaddr_in const &s)
 {
     Map4to6((const in_addr)s.sin_addr, m_SocketAddr.sin6_addr);
     m_SocketAddr.sin6_port = s.sin_port;
@@ -414,7 +414,7 @@ IpAddress& IpAddress::operator =(struct sockaddr_in const &s)
     return *this;
 };
 
-IpAddress& IpAddress::operator =(const struct sockaddr_storage &s)
+SquidIpAddress& SquidIpAddress::operator =(const struct sockaddr_storage &s)
 {
     /* some AF_* magic to tell socket types apart and what we need to do */
     if (s.ss_family == AF_INET6) {
@@ -427,39 +427,39 @@ IpAddress& IpAddress::operator =(const struct sockaddr_storage &s)
     return *this;
 };
 
-IpAddress::IpAddress(struct sockaddr_in6 const &s)
+SquidIpAddress::SquidIpAddress(struct sockaddr_in6 const &s)
 {
     SetEmpty();
     operator=(s);
 };
 
-IpAddress& IpAddress::operator =(struct sockaddr_in6 const &s)
+SquidIpAddress& SquidIpAddress::operator =(struct sockaddr_in6 const &s)
 {
     memcpy(&m_SocketAddr, &s, sizeof(struct sockaddr_in6));
 
     return *this;
 };
 
-IpAddress::IpAddress(struct in_addr const &s)
+SquidIpAddress::SquidIpAddress(struct in_addr const &s)
 {
     SetEmpty();
     operator=(s);
 };
 
-IpAddress& IpAddress::operator =(struct in_addr const &s)
+SquidIpAddress& SquidIpAddress::operator =(struct in_addr const &s)
 {
     Map4to6((const in_addr)s, m_SocketAddr.sin6_addr);
     m_SocketAddr.sin6_family = AF_INET6;
     return *this;
 };
 
-IpAddress::IpAddress(struct in6_addr const &s)
+SquidIpAddress::SquidIpAddress(struct in6_addr const &s)
 {
     SetEmpty();
     operator=(s);
 };
 
-IpAddress& IpAddress::operator =(struct in6_addr const &s)
+SquidIpAddress& SquidIpAddress::operator =(struct in6_addr const &s)
 {
 
     memcpy(&m_SocketAddr.sin6_addr, &s, sizeof(struct in6_addr));
@@ -468,26 +468,26 @@ IpAddress& IpAddress::operator =(struct in6_addr const &s)
     return *this;
 };
 
-IpAddress::IpAddress(const IpAddress &s)
+SquidIpAddress::SquidIpAddress(const SquidIpAddress &s)
 {
     SetEmpty();
     operator=(s);
 }
 
-IpAddress::IpAddress(IpAddress *s)
+SquidIpAddress::SquidIpAddress(SquidIpAddress *s)
 {
     SetEmpty();
     if (s)
-        memcpy(this, s, sizeof(IpAddress));
+        memcpy(this, s, sizeof(SquidIpAddress));
 }
 
-IpAddress::IpAddress(const struct hostent &s)
+SquidIpAddress::SquidIpAddress(const struct hostent &s)
 {
     SetEmpty();
     operator=(s);
 }
 
-bool IpAddress::operator =(const struct hostent &s)
+bool SquidIpAddress::operator =(const struct hostent &s)
 {
 
     struct in_addr* ipv4 = NULL;
@@ -524,13 +524,13 @@ bool IpAddress::operator =(const struct hostent &s)
     return true;
 }
 
-IpAddress::IpAddress(const struct addrinfo &s)
+SquidIpAddress::SquidIpAddress(const struct addrinfo &s)
 {
     SetEmpty();
     operator=(s);
 }
 
-bool IpAddress::operator =(const struct addrinfo &s)
+bool SquidIpAddress::operator =(const struct addrinfo &s)
 {
 
     struct sockaddr_in* ipv4 = NULL;
@@ -583,7 +583,7 @@ bool IpAddress::operator =(const struct addrinfo &s)
     return true;
 }
 
-void IpAddress::GetAddrInfo(struct addrinfo *&dst, int force) const
+void SquidIpAddress::GetAddrInfo(struct addrinfo *&dst, int force) const
 {
     if (dst == NULL) {
         dst = new addrinfo;
@@ -646,7 +646,7 @@ void IpAddress::GetAddrInfo(struct addrinfo *&dst, int force) const
     }
 }
 
-void IpAddress::InitAddrInfo(struct addrinfo *&ai) const
+void SquidIpAddress::InitAddrInfo(struct addrinfo *&ai) const
 {
     if (ai == NULL) {
         ai = new addrinfo;
@@ -663,7 +663,7 @@ void IpAddress::InitAddrInfo(struct addrinfo *&ai) const
 
 }
 
-void IpAddress::FreeAddrInfo(struct addrinfo *&ai) const
+void SquidIpAddress::FreeAddrInfo(struct addrinfo *&ai) const
 {
     if (ai == NULL) return;
 
@@ -679,7 +679,7 @@ void IpAddress::FreeAddrInfo(struct addrinfo *&ai) const
     ai = NULL;
 }
 
-int IpAddress::matchIPAddr(const IpAddress &rhs) const
+int SquidIpAddress::matchIPAddr(const SquidIpAddress &rhs) const
 {
     uint8_t *l = (uint8_t*)m_SocketAddr.sin6_addr.s6_addr;
     uint8_t *r = (uint8_t*)rhs.m_SocketAddr.sin6_addr.s6_addr;
@@ -699,17 +699,17 @@ int IpAddress::matchIPAddr(const IpAddress &rhs) const
     return 0;
 }
 
-bool IpAddress::operator ==(const IpAddress &s) const
+bool SquidIpAddress::operator ==(const SquidIpAddress &s) const
 {
     return (0 == matchIPAddr(s));
 }
 
-bool IpAddress::operator !=(const IpAddress &s) const
+bool SquidIpAddress::operator !=(const SquidIpAddress &s) const
 {
     return ! ( operator==(s) );
 }
 
-bool IpAddress::operator <=(const IpAddress &rhs) const
+bool SquidIpAddress::operator <=(const SquidIpAddress &rhs) const
 {
     if (IsAnyAddr() && !rhs.IsAnyAddr())
         return true;
@@ -717,7 +717,7 @@ bool IpAddress::operator <=(const IpAddress &rhs) const
     return (matchIPAddr(rhs) <= 0);
 }
 
-bool IpAddress::operator >=(const IpAddress &rhs) const
+bool SquidIpAddress::operator >=(const SquidIpAddress &rhs) const
 {
     if (IsNoAddr() && !rhs.IsNoAddr())
         return true;
@@ -725,7 +725,7 @@ bool IpAddress::operator >=(const IpAddress &rhs) const
     return ( matchIPAddr(rhs) >= 0);
 }
 
-bool IpAddress::operator >(const IpAddress &rhs) const
+bool SquidIpAddress::operator >(const SquidIpAddress &rhs) const
 {
     if (IsNoAddr() && !rhs.IsNoAddr())
         return true;
@@ -733,7 +733,7 @@ bool IpAddress::operator >(const IpAddress &rhs) const
     return ( matchIPAddr(rhs) > 0);
 }
 
-bool IpAddress::operator <(const IpAddress &rhs) const
+bool SquidIpAddress::operator <(const SquidIpAddress &rhs) const
 {
     if (IsAnyAddr() && !rhs.IsAnyAddr())
         return true;
@@ -742,13 +742,13 @@ bool IpAddress::operator <(const IpAddress &rhs) const
 }
 
 unsigned short
-IpAddress::GetPort() const
+SquidIpAddress::GetPort() const
 {
     return ntohs( m_SocketAddr.sin6_port );
 }
 
 unsigned short
-IpAddress::SetPort(unsigned short prt)
+SquidIpAddress::SetPort(unsigned short prt)
 {
     m_SocketAddr.sin6_port = htons(prt);
 
@@ -765,7 +765,7 @@ IpAddress::SetPort(unsigned short prt)
  *
  * A copy of the buffer is also returned for simple immediate display.
  */
-char* IpAddress::NtoA(char* buf, const unsigned int blen, int force) const
+char* SquidIpAddress::NtoA(char* buf, const unsigned int blen, int force) const
 {
     // Ensure we have a buffer.
     if (buf == NULL) {
@@ -811,7 +811,7 @@ char* IpAddress::NtoA(char* buf, const unsigned int blen, int force) const
     return buf;
 }
 
-unsigned int IpAddress::ToHostname(char *buf, const unsigned int blen) const
+unsigned int SquidIpAddress::ToHostname(char *buf, const unsigned int blen) const
 {
     char *p = buf;
 
@@ -842,7 +842,7 @@ unsigned int IpAddress::ToHostname(char *buf, const unsigned int blen) const
     return (p - buf);
 }
 
-char* IpAddress::ToURL(char* buf, unsigned int blen) const
+char* SquidIpAddress::ToURL(char* buf, unsigned int blen) const
 {
     char *p = buf;
 
@@ -865,13 +865,13 @@ char* IpAddress::ToURL(char* buf, unsigned int blen) const
     return buf;
 }
 
-void IpAddress::GetSockAddr(struct sockaddr_storage &addr, const int family) const
+void SquidIpAddress::GetSockAddr(struct sockaddr_storage &addr, const int family) const
 {
     struct sockaddr_in *sin = NULL;
 
     if ( family == AF_INET && !IsIPv4()) {
         // FIXME INET6: caller using the wrong socket type!
-        debugs(14, DBG_CRITICAL, HERE << "IpAddress::GetSockAddr : Cannot convert non-IPv4 to IPv4. from " << *this);
+        debugs(14, DBG_CRITICAL, HERE << "SquidIpAddress::GetSockAddr : Cannot convert non-IPv4 to IPv4. from " << *this);
         assert(false);
     }
 
@@ -886,14 +886,14 @@ void IpAddress::GetSockAddr(struct sockaddr_storage &addr, const int family) con
     }
 }
 
-void IpAddress::GetSockAddr(struct sockaddr_in &buf) const
+void SquidIpAddress::GetSockAddr(struct sockaddr_in &buf) const
 {
     if ( IsIPv4() ) {
         buf.sin_family = AF_INET;
         buf.sin_port = m_SocketAddr.sin6_port;
         Map6to4( m_SocketAddr.sin6_addr, buf.sin_addr);
     } else {
-        debugs(14, DBG_CRITICAL, HERE << "IpAddress::GetSockAddr : Cannot convert non-IPv4 to IPv4. from " << *this );
+        debugs(14, DBG_CRITICAL, HERE << "SquidIpAddress::GetSockAddr : Cannot convert non-IPv4 to IPv4. from " << *this );
 
         memset(&buf,0xFFFFFFFF,sizeof(struct sockaddr_in));
         assert(false);
@@ -905,7 +905,7 @@ void IpAddress::GetSockAddr(struct sockaddr_in &buf) const
 #endif
 }
 
-void IpAddress::GetSockAddr(struct sockaddr_in6 &buf) const
+void SquidIpAddress::GetSockAddr(struct sockaddr_in6 &buf) const
 {
     memcpy(&buf, &m_SocketAddr, sizeof(struct sockaddr_in6));
     /* maintain address family. It may have changed inside us. */
@@ -917,7 +917,7 @@ void IpAddress::GetSockAddr(struct sockaddr_in6 &buf) const
 #endif
 }
 
-void IpAddress::Map4to6(const struct in_addr &in, struct in6_addr &out) const
+void SquidIpAddress::Map4to6(const struct in_addr &in, struct in6_addr &out) const
 {
     /* check for special cases */
 
@@ -937,7 +937,7 @@ void IpAddress::Map4to6(const struct in_addr &in, struct in6_addr &out) const
     }
 }
 
-void IpAddress::Map6to4(const struct in6_addr &in, struct in_addr &out) const
+void SquidIpAddress::Map6to4(const struct in6_addr &in, struct in_addr &out) const
 {
     /* ANYADDR */
     /* NOADDR */
@@ -950,12 +950,12 @@ void IpAddress::Map6to4(const struct in6_addr &in, struct in_addr &out) const
     ((uint8_t *)&out.s_addr)[3] = in.s6_addr[15];
 }
 
-void IpAddress::GetInAddr(in6_addr &buf) const
+void SquidIpAddress::GetInAddr(in6_addr &buf) const
 {
     memcpy(&buf, &m_SocketAddr.sin6_addr, sizeof(struct in6_addr));
 }
 
-bool IpAddress::GetInAddr(struct in_addr &buf) const
+bool SquidIpAddress::GetInAddr(struct in_addr &buf) const
 {
     if ( IsIPv4() ) {
         Map6to4((const in6_addr)m_SocketAddr.sin6_addr, buf);
@@ -965,7 +965,7 @@ bool IpAddress::GetInAddr(struct in_addr &buf) const
     // default:
     // non-compatible IPv6 Pure Address
 
-    debugs(14,1, HERE << "IpAddress::GetInAddr : Cannot convert non-IPv4 to IPv4. IPA=" << *this);
+    debugs(14,1, HERE << "SquidIpAddress::GetInAddr : Cannot convert non-IPv4 to IPv4. IPA=" << *this);
     memset(&buf,0xFFFFFFFF,sizeof(struct in_addr));
     assert(false);
     return false;
diff --git a/src/ip/IpAddress.h b/src/ip/IpAddress.h
index f6542e3..fb557b4 100644
--- a/src/ip/IpAddress.h
+++ b/src/ip/IpAddress.h
@@ -14,7 +14,7 @@
  *  developed and/or copyrighted by other sources.  Please see the
  *  CREDITS file for full details.
  *
- *  This IpAddress code is copyright (C) 2007 by Treehouse Networks Ltd
+ *  This SquidIpAddress code is copyright (C) 2007 by Treehouse Networks Ltd
  *  of New Zealand. It is published and Lisenced as an extension of
  *  squid under the same conditions as the main squid application.
  *
@@ -73,14 +73,14 @@
 /**
  * Holds and manipulates IPv4, IPv6, and Socket Addresses.
  */
-class IpAddress
+class SquidIpAddress
 {
 
 public:
     /** @name Constructors and Destructor */
     /*@{*/
-    IpAddress();
-    IpAddress(const IpAddress &);
+    SquidIpAddress();
+    SquidIpAddress(const SquidIpAddress &);
 
     /**
      * This constructor takes its own copy of the object pointed to for memory-safe usage later.
@@ -89,26 +89,26 @@ public:
      \deprecated Use of pointers can be nasty. Consider this a last-resort.
      *           Prefer the by-reference (&) version instead.
      */
-    IpAddress(IpAddress *);
-    IpAddress(const struct in_addr &);
-    IpAddress(const struct sockaddr_in &);
-    IpAddress(const struct in6_addr &);
-    IpAddress(const struct sockaddr_in6 &);
-    IpAddress(const struct hostent &);
-    IpAddress(const struct addrinfo &);
-    IpAddress(const char*);
+    SquidIpAddress(SquidIpAddress *);
+    SquidIpAddress(const struct in_addr &);
+    SquidIpAddress(const struct sockaddr_in &);
+    SquidIpAddress(const struct in6_addr &);
+    SquidIpAddress(const struct sockaddr_in6 &);
+    SquidIpAddress(const struct hostent &);
+    SquidIpAddress(const struct addrinfo &);
+    SquidIpAddress(const char*);
     /// Default destructor.
-    ~IpAddress();
+    ~SquidIpAddress();
     /*@}*/
 
     /** @name Assignment Operators */
     /*@{*/
-    IpAddress& operator =(const IpAddress &s);
-    IpAddress& operator =(struct sockaddr_in const &s);
-    IpAddress& operator =(struct sockaddr_storage const &s);
-    IpAddress& operator =(struct in_addr const &s);
-    IpAddress& operator =(struct in6_addr const &s);
-    IpAddress& operator =(struct sockaddr_in6 const &s);
+    SquidIpAddress& operator =(const SquidIpAddress &s);
+    SquidIpAddress& operator =(struct sockaddr_in const &s);
+    SquidIpAddress& operator =(struct sockaddr_storage const &s);
+    SquidIpAddress& operator =(struct in_addr const &s);
+    SquidIpAddress& operator =(struct in6_addr const &s);
+    SquidIpAddress& operator =(struct sockaddr_in6 const &s);
     bool operator =(const struct hostent &s);
     bool operator =(const struct addrinfo &s);
     bool operator =(const char *s);
@@ -116,12 +116,12 @@ public:
 
     /** @name Boolean Operators */
     /*@{*/
-    bool operator ==(IpAddress const &s) const;
-    bool operator !=(IpAddress const &s) const;
-    bool operator >=(IpAddress const &rhs) const;
-    bool operator <=(IpAddress const &rhs) const;
-    bool operator >(IpAddress const &rhs) const;
-    bool operator <(IpAddress const &rhs) const;
+    bool operator ==(SquidIpAddress const &s) const;
+    bool operator !=(SquidIpAddress const &s) const;
+    bool operator >=(SquidIpAddress const &rhs) const;
+    bool operator <=(SquidIpAddress const &rhs) const;
+    bool operator >(SquidIpAddress const &rhs) const;
+    bool operator <(SquidIpAddress const &rhs) const;
 
 public:
     /* methods */
@@ -148,7 +148,7 @@ public:
     bool IsSockAddr() const;
 
     /** Content-neutral test for whether the specific IP case ANY_ADDR is stored.
-     *  This is the default content of a new undefined IpAddress object.
+     *  This is the default content of a new undefined SquidIpAddress object.
      \retval true IPv4 0.0.0.0
      \retval true IPv6 ::
      \retval false anything else.
@@ -163,7 +163,7 @@ public:
     bool IsNoAddr() const;
 
     /** Content-neutral test for whether the specific IP case LOCALHOST is stored.
-     *  This is the default content of a new undefined IpAddress object.
+     *  This is the default content of a new undefined SquidIpAddress object.
      \retval true IPv4 127.0.0.1
      \retval true IPv6 ::1
      \retval false anything else.
@@ -217,7 +217,7 @@ public:
     /** Apply a mask to the stored address.
      \param mask Netmask format to be bit-mask-AND'd over the stored address.
      */
-    const int ApplyMask(const IpAddress &mask);
+    const int ApplyMask(const SquidIpAddress &mask);
 
     /** Apply a mask to the stored address.
      *  CIDR will be converted appropriate to map the stored content.
@@ -276,10 +276,10 @@ public:
      \retval  1  IP rhs is greater (numerically) than that stored.
      \retval -1  IP rhs is less (numerically) than that stored.
      */
-    int matchIPAddr(const IpAddress &rhs) const;
+    int matchIPAddr(const SquidIpAddress &rhs) const;
 
     /**
-     *  Get RFC 3493 addrinfo structure from the IpAddress data
+     *  Get RFC 3493 addrinfo structure from the SquidIpAddress data
      *  for protocol-neutral socket operations.
      *  Should be passed a NULL pointer of type struct addrinfo* it will
      *  allocate memory for the structures involved. (see FreeAddrInfo to clear).
@@ -288,7 +288,7 @@ public:
      *  Some situations may also require an actual call to the system getaddrinfo()
      *  to pull relevant OS details for the socket.
      \par
-     *  IpAddress allocated objects MUST be destructed by IpAddress::FreeAddrInfo
+     *  SquidIpAddress allocated objects MUST be destructed by SquidIpAddress::FreeAddrInfo
      *  System getaddrinfo() allocated objects MUST be freed with system freeaddrinfo()
      *
      \param ai structure to be filled out.
@@ -297,7 +297,7 @@ public:
     void GetAddrInfo(struct addrinfo *&ai, int force = AF_UNSPEC) const;
 
     /**
-     *  Equivalent to the sysem call freeaddrinfo() but for IpAddress allocated data
+     *  Equivalent to the sysem call freeaddrinfo() but for SquidIpAddress allocated data
      */
     void FreeAddrInfo(struct addrinfo *&ai) const;
 
@@ -330,14 +330,14 @@ public:
 
     void GetSockAddr(struct sockaddr_storage &addr, const int family) const;
 
-    /// \deprecated Deprecated for public use. Use IpAddress::GetAddrInfo()
+    /// \deprecated Deprecated for public use. Use SquidIpAddress::GetAddrInfo()
     void GetSockAddr(struct sockaddr_in &) const;
 
-    /// \deprecated Deprecated for public use. Use IpAddress::GetAddrInfo()
+    /// \deprecated Deprecated for public use. Use SquidIpAddress::GetAddrInfo()
     bool GetInAddr(struct in_addr &) const; /* false if could not convert IPv6 down to IPv4 */
     void GetSockAddr(struct sockaddr_in6 &) const;
 
-    /// \deprecated Deprecated for public use. Use IpAddress::GetAddrInfo()
+    /// \deprecated Deprecated for public use. Use SquidIpAddress::GetAddrInfo()
     void GetInAddr(struct in6_addr &) const;
 
 private:
@@ -375,7 +375,7 @@ private:
 
 
 inline std::ostream &
-operator << (std::ostream &os, const IpAddress &ipa)
+operator << (std::ostream &os, const SquidIpAddress &ipa)
 {
     char buf[MAX_IPSTRLEN];
     os << ipa.ToURL(buf,MAX_IPSTRLEN);
@@ -389,7 +389,7 @@ public:
     IpAddress_list() { next = NULL; };
     ~IpAddress_list() { if (next) delete next; next = NULL; };
 
-    IpAddress s;
+    SquidIpAddress s;
     IpAddress_list *next;
 };
 
diff --git a/src/ip/IpIntercept.cc b/src/ip/IpIntercept.cc
index 5221a0f..8e068ce 100644
--- a/src/ip/IpIntercept.cc
+++ b/src/ip/IpIntercept.cc
@@ -123,7 +123,7 @@ IpIntercept::StopInterception(const char *str)
 }
 
 int
-IpIntercept::NetfilterInterception(int fd, const IpAddress &me, IpAddress &dst, int silent)
+IpIntercept::NetfilterInterception(int fd, const SquidIpAddress &me, SquidIpAddress &dst, int silent)
 {
 #if LINUX_NETFILTER
     struct addrinfo *lookup = NULL;
@@ -154,7 +154,7 @@ IpIntercept::NetfilterInterception(int fd, const IpAddress &me, IpAddress &dst,
 }
 
 int
-IpIntercept::NetfilterTransparent(int fd, const IpAddress &me, IpAddress &client, int silent)
+IpIntercept::NetfilterTransparent(int fd, const SquidIpAddress &me, SquidIpAddress &client, int silent)
 {
 #if LINUX_NETFILTER
 
@@ -173,7 +173,7 @@ IpIntercept::NetfilterTransparent(int fd, const IpAddress &me, IpAddress &client
 }
 
 int
-IpIntercept::IpfwInterception(int fd, const IpAddress &me, IpAddress &dst, int silent)
+IpIntercept::IpfwInterception(int fd, const SquidIpAddress &me, SquidIpAddress &dst, int silent)
 {
 #if IPFW_TRANSPARENT
     struct addrinfo *lookup = NULL;
@@ -204,7 +204,7 @@ IpIntercept::IpfwInterception(int fd, const IpAddress &me, IpAddress &dst, int s
 }
 
 int
-IpIntercept::IpfInterception(int fd, const IpAddress &me, IpAddress &client, IpAddress &dst, int silent)
+IpIntercept::IpfInterception(int fd, const SquidIpAddress &me, SquidIpAddress &client, SquidIpAddress &dst, int silent)
 {
 #if IPF_TRANSPARENT  /* --enable-ipf-transparent */
 
@@ -301,7 +301,7 @@ IpIntercept::IpfInterception(int fd, const IpAddress &me, IpAddress &client, IpA
 }
 
 int
-IpIntercept::PfInterception(int fd, const IpAddress &me, IpAddress &client, IpAddress &dst, int silent)
+IpIntercept::PfInterception(int fd, const SquidIpAddress &me, SquidIpAddress &client, SquidIpAddress &dst, int silent)
 {
 #if PF_TRANSPARENT  /* --enable-pf-transparent */
 
@@ -358,7 +358,7 @@ IpIntercept::PfInterception(int fd, const IpAddress &me, IpAddress &client, IpAd
 
 
 int
-IpIntercept::NatLookup(int fd, const IpAddress &me, const IpAddress &peer, IpAddress &client, IpAddress &dst)
+IpIntercept::NatLookup(int fd, const SquidIpAddress &me, const SquidIpAddress &peer, SquidIpAddress &client, SquidIpAddress &dst)
 {
     /* --enable-linux-netfilter    */
     /* --enable-ipfw-transparent   */
@@ -408,9 +408,9 @@ IpIntercept::NatLookup(int fd, const IpAddress &me, const IpAddress &peer, IpAdd
 
 #if LINUX_TPROXY2
 int
-IpIntercept::SetTproxy2OutgoingAddr(int fd, const IpAddress &src)
+IpIntercept::SetTproxy2OutgoingAddr(int fd, const SquidIpAddress &src)
 {
-    IpAddress addr;
+    SquidIpAddress addr;
     struct in_tproxy itp;
 
     src.GetInAddr(itp.v.addr.faddr);
@@ -442,7 +442,7 @@ IpIntercept::SetTproxy2OutgoingAddr(int fd, const IpAddress &src)
 #endif
 
 bool
-IpIntercept::ProbeForTproxy(IpAddress &test)
+IpIntercept::ProbeForTproxy(SquidIpAddress &test)
 {
     debugs(3, 3, "Detect TPROXY support on port " << test);
 #if LINUX_TPROXY2
@@ -469,7 +469,7 @@ IpIntercept::ProbeForTproxy(IpAddress &test)
         debugs(3, 3, "...Probing for IPv6 TPROXY support.");
 
         struct sockaddr_in6 tmp_ip6;
-        IpAddress tmp = "::2";
+        SquidIpAddress tmp = "::2";
         tmp.SetPort(0);
         tmp.GetSockAddr(tmp_ip6);
 
@@ -497,7 +497,7 @@ IpIntercept::ProbeForTproxy(IpAddress &test)
         debugs(3, 3, "...Probing for IPv4 TPROXY support.");
 
         struct sockaddr_in tmp_ip4;
-        IpAddress tmp = "127.0.0.2";
+        SquidIpAddress tmp = "127.0.0.2";
         tmp.SetPort(0);
         tmp.GetSockAddr(tmp_ip4);
 
diff --git a/src/ip/IpIntercept.h b/src/ip/IpIntercept.h
index 21ad9ac..b0980e5 100644
--- a/src/ip/IpIntercept.h
+++ b/src/ip/IpIntercept.h
@@ -7,7 +7,7 @@
 #ifndef SQUID_IPINTERCEPTION_H
 #define SQUID_IPINTERCEPTION_H
 
-class IpAddress;
+class SquidIpAddress;
 
 /* for time_t */
 #include "SquidTime.h"
@@ -27,12 +27,12 @@ public:
     ~IpIntercept() {};
 
     /** Perform NAT lookups */
-    int NatLookup(int fd, const IpAddress &me, const IpAddress &peer, IpAddress &client, IpAddress &dst);
+    int NatLookup(int fd, const SquidIpAddress &me, const SquidIpAddress &peer, SquidIpAddress &client, SquidIpAddress &dst);
 
 #if LINUX_TPROXY2
     // only relevant to TPROXY v2 connections.
     // which require the address be set specifically post-connect.
-    int SetTproxy2OutgoingAddr(int fd, const IpAddress &src);
+    int SetTproxy2OutgoingAddr(int fd, const SquidIpAddress &src);
 #endif
 
     /**
@@ -44,7 +44,7 @@ public:
      * \retval true   TPROXY is available.
      * \retval false  TPROXY is not available.
      */
-    bool ProbeForTproxy(IpAddress &test);
+    bool ProbeForTproxy(SquidIpAddress &test);
 
     /**
      \retval 0	Full transparency is disabled.
@@ -103,7 +103,7 @@ private:
      \retval 0     Successfuly located the new address.
      \retval -1    An error occured during NAT lookups.
      */
-    int NetfilterInterception(int fd, const IpAddress &me, IpAddress &client, int silent);
+    int NetfilterInterception(int fd, const SquidIpAddress &me, SquidIpAddress &client, int silent);
 
     /**
      * perform Lookups on Netfilter fully-transparent interception targets (TPROXY).
@@ -117,7 +117,7 @@ private:
      \retval 0     Successfuly located the new address.
      \retval -1    An error occured during NAT lookups.
      */
-    int NetfilterTransparent(int fd, const IpAddress &me, IpAddress &dst, int silent);
+    int NetfilterTransparent(int fd, const SquidIpAddress &me, SquidIpAddress &dst, int silent);
 
     /**
      * perform Lookups on IPFW interception.
@@ -131,7 +131,7 @@ private:
      \retval 0     Successfuly located the new address.
      \retval -1    An error occured during NAT lookups.
      */
-    int IpfwInterception(int fd, const IpAddress &me, IpAddress &client, int silent);
+    int IpfwInterception(int fd, const SquidIpAddress &me, SquidIpAddress &client, int silent);
 
     /**
      * perform Lookups on IPF interception.
@@ -140,7 +140,7 @@ private:
      \retval 0     Successfuly located the new address.
      \retval -1    An error occured during NAT lookups.
      */
-    int IpfInterception(int fd, const IpAddress &me, IpAddress &client, IpAddress &dst, int silent);
+    int IpfInterception(int fd, const SquidIpAddress &me, SquidIpAddress &client, SquidIpAddress &dst, int silent);
 
     /**
      * perform Lookups on PF interception.
@@ -149,7 +149,7 @@ private:
      \retval 0     Successfuly located the new address.
      \retval -1    An error occured during NAT lookups.
      */
-    int PfInterception(int fd, const IpAddress &me, IpAddress &client, IpAddress &dst, int silent);
+    int PfInterception(int fd, const SquidIpAddress &me, SquidIpAddress &client, SquidIpAddress &dst, int silent);
 
     int transparent_active;
     int intercept_active;
diff --git a/src/ip/testIpAddress.cc b/src/ip/testIpAddress.cc
index e908b06..c31e6d3 100644
--- a/src/ip/testIpAddress.cc
+++ b/src/ip/testIpAddress.cc
@@ -34,7 +34,7 @@ time_t squid_curtime = 0;
 void
 testIpAddress::testDefaults()
 {
-    IpAddress anIPA;
+    SquidIpAddress anIPA;
 
     /* test stored values */
     CPPUNIT_ASSERT( anIPA.IsAnyAddr() );
@@ -54,7 +54,7 @@ testIpAddress::testInAddrConstructor()
     inval.s_addr = htonl(0xC0A8640C);
     outval.s_addr = htonl(0x00000000);
 
-    IpAddress anIPA(inval);
+    SquidIpAddress anIPA(inval);
 
     /* test stored values */
     CPPUNIT_ASSERT( !anIPA.IsAnyAddr() );
@@ -78,7 +78,7 @@ testIpAddress::testInAddr6Constructor()
     inval.s6_addr32[2] = htonl(0xFFFFFFFF);
     inval.s6_addr32[3] = htonl(0xFFFFFFFF);
 
-    IpAddress anIPA(inval);
+    SquidIpAddress anIPA(inval);
 
     /* test stored values */
     CPPUNIT_ASSERT( !anIPA.IsAnyAddr() );
@@ -107,7 +107,7 @@ testIpAddress::testSockAddrConstructor()
     insock.sin_len = sizeof(struct sockaddr_in);
 #endif
 
-    IpAddress anIPA((const struct sockaddr_in)insock);
+    SquidIpAddress anIPA((const struct sockaddr_in)insock);
 
     /* test stored values */
     CPPUNIT_ASSERT( !anIPA.IsAnyAddr() );
@@ -139,7 +139,7 @@ testIpAddress::testSockAddr6Constructor()
     insock.sin6_len = sizeof(struct sockaddr_in6);
 #endif
 
-    IpAddress anIPA((const struct sockaddr_in6)insock);
+    SquidIpAddress anIPA((const struct sockaddr_in6)insock);
 
     /* test stored values */
     CPPUNIT_ASSERT( !anIPA.IsAnyAddr() );
@@ -169,8 +169,8 @@ testIpAddress::testCopyConstructor()
     insock.sin_len = sizeof(struct sockaddr_in);
 #endif
 
-    IpAddress inIPA(insock);
-    IpAddress outIPA(inIPA);
+    SquidIpAddress inIPA(insock);
+    SquidIpAddress outIPA(inIPA);
 
 
     /* test stored values */
@@ -196,7 +196,7 @@ testIpAddress::testHostentConstructor()
     hp = gethostbyname("192.168.100.12");
     CPPUNIT_ASSERT( hp != NULL /* gethostbyname failure.*/ );
 
-    IpAddress anIPA(*hp);
+    SquidIpAddress anIPA(*hp);
 
     /* test stored values */
     CPPUNIT_ASSERT( !anIPA.IsAnyAddr() );
@@ -217,7 +217,7 @@ testIpAddress::testStringConstructor()
 
     expectval.s_addr = htonl(0xC0A8640C);
 
-    IpAddress anIPA = "192.168.100.12";
+    SquidIpAddress anIPA = "192.168.100.12";
 
     /* test stored values */
     CPPUNIT_ASSERT( !anIPA.IsAnyAddr() );
@@ -237,7 +237,7 @@ testIpAddress::testStringConstructor()
     expectv6.s6_addr32[2] = htonl(0x00000000);
     expectv6.s6_addr32[3] = htonl(0x00000045);
 
-    IpAddress bnIPA = "2000:800::45";
+    SquidIpAddress bnIPA = "2000:800::45";
 
 //char test[256];
 //bnIPA.NtoA(test, 256);
@@ -254,7 +254,7 @@ testIpAddress::testStringConstructor()
     CPPUNIT_ASSERT( memcmp( &expectv6, &outval6, sizeof(struct in6_addr)) == 0 );
 
     /* test IPv6 as an old netmask format. This is invalid but sometimes use. */
-    IpAddress cnIPA = "ffff:ffff:fff0::";
+    SquidIpAddress cnIPA = "ffff:ffff:fff0::";
 
     expectv6.s6_addr32[0] = htonl(0xFFFFFFFF);
     expectv6.s6_addr32[1] = htonl(0xFFF00000);
@@ -275,7 +275,7 @@ testIpAddress::testStringConstructor()
 void
 testIpAddress::testSetEmpty()
 {
-    IpAddress anIPA;
+    SquidIpAddress anIPA;
     struct in_addr inval;
 
     inval.s_addr = htonl(0xC0A8640C);
@@ -304,8 +304,8 @@ testIpAddress::testSetEmpty()
 void
 testIpAddress::testBooleans()
 {
-    IpAddress lhsIPA;
-    IpAddress rhsIPA;
+    SquidIpAddress lhsIPA;
+    SquidIpAddress rhsIPA;
     struct in_addr valLow;
     struct in_addr valHigh;
 
@@ -418,7 +418,7 @@ testIpAddress::testNtoA()
 {
     struct in_addr inval;
     char buf[MAX_IPSTRLEN];
-    IpAddress anIPA;
+    SquidIpAddress anIPA;
 
     anIPA.SetAnyAddr();
 
@@ -446,7 +446,7 @@ testIpAddress::testToURL_fromInAddr()
 
     inval.s_addr = htonl(0xC0A8640C);
 
-    IpAddress anIPA(inval);
+    SquidIpAddress anIPA(inval);
 
     /* test values */
     anIPA.ToURL(buf,MAX_IPSTRLEN);
@@ -460,7 +460,7 @@ testIpAddress::testToURL_fromInAddr()
     ip6val.s6_addr32[2] = htonl(0xFFFFFFFF);
     ip6val.s6_addr32[3] = htonl(0xFFFFFFFF);
 
-    IpAddress bnIPA(ip6val);
+    SquidIpAddress bnIPA(ip6val);
 
     bnIPA.ToURL(buf,MAX_IPSTRLEN);
     CPPUNIT_ASSERT( memcmp("[c0a8:640c:ffff:ffff:ffff:ffff:ffff:ffff]", buf, 41) == 0 );
@@ -477,7 +477,7 @@ testIpAddress::testToURL_fromSockAddr()
     sock.sin_len = sizeof(struct sockaddr_in);
 #endif
 
-    IpAddress anIPA(sock);
+    SquidIpAddress anIPA(sock);
     char buf[MAX_IPSTRLEN];
 
     /* test values */
@@ -497,7 +497,7 @@ testIpAddress::testToURL_fromSockAddr()
     ip6val.sin6_len = sizeof(struct sockaddr_in6);
 #endif
 
-    IpAddress bnIPA(ip6val);
+    SquidIpAddress bnIPA(ip6val);
 
     bnIPA.ToURL(buf,MAX_IPSTRLEN);
     CPPUNIT_ASSERT( memcmp("[c0a8:640c:ffff:ffff:ffff:ffff:ffff:ffff]:80", buf, 44) == 0 );
@@ -511,7 +511,7 @@ testIpAddress::testGetReverseString()
     struct in_addr ipv4val;
     ipv4val.s_addr = htonl(0xC0A8640C);
 
-    IpAddress v4IPA(ipv4val);
+    SquidIpAddress v4IPA(ipv4val);
 
     /* test IPv4 output */
     v4IPA.GetReverseString(buf);
@@ -530,7 +530,7 @@ testIpAddress::testGetReverseString()
     ip6val.s6_addr32[2] = htonl(0xFFFFFFFF);
     ip6val.s6_addr32[3] = htonl(0xFFFFFFFF);
 
-    IpAddress v6IPA(ip6val);
+    SquidIpAddress v6IPA(ip6val);
 
     /* test IPv6 output */
     v6IPA.GetReverseString(buf);
@@ -541,8 +541,8 @@ void
 testIpAddress::testMasking()
 {
     char buf[MAX_IPSTRLEN];
-    IpAddress anIPA;
-    IpAddress maskIPA;
+    SquidIpAddress anIPA;
+    SquidIpAddress maskIPA;
 
     /* Test Basic CIDR Routine */
     anIPA.SetAnyAddr();
@@ -572,7 +572,7 @@ testIpAddress::testMasking()
     CPPUNIT_ASSERT( anIPA.NtoA(buf,MAX_IPSTRLEN) != NULL );
     CPPUNIT_ASSERT( memcmp("ffff:ffff:ffff:ffff:ffff::", buf, 26) == 0 );
 
-    /* Test Network Bitmask from IpAddress */
+    /* Test Network Bitmask from SquidIpAddress */
     anIPA.SetNoAddr();
     maskIPA = "255.255.240.0";
     CPPUNIT_ASSERT_EQUAL( 20 , maskIPA.GetCIDR() );
@@ -629,7 +629,7 @@ testIpAddress::testAddrInfo()
 
     hints.ai_flags = AI_NUMERICHOST;
 
-    IpAddress anIP = "127.0.0.1";
+    SquidIpAddress anIP = "127.0.0.1";
 
     /* assert this just to check that getaddrinfo is working properly */
     CPPUNIT_ASSERT( xgetaddrinfo("127.0.0.1", NULL, &hints, &expect ) == 0 );
@@ -714,7 +714,7 @@ testIpAddress::testBugNullingDisplay()
 
     expectval.s_addr = htonl(0xC0A8640C);
 
-    IpAddress anIPA = "192.168.100.12";
+    SquidIpAddress anIPA = "192.168.100.12";
 
 
     /* test stored values */
diff --git a/src/ipc.cc b/src/ipc.cc
index 9e7968d..3fcdf90 100644
--- a/src/ipc.cc
+++ b/src/ipc.cc
@@ -73,11 +73,11 @@ PutEnvironment()
 }
 
 pid_t
-ipcCreate(int type, const char *prog, const char *const args[], const char *name, IpAddress &local_addr, int *rfd, int *wfd, void **hIpc)
+ipcCreate(int type, const char *prog, const char *const args[], const char *name, SquidIpAddress &local_addr, int *rfd, int *wfd, void **hIpc)
 {
     pid_t pid;
-    IpAddress ChS;
-    IpAddress PaS;
+    SquidIpAddress ChS;
+    SquidIpAddress PaS;
     struct addrinfo *AI = NULL;
     int crfd = -1;
     int prfd = -1;
diff --git a/src/ipc_win32.cc b/src/ipc_win32.cc
index b326f9a..2ce3a9f 100644
--- a/src/ipc_win32.cc
+++ b/src/ipc_win32.cc
@@ -49,7 +49,7 @@ struct ipc_params {
     int type;
     int crfd;
     int cwfd;
-    IpAddress local_addr;
+    SquidIpAddress local_addr;
     struct addrinfo PS;
     const char *prog;
     char **args;
@@ -107,7 +107,7 @@ PutEnvironment()
 }
 
 pid_t
-ipcCreate(int type, const char *prog, const char *const args[], const char *name, IpAddress &local_addr, int *rfd, int *wfd, void **hIpc)
+ipcCreate(int type, const char *prog, const char *const args[], const char *name, SquidIpAddress &local_addr, int *rfd, int *wfd, void **hIpc)
 {
     unsigned long thread;
 
@@ -117,7 +117,7 @@ ipcCreate(int type, const char *prog, const char *const args[], const char *name
     DWORD ecode = 0;
     pid_t pid;
 
-    IpAddress tmp_addr;
+    SquidIpAddress tmp_addr;
     struct addrinfo *aiCS = NULL;
     struct addrinfo *aiPS = NULL;
 
@@ -254,7 +254,7 @@ ipcCreate(int type, const char *prog, const char *const args[], const char *name
         return ipcCloseAllFD(prfd, pwfd, crfd, cwfd);
     }
 
-    /* NP: tmp_addr was left with eiether empty or aiCS in IpAddress format */
+    /* NP: tmp_addr was left with eiether empty or aiCS in SquidIpAddress format */
     if (comm_connect_addr(pwfd, tmp_addr) == COMM_ERROR) {
         CloseHandle((HANDLE) thread);
         return ipcCloseAllFD(prfd, pwfd, -1, -1);
@@ -379,8 +379,8 @@ ipc_thread_1(void *in_params)
     int prfd_ipc = -1, pwfd_ipc = -1, crfd_ipc = -1, cwfd_ipc = -1;
     char *prog = NULL, *buf1 = NULL;
 
-    IpAddress PS_ipc;
-    IpAddress CS_ipc;
+    SquidIpAddress PS_ipc;
+    SquidIpAddress CS_ipc;
     struct addrinfo *aiPS_ipc = NULL;
     struct addrinfo *aiCS_ipc = NULL;
 
@@ -390,8 +390,8 @@ ipc_thread_1(void *in_params)
     int cwfd = params->cwfd;
     char **args = params->args;
 
-    IpAddress PS = params->PS;
-    IpAddress local_addr = params->local_addr;
+    SquidIpAddress PS = params->PS;
+    SquidIpAddress local_addr = params->local_addr;
 
     buf1 = (char *)xcalloc(1, 8192);
     strcpy(buf1, params->prog);
diff --git a/src/ipcache.cc b/src/ipcache.cc
index 95f33d7..db2ed8f 100644
--- a/src/ipcache.cc
+++ b/src/ipcache.cc
@@ -431,7 +431,7 @@ ipcacheParse(ipcache_entry *i, const char *inbuf)
     if (ipcount > 0) {
         int j, k;
 
-        i->addrs.in_addrs = (IpAddress *)xcalloc(ipcount, sizeof(IpAddress));
+        i->addrs.in_addrs = (SquidIpAddress *)xcalloc(ipcount, sizeof(SquidIpAddress));
         for (int l = 0; l < ipcount; l++)
             i->addrs.in_addrs[l].SetEmpty(); // perform same init actions as constructor would.
         i->addrs.bad_mask = (unsigned char *)xcalloc(ipcount, sizeof(unsigned char));
@@ -564,7 +564,7 @@ ipcacheParse(ipcache_entry *i, rfc1035_rr * answers, int nr, const char *error_m
         return 0;
     }
 
-    i->addrs.in_addrs = (IpAddress *)xcalloc(na, sizeof(IpAddress));
+    i->addrs.in_addrs = (SquidIpAddress *)xcalloc(na, sizeof(SquidIpAddress));
     for (int l = 0; l < na; l++)
         i->addrs.in_addrs[l].SetEmpty(); // perform same init actions as constructor would.
     i->addrs.bad_mask = (unsigned char *)xcalloc(na, sizeof(unsigned char));
@@ -786,8 +786,8 @@ ipcache_init(void)
     memset(&lru_list, '\0', sizeof(lru_list));
     memset(&static_addrs, '\0', sizeof(ipcache_addrs));
 
-    static_addrs.in_addrs = (IpAddress *)xcalloc(1, sizeof(IpAddress));
-    static_addrs.in_addrs->SetEmpty(); // properly setup the IpAddress!
+    static_addrs.in_addrs = (SquidIpAddress *)xcalloc(1, sizeof(SquidIpAddress));
+    static_addrs.in_addrs->SetEmpty(); // properly setup the SquidIpAddress!
     static_addrs.bad_mask = (unsigned char *)xcalloc(1, sizeof(unsigned char));
     ipcache_high = (long) (((float) Config.ipcache.size *
                             (float) Config.ipcache.high) / (float) 100);
@@ -960,7 +960,7 @@ stat_ipcache_get(StoreEntry * sentry)
 
 #if DNS_CNAME
 /**
- * Takes two IpAddress arrays and merges them into a single array
+ * Takes two SquidIpAddress arrays and merges them into a single array
  * which is allocated dynamically to fit the number of unique addresses
  *
  \param aaddrs	One list to merge
@@ -971,19 +971,19 @@ stat_ipcache_get(StoreEntry * sentry)
  \param outlen	Size of list out
  */
 void
-ipcacheMergeIPLists(const IpAddress *aaddrs, const int alen,
-                    const IpAddress *baddrs, const int blen,
-                    IpAddress **out, int &outlen )
+ipcacheMergeIPLists(const SquidIpAddress *aaddrs, const int alen,
+                    const SquidIpAddress *baddrs, const int blen,
+                    SquidIpAddress **out, int &outlen )
 {
     int fc=0, t=0, c=0;
 
-    IpAddress const *ip4ptrs[255];
-    IpAddress const *ip6ptrs[255];
+    SquidIpAddress const *ip4ptrs[255];
+    SquidIpAddress const *ip6ptrs[255];
     int num_ip4 = 0;
     int num_ip6 = 0;
 
-    memset(ip4ptrs, 0, sizeof(IpAddress*)*255);
-    memset(ip6ptrs, 0, sizeof(IpAddress*)*255);
+    memset(ip4ptrs, 0, sizeof(SquidIpAddress*)*255);
+    memset(ip6ptrs, 0, sizeof(SquidIpAddress*)*255);
 
     // for each unique address in list A - grab ptr
     for (t = 0; t < alen; t++) {
@@ -1039,7 +1039,7 @@ ipcacheMergeIPLists(const IpAddress *aaddrs, const int alen,
     debugs(14, 5, "ipcacheMergeIPLists: Merge " << alen << "+" << blen << " into " << fc << " unique IPs.");
 
     // copy the old IPs into the new list buffer.
-    (*out) = (IpAddress*)xcalloc(fc, sizeof(IpAddress));
+    (*out) = (SquidIpAddress*)xcalloc(fc, sizeof(SquidIpAddress));
     outlen=0;
 
     assert(out != NULL);
@@ -1068,7 +1068,7 @@ ipcacheHandleCnameRecurse(const ipcache_addrs *addrs, const DnsLookupDetails &,
 #if DNS_CNAME
     ipcache_entry *i = NULL;
     char *pname = NULL;
-    IpAddress *tmpbuf = NULL;
+    SquidIpAddress *tmpbuf = NULL;
     int fc = 0;
     int ttl = 0;
     generic_cbdata* gcb = (generic_cbdata*)cbdata;
@@ -1204,7 +1204,7 @@ ipcache_addrs *
 ipcacheCheckNumeric(const char *name)
 {
 
-    IpAddress ip;
+    SquidIpAddress ip;
     /* check if it's already a IP address in text form. */
 
     /* it may be IPv6-wrapped */
@@ -1308,7 +1308,7 @@ ipcacheCycleAddr(const char *name, ipcache_addrs * ia)
  \param addr	specific addres to be marked bad
  */
 void
-ipcacheMarkBadAddr(const char *name, IpAddress &addr)
+ipcacheMarkBadAddr(const char *name, SquidIpAddress &addr)
 {
     ipcache_entry *i;
     ipcache_addrs *ia;
@@ -1365,7 +1365,7 @@ ipcacheMarkAllGood(const char *name)
 
 /// \ingroup IPCacheAPI
 void
-ipcacheMarkGoodAddr(const char *name, IpAddress &addr)
+ipcacheMarkGoodAddr(const char *name, SquidIpAddress &addr)
 {
     ipcache_entry *i;
     ipcache_addrs *ia;
@@ -1448,7 +1448,7 @@ ipcacheAddEntryFromHosts(const char *name, const char *ipaddr)
 {
     ipcache_entry *i;
 
-    IpAddress ip;
+    SquidIpAddress ip;
 
     if (!(ip = ipaddr)) {
         if (strchr(ipaddr, ':') && strspn(ipaddr, "0123456789abcdefABCDEF:") == strlen(ipaddr)) {
@@ -1476,7 +1476,7 @@ ipcacheAddEntryFromHosts(const char *name, const char *ipaddr)
     i->addrs.cur = 0;
     i->addrs.badcount = 0;
 
-    i->addrs.in_addrs = (IpAddress *)xcalloc(1, sizeof(IpAddress));
+    i->addrs.in_addrs = (SquidIpAddress *)xcalloc(1, sizeof(SquidIpAddress));
     i->addrs.bad_mask = (unsigned char *)xcalloc(1, sizeof(unsigned char));
     i->addrs.in_addrs[0] = ip;
     i->addrs.bad_mask[0] = FALSE;
diff --git a/src/neighbors.cc b/src/neighbors.cc
index bcefbcb..a499a61 100644
--- a/src/neighbors.cc
+++ b/src/neighbors.cc
@@ -68,7 +68,7 @@ static void peerCountMcastPeersStart(void *data);
 static void peerCountMcastPeersSchedule(peer * p, time_t when);
 static IRCB peerCountHandleIcpReply;
 
-static void neighborIgnoreNonPeer(const IpAddress &, icp_opcode);
+static void neighborIgnoreNonPeer(const SquidIpAddress &, icp_opcode);
 static OBJH neighborDumpPeers;
 static OBJH neighborDumpNonPeers;
 static void dump_peers(StoreEntry * sentry, peer * peers);
@@ -96,7 +96,7 @@ neighborTypeStr(const peer * p)
 
 
 peer *
-whichPeer(const IpAddress &from)
+whichPeer(const SquidIpAddress &from)
 {
     int j;
 
@@ -533,7 +533,7 @@ neighborsRegisterWithCacheManager()
 void
 neighbors_init(void)
 {
-    IpAddress nul;
+    SquidIpAddress nul;
     struct addrinfo *AI = NULL;
     struct servent *sep = NULL;
     const char *me = getMyHostname();
@@ -943,7 +943,7 @@ neighborCountIgnored(peer * p)
 static peer *non_peers = NULL;
 
 static void
-neighborIgnoreNonPeer(const IpAddress &from, icp_opcode opcode)
+neighborIgnoreNonPeer(const SquidIpAddress &from, icp_opcode opcode)
 {
     peer *np;
 
@@ -1003,7 +1003,7 @@ ignoreMulticastReply(peer * p, MemObject * mem)
  */
 void
 
-neighborsUdpAck(const cache_key * key, icp_common_t * header, const IpAddress &from)
+neighborsUdpAck(const cache_key * key, icp_common_t * header, const SquidIpAddress &from)
 {
     peer *p = NULL;
     StoreEntry *entry;
@@ -1363,7 +1363,7 @@ peerProbeConnect(peer * p)
     if (squid_curtime - p->stats.last_connect_probe == 0)
         return ret;/* don't probe to often */
 
-    IpAddress temp(getOutgoingAddr(NULL,p));
+    SquidIpAddress temp(getOutgoingAddr(NULL,p));
 
     // if IPv6 is disabled try to force IPv4-only outgoing.
     if (!Ip::EnableIpv6 && !temp.SetIPv4()) {
@@ -1758,7 +1758,7 @@ dump_peers(StoreEntry * sentry, peer * peers)
 
 #if USE_HTCP
 void
-neighborsHtcpReply(const cache_key * key, htcpReplyData * htcp, const IpAddress &from)
+neighborsHtcpReply(const cache_key * key, htcpReplyData * htcp, const SquidIpAddress &from)
 {
     StoreEntry *e = Store::Root().get(key);
     MemObject *mem = NULL;
diff --git a/src/pconn.cc b/src/pconn.cc
index 2ce60bc..73d1429 100644
--- a/src/pconn.cc
+++ b/src/pconn.cc
@@ -177,7 +177,7 @@ IdleConnList::timeout(int fd, void *data)
 /* ========== PconnPool PRIVATE FUNCTIONS ============================================ */
 
 const char *
-PconnPool::key(const char *host, unsigned short port, const char *domain, IpAddress &client_address)
+PconnPool::key(const char *host, unsigned short port, const char *domain, SquidIpAddress &client_address)
 {
     LOCAL_ARRAY(char, buf, SQUIDHOSTNAMELEN * 3 + 10);
     char ntoabuf[MAX_IPSTRLEN];
@@ -248,7 +248,7 @@ PconnPool::~PconnPool()
 }
 
 void
-PconnPool::push(int fd, const char *host, unsigned short port, const char *domain, IpAddress &client_address)
+PconnPool::push(int fd, const char *host, unsigned short port, const char *domain, SquidIpAddress &client_address)
 {
     IdleConnList *list;
     const char *aKey;
@@ -293,7 +293,7 @@ PconnPool::push(int fd, const char *host, unsigned short port, const char *domai
  * transactions create persistent connections but are not retriable.
  */
 int
-PconnPool::pop(const char *host, unsigned short port, const char *domain, IpAddress &client_address, bool isRetriable)
+PconnPool::pop(const char *host, unsigned short port, const char *domain, SquidIpAddress &client_address, bool isRetriable)
 {
     const char * aKey = key(host, port, domain, client_address);
 
diff --git a/src/pconn.h b/src/pconn.h
index ca54ccc..979df28 100644
--- a/src/pconn.h
+++ b/src/pconn.h
@@ -57,7 +57,7 @@ private:
 };
 
 
-class IpAddress;
+class SquidIpAddress;
 class StoreEntry;
 class IdleConnLimit;
 
@@ -73,8 +73,8 @@ public:
     ~PconnPool();
 
     void moduleInit();
-    void push(int fd, const char *host, unsigned short port, const char *domain, IpAddress &client_address);
-    int pop(const char *host, unsigned short port, const char *domain, IpAddress &client_address, bool retriable);
+    void push(int fd, const char *host, unsigned short port, const char *domain, SquidIpAddress &client_address);
+    int pop(const char *host, unsigned short port, const char *domain, SquidIpAddress &client_address, bool retriable);
     void count(int uses);
     void dumpHist(StoreEntry *e);
     void dumpHash(StoreEntry *e);
@@ -82,7 +82,7 @@ public:
 
 private:
 
-    static const char *key(const char *host, unsigned short port, const char *domain, IpAddress &client_address);
+    static const char *key(const char *host, unsigned short port, const char *domain, SquidIpAddress &client_address);
 
     int hist[PCONN_HIST_SZ];
     hash_table *table;
diff --git a/src/protos.h b/src/protos.h
index 192d495..b777942 100644
--- a/src/protos.h
+++ b/src/protos.h
@@ -80,13 +80,13 @@ SQUIDCEXTERN void parse_IpAddress_list_token(IpAddress_list **, char *);
 
 SQUIDCEXTERN void clientdbInit(void);
 
-SQUIDCEXTERN void clientdbUpdate(const IpAddress &, log_type, protocol_t, size_t);
+SQUIDCEXTERN void clientdbUpdate(const SquidIpAddress &, log_type, protocol_t, size_t);
 
-SQUIDCEXTERN int clientdbCutoffDenied(const IpAddress &);
+SQUIDCEXTERN int clientdbCutoffDenied(const SquidIpAddress &);
 void clientdbDump(StoreEntry *);
 SQUIDCEXTERN void clientdbFreeMemory(void);
 
-SQUIDCEXTERN int clientdbEstablished(const IpAddress &, int);
+SQUIDCEXTERN int clientdbEstablished(const SquidIpAddress &, int);
 SQUIDCEXTERN void clientOpenListenSockets(void);
 SQUIDCEXTERN void clientHttpConnectionsClose(void);
 SQUIDCEXTERN void httpRequestFree(void *);
@@ -133,7 +133,7 @@ SQUIDCEXTERN void idnsInit(void);
 SQUIDCEXTERN void idnsShutdown(void);
 SQUIDCEXTERN void idnsALookup(const char *, IDNSCB *, void *);
 
-SQUIDCEXTERN void idnsPTRLookup(const IpAddress &, IDNSCB *, void *);
+SQUIDCEXTERN void idnsPTRLookup(const SquidIpAddress &, IDNSCB *, void *);
 
 SQUIDCEXTERN void fd_close(int fd);
 SQUIDCEXTERN void fd_open(int fd, unsigned int type, const char *);
@@ -152,14 +152,14 @@ SQUIDCEXTERN void file_map_bit_reset(fileMap *, int);
 SQUIDCEXTERN void filemapFreeMemory(fileMap *);
 
 
-SQUIDCEXTERN void fqdncache_nbgethostbyaddr(IpAddress &, FQDNH *, void *);
+SQUIDCEXTERN void fqdncache_nbgethostbyaddr(SquidIpAddress &, FQDNH *, void *);
 
-SQUIDCEXTERN const char *fqdncache_gethostbyaddr(IpAddress &, int flags);
+SQUIDCEXTERN const char *fqdncache_gethostbyaddr(SquidIpAddress &, int flags);
 SQUIDCEXTERN void fqdncache_init(void);
 SQUIDCEXTERN void fqdnStats(StoreEntry *);
 SQUIDCEXTERN void fqdncacheReleaseInvalid(const char *);
 
-SQUIDCEXTERN const char *fqdnFromAddr(IpAddress &);
+SQUIDCEXTERN const char *fqdnFromAddr(SquidIpAddress &);
 SQUIDCEXTERN int fqdncacheQueueDrain(void);
 SQUIDCEXTERN void fqdncacheFreeMemory(void);
 SQUIDCEXTERN void fqdncache_restart(void);
@@ -290,10 +290,10 @@ SQUIDCEXTERN void snmpConnectionShutdown(void);
 SQUIDCEXTERN void snmpConnectionClose(void);
 SQUIDCEXTERN const char * snmpDebugOid(oid * Name, snint Len, MemBuf &outbuf);
 
-SQUIDCEXTERN void addr2oid(IpAddress &addr, oid *Dest);
-SQUIDCEXTERN void oid2addr(oid *Dest, IpAddress &addr, u_int code);
+SQUIDCEXTERN void addr2oid(SquidIpAddress &addr, oid *Dest);
+SQUIDCEXTERN void oid2addr(oid *Dest, SquidIpAddress &addr, u_int code);
 
-SQUIDCEXTERN IpAddress *client_entry(IpAddress *current);
+SQUIDCEXTERN SquidIpAddress *client_entry(SquidIpAddress *current);
 SQUIDCEXTERN variable_list *snmp_basicFn(variable_list *, snint *);
 SQUIDCEXTERN variable_list *snmp_confFn(variable_list *, snint *);
 SQUIDCEXTERN variable_list *snmp_sysFn(variable_list *, snint *);
@@ -333,8 +333,8 @@ SQUIDCEXTERN void ipcacheInvalidateNegative(const char *);
 SQUIDCEXTERN void ipcache_init(void);
 SQUIDCEXTERN void stat_ipcache_get(StoreEntry *);
 SQUIDCEXTERN void ipcacheCycleAddr(const char *name, ipcache_addrs *);
-SQUIDCEXTERN void ipcacheMarkBadAddr(const char *name, IpAddress &);
-SQUIDCEXTERN void ipcacheMarkGoodAddr(const char *name, IpAddress &);
+SQUIDCEXTERN void ipcacheMarkBadAddr(const char *name, SquidIpAddress &);
+SQUIDCEXTERN void ipcacheMarkGoodAddr(const char *name, SquidIpAddress &);
 SQUIDCEXTERN void ipcacheMarkAllGood(const char *name);
 SQUIDCEXTERN void ipcacheFreeMemory(void);
 SQUIDCEXTERN ipcache_addrs *ipcacheCheckNumeric(const char *name);
@@ -375,7 +375,7 @@ SQUIDCEXTERN int neighborsUdpPing(HttpRequest *,
                                   int *timeout);
 SQUIDCEXTERN void neighborAddAcl(const char *, const char *);
 
-SQUIDCEXTERN void neighborsUdpAck(const cache_key *, icp_common_t *, const IpAddress &);
+SQUIDCEXTERN void neighborsUdpAck(const cache_key *, icp_common_t *, const SquidIpAddress &);
 SQUIDCEXTERN void neighborAdd(const char *, const char *, int, int, int, int, int);
 SQUIDCEXTERN void neighbors_init(void);
 #if USE_HTCP
@@ -401,7 +401,7 @@ SQUIDCEXTERN void peerConnectSucceded(peer *);
 SQUIDCEXTERN void dump_peer_options(StoreEntry *, peer *);
 SQUIDCEXTERN int peerHTTPOkay(const peer *, HttpRequest *);
 
-SQUIDCEXTERN peer *whichPeer(const IpAddress &from);
+SQUIDCEXTERN peer *whichPeer(const SquidIpAddress &from);
 
 SQUIDCEXTERN void peerSelect(HttpRequest *, StoreEntry *, PSC *, void *data);
 SQUIDCEXTERN void peerSelectInit(void);
@@ -413,7 +413,7 @@ SQUIDCEXTERN void peerDigestNeeded(PeerDigest * pd);
 SQUIDCEXTERN void peerDigestNotePeerGone(PeerDigest * pd);
 SQUIDCEXTERN void peerDigestStatsReport(const PeerDigest * pd, StoreEntry * e);
 
-extern IpAddress getOutgoingAddr(HttpRequest * request, struct peer *dst_peer);
+extern SquidIpAddress getOutgoingAddr(HttpRequest * request, struct peer *dst_peer);
 unsigned long getOutgoingTOS(HttpRequest * request);
 
 SQUIDCEXTERN void urnStart(HttpRequest *, StoreEntry *);
@@ -659,7 +659,7 @@ SQUIDCEXTERN pid_t ipcCreate(int type,
                              const char *prog,
                              const char *const args[],
                              const char *name,
-                             IpAddress &local_addr,
+                             SquidIpAddress &local_addr,
                              int *rfd,
                              int *wfd,
                              void **hIpc);
diff --git a/src/redirect.cc b/src/redirect.cc
index ba9c815..01ba886 100644
--- a/src/redirect.cc
+++ b/src/redirect.cc
@@ -53,7 +53,7 @@ typedef struct {
     void *data;
     char *orig_url;
 
-    IpAddress client_addr;
+    SquidIpAddress client_addr;
     const char *client_ident;
     const char *method_s;
     RH *handler;
@@ -198,7 +198,7 @@ redirectStart(ClientHttpRequest * http, RH * handler, void *data)
         clientStreamNode *node = (clientStreamNode *)http->client_stream.tail->prev->data;
         clientReplyContext *repContext = dynamic_cast<clientReplyContext *>(node->data.getRaw());
         assert (repContext);
-        IpAddress tmpnoaddr;
+        SquidIpAddress tmpnoaddr;
         tmpnoaddr.SetNoAddr();
         repContext->setReplyToError(ERR_GATEWAY_FAILURE, status,
                                     http->request->method, NULL,
diff --git a/src/send-announce.cc b/src/send-announce.cc
index 159e251..1998f05 100644
--- a/src/send-announce.cc
+++ b/src/send-announce.cc
@@ -60,7 +60,7 @@ send_announce(const ipcache_addrs *ia, const DnsLookupDetails &, void *junk)
     LOCAL_ARRAY(char, tbuf, 256);
     LOCAL_ARRAY(char, sndbuf, BUFSIZ);
 
-    IpAddress S;
+    SquidIpAddress S;
     char *host = Config.Announce.host;
     char *file = NULL;
     unsigned short port = Config.Announce.port;
diff --git a/src/snmp_agent.cc b/src/snmp_agent.cc
index 1c36bfb..6be8d8f 100644
--- a/src/snmp_agent.cc
+++ b/src/snmp_agent.cc
@@ -200,7 +200,7 @@ snmp_meshPtblFn(variable_list * Var, snint * ErrP)
 {
     variable_list *Answer = NULL;
 
-    IpAddress laddr;
+    SquidIpAddress laddr;
     char *cp = NULL;
     peer *p = NULL;
     int cnt = 0;
diff --git a/src/snmp_core.cc b/src/snmp_core.cc
index b491342..c46b16b 100644
--- a/src/snmp_core.cc
+++ b/src/snmp_core.cc
@@ -39,7 +39,7 @@
 #define SNMP_REQUEST_SIZE 4096
 #define MAX_PROTOSTAT 5
 
-IpAddress theOutSNMPAddr;
+SquidIpAddress theOutSNMPAddr;
 
 typedef struct _mib_tree_entry mib_tree_entry;
 typedef oid *(instance_Fn) (oid * name, snint * len, mib_tree_entry * current, oid_ParseFn ** Fn);
@@ -419,7 +419,7 @@ void
 snmpHandleUdp(int sock, void *not_used)
 {
     LOCAL_ARRAY(char, buf, SNMP_REQUEST_SIZE);
-    IpAddress from;
+    SquidIpAddress from;
     snmp_request_t *snmp_rq;
     int len;
 
@@ -810,8 +810,8 @@ static oid *
 client_Inst(oid * name, snint * len, mib_tree_entry * current, oid_ParseFn ** Fn)
 {
     oid *instance = NULL;
-    IpAddress laddr;
-    IpAddress *aux;
+    SquidIpAddress laddr;
+    SquidIpAddress *aux;
     int size = 0;
     int newshift = 0;
 
@@ -1119,7 +1119,7 @@ snmpSnmplibDebug(int lvl, char *buf)
    oid == 32.1.50.239.162.33.251.20.50.0.0.0.0.0.0.0.0.0.1
 */
 void
-addr2oid(IpAddress &addr, oid * Dest)
+addr2oid(SquidIpAddress &addr, oid * Dest)
 {
     u_int i ;
     u_char *cp = NULL;
@@ -1150,7 +1150,7 @@ addr2oid(IpAddress &addr, oid * Dest)
    IPv6 adress : 20:01:32:ef:a2:21:fb:32:00:00:00:00:00:00:00:00:OO:01
 */
 void
-oid2addr(oid * id, IpAddress &addr, u_int size)
+oid2addr(oid * id, SquidIpAddress &addr, u_int size)
 {
     struct in_addr i4addr;
     struct in6_addr i6addr;
diff --git a/src/ssl/context_storage.cc b/src/ssl/context_storage.cc
index 937e1ec..32d3a6d 100644
--- a/src/ssl/context_storage.cc
+++ b/src/ssl/context_storage.cc
@@ -24,7 +24,7 @@ void Ssl::CertificateStorageAction::run (StoreEntry *sentry)
     stream << "Port" << delimiter << "Max mem(KB)" << delimiter << "Cert number" << delimiter << "KB/cert" << delimiter << "Mem used(KB)" << delimiter << "Mem free(KB)" << endString;
 
     // Add info for each port.
-    for (std::map<IpAddress, LocalContextStorage *>::iterator i = TheGlobalContextStorage.storage.begin(); i != TheGlobalContextStorage.storage.end(); i++) {
+    for (std::map<SquidIpAddress, LocalContextStorage *>::iterator i = TheGlobalContextStorage.storage.begin(); i != TheGlobalContextStorage.storage.end(); i++) {
         stream << i->first << delimiter;
         LocalContextStorage & ssl_store_policy(*(i->second));
         stream << ssl_store_policy.max_memory / 1024 << delimiter;
@@ -125,21 +125,21 @@ Ssl::GlobalContextStorage::GlobalContextStorage()
 
 Ssl::GlobalContextStorage::~GlobalContextStorage()
 {
-    for (std::map<IpAddress, LocalContextStorage *>::iterator i = storage.begin(); i != storage.end(); i++) {
+    for (std::map<SquidIpAddress, LocalContextStorage *>::iterator i = storage.begin(); i != storage.end(); i++) {
         delete i->second;
     }
 }
 
-void Ssl::GlobalContextStorage::addLocalStorage(IpAddress const & address, size_t size_of_store)
+void Ssl::GlobalContextStorage::addLocalStorage(SquidIpAddress const & address, size_t size_of_store)
 {
     assert(reconfiguring);
-    configureStorage.insert(std::pair<IpAddress, size_t>(address, size_of_store));
+    configureStorage.insert(std::pair<SquidIpAddress, size_t>(address, size_of_store));
 }
 
-Ssl::LocalContextStorage & Ssl::GlobalContextStorage::getLocalStorage(IpAddress const & address)
+Ssl::LocalContextStorage & Ssl::GlobalContextStorage::getLocalStorage(SquidIpAddress const & address)
 {
     reconfigureFinish();
-    std::map<IpAddress, LocalContextStorage *>::iterator i = storage.find(address);
+    std::map<SquidIpAddress, LocalContextStorage *>::iterator i = storage.find(address);
     assert (i != storage.end());
     return *(i->second);
 }
@@ -155,8 +155,8 @@ void Ssl::GlobalContextStorage::reconfigureFinish()
         reconfiguring = false;
 
         // remove or change old local storages.
-        for (std::map<IpAddress, LocalContextStorage *>::iterator i = storage.begin(); i != storage.end(); i++) {
-            std::map<IpAddress, size_t>::iterator conf_i = configureStorage.find(i->first);
+        for (std::map<SquidIpAddress, LocalContextStorage *>::iterator i = storage.begin(); i != storage.end(); i++) {
+            std::map<SquidIpAddress, size_t>::iterator conf_i = configureStorage.find(i->first);
             if (conf_i == configureStorage.end()) {
                 storage.erase(i);
             } else {
@@ -165,9 +165,9 @@ void Ssl::GlobalContextStorage::reconfigureFinish()
         }
 
         // add new local storages.
-        for (std::map<IpAddress, size_t>::iterator conf_i = configureStorage.begin(); conf_i != configureStorage.end(); conf_i++ ) {
+        for (std::map<SquidIpAddress, size_t>::iterator conf_i = configureStorage.begin(); conf_i != configureStorage.end(); conf_i++ ) {
             if (storage.find(conf_i->first) == storage.end()) {
-                storage.insert(std::pair<IpAddress, LocalContextStorage *>(conf_i->first, new LocalContextStorage(conf_i->second)));
+                storage.insert(std::pair<SquidIpAddress, LocalContextStorage *>(conf_i->first, new LocalContextStorage(conf_i->second)));
             }
         }
     }
diff --git a/src/ssl/context_storage.h b/src/ssl/context_storage.h
index 0b55888..8f5b9fc 100644
--- a/src/ssl/context_storage.h
+++ b/src/ssl/context_storage.h
@@ -90,9 +90,9 @@ public:
     GlobalContextStorage();
     ~GlobalContextStorage();
     /// Create new SSL context storage for the local listening address/port.
-    void addLocalStorage(IpAddress const & address, size_t size_of_store);
+    void addLocalStorage(SquidIpAddress const & address, size_t size_of_store);
     /// Return the local storage for the given listening address/port.
-    LocalContextStorage & getLocalStorage(IpAddress const & address);
+    LocalContextStorage & getLocalStorage(SquidIpAddress const & address);
     /// When reconfigring should be called this method.
     void reconfigureStart();
 private:
@@ -100,9 +100,9 @@ private:
     void reconfigureFinish();
     bool reconfiguring; ///< True if system reconfiguring now.
     /// Storage used on configure or reconfigure.
-    std::map<IpAddress, size_t> configureStorage;
+    std::map<SquidIpAddress, size_t> configureStorage;
     /// Map for storing all local ip address and their local storages.
-    std::map<IpAddress, LocalContextStorage *> storage;
+    std::map<SquidIpAddress, LocalContextStorage *> storage;
 };
 
 /// Global cache for store all SSL server certificates.
diff --git a/src/structs.h b/src/structs.h
index 4a5b38f..44a6c4d 100644
--- a/src/structs.h
+++ b/src/structs.h
@@ -72,7 +72,7 @@ struct _snmp_request_t {
     long reqid;
     int outlen;
 
-    IpAddress from;
+    SquidIpAddress from;
 
     struct snmp_pdu *PDU;
     ACLChecklist *acl_checklist;
@@ -89,7 +89,7 @@ struct acl_address {
     acl_address *next;
     ACLList *aclList;
 
-    IpAddress addr;
+    SquidIpAddress addr;
 };
 
 struct acl_tos {
@@ -222,9 +222,9 @@ struct SquidConfig {
 
     struct {
 
-        IpAddress router;
+        SquidIpAddress router;
 
-        IpAddress address;
+        SquidIpAddress address;
         int version;
     } Wccp;
 #endif
@@ -233,7 +233,7 @@ struct SquidConfig {
     struct {
         IpAddress_list *router;
 
-        IpAddress address;
+        SquidIpAddress address;
         int forwarding_method;
         int return_method;
         int assignment_method;
@@ -337,17 +337,17 @@ struct SquidConfig {
 
     struct {
 
-        IpAddress udp_incoming;
+        SquidIpAddress udp_incoming;
 
-        IpAddress udp_outgoing;
+        SquidIpAddress udp_outgoing;
 #if SQUID_SNMP
 
-        IpAddress snmp_incoming;
+        SquidIpAddress snmp_incoming;
 
-        IpAddress snmp_outgoing;
+        SquidIpAddress snmp_outgoing;
 #endif
         /* FIXME INET6 : this should really be a CIDR value */
-        IpAddress client_netmask;
+        SquidIpAddress client_netmask;
     } Addrs;
     size_t tcpRcvBufsz;
     size_t udpMaxHitObjsz;
@@ -555,7 +555,7 @@ struct SquidConfig {
 
     struct {
 
-        IpAddress addr;
+        SquidIpAddress addr;
         int ttl;
         unsigned short port;
         char *encode_key;
@@ -787,7 +787,7 @@ struct _http_state_flags {
 };
 
 struct _ipcache_addrs {
-    IpAddress *in_addrs;
+    SquidIpAddress *in_addrs;
     unsigned char *bad_mask;
     unsigned char count;
     unsigned char cur;
@@ -829,7 +829,7 @@ struct peer {
     char *host;
     peer_t type;
 
-    IpAddress in_addr;
+    SquidIpAddress in_addr;
 
     struct {
         int pings_sent;
@@ -923,7 +923,7 @@ struct peer {
 
     int tcp_up;			/* 0 if a connect() fails */
 
-    IpAddress addresses[10];
+    SquidIpAddress addresses[10];
     int n_addresses;
     int rr_count;
     peer *next;
diff --git a/src/tests/stub_comm.cc b/src/tests/stub_comm.cc
index 56a57ad..54f27a2 100644
--- a/src/tests/stub_comm.cc
+++ b/src/tests/stub_comm.cc
@@ -133,7 +133,7 @@ commUnsetNonBlocking(int fd)
 /* bah, cheating on stub count */
 
 pid_t
-ipcCreate(int type, const char *prog, const char *const args[], const char *name, IpAddress &local_addr, int *rfd, int *wfd, void **hIpc)
+ipcCreate(int type, const char *prog, const char *const args[], const char *name, SquidIpAddress &local_addr, int *rfd, int *wfd, void **hIpc)
 {
     fatal ("Not implemented");
     return -1;
diff --git a/src/tools.cc b/src/tools.cc
index 6feae60..d400a04 100644
--- a/src/tools.cc
+++ b/src/tools.cc
@@ -585,7 +585,7 @@ getMyHostname(void)
     LOCAL_ARRAY(char, host, SQUIDHOSTNAMELEN + 1);
     static int present = 0;
     struct addrinfo *AI = NULL;
-    IpAddress sa;
+    SquidIpAddress sa;
 
     if (Config.visibleHostname != NULL)
         return Config.visibleHostname;
diff --git a/src/tunnel.cc b/src/tunnel.cc
index b39703e..373cf88 100644
--- a/src/tunnel.cc
+++ b/src/tunnel.cc
@@ -637,7 +637,7 @@ tunnelStart(ClientHttpRequest * http, int64_t * size_ptr, int *status_ptr)
     statCounter.server.all.requests++;
     statCounter.server.other.requests++;
     /* Create socket. */
-    IpAddress temp = getOutgoingAddr(request,NULL);
+    SquidIpAddress temp = getOutgoingAddr(request,NULL);
 
     // if IPv6 is disabled try to force IPv4-only outgoing.
     if (!Ip::EnableIpv6 && !temp.SetIPv4()) {
diff --git a/src/unlinkd.cc b/src/unlinkd.cc
index cab6c93..0fd2f04 100644
--- a/src/unlinkd.cc
+++ b/src/unlinkd.cc
@@ -192,7 +192,7 @@ void
 unlinkdInit(void)
 {
     const char *args[2];
-    IpAddress localhost;
+    SquidIpAddress localhost;
 
     args[0] = "(unlinkd)";
     args[1] = NULL;
diff --git a/src/wccp.cc b/src/wccp.cc
index 423781c..ab2d058 100644
--- a/src/wccp.cc
+++ b/src/wccp.cc
@@ -91,7 +91,7 @@ static int last_id;
 static int last_assign_buckets_change;
 static unsigned int number_caches;
 
-static IpAddress local_ip;
+static SquidIpAddress local_ip;
 
 static PF wccpHandleUdp;
 static int wccpLowestIP(void);
@@ -204,7 +204,7 @@ static void
 wccpHandleUdp(int sock, void *not_used)
 {
 
-    IpAddress from;
+    SquidIpAddress from;
     int len;
 
     debugs(80, 6, "wccpHandleUdp: Called.");
diff --git a/src/wccp2.cc b/src/wccp2.cc
index a0a2e7a..a61793a 100644
--- a/src/wccp2.cc
+++ b/src/wccp2.cc
@@ -1178,7 +1178,7 @@ wccp2HandleUdp(int sock, void *not_used)
     commSetSelect(sock, COMM_SELECT_READ, wccp2HandleUdp, NULL, 0);
 
     /* FIXME INET6 : drop conversion boundary */
-    IpAddress from_tmp;
+    SquidIpAddress from_tmp;
 
     len = comm_udp_recvfrom(sock,
                             &wccp2_i_see_you,
@@ -1543,7 +1543,7 @@ wccp2HereIam(void *voidnotused)
 
     struct wccp2_mask_identity_info_t *wccp2_mask_identity_info_ptr;
 
-    IpAddress router;
+    SquidIpAddress router;
 
     debugs(80, 6, "wccp2HereIam: Called");
 
@@ -1983,7 +1983,7 @@ wccp2AssignBuckets(void *voidnotused)
 
                 if (wccp2_numrouters > 1) {
                     /* FIXME INET6 : drop temp conversion */
-                    IpAddress tmp_rtr(router);
+                    SquidIpAddress tmp_rtr(router);
                     comm_udp_sendto(theWccp2Connection,
                                     tmp_rtr,
                                     &wccp_packet,
diff --git a/src/win32.cc b/src/win32.cc
index 0707b6c..ee4f1c0 100644
--- a/src/win32.cc
+++ b/src/win32.cc
@@ -55,9 +55,9 @@ int WIN32_pipe(int handles[2])
     int new_socket;
     fde *F = NULL;
 
-    IpAddress localhost;
-    IpAddress handle0;
-    IpAddress handle1;
+    SquidIpAddress localhost;
+    SquidIpAddress handle0;
+    SquidIpAddress handle1;
     struct addrinfo *AI = NULL;
 
     localhost.SetLocalhost();
diff --git a/tools/cachemgr.cc b/tools/cachemgr.cc
index 1af18d1..c063b36 100644
--- a/tools/cachemgr.cc
+++ b/tools/cachemgr.cc
@@ -791,7 +791,7 @@ process_request(cachemgr_request * req)
 
     char ipbuf[MAX_IPSTRLEN];
     struct addrinfo *AI = NULL;
-    IpAddress S;
+    SquidIpAddress S;
     int s;
     int l;
 
diff --git a/tools/squidclient.cc b/tools/squidclient.cc
index b298732..a25dc58 100644
--- a/tools/squidclient.cc
+++ b/tools/squidclient.cc
@@ -100,9 +100,9 @@ using namespace Squid;
 typedef void SIGHDLR(int sig);
 
 /* Local functions */
-static int client_comm_bind(int, const IpAddress &);
+static int client_comm_bind(int, const SquidIpAddress &);
 
-static int client_comm_connect(int, const IpAddress &, struct timeval *);
+static int client_comm_connect(int, const SquidIpAddress &, struct timeval *);
 static void usage(const char *progname);
 
 static int Now(struct timeval *);
@@ -175,7 +175,7 @@ main(int argc, char *argv[])
     int opt_noaccept = 0;
     int opt_verbose = 0;
     const char *hostname, *localhost;
-    IpAddress iaddr;
+    SquidIpAddress iaddr;
     char url[BUFSIZ], msg[MESSAGELEN], buf[BUFSIZ];
     char extra_hdrs[HEADERLEN];
     const char *method = "GET";
@@ -669,7 +669,7 @@ main(int argc, char *argv[])
 }
 
 static int
-client_comm_bind(int sock, const IpAddress &addr)
+client_comm_bind(int sock, const SquidIpAddress &addr)
 {
 
     int res;
@@ -688,7 +688,7 @@ client_comm_bind(int sock, const IpAddress &addr)
 }
 
 static int
-client_comm_connect(int sock, const IpAddress &addr, struct timeval *tvp)
+client_comm_connect(int sock, const SquidIpAddress &addr, struct timeval *tvp)
 {
     int res;
     static struct addrinfo *AI = NULL;
-- 
1.7.10

