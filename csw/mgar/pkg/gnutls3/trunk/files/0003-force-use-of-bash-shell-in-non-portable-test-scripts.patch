From 4c0803855bc61c30e0878c4d30985377a114cd4d Mon Sep 17 00:00:00 2001
From: Yann Rouillard <yann@pleiades.fr.eu.org>
Date: Thu, 8 Aug 2013 23:46:01 +0200
Subject: [PATCH] force use of bash shell in non portable test scripts

---
 Makefile.in                          |   73 +-
 aclocal.m4                           |  173 +-
 config.h.in                          |    3 -
 configure                            |    9 +-
 doc/Makefile.in                      |   76 +-
 doc/credentials/Makefile.in          |   73 +-
 doc/credentials/openpgp/Makefile.in  |   60 +-
 doc/credentials/srp/Makefile.in      |   60 +-
 doc/credentials/x509/Makefile.in     |   60 +-
 doc/cyclo/Makefile.in                |   60 +-
 doc/examples/Makefile.in             |   79 +-
 doc/gnutls.info                      | 2556 ++++++-------
 doc/gnutls.info-1                    | 5064 +++++++++++++------------
 doc/gnutls.info-2                    | 5033 +++++++++++++------------
 doc/gnutls.info-3                    | 5634 ++++++++++++++++++++++------
 doc/gnutls.info-4                    | 6801 +++++++++-------------------------
 doc/gnutls.info-5                    |  Bin 16644 -> 0 bytes
 doc/latex/Makefile.in                |   60 +-
 doc/manpages/Makefile.in             |   60 +-
 doc/reference/Makefile.in            |   60 +-
 doc/scripts/Makefile.in              |   60 +-
 extra/Makefile.in                    |   74 +-
 extra/includes/Makefile.in           |   60 +-
 gl/Makefile.in                       |   74 +-
 gl/tests/Makefile.in                 |  207 +-
 guile/Makefile.in                    |   73 +-
 guile/modules/Makefile.in            |   60 +-
 guile/src/Makefile.in                |   61 +-
 guile/tests/Makefile.in              |   62 +-
 lib/Makefile.in                      |   76 +-
 lib/accelerated/Makefile.in          |   74 +-
 lib/accelerated/x86/Makefile.in      |   61 +-
 lib/algorithms/Makefile.in           |   61 +-
 lib/auth/Makefile.in                 |   61 +-
 lib/ext/Makefile.in                  |   61 +-
 lib/extras/Makefile.in               |   61 +-
 lib/includes/Makefile.in             |   60 +-
 lib/minitasn1/Makefile.in            |   61 +-
 lib/nettle/Makefile.in               |   61 +-
 lib/opencdk/Makefile.in              |   61 +-
 lib/openpgp/Makefile.in              |   61 +-
 lib/x509/Makefile.in                 |   61 +-
 libdane/Makefile.in                  |   74 +-
 libdane/includes/Makefile.in         |   60 +-
 src/Makefile.in                      |   93 +-
 src/crywrap/Makefile.in              |   61 +-
 src/libopts/Makefile.in              |   61 +-
 tests/Makefile.in                    |  146 +-
 tests/cert-tests/Makefile.in         |   62 +-
 tests/dsa/Makefile.in                |   62 +-
 tests/dsa/testdsa                    |    3 +-
 tests/dtls/Makefile.in               |   63 +-
 tests/ecdsa/Makefile.in              |   62 +-
 tests/key-id/Makefile.in             |   62 +-
 tests/openpgp-certs/Makefile.in      |   62 +-
 tests/openpgp-certs/testcerts        |    2 +-
 tests/pkcs1-padding/Makefile.in      |   62 +-
 tests/pkcs12-decode/Makefile.in      |   62 +-
 tests/pkcs8-decode/Makefile.in       |   62 +-
 tests/rsa-md5-collision/Makefile.in  |   62 +-
 tests/safe-renegotiation/Makefile.in |   68 +-
 tests/scripts/Makefile.in            |   60 +-
 tests/scripts/common.sh              |    2 +-
 tests/sha2/Makefile.in               |   62 +-
 tests/slow/Makefile.in               |   65 +-
 tests/srp/Makefile.in                |   63 +-
 tests/suite/Makefile.in              |   65 +-
 tests/userid/Makefile.in             |   62 +-
 68 files changed, 13842 insertions(+), 15271 deletions(-)
 delete mode 100644 doc/gnutls.info-5

diff --git a/Makefile.in b/Makefile.in
index 6094f8b..5384e41 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1709,12 +1681,13 @@ distclean-libtool:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/aclocal.m4 b/aclocal.m4
index 1d13dcd..bd383f8 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -1,6 +1,6 @@
-# generated automatically by aclocal 1.13.3 -*- Autoconf -*-
+# generated automatically by aclocal 1.13.1 -*- Autoconf -*-
 
-# Copyright (C) 1996-2013 Free Software Foundation, Inc.
+# Copyright (C) 1996-2012 Free Software Foundation, Inc.
 
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -35,7 +35,7 @@ AC_DEFUN([AM_AUTOMAKE_VERSION],
 [am__api_version='1.13'
 dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to
 dnl require some minimum version.  Point them to the right macro.
-m4_if([$1], [1.13.3], [],
+m4_if([$1], [1.13.1], [],
       [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl
 ])
 
@@ -51,7 +51,7 @@ m4_define([_AM_AUTOCONF_VERSION], [])
 # Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.
 # This function is AC_REQUIREd by AM_INIT_AUTOMAKE.
 AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],
-[AM_AUTOMAKE_VERSION([1.13.3])dnl
+[AM_AUTOMAKE_VERSION([1.13.1])dnl
 m4_ifndef([AC_AUTOCONF_VERSION],
   [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl
 _AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])
@@ -452,7 +452,7 @@ AC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],
     DEPDIR=`sed -n 's/^DEPDIR = //p' < "$mf"`
     test -z "$DEPDIR" && continue
     am__include=`sed -n 's/^am__include = //p' < "$mf"`
-    test -z "$am__include" && continue
+    test -z "am__include" && continue
     am__quote=`sed -n 's/^am__quote = //p' < "$mf"`
     # Find all dependency output files, they are included files with
     # $(DEPDIR) in their names.  We invoke sed twice because it is the
@@ -808,8 +808,7 @@ fi
 AC_DEFUN([AM_PROG_MKDIR_P],
 [AC_PREREQ([2.60])dnl
 AC_REQUIRE([AC_PROG_MKDIR_P])dnl
-dnl FIXME we are no longer going to remove this! adjust warning
-dnl FIXME message accordingly.
+dnl FIXME to be removed in Automake 1.14.
 AC_DIAGNOSE([obsolete],
 [$0: this macro is deprecated, and will soon be removed.
 You should use the Autoconf-provided 'AC][_PROG_MKDIR_P' macro instead,
@@ -1068,114 +1067,76 @@ AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])
 # Substitute a variable $(am__untar) that extract such
 # a tarball read from stdin.
 #     $(am__untar) < result.tar
-#
 AC_DEFUN([_AM_PROG_TAR],
 [# Always define AMTAR for backward compatibility.  Yes, it's still used
 # in the wild :-(  We should find a proper way to deprecate it ...
 AC_SUBST([AMTAR], ['$${TAR-tar}'])
-
-# We'll loop over all known methods to create a tar archive until one works.
+m4_if([$1], [v7],
+     [am__tar='$${TAR-tar} chof - "$$tardir"' am__untar='$${TAR-tar} xf -'],
+     [m4_case([$1], [ustar],, [pax],,
+              [m4_fatal([Unknown tar format])])
+AC_MSG_CHECKING([how to create a $1 tar archive])
+# Loop over all known methods to create a tar archive until one works.
 _am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'
+_am_tools=${am_cv_prog_tar_$1-$_am_tools}
+# Do not fold the above two line into one, because Tru64 sh and
+# Solaris sh will not grok spaces in the rhs of '-'.
+for _am_tool in $_am_tools
+do
+  case $_am_tool in
+  gnutar)
+    for _am_tar in tar gnutar gtar;
+    do
+      AM_RUN_LOG([$_am_tar --version]) && break
+    done
+    am__tar="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$$tardir"'
+    am__tar_="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$tardir"'
+    am__untar="$_am_tar -xf -"
+    ;;
+  plaintar)
+    # Must skip GNU tar: if it does not support --format= it doesn't create
+    # ustar tarball either.
+    (tar --version) >/dev/null 2>&1 && continue
+    am__tar='tar chf - "$$tardir"'
+    am__tar_='tar chf - "$tardir"'
+    am__untar='tar xf -'
+    ;;
+  pax)
+    am__tar='pax -L -x $1 -w "$$tardir"'
+    am__tar_='pax -L -x $1 -w "$tardir"'
+    am__untar='pax -r'
+    ;;
+  cpio)
+    am__tar='find "$$tardir" -print | cpio -o -H $1 -L'
+    am__tar_='find "$tardir" -print | cpio -o -H $1 -L'
+    am__untar='cpio -i -H $1 -d'
+    ;;
+  none)
+    am__tar=false
+    am__tar_=false
+    am__untar=false
+    ;;
+  esac
 
-m4_if([$1], [v7],
-  [am__tar='$${TAR-tar} chof - "$$tardir"' am__untar='$${TAR-tar} xf -'],
-
-  [m4_case([$1],
-    [ustar],
-     [# The POSIX 1988 'ustar' format is defined with fixed-size fields.
-      # There is notably a 21 bits limit for the UID and the GID.  In fact,
-      # the 'pax' utility can hang on bigger UID/GID (see automake bug#8343
-      # and bug#13588).
-      am_max_uid=2097151 # 2^21 - 1
-      am_max_gid=$am_max_uid
-      # The $UID and $GID variables are not portable, so we need to resort
-      # to the POSIX-mandated id(1) utility.  Errors in the 'id' calls
-      # below are definitely unexpected, so allow the users to see them
-      # (that is, avoid stderr redirection).
-      am_uid=`id -u || echo unknown`
-      am_gid=`id -g || echo unknown`
-      AC_MSG_CHECKING([whether UID '$am_uid' is supported by ustar format])
-      if test $am_uid -le $am_max_uid; then
-         AC_MSG_RESULT([yes])
-      else
-         AC_MSG_RESULT([no])
-         _am_tools=none
-      fi
-      AC_MSG_CHECKING([whether GID '$am_gid' is supported by ustar format])
-      if test $am_gid -le $am_max_gid; then
-         AC_MSG_RESULT([yes])
-      else
-        AC_MSG_RESULT([no])
-        _am_tools=none
-      fi],
-
-  [pax],
-    [],
-
-  [m4_fatal([Unknown tar format])])
-
-  AC_MSG_CHECKING([how to create a $1 tar archive])
-
-  # Go ahead even if we have the value already cached.  We do so because we
-  # need to set the values for the 'am__tar' and 'am__untar' variables.
-  _am_tools=${am_cv_prog_tar_$1-$_am_tools}
-
-  for _am_tool in $_am_tools; do
-    case $_am_tool in
-    gnutar)
-      for _am_tar in tar gnutar gtar; do
-        AM_RUN_LOG([$_am_tar --version]) && break
-      done
-      am__tar="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$$tardir"'
-      am__tar_="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$tardir"'
-      am__untar="$_am_tar -xf -"
-      ;;
-    plaintar)
-      # Must skip GNU tar: if it does not support --format= it doesn't create
-      # ustar tarball either.
-      (tar --version) >/dev/null 2>&1 && continue
-      am__tar='tar chf - "$$tardir"'
-      am__tar_='tar chf - "$tardir"'
-      am__untar='tar xf -'
-      ;;
-    pax)
-      am__tar='pax -L -x $1 -w "$$tardir"'
-      am__tar_='pax -L -x $1 -w "$tardir"'
-      am__untar='pax -r'
-      ;;
-    cpio)
-      am__tar='find "$$tardir" -print | cpio -o -H $1 -L'
-      am__tar_='find "$tardir" -print | cpio -o -H $1 -L'
-      am__untar='cpio -i -H $1 -d'
-      ;;
-    none)
-      am__tar=false
-      am__tar_=false
-      am__untar=false
-      ;;
-    esac
+  # If the value was cached, stop now.  We just wanted to have am__tar
+  # and am__untar set.
+  test -n "${am_cv_prog_tar_$1}" && break
 
-    # If the value was cached, stop now.  We just wanted to have am__tar
-    # and am__untar set.
-    test -n "${am_cv_prog_tar_$1}" && break
-
-    # tar/untar a dummy directory, and stop if the command works.
-    rm -rf conftest.dir
-    mkdir conftest.dir
-    echo GrepMe > conftest.dir/file
-    AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
-    rm -rf conftest.dir
-    if test -s conftest.tar; then
-      AM_RUN_LOG([$am__untar <conftest.tar])
-      AM_RUN_LOG([cat conftest.dir/file])
-      grep GrepMe conftest.dir/file >/dev/null 2>&1 && break
-    fi
-  done
+  # tar/untar a dummy directory, and stop if the command works
   rm -rf conftest.dir
+  mkdir conftest.dir
+  echo GrepMe > conftest.dir/file
+  AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
+  rm -rf conftest.dir
+  if test -s conftest.tar; then
+    AM_RUN_LOG([$am__untar <conftest.tar])
+    grep GrepMe conftest.dir/file >/dev/null 2>&1 && break
+  fi
+done
+rm -rf conftest.dir
 
-  AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
-  AC_MSG_RESULT([$am_cv_prog_tar_$1])])
-
+AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
+AC_MSG_RESULT([$am_cv_prog_tar_$1])])
 AC_SUBST([am__tar])
 AC_SUBST([am__untar])
 ]) # _AM_PROG_TAR
diff --git a/config.h.in b/config.h.in
index a8fefc4..b5bb371 100644
--- a/config.h.in
+++ b/config.h.in
@@ -1245,9 +1245,6 @@
 /* Define to 1 if getpeername is declared even after undefining macros. */
 #undef HAVE_RAW_DECL_GETPEERNAME
 
-/* Define to 1 if gets is declared even after undefining macros. */
-#undef HAVE_RAW_DECL_GETS
-
 /* Define to 1 if getsockname is declared even after undefining macros. */
 #undef HAVE_RAW_DECL_GETSOCKNAME
 
diff --git a/configure b/configure
index ec80aec..75de56d 100755
--- a/configure
+++ b/configure
@@ -4799,17 +4799,12 @@ mkdir_p='$(MKDIR_P)'
 # in the wild :-(  We should find a proper way to deprecate it ...
 AMTAR='$${TAR-tar}'
 
-
-# We'll loop over all known methods to create a tar archive until one works.
-_am_tools='gnutar  pax cpio none'
-
 am__tar='$${TAR-tar} chof - "$$tardir"' am__untar='$${TAR-tar} xf -'
 
 
 
 
 
-
 # Check whether --enable-silent-rules was given.
 if test "${enable_silent_rules+set}" = set; then :
   enableval=$enable_silent_rules;
@@ -34286,7 +34281,7 @@ _ACEOF
 
 
 
-    for gl_func in dprintf fpurge fseeko ftello getdelim getline gets pclose popen     renameat snprintf tmpfile vdprintf vsnprintf; do
+    for gl_func in dprintf fpurge fseeko ftello getdelim getline pclose popen     renameat snprintf tmpfile vdprintf vsnprintf; do
     as_gl_Symbol=`$as_echo "gl_cv_have_raw_decl_$gl_func" | $as_tr_sh`
     { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether $gl_func is declared without a macro" >&5
 $as_echo_n "checking whether $gl_func is declared without a macro... " >&6; }
@@ -59483,7 +59478,7 @@ $as_echo X"$mf" |
     DEPDIR=`sed -n 's/^DEPDIR = //p' < "$mf"`
     test -z "$DEPDIR" && continue
     am__include=`sed -n 's/^am__include = //p' < "$mf"`
-    test -z "$am__include" && continue
+    test -z "am__include" && continue
     am__quote=`sed -n 's/^am__quote = //p' < "$mf"`
     # Find all dependency output files, they are included files with
     # $(DEPDIR) in their names.  We invoke sed twice because it is the
diff --git a/doc/Makefile.in b/doc/Makefile.in
index c49a0e4..48438c0 100644
--- a/doc/Makefile.in
+++ b/doc/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -35,51 +35,23 @@
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -3538,15 +3510,12 @@ $(top_srcdir)/configure:  $(am__configure_deps)
 $(ACLOCAL_M4):  $(am__aclocal_m4_deps)
 	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
 $(am__aclocal_m4_deps):
-
 alert-printlist$(EXEEXT): $(alert_printlist_OBJECTS) $(alert_printlist_DEPENDENCIES) $(EXTRA_alert_printlist_DEPENDENCIES) 
 	@rm -f alert-printlist$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(alert_printlist_OBJECTS) $(alert_printlist_LDADD) $(LIBS)
-
 errcodes$(EXEEXT): $(errcodes_OBJECTS) $(errcodes_DEPENDENCIES) $(EXTRA_errcodes_DEPENDENCIES) 
 	@rm -f errcodes$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(errcodes_OBJECTS) $(errcodes_LDADD) $(LIBS)
-
 printlist$(EXEEXT): $(printlist_OBJECTS) $(printlist_DEPENDENCIES) $(EXTRA_printlist_DEPENDENCIES) 
 	@rm -f printlist$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(printlist_OBJECTS) $(printlist_LDADD) $(LIBS)
@@ -3806,12 +3775,13 @@ uninstall-imagesDATA:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/doc/credentials/Makefile.in b/doc/credentials/Makefile.in
index a8c25a5..1bd81c2 100644
--- a/doc/credentials/Makefile.in
+++ b/doc/credentials/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1642,12 +1614,13 @@ clean-libtool:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/doc/credentials/openpgp/Makefile.in b/doc/credentials/openpgp/Makefile.in
index f76db17..f5bd167 100644
--- a/doc/credentials/openpgp/Makefile.in
+++ b/doc/credentials/openpgp/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -14,51 +14,23 @@
 
 @SET_MAKE@
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/doc/credentials/srp/Makefile.in b/doc/credentials/srp/Makefile.in
index bc70f3f..b3218f0 100644
--- a/doc/credentials/srp/Makefile.in
+++ b/doc/credentials/srp/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -14,51 +14,23 @@
 
 @SET_MAKE@
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/doc/credentials/x509/Makefile.in b/doc/credentials/x509/Makefile.in
index f42dda6..d05da51 100644
--- a/doc/credentials/x509/Makefile.in
+++ b/doc/credentials/x509/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -14,51 +14,23 @@
 
 @SET_MAKE@
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/doc/cyclo/Makefile.in b/doc/cyclo/Makefile.in
index 62c6554..af63011 100644
--- a/doc/cyclo/Makefile.in
+++ b/doc/cyclo/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/doc/examples/Makefile.in b/doc/examples/Makefile.in
index 4010816..5dce863 100644
--- a/doc/examples/Makefile.in
+++ b/doc/examples/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -36,51 +36,23 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1819,7 +1791,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libexamples.la: $(libexamples_la_OBJECTS) $(libexamples_la_DEPENDENCIES) $(EXTRA_libexamples_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libexamples_la_OBJECTS) $(libexamples_la_LIBADD) $(LIBS)
 
@@ -1831,75 +1802,57 @@ clean-noinstPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 ex-cert-select$(EXEEXT): $(ex_cert_select_OBJECTS) $(ex_cert_select_DEPENDENCIES) $(EXTRA_ex_cert_select_DEPENDENCIES) 
 	@rm -f ex-cert-select$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_cert_select_OBJECTS) $(ex_cert_select_LDADD) $(LIBS)
-
 ex-cert-select-pkcs11$(EXEEXT): $(ex_cert_select_pkcs11_OBJECTS) $(ex_cert_select_pkcs11_DEPENDENCIES) $(EXTRA_ex_cert_select_pkcs11_DEPENDENCIES) 
 	@rm -f ex-cert-select-pkcs11$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_cert_select_pkcs11_OBJECTS) $(ex_cert_select_pkcs11_LDADD) $(LIBS)
-
 ex-client-anon$(EXEEXT): $(ex_client_anon_OBJECTS) $(ex_client_anon_DEPENDENCIES) $(EXTRA_ex_client_anon_DEPENDENCIES) 
 	@rm -f ex-client-anon$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_client_anon_OBJECTS) $(ex_client_anon_LDADD) $(LIBS)
-
 ex-client-dtls$(EXEEXT): $(ex_client_dtls_OBJECTS) $(ex_client_dtls_DEPENDENCIES) $(EXTRA_ex_client_dtls_DEPENDENCIES) 
 	@rm -f ex-client-dtls$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_client_dtls_OBJECTS) $(ex_client_dtls_LDADD) $(LIBS)
-
 ex-client-psk$(EXEEXT): $(ex_client_psk_OBJECTS) $(ex_client_psk_DEPENDENCIES) $(EXTRA_ex_client_psk_DEPENDENCIES) 
 	@rm -f ex-client-psk$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_client_psk_OBJECTS) $(ex_client_psk_LDADD) $(LIBS)
-
 ex-client-resume$(EXEEXT): $(ex_client_resume_OBJECTS) $(ex_client_resume_DEPENDENCIES) $(EXTRA_ex_client_resume_DEPENDENCIES) 
 	@rm -f ex-client-resume$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_client_resume_OBJECTS) $(ex_client_resume_LDADD) $(LIBS)
-
 ex-client-srp$(EXEEXT): $(ex_client_srp_OBJECTS) $(ex_client_srp_DEPENDENCIES) $(EXTRA_ex_client_srp_DEPENDENCIES) 
 	@rm -f ex-client-srp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_client_srp_OBJECTS) $(ex_client_srp_LDADD) $(LIBS)
-
 ex-client-x509$(EXEEXT): $(ex_client_x509_OBJECTS) $(ex_client_x509_DEPENDENCIES) $(EXTRA_ex_client_x509_DEPENDENCIES) 
 	@rm -f ex-client-x509$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_client_x509_OBJECTS) $(ex_client_x509_LDADD) $(LIBS)
-
 ex-client-xssl1$(EXEEXT): $(ex_client_xssl1_OBJECTS) $(ex_client_xssl1_DEPENDENCIES) $(EXTRA_ex_client_xssl1_DEPENDENCIES) 
 	@rm -f ex-client-xssl1$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_client_xssl1_OBJECTS) $(ex_client_xssl1_LDADD) $(LIBS)
-
 ex-client-xssl2$(EXEEXT): $(ex_client_xssl2_OBJECTS) $(ex_client_xssl2_DEPENDENCIES) $(EXTRA_ex_client_xssl2_DEPENDENCIES) 
 	@rm -f ex-client-xssl2$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_client_xssl2_OBJECTS) $(ex_client_xssl2_LDADD) $(LIBS)
-
 ex-cxx$(EXEEXT): $(ex_cxx_OBJECTS) $(ex_cxx_DEPENDENCIES) $(EXTRA_ex_cxx_DEPENDENCIES) 
 	@rm -f ex-cxx$(EXEEXT)
 	$(AM_V_CXXLD)$(CXXLINK) $(ex_cxx_OBJECTS) $(ex_cxx_LDADD) $(LIBS)
-
 ex-ocsp-client$(EXEEXT): $(ex_ocsp_client_OBJECTS) $(ex_ocsp_client_DEPENDENCIES) $(EXTRA_ex_ocsp_client_DEPENDENCIES) 
 	@rm -f ex-ocsp-client$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_ocsp_client_OBJECTS) $(ex_ocsp_client_LDADD) $(LIBS)
-
 ex-serv-anon$(EXEEXT): $(ex_serv_anon_OBJECTS) $(ex_serv_anon_DEPENDENCIES) $(EXTRA_ex_serv_anon_DEPENDENCIES) 
 	@rm -f ex-serv-anon$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_serv_anon_OBJECTS) $(ex_serv_anon_LDADD) $(LIBS)
-
 ex-serv-dtls$(EXEEXT): $(ex_serv_dtls_OBJECTS) $(ex_serv_dtls_DEPENDENCIES) $(EXTRA_ex_serv_dtls_DEPENDENCIES) 
 	@rm -f ex-serv-dtls$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_serv_dtls_OBJECTS) $(ex_serv_dtls_LDADD) $(LIBS)
-
 ex-serv-pgp$(EXEEXT): $(ex_serv_pgp_OBJECTS) $(ex_serv_pgp_DEPENDENCIES) $(EXTRA_ex_serv_pgp_DEPENDENCIES) 
 	@rm -f ex-serv-pgp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_serv_pgp_OBJECTS) $(ex_serv_pgp_LDADD) $(LIBS)
-
 ex-serv-psk$(EXEEXT): $(ex_serv_psk_OBJECTS) $(ex_serv_psk_DEPENDENCIES) $(EXTRA_ex_serv_psk_DEPENDENCIES) 
 	@rm -f ex-serv-psk$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_serv_psk_OBJECTS) $(ex_serv_psk_LDADD) $(LIBS)
-
 ex-serv-srp$(EXEEXT): $(ex_serv_srp_OBJECTS) $(ex_serv_srp_DEPENDENCIES) $(EXTRA_ex_serv_srp_DEPENDENCIES) 
 	@rm -f ex-serv-srp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ex_serv_srp_OBJECTS) $(ex_serv_srp_LDADD) $(LIBS)
-
 print-ciphersuites$(EXEEXT): $(print_ciphersuites_OBJECTS) $(print_ciphersuites_DEPENDENCIES) $(EXTRA_print_ciphersuites_DEPENDENCIES) 
 	@rm -f print-ciphersuites$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(print_ciphersuites_OBJECTS) $(print_ciphersuites_LDADD) $(LIBS)
diff --git a/doc/gnutls.info b/doc/gnutls.info
index cf9247a..e343fae 100644
--- a/doc/gnutls.info
+++ b/doc/gnutls.info
@@ -1,4 +1,4 @@
-This is gnutls.info, produced by makeinfo version 5.1 from gnutls.texi.
+This is gnutls.info, produced by makeinfo version 4.13 from gnutls.texi.
 
 This manual is last updated 2 April 2013 for version 3.1.13 of GnuTLS.
 
@@ -11,6 +11,7 @@ Copyright (C) 2001-2013 Free Software Foundation, Inc.\\ Copyright (C)
      Foundation; with no Invariant Sections, no Front-Cover Texts, and
      no Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
+
 INFO-DIR-SECTION Software libraries
 START-INFO-DIR-ENTRY
 * GnuTLS: (gnutls).		GNU Transport Layer Security Library.
@@ -28,1285 +29,1284 @@ END-INFO-DIR-ENTRY
 
 
 Indirect:
-gnutls.info-1: 1279
-gnutls.info-2: 303309
-gnutls.info-3: 749430
-gnutls.info-4: 947014
-gnutls.info-5: 1275242
+gnutls.info-1: 1281
+gnutls.info-2: 301128
+gnutls.info-3: 740825
+gnutls.info-4: 1045275
 
 Tag Table:
 (Indirect)
-Node: Top1279
-Node: Preface2461
-Node: Introduction to GnuTLS3845
-Node: Downloading and installing5485
-Node: Document overview7996
-Node: Introduction to TLS8997
-Ref: Introduction to TLS-Footnote-110139
-Node: TLS layers10429
-Ref: fig:tls-layers11388
-Node: The transport layer11463
-Node: The TLS record protocol12067
-Node: Encryption algorithms used in the record layer13342
-Ref: tab:ciphers14238
-Ref: tab:macs15610
-Node: Compression algorithms used in the record layer16301
-Ref: gnutls_compression_method_t17245
-Node: Weaknesses and countermeasures17930
-Ref: Weaknesses and countermeasures-Footnote-118958
-Node: On Record Padding19036
-Node: The TLS Alert Protocol20960
-Ref: The Alert Protocol21160
-Ref: tab:alerts22044
-Node: The TLS Handshake Protocol24812
-Ref: The Handshake Protocol25011
-Node: TLS Cipher Suites25677
-Ref: TLS Cipher Suites-Footnote-126660
-Node: Authentication26774
-Node: Client Authentication27485
-Node: Resuming Sessions27962
-Ref: resume28121
-Node: TLS Extensions28767
-Node: Maximum fragment length negotiation29441
-Node: Server name indication30045
-Ref: serverind30245
-Node: Session tickets31091
-Node: HeartBeat31701
-Node: Safe renegotiation33006
-Node: OCSP status request37910
-Node: SRTP39732
-Ref: gnutls_srtp_profile_t40211
-Node: How to use TLS in application protocols42547
-Node: Separate ports43065
-Ref: Separate ports-Footnote-144480
-Node: Upward negotiation44556
-Ref: Upward negotiation-Footnote-147236
-Node: On SSL 2 and older protocols47264
-Node: Authentication methods49142
-Node: Certificate authentication50037
-Ref: tab:key-exchange50595
-Node: X.509 certificates53099
-Ref: fig:x50953578
-Node: X.509 certificate structure54127
-Ref: tab:x50954525
-Ref: tab:x509-ext56319
-Node: Importing an X.509 certificate59310
-Node: X.509 distinguished names60692
-Node: X.509 public and private keys64355
-Node: Verifying X.509 certificate paths66797
-Ref: gnutls_certificate_status_t74562
-Node: Verifying a certificate in the context of TLS session76548
-Ref: gnutls_certificate_verify_flags78038
-Node: OpenPGP certificates80168
-Ref: fig:openpgp80982
-Ref: tab:openpgp-certificate81772
-Ref: tab:openpgp-key-exchange83446
-Ref: OpenPGP certificates-Footnote-187541
-Node: Advanced certificate verification87596
-Node: Verifying a certificate using trust on first use authentication88483
-Node: Verifying a certificate using DANE89707
-Node: Digital signatures91215
-Node: More on certificate authentication96429
-Node: PKCS 10 certificate requests97249
-Ref: ex:crq100489
-Node: PKIX certificate revocation lists102570
-Ref: tab:crl103445
-Node: OCSP certificate status checking108976
-Ref: tab:ocsp-response115659
-Ref: gnutls_x509_crl_reason_t119206
-Node: Managing encrypted keys120530
-Ref: gnutls_pkcs_encrypt_flags_t124581
-Node: certtool Invocation131329
-Ref: certtool usage131917
-Ref: certtool debug138298
-Ref: certtool generate-request138442
-Ref: certtool verify-chain138786
-Ref: certtool verify138963
-Ref: certtool verify-crl139281
-Ref: certtool get-dh-params139581
-Ref: certtool load-privkey139880
-Ref: certtool load-pubkey140053
-Ref: certtool load-certificate140223
-Ref: certtool load-ca-privkey140404
-Ref: certtool load-ca-certificate140608
-Ref: certtool cprint140820
-Ref: certtool null-password141052
-Ref: certtool pubkey-info141245
-Ref: certtool to-p12141488
-Ref: certtool rsa141787
-Ref: certtool dsa141918
-Ref: certtool ecc142048
-Ref: certtool ecdsa142220
-Ref: certtool hash142339
-Ref: certtool inder142528
-Ref: certtool inraw142850
-Ref: certtool outder142975
-Ref: certtool outraw143123
-Ref: certtool sec-param143253
-Ref: certtool pkcs-cipher143474
-Ref: certtool exit status143714
-Ref: certtool See Also143946
-Ref: certtool Examples143995
-Ref: certtool Files147909
-Node: ocsptool Invocation153420
-Ref: ocsptool usage153961
-Ref: ocsptool debug157288
-Ref: ocsptool ask157432
-Ref: ocsptool exit status157827
-Ref: ocsptool See Also158059
-Ref: ocsptool Examples158109
-Node: danetool Invocation163087
-Ref: danetool usage163541
-Ref: danetool debug166951
-Ref: danetool load-pubkey167095
-Ref: danetool load-certificate167265
-Ref: danetool dlv167446
-Ref: danetool hash167605
-Ref: danetool check167796
-Ref: danetool check-ee168085
-Ref: danetool check-ca168268
-Ref: danetool insecure168446
-Ref: danetool local-dns168591
-Ref: danetool inder168820
-Ref: danetool inraw169142
-Ref: danetool tlsa-rr169267
-Ref: danetool host169562
-Ref: danetool proto169755
-Ref: danetool ca169977
-Ref: danetool x509170150
-Ref: danetool local170411
-Ref: danetool domain170539
-Ref: danetool exit status170944
-Ref: danetool See Also171176
-Ref: danetool Examples171226
-Node: Shared-key and anonymous authentication172391
-Node: SRP authentication172960
-Node: Authentication using SRP173223
-Node: srptool Invocation176264
-Ref: srptool usage177075
-Ref: srptool debug179209
-Ref: srptool verify179353
-Ref: srptool passwd-conf179491
-Ref: srptool create-conf179693
-Ref: srptool exit status179940
-Ref: srptool See Also180170
-Ref: srptool Examples180283
-Node: PSK authentication180927
-Node: Authentication using PSK181223
-Node: psktool Invocation182441
-Ref: psktool usage182927
-Ref: psktool debug184537
-Ref: psktool exit status184681
-Ref: psktool See Also184911
-Ref: psktool Examples185011
-Node: Anonymous authentication185472
-Node: Selecting an appropriate authentication method186462
-Node: Hardware security modules and abstract key types191300
-Node: Abstract key types192311
-Node: Abstract public keys193728
-Node: Abstract private keys198339
-Node: Operations201733
-Node: Smart cards and HSMs208012
-Ref: fig:pkcs11-vision209882
-Ref: Smart cards and HSMs-Footnote-1210194
-Node: PKCS11 Initialization210234
-Ref: PKCS11 Initialization-Footnote-1212783
-Node: Accessing objects that require a PIN212826
-Ref: gnutls_pin_flag_t214505
-Node: Reading objects216024
-Node: Writing objects221152
-Node: Using a PKCS11 token with TLS223533
-Node: p11tool Invocation224830
-Ref: p11tool usage225459
-Ref: p11tool debug229752
-Ref: p11tool write229896
-Ref: p11tool generate-rsa230071
-Ref: p11tool generate-dsa230241
-Ref: p11tool generate-ecc230411
-Ref: p11tool private230581
-Ref: p11tool sec-param230802
-Ref: p11tool inder231047
-Ref: p11tool inraw231187
-Ref: p11tool provider231311
-Ref: p11tool exit status231507
-Ref: p11tool See Also231737
-Ref: p11tool Examples231785
-Node: Trusted Platform Module232898
-Node: Keys in TPM234164
-Node: Key generation235643
-Node: Using keys237904
-Node: tpmtool Invocation241554
-Ref: tpmtool usage241980
-Ref: tpmtool debug245540
-Ref: tpmtool generate-rsa245684
-Ref: tpmtool user245954
-Ref: tpmtool system246313
-Ref: tpmtool sec-param246666
-Ref: tpmtool inder246993
-Ref: tpmtool outder247211
-Ref: tpmtool exit status247346
-Ref: tpmtool See Also247576
-Ref: tpmtool Examples247637
-Node: How to use GnuTLS in applications248252
-Node: Introduction to the library248821
-Node: General idea249373
-Ref: fig:gnutls-design250222
-Ref: General idea-Footnote-1251518
-Node: Error handling251563
-Node: Common types253133
-Node: Debugging and auditing254019
-Node: Thread safety255634
-Node: Callback functions258105
-Node: Preparation259069
-Node: Headers259488
-Node: Initialization259777
-Node: Version check260430
-Node: Building the source260967
-Node: Session initialization263078
-Node: Associating the credentials266605
-Ref: tab:key-exchange-cred267350
-Node: Certificate credentials268517
-Node: SRP credentials281882
-Node: PSK credentials286342
-Node: Anonymous credentials290005
-Node: Setting up the transport layer290820
-Node: Asynchronous operation298699
-Node: DTLS sessions303309
-Ref: DTLS sessions-Footnote-1305551
-Node: TLS handshake305628
-Node: Data transfer and termination308296
-Node: Buffered data transfer316902
-Node: Handling alerts318419
-Node: Priority Strings321782
-Ref: tab:prio-keywords322513
-Ref: tab:prio-algorithms326131
-Ref: tab:prio-special1328171
-Ref: tab:prio-special2330167
-Ref: Priority Strings-Footnote-1334528
-Ref: Priority Strings-Footnote-2334601
-Node: Selecting cryptographic key sizes334792
-Ref: tab:key-sizes335434
-Node: Advanced topics339610
-Node: Session resumption339982
-Node: Certificate verification344115
-Ref: dane_verify_status_t352618
-Node: Parameter generation353011
-Node: Keying Material Exporters356680
-Node: Channel Bindings357736
-Node: Interoperability359242
-Node: Compatibility with the OpenSSL library360849
-Node: GnuTLS application examples361574
-Ref: examples361792
-Node: Client examples362066
-Node: Simple client example with X.509 certificate support362951
-Ref: ex:verify363244
-Node: Simple client example with SSH-style certificate verification368120
-Node: Simple client example with anonymous authentication372041
-Node: Simple Datagram TLS client example375351
-Node: Obtaining session information379118
-Node: Using a callback to select the certificate to use383163
-Node: Verifying a certificate389110
-Ref: ex:verify2389347
-Node: Client using a smart card with TLS393702
-Ref: ex:pkcs11-client393935
-Node: Client with Resume capability example398140
-Ref: ex:resume-client398415
-Node: Simple client example with SRP authentication402555
-Node: Simple client example in C++405995
-Node: Helper functions for TCP connections408567
-Node: Helper functions for UDP connections410027
-Node: Server examples411716
-Node: Echo server with X.509 authentication412180
-Node: Echo server with OpenPGP authentication417593
-Node: Echo server with SRP authentication422824
-Node: Echo server with anonymous authentication428058
-Node: DTLS echo server with X.509 authentication432798
-Node: OCSP example444685
-Ref: Generate OCSP request444851
-Node: Miscellaneous examples453072
-Node: Checking for an alert453422
-Node: X.509 certificate parsing example454725
-Ref: ex:x509-info454982
-Node: Listing the ciphersuites in a priority string458248
-Node: PKCS #12 structure generation example459988
-Node: XSSL examples463690
-Node: Example client with X.509 certificate authentication464285
-Node: Example client with X.509 certificate authentication and TOFU466173
-Node: Using GnuTLS as a cryptographic library468623
-Node: Symmetric algorithms469288
-Node: Public key algorithms470647
-Node: Hash and HMAC functions471115
-Node: Random number generation472925
-Ref: gnutls_rnd_level_t473258
-Node: Other included programs473948
-Node: gnutls-cli Invocation474517
-Ref: gnutls-cli usage475077
-Ref: gnutls-cli debug480493
-Ref: gnutls-cli tofu480637
-Ref: gnutls-cli dane480888
-Ref: gnutls-cli local-dns481148
-Ref: gnutls-cli ca-verification481377
-Ref: gnutls-cli ocsp481663
-Ref: gnutls-cli resume481823
-Ref: gnutls-cli rehandshake481969
-Ref: gnutls-cli starttls482136
-Ref: gnutls-cli disable-extensions482322
-Ref: gnutls-cli dh-bits482517
-Ref: gnutls-cli priority482869
-Ref: gnutls-cli ranges483215
-Ref: gnutls-cli list483431
-Ref: gnutls-cli exit status483669
-Ref: gnutls-cli See Also483905
-Ref: gnutls-cli Examples483982
-Node: gnutls-serv Invocation485742
-Ref: gnutls-serv usage486217
-Ref: gnutls-serv debug490478
-Ref: gnutls-serv heartbeat490622
-Ref: gnutls-serv priority490773
-Ref: gnutls-serv ocsp-response491119
-Ref: gnutls-serv list491343
-Ref: gnutls-serv exit status491581
-Ref: gnutls-serv See Also491819
-Ref: gnutls-serv Examples491897
-Node: gnutls-cli-debug Invocation497326
-Ref: gnutls-cli-debug usage498146
-Ref: gnutls-cli-debug debug498961
-Ref: gnutls-cli-debug exit status499105
-Ref: gnutls-cli-debug See Also499353
-Ref: gnutls-cli-debug Examples499436
-Node: Internal architecture of GnuTLS501859
-Node: The TLS Protocol502401
-Ref: fig:client-server502877
-Node: TLS Handshake Protocol502967
-Ref: fig:gnutls-handshake503409
-Ref: fig:gnutls-handshake-sequence503918
-Node: TLS Authentication Methods504016
-Ref: TLS Authentication Methods-Footnote-1506314
-Node: TLS Extension Handling506380
-Node: Cryptographic Backend518071
-Ref: fig:crypto-layers518805
-Ref: Cryptographic Backend-Footnote-1522516
-Ref: Cryptographic Backend-Footnote-2522600
-Node: Upgrading from previous versions522707
-Node: Support526993
-Node: Getting help527223
-Node: Commercial Support527825
-Node: Bug Reports528651
-Node: Contributing530015
-Node: Error codes532019
-Node: Supported ciphersuites550523
-Ref: ciphersuites550696
-Node: API reference557967
-Node: Core TLS API558377
-Ref: gnutls_alert_get558606
-Ref: gnutls_alert_get_name559230
-Ref: gnutls_alert_get_strname559615
-Ref: gnutls_alert_send559950
-Ref: gnutls_alert_send_appropriate560833
-Ref: gnutls_anon_allocate_client_credentials561584
-Ref: gnutls_anon_allocate_server_credentials562043
-Ref: gnutls_anon_free_client_credentials562494
-Ref: gnutls_anon_free_server_credentials562870
-Ref: gnutls_anon_set_params_function563238
-Ref: gnutls_anon_set_server_dh_params563756
-Ref: gnutls_anon_set_server_params_function564280
-Ref: gnutls_auth_client_get_type564789
-Ref: gnutls_auth_get_type565301
-Ref: gnutls_auth_server_get_type565998
-Ref: gnutls_bye566490
-Ref: gnutls_certificate_activation_time_peers568096
-Ref: gnutls_certificate_allocate_credentials568563
-Ref: gnutls_certificate_client_get_request_status569039
-Ref: gnutls_certificate_expiration_time_peers569462
-Ref: gnutls_certificate_free_ca_names569866
-Ref: gnutls_certificate_free_cas570540
-Ref: gnutls_certificate_free_credentials570964
-Ref: gnutls_certificate_free_crls571485
-Ref: gnutls_certificate_free_keys571790
-Ref: gnutls_certificate_get_issuer572227
-Ref: gnutls_certificate_get_ours572865
-Ref: gnutls_certificate_get_peers573398
-Ref: gnutls_certificate_get_peers_subkey_id574262
-Ref: gnutls_certificate_send_x509_rdn_sequence574777
-Ref: gnutls_certificate_server_set_request575505
-Ref: gnutls_certificate_set_dh_params576158
-Ref: gnutls_certificate_set_ocsp_status_request_file576879
-Ref: gnutls_certificate_set_ocsp_status_request_function577754
-Ref: gnutls_certificate_set_params_function579138
-Ref: gnutls_certificate_set_pin_function579677
-Ref: gnutls_certificate_set_retrieve_function580341
-Ref: gnutls_certificate_set_verify_flags582219
-Ref: gnutls_certificate_set_verify_function582717
-Ref: gnutls_certificate_set_verify_limits583786
-Ref: gnutls_certificate_set_x509_crl584472
-Ref: gnutls_certificate_set_x509_crl_file585305
-Ref: gnutls_certificate_set_x509_crl_mem586091
-Ref: gnutls_certificate_set_x509_key586873
-Ref: gnutls_certificate_set_x509_key_file587887
-Ref: gnutls_certificate_set_x509_key_file2589193
-Ref: gnutls_certificate_set_x509_key_mem590644
-Ref: gnutls_certificate_set_x509_key_mem2591895
-Ref: gnutls_certificate_set_x509_simple_pkcs12_file593310
-Ref: gnutls_certificate_set_x509_simple_pkcs12_mem594838
-Ref: gnutls_certificate_set_x509_system_trust596336
-Ref: gnutls_certificate_set_x509_trust596908
-Ref: gnutls_certificate_set_x509_trust_file597895
-Ref: gnutls_certificate_set_x509_trust_mem599113
-Ref: gnutls_certificate_type_get600061
-Ref: gnutls_certificate_type_get_id600463
-Ref: gnutls_certificate_type_get_name600860
-Ref: gnutls_certificate_type_list601243
-Ref: gnutls_certificate_verification_status_print601597
-Ref: gnutls_certificate_verify_peers2602357
-Ref: gnutls_certificate_verify_peers3603623
-Ref: gnutls_check_version604969
-Ref: gnutls_cipher_get605578
-Ref: gnutls_cipher_get_id605884
-Ref: gnutls_cipher_get_key_size606266
-Ref: gnutls_cipher_get_name606593
-Ref: gnutls_cipher_list606940
-Ref: gnutls_cipher_suite_get_name607500
-Ref: gnutls_cipher_suite_info608118
-Ref: gnutls_compression_get609297
-Ref: gnutls_compression_get_id609650
-Ref: gnutls_compression_get_name610014
-Ref: gnutls_compression_list610396
-Ref: gnutls_credentials_clear610714
-Ref: gnutls_credentials_set610947
-Ref: gnutls_db_check_entry612320
-Ref: gnutls_db_check_entry_time612719
-Ref: gnutls_db_get_ptr613073
-Ref: gnutls_db_remove_session613390
-Ref: gnutls_db_set_cache_expiration613932
-Ref: gnutls_db_set_ptr614278
-Ref: gnutls_db_set_remove_function614618
-Ref: gnutls_db_set_retrieve_function615126
-Ref: gnutls_db_set_store_function615817
-Ref: gnutls_deinit616289
-Ref: gnutls_dh_get_group616633
-Ref: gnutls_dh_get_peers_public_bits617364
-Ref: gnutls_dh_get_prime_bits617808
-Ref: gnutls_dh_get_pubkey618448
-Ref: gnutls_dh_get_secret_bits619040
-Ref: gnutls_dh_params_cpy619472
-Ref: gnutls_dh_params_deinit619930
-Ref: gnutls_dh_params_export2_pkcs3620205
-Ref: gnutls_dh_params_export_pkcs3621026
-Ref: gnutls_dh_params_export_raw622045
-Ref: gnutls_dh_params_generate2622798
-Ref: gnutls_dh_params_import_pkcs3623749
-Ref: gnutls_dh_params_import_raw624524
-Ref: gnutls_dh_params_init625173
-Ref: gnutls_dh_set_prime_bits625542
-Ref: gnutls_ecc_curve_get626639
-Ref: gnutls_ecc_curve_get_name627032
-Ref: gnutls_ecc_curve_get_size627368
-Ref: gnutls_ecc_curve_list627614
-Ref: gnutls_error_is_fatal627937
-Ref: gnutls_error_to_alert628697
-Ref: gnutls_fingerprint629374
-Ref: gnutls_global_deinit630366
-Ref: gnutls_global_init630684
-Ref: gnutls_global_set_audit_log_function632036
-Ref: gnutls_global_set_log_function632677
-Ref: gnutls_global_set_log_level633185
-Ref: gnutls_global_set_mem_functions633688
-Ref: gnutls_global_set_mutex634924
-Ref: gnutls_global_set_time_function635765
-Ref: gnutls_handshake636176
-Ref: gnutls_handshake_get_last_in637508
-Ref: gnutls_handshake_get_last_out638138
-Ref: gnutls_handshake_set_max_packet_length638783
-Ref: gnutls_handshake_set_post_client_hello_function639474
-Ref: gnutls_handshake_set_private_extensions640562
-Ref: gnutls_handshake_set_random641246
-Ref: gnutls_handshake_set_timeout641958
-Ref: gnutls_heartbeat_allowed642509
-Ref: gnutls_heartbeat_enable642983
-Ref: gnutls_heartbeat_get_timeout643319
-Ref: gnutls_heartbeat_ping643863
-Ref: gnutls_heartbeat_pong644831
-Ref: gnutls_heartbeat_set_timeouts645243
-Ref: gnutls_hex2bin646249
-Ref: gnutls_hex_decode646817
-Ref: gnutls_hex_encode647392
-Ref: gnutls_init647975
-Ref: gnutls_key_generate649099
-Ref: gnutls_kx_get649518
-Ref: gnutls_kx_get_id649849
-Ref: gnutls_kx_get_name650193
-Ref: gnutls_kx_list650538
-Ref: gnutls_load_file650866
-Ref: gnutls_mac_get651402
-Ref: gnutls_mac_get_id651708
-Ref: gnutls_mac_get_key_size652122
-Ref: gnutls_mac_get_name652435
-Ref: gnutls_mac_list652754
-Ref: gnutls_ocsp_status_request_enable_client653345
-Ref: gnutls_ocsp_status_request_get654291
-Ref: gnutls_ocsp_status_request_is_checked654970
-Ref: gnutls_openpgp_send_cert655644
-Ref: gnutls_pem_base64_decode656219
-Ref: gnutls_pem_base64_decode_alloc657082
-Ref: gnutls_pem_base64_encode657879
-Ref: gnutls_pem_base64_encode_alloc658694
-Ref: gnutls_perror659400
-Ref: gnutls_pk_algorithm_get_name659696
-Ref: gnutls_pk_bits_to_sec_param660052
-Ref: gnutls_pk_get_id660526
-Ref: gnutls_pk_get_name661044
-Ref: gnutls_pk_list661406
-Ref: gnutls_pk_to_sign661739
-Ref: gnutls_prf662150
-Ref: gnutls_prf_raw663763
-Ref: gnutls_priority_certificate_type_list665400
-Ref: gnutls_priority_compression_list665848
-Ref: gnutls_priority_deinit666262
-Ref: gnutls_priority_ecc_curve_list666512
-Ref: gnutls_priority_get_cipher_suite_index666947
-Ref: gnutls_priority_init667837
-Ref: gnutls_priority_protocol_list670379
-Ref: gnutls_priority_set670787
-Ref: gnutls_priority_set_direct671219
-Ref: gnutls_priority_sign_list672019
-Ref: gnutls_protocol_get_id672431
-Ref: gnutls_protocol_get_name672747
-Ref: gnutls_protocol_get_version673106
-Ref: gnutls_protocol_list673409
-Ref: gnutls_psk_allocate_client_credentials673779
-Ref: gnutls_psk_allocate_server_credentials674274
-Ref: gnutls_psk_client_get_hint674745
-Ref: gnutls_psk_free_client_credentials675228
-Ref: gnutls_psk_free_server_credentials675599
-Ref: gnutls_psk_server_get_username675962
-Ref: gnutls_psk_set_client_credentials676328
-Ref: gnutls_psk_set_client_credentials_function677320
-Ref: gnutls_psk_set_params_function678239
-Ref: gnutls_psk_set_server_credentials_file678761
-Ref: gnutls_psk_set_server_credentials_function679408
-Ref: gnutls_psk_set_server_credentials_hint680357
-Ref: gnutls_psk_set_server_dh_params680991
-Ref: gnutls_psk_set_server_params_function681518
-Ref: gnutls_random_art682001
-Ref: gnutls_range_split682716
-Ref: gnutls_record_can_use_length_hiding683847
-Ref: gnutls_record_check_pending684602
-Ref: gnutls_record_cork685019
-Ref: gnutls_record_disable_padding685413
-Ref: gnutls_record_get_direction686025
-Ref: gnutls_record_get_max_size686937
-Ref: gnutls_record_recv687299
-Ref: gnutls_record_recv_seq688802
-Ref: gnutls_record_send689793
-Ref: gnutls_record_send_range691275
-Ref: gnutls_record_set_max_empty_records692465
-Ref: gnutls_record_set_max_size693365
-Ref: gnutls_record_set_timeout694280
-Ref: gnutls_record_uncork694863
-Ref: gnutls_rehandshake695538
-Ref: gnutls_safe_renegotiation_status696822
-Ref: gnutls_sec_param_get_name697237
-Ref: gnutls_sec_param_to_pk_bits697611
-Ref: gnutls_server_name_get698257
-Ref: gnutls_server_name_set699617
-Ref: gnutls_session_channel_binding700605
-Ref: gnutls_session_enable_compatibility_mode701328
-Ref: gnutls_session_force_valid701926
-Ref: gnutls_session_get_data702352
-Ref: gnutls_session_get_data2703144
-Ref: gnutls_session_get_desc703902
-Ref: gnutls_session_get_id704313
-Ref: gnutls_session_get_id2705204
-Ref: gnutls_session_get_ptr705676
-Ref: gnutls_session_get_random706076
-Ref: gnutls_session_is_resumed706676
-Ref: gnutls_session_resumption_requested707012
-Ref: gnutls_session_set_data707399
-Ref: gnutls_session_set_premaster708259
-Ref: gnutls_session_set_ptr709348
-Ref: gnutls_session_ticket_enable_client709763
-Ref: gnutls_session_ticket_enable_server710177
-Ref: gnutls_session_ticket_key_generate710741
-Ref: gnutls_set_default_priority711171
-Ref: gnutls_sign_algorithm_get711943
-Ref: gnutls_sign_algorithm_get_client712328
-Ref: gnutls_sign_algorithm_get_requested712737
-Ref: gnutls_sign_get_hash_algorithm713769
-Ref: gnutls_sign_get_id714181
-Ref: gnutls_sign_get_name714544
-Ref: gnutls_sign_get_pk_algorithm714894
-Ref: gnutls_sign_is_secure715305
-Ref: gnutls_sign_list715558
-Ref: gnutls_srp_allocate_client_credentials715888
-Ref: gnutls_srp_allocate_server_credentials716364
-Ref: gnutls_srp_base64_decode716812
-Ref: gnutls_srp_base64_decode_alloc717527
-Ref: gnutls_srp_base64_encode718200
-Ref: gnutls_srp_base64_encode_alloc719011
-Ref: gnutls_srp_free_client_credentials719747
-Ref: gnutls_srp_free_server_credentials720118
-Ref: gnutls_srp_server_get_username720481
-Ref: gnutls_srp_set_client_credentials720935
-Ref: gnutls_srp_set_client_credentials_function721691
-Ref: gnutls_srp_set_prime_bits722795
-Ref: gnutls_srp_set_server_credentials_file723485
-Ref: gnutls_srp_set_server_credentials_function724226
-Ref: gnutls_srp_verifier725600
-Ref: gnutls_srtp_get_keys726528
-Ref: gnutls_srtp_get_mki727927
-Ref: gnutls_srtp_get_profile_id728501
-Ref: gnutls_srtp_get_profile_name728959
-Ref: gnutls_srtp_get_selected_profile729380
-Ref: gnutls_srtp_set_mki729829
-Ref: gnutls_srtp_set_profile730283
-Ref: gnutls_srtp_set_profile_direct730820
-Ref: gnutls_store_commitment731547
-Ref: gnutls_store_pubkey732805
-Ref: gnutls_strerror733967
-Ref: gnutls_strerror_name734452
-Ref: gnutls_supplemental_get_name734921
-Ref: gnutls_tdb_deinit735329
-Ref: gnutls_tdb_init735544
-Ref: gnutls_tdb_set_store_commitment_func735894
-Ref: gnutls_tdb_set_store_func736488
-Ref: gnutls_tdb_set_verify_func736985
-Ref: gnutls_transport_get_int737471
-Ref: gnutls_transport_get_int2737884
-Ref: gnutls_transport_get_ptr738392
-Ref: gnutls_transport_get_ptr2738813
-Ref: gnutls_transport_set_errno739352
-Ref: gnutls_transport_set_errno_function740210
-Ref: gnutls_transport_set_int740752
-Ref: gnutls_transport_set_int2741113
-Ref: gnutls_transport_set_ptr741677
-Ref: gnutls_transport_set_ptr2742095
-Ref: gnutls_transport_set_pull_function742744
-Ref: gnutls_transport_set_pull_timeout_function743529
-Ref: gnutls_transport_set_push_function744496
-Ref: gnutls_transport_set_vec_push_function745346
-Ref: gnutls_url_is_supported746047
-Ref: gnutls_verify_stored_pubkey746428
-Node: High level TLS API749430
-Node: Datagram TLS API749659
-Ref: gnutls_dtls_cookie_send749941
-Ref: gnutls_dtls_cookie_verify751027
-Ref: gnutls_dtls_get_data_mtu751895
-Ref: gnutls_dtls_get_mtu752299
-Ref: gnutls_dtls_get_timeout752747
-Ref: gnutls_dtls_prestate_set753295
-Ref: gnutls_dtls_set_data_mtu753701
-Ref: gnutls_dtls_set_mtu754563
-Ref: gnutls_dtls_set_timeouts755174
-Ref: gnutls_record_get_discarded756189
-Node: X509 certificate API756468
-Ref: gnutls_pkcs7_deinit756787
-Ref: gnutls_pkcs7_delete_crl757000
-Ref: gnutls_pkcs7_delete_crt757458
-Ref: gnutls_pkcs7_export757931
-Ref: gnutls_pkcs7_export2758842
-Ref: gnutls_pkcs7_get_crl_count759524
-Ref: gnutls_pkcs7_get_crl_raw759898
-Ref: gnutls_pkcs7_get_crt_count760699
-Ref: gnutls_pkcs7_get_crt_raw761083
-Ref: gnutls_pkcs7_import761971
-Ref: gnutls_pkcs7_init762597
-Ref: gnutls_pkcs7_set_crl763017
-Ref: gnutls_pkcs7_set_crl_raw763447
-Ref: gnutls_pkcs7_set_crt763866
-Ref: gnutls_pkcs7_set_crt_raw764379
-Ref: gnutls_x509_crl_check_issuer764843
-Ref: gnutls_x509_crl_deinit765286
-Ref: gnutls_x509_crl_export765497
-Ref: gnutls_x509_crl_export2766424
-Ref: gnutls_x509_crl_get_authority_key_gn_serial767188
-Ref: gnutls_x509_crl_get_authority_key_id768506
-Ref: gnutls_x509_crl_get_crt_count769574
-Ref: gnutls_x509_crl_get_crt_serial769937
-Ref: gnutls_x509_crl_get_dn_oid770714
-Ref: gnutls_x509_crl_get_extension_data771535
-Ref: gnutls_x509_crl_get_extension_info772650
-Ref: gnutls_x509_crl_get_extension_oid773928
-Ref: gnutls_x509_crl_get_issuer_dn774794
-Ref: gnutls_x509_crl_get_issuer_dn2775670
-Ref: gnutls_x509_crl_get_issuer_dn_by_oid776354
-Ref: gnutls_x509_crl_get_next_update777865
-Ref: gnutls_x509_crl_get_number778304
-Ref: gnutls_x509_crl_get_raw_issuer_dn779034
-Ref: gnutls_x509_crl_get_signature779493
-Ref: gnutls_x509_crl_get_signature_algorithm780087
-Ref: gnutls_x509_crl_get_this_update780529
-Ref: gnutls_x509_crl_get_version780859
-Ref: gnutls_x509_crl_import781172
-Ref: gnutls_x509_crl_init781801
-Ref: gnutls_x509_crl_list_import782374
-Ref: gnutls_x509_crl_list_import2783366
-Ref: gnutls_x509_crl_print784274
-Ref: gnutls_x509_crl_set_authority_key_id784927
-Ref: gnutls_x509_crl_set_crt785580
-Ref: gnutls_x509_crl_set_crt_serial786158
-Ref: gnutls_x509_crl_set_next_update786795
-Ref: gnutls_x509_crl_set_number787207
-Ref: gnutls_x509_crl_set_this_update787784
-Ref: gnutls_x509_crl_set_version788193
-Ref: gnutls_x509_crl_sign2788743
-Ref: gnutls_x509_crl_verify789632
-Ref: gnutls_x509_crq_deinit790787
-Ref: gnutls_x509_crq_export791028
-Ref: gnutls_x509_crq_export2792030
-Ref: gnutls_x509_crq_get_attribute_by_oid792809
-Ref: gnutls_x509_crq_get_attribute_data793834
-Ref: gnutls_x509_crq_get_attribute_info794946
-Ref: gnutls_x509_crq_get_basic_constraints796143
-Ref: gnutls_x509_crq_get_challenge_password797401
-Ref: gnutls_x509_crq_get_dn798018
-Ref: gnutls_x509_crq_get_dn2798843
-Ref: gnutls_x509_crq_get_dn_by_oid799546
-Ref: gnutls_x509_crq_get_dn_oid801007
-Ref: gnutls_x509_crq_get_extension_by_oid801794
-Ref: gnutls_x509_crq_get_extension_data802945
-Ref: gnutls_x509_crq_get_extension_info804073
-Ref: gnutls_x509_crq_get_key_id805348
-Ref: gnutls_x509_crq_get_key_purpose_oid806380
-Ref: gnutls_x509_crq_get_key_rsa_raw807406
-Ref: gnutls_x509_crq_get_key_usage808030
-Ref: gnutls_x509_crq_get_pk_algorithm809121
-Ref: gnutls_x509_crq_get_private_key_usage_period809883
-Ref: gnutls_x509_crq_get_subject_alt_name810564
-Ref: gnutls_x509_crq_get_subject_alt_othername_oid812127
-Ref: gnutls_x509_crq_get_version813604
-Ref: gnutls_x509_crq_import813955
-Ref: gnutls_x509_crq_init814647
-Ref: gnutls_x509_crq_print814987
-Ref: gnutls_x509_crq_set_attribute_by_oid815647
-Ref: gnutls_x509_crq_set_basic_constraints816517
-Ref: gnutls_x509_crq_set_challenge_password817261
-Ref: gnutls_x509_crq_set_dn817717
-Ref: gnutls_x509_crq_set_dn_by_oid818270
-Ref: gnutls_x509_crq_set_key819379
-Ref: gnutls_x509_crq_set_key_purpose_oid819847
-Ref: gnutls_x509_crq_set_key_rsa_raw820626
-Ref: gnutls_x509_crq_set_key_usage821207
-Ref: gnutls_x509_crq_set_private_key_usage_period821711
-Ref: gnutls_x509_crq_set_subject_alt_name822240
-Ref: gnutls_x509_crq_set_version823038
-Ref: gnutls_x509_crq_sign2823530
-Ref: gnutls_x509_crq_verify824511
-Ref: gnutls_x509_crt_check_hostname825110
-Ref: gnutls_x509_crt_check_issuer825761
-Ref: gnutls_x509_crt_check_revocation826356
-Ref: gnutls_x509_crt_cpy_crl_dist_points827007
-Ref: gnutls_x509_crt_deinit827596
-Ref: gnutls_x509_crt_export827819
-Ref: gnutls_x509_crt_export2828730
-Ref: gnutls_x509_crt_get_activation_time829428
-Ref: gnutls_x509_crt_get_authority_info_access829811
-Ref: gnutls_x509_crt_get_authority_key_gn_serial833204
-Ref: gnutls_x509_crt_get_authority_key_id834649
-Ref: gnutls_x509_crt_get_basic_constraints835785
-Ref: gnutls_x509_crt_get_ca_status837004
-Ref: gnutls_x509_crt_get_crl_dist_points837891
-Ref: gnutls_x509_crt_get_dn839221
-Ref: gnutls_x509_crt_get_dn2840073
-Ref: gnutls_x509_crt_get_dn_by_oid840770
-Ref: gnutls_x509_crt_get_dn_oid842539
-Ref: gnutls_x509_crt_get_expiration_time843567
-Ref: gnutls_x509_crt_get_extension_by_oid843938
-Ref: gnutls_x509_crt_get_extension_data845059
-Ref: gnutls_x509_crt_get_extension_info846157
-Ref: gnutls_x509_crt_get_extension_oid847518
-Ref: gnutls_x509_crt_get_fingerprint848481
-Ref: gnutls_x509_crt_get_issuer849276
-Ref: gnutls_x509_crt_get_issuer_alt_name849919
-Ref: gnutls_x509_crt_get_issuer_alt_name2851724
-Ref: gnutls_x509_crt_get_issuer_alt_othername_oid853311
-Ref: gnutls_x509_crt_get_issuer_dn854965
-Ref: gnutls_x509_crt_get_issuer_dn2855843
-Ref: gnutls_x509_crt_get_issuer_dn_by_oid856571
-Ref: gnutls_x509_crt_get_issuer_dn_oid858358
-Ref: gnutls_x509_crt_get_issuer_unique_id859394
-Ref: gnutls_x509_crt_get_key_id860211
-Ref: gnutls_x509_crt_get_key_purpose_oid861199
-Ref: gnutls_x509_crt_get_key_usage862360
-Ref: gnutls_x509_crt_get_pk_algorithm863432
-Ref: gnutls_x509_crt_get_pk_dsa_raw864153
-Ref: gnutls_x509_crt_get_pk_rsa_raw864821
-Ref: gnutls_x509_crt_get_policy865399
-Ref: gnutls_x509_crt_get_private_key_usage_period866313
-Ref: gnutls_x509_crt_get_proxy867068
-Ref: gnutls_x509_crt_get_raw_dn868094
-Ref: gnutls_x509_crt_get_raw_issuer_dn868692
-Ref: gnutls_x509_crt_get_serial869276
-Ref: gnutls_x509_crt_get_signature870021
-Ref: gnutls_x509_crt_get_signature_algorithm870627
-Ref: gnutls_x509_crt_get_subject871100
-Ref: gnutls_x509_crt_get_subject_alt_name871748
-Ref: gnutls_x509_crt_get_subject_alt_name2873512
-Ref: gnutls_x509_crt_get_subject_alt_othername_oid875082
-Ref: gnutls_x509_crt_get_subject_key_id876727
-Ref: gnutls_x509_crt_get_subject_unique_id877564
-Ref: gnutls_x509_crt_get_version878363
-Ref: gnutls_x509_crt_import878695
-Ref: gnutls_x509_crt_init879389
-Ref: gnutls_x509_crt_list_import879728
-Ref: gnutls_x509_crt_list_import2881092
-Ref: gnutls_x509_crt_list_verify882044
-Ref: gnutls_x509_crt_print883715
-Ref: gnutls_x509_crt_set_activation_time884611
-Ref: gnutls_x509_crt_set_authority_info_access885078
-Ref: gnutls_x509_crt_set_authority_key_id885973
-Ref: gnutls_x509_crt_set_basic_constraints886555
-Ref: gnutls_x509_crt_set_ca_status887254
-Ref: gnutls_x509_crt_set_crl_dist_points887852
-Ref: gnutls_x509_crt_set_crl_dist_points2888504
-Ref: gnutls_x509_crt_set_crq889203
-Ref: gnutls_x509_crt_set_crq_extensions889760
-Ref: gnutls_x509_crt_set_dn890222
-Ref: gnutls_x509_crt_set_dn_by_oid890775
-Ref: gnutls_x509_crt_set_expiration_time891892
-Ref: gnutls_x509_crt_set_extension_by_oid892331
-Ref: gnutls_x509_crt_set_issuer_dn893114
-Ref: gnutls_x509_crt_set_issuer_dn_by_oid893688
-Ref: gnutls_x509_crt_set_key894941
-Ref: gnutls_x509_crt_set_key_purpose_oid895448
-Ref: gnutls_x509_crt_set_key_usage896216
-Ref: gnutls_x509_crt_set_pin_function896667
-Ref: gnutls_x509_crt_set_policy897347
-Ref: gnutls_x509_crt_set_private_key_usage_period898168
-Ref: gnutls_x509_crt_set_proxy898675
-Ref: gnutls_x509_crt_set_proxy_dn899489
-Ref: gnutls_x509_crt_set_serial900513
-Ref: gnutls_x509_crt_set_subject_alt_name901378
-Ref: gnutls_x509_crt_set_subject_alternative_name902200
-Ref: gnutls_x509_crt_set_subject_key_id903024
-Ref: gnutls_x509_crt_set_version903524
-Ref: gnutls_x509_crt_sign904347
-Ref: gnutls_x509_crt_sign2904902
-Ref: gnutls_x509_crt_verify905770
-Ref: gnutls_x509_dn_deinit906697
-Ref: gnutls_x509_dn_export906959
-Ref: gnutls_x509_dn_export2907853
-Ref: gnutls_x509_dn_get_rdn_ava908514
-Ref: gnutls_x509_dn_import909544
-Ref: gnutls_x509_dn_init910170
-Ref: gnutls_x509_dn_oid_known910596
-Ref: gnutls_x509_dn_oid_name911265
-Ref: gnutls_x509_policy_release911801
-Ref: gnutls_x509_privkey_cpy912164
-Ref: gnutls_x509_privkey_deinit912634
-Ref: gnutls_x509_privkey_export912881
-Ref: gnutls_x509_privkey_export2913946
-Ref: gnutls_x509_privkey_export2_pkcs8914779
-Ref: gnutls_x509_privkey_export_dsa_raw916055
-Ref: gnutls_x509_privkey_export_ecc_raw916831
-Ref: gnutls_x509_privkey_export_pkcs8917614
-Ref: gnutls_x509_privkey_export_rsa_raw919119
-Ref: gnutls_x509_privkey_export_rsa_raw2920016
-Ref: gnutls_x509_privkey_fix921038
-Ref: gnutls_x509_privkey_generate921431
-Ref: gnutls_x509_privkey_get_key_id922180
-Ref: gnutls_x509_privkey_get_pk_algorithm923172
-Ref: gnutls_x509_privkey_get_pk_algorithm2923605
-Ref: gnutls_x509_privkey_import924097
-Ref: gnutls_x509_privkey_import2924897
-Ref: gnutls_x509_privkey_import_dsa_raw925896
-Ref: gnutls_x509_privkey_import_ecc_raw926622
-Ref: gnutls_x509_privkey_import_openssl927335
-Ref: gnutls_x509_privkey_import_pkcs8928213
-Ref: gnutls_x509_privkey_import_rsa_raw929665
-Ref: gnutls_x509_privkey_import_rsa_raw2930524
-Ref: gnutls_x509_privkey_init931492
-Ref: gnutls_x509_privkey_sec_param931835
-Ref: gnutls_x509_privkey_verify_params932272
-Ref: gnutls_x509_rdn_get932629
-Ref: gnutls_x509_rdn_get_by_oid933333
-Ref: gnutls_x509_rdn_get_oid934310
-Ref: gnutls_x509_trust_list_add_cas935064
-Ref: gnutls_x509_trust_list_add_crls935683
-Ref: gnutls_x509_trust_list_add_named_crt936668
-Ref: gnutls_x509_trust_list_add_system_trust937783
-Ref: gnutls_x509_trust_list_add_trust_file938481
-Ref: gnutls_x509_trust_list_add_trust_mem939353
-Ref: gnutls_x509_trust_list_deinit940147
-Ref: gnutls_x509_trust_list_get_issuer940548
-Ref: gnutls_x509_trust_list_init941177
-Ref: gnutls_x509_trust_list_remove_cas941670
-Ref: gnutls_x509_trust_list_remove_trust_file942192
-Ref: gnutls_x509_trust_list_remove_trust_mem942804
-Ref: gnutls_x509_trust_list_verify_crt943346
-Ref: gnutls_x509_trust_list_verify_named_crt944513
-Node: OCSP API947014
-Ref: gnutls_ocsp_req_add_cert947308
-Ref: gnutls_ocsp_req_add_cert_id948273
-Ref: gnutls_ocsp_req_deinit949598
-Ref: gnutls_ocsp_req_export949820
-Ref: gnutls_ocsp_req_get_cert_id950239
-Ref: gnutls_ocsp_req_get_extension951830
-Ref: gnutls_ocsp_req_get_nonce953161
-Ref: gnutls_ocsp_req_get_version953814
-Ref: gnutls_ocsp_req_import954190
-Ref: gnutls_ocsp_req_init954691
-Ref: gnutls_ocsp_req_print955011
-Ref: gnutls_ocsp_req_randomize_nonce955746
-Ref: gnutls_ocsp_req_set_extension956184
-Ref: gnutls_ocsp_req_set_nonce956873
-Ref: gnutls_ocsp_resp_check_crt957465
-Ref: gnutls_ocsp_resp_deinit958048
-Ref: gnutls_ocsp_resp_export958277
-Ref: gnutls_ocsp_resp_get_certs958701
-Ref: gnutls_ocsp_resp_get_extension959825
-Ref: gnutls_ocsp_resp_get_nonce961164
-Ref: gnutls_ocsp_resp_get_produced961829
-Ref: gnutls_ocsp_resp_get_responder962175
-Ref: gnutls_ocsp_resp_get_response962925
-Ref: gnutls_ocsp_resp_get_signature964052
-Ref: gnutls_ocsp_resp_get_signature_algorithm964540
-Ref: gnutls_ocsp_resp_get_single965017
-Ref: gnutls_ocsp_resp_get_status966958
-Ref: gnutls_ocsp_resp_get_version967376
-Ref: gnutls_ocsp_resp_import967773
-Ref: gnutls_ocsp_resp_init968340
-Ref: gnutls_ocsp_resp_print968667
-Ref: gnutls_ocsp_resp_verify969392
-Ref: gnutls_ocsp_resp_verify_direct970984
-Node: OpenPGP API972096
-Ref: gnutls_certificate_set_openpgp_key972416
-Ref: gnutls_certificate_set_openpgp_key_file973347
-Ref: gnutls_certificate_set_openpgp_key_file2974091
-Ref: gnutls_certificate_set_openpgp_key_mem975098
-Ref: gnutls_certificate_set_openpgp_key_mem2975855
-Ref: gnutls_certificate_set_openpgp_keyring_file976879
-Ref: gnutls_certificate_set_openpgp_keyring_mem977599
-Ref: gnutls_openpgp_crt_check_hostname978359
-Ref: gnutls_openpgp_crt_deinit978930
-Ref: gnutls_openpgp_crt_export979153
-Ref: gnutls_openpgp_crt_export2979902
-Ref: gnutls_openpgp_crt_get_auth_subkey980467
-Ref: gnutls_openpgp_crt_get_creation_time981181
-Ref: gnutls_openpgp_crt_get_expiration_time981512
-Ref: gnutls_openpgp_crt_get_fingerprint981893
-Ref: gnutls_openpgp_crt_get_key_id982452
-Ref: gnutls_openpgp_crt_get_key_usage982840
-Ref: gnutls_openpgp_crt_get_name983402
-Ref: gnutls_openpgp_crt_get_pk_algorithm984132
-Ref: gnutls_openpgp_crt_get_pk_dsa_raw984850
-Ref: gnutls_openpgp_crt_get_pk_rsa_raw985551
-Ref: gnutls_openpgp_crt_get_preferred_key_id986192
-Ref: gnutls_openpgp_crt_get_revoked_status986660
-Ref: gnutls_openpgp_crt_get_subkey_count987034
-Ref: gnutls_openpgp_crt_get_subkey_creation_time987445
-Ref: gnutls_openpgp_crt_get_subkey_expiration_time987871
-Ref: gnutls_openpgp_crt_get_subkey_fingerprint988343
-Ref: gnutls_openpgp_crt_get_subkey_id989004
-Ref: gnutls_openpgp_crt_get_subkey_idx989428
-Ref: gnutls_openpgp_crt_get_subkey_pk_algorithm989842
-Ref: gnutls_openpgp_crt_get_subkey_pk_dsa_raw990683
-Ref: gnutls_openpgp_crt_get_subkey_pk_rsa_raw991454
-Ref: gnutls_openpgp_crt_get_subkey_revoked_status992161
-Ref: gnutls_openpgp_crt_get_subkey_usage992639
-Ref: gnutls_openpgp_crt_get_version993321
-Ref: gnutls_openpgp_crt_import993659
-Ref: gnutls_openpgp_crt_init994227
-Ref: gnutls_openpgp_crt_print994520
-Ref: gnutls_openpgp_crt_set_preferred_key_id995192
-Ref: gnutls_openpgp_crt_verify_ring995821
-Ref: gnutls_openpgp_crt_verify_self996717
-Ref: gnutls_openpgp_keyring_check_id997311
-Ref: gnutls_openpgp_keyring_deinit997819
-Ref: gnutls_openpgp_keyring_get_crt998082
-Ref: gnutls_openpgp_keyring_get_crt_count998749
-Ref: gnutls_openpgp_keyring_import999124
-Ref: gnutls_openpgp_keyring_init999746
-Ref: gnutls_openpgp_privkey_deinit1000071
-Ref: gnutls_openpgp_privkey_export1000320
-Ref: gnutls_openpgp_privkey_export21001288
-Ref: gnutls_openpgp_privkey_export_dsa_raw1002062
-Ref: gnutls_openpgp_privkey_export_rsa_raw1002837
-Ref: gnutls_openpgp_privkey_export_subkey_dsa_raw1003743
-Ref: gnutls_openpgp_privkey_export_subkey_rsa_raw1004588
-Ref: gnutls_openpgp_privkey_get_fingerprint1005538
-Ref: gnutls_openpgp_privkey_get_key_id1006142
-Ref: gnutls_openpgp_privkey_get_pk_algorithm1006545
-Ref: gnutls_openpgp_privkey_get_preferred_key_id1007326
-Ref: gnutls_openpgp_privkey_get_revoked_status1007828
-Ref: gnutls_openpgp_privkey_get_subkey_count1008264
-Ref: gnutls_openpgp_privkey_get_subkey_creation_time1008691
-Ref: gnutls_openpgp_privkey_get_subkey_fingerprint1009122
-Ref: gnutls_openpgp_privkey_get_subkey_id1009797
-Ref: gnutls_openpgp_privkey_get_subkey_idx1010274
-Ref: gnutls_openpgp_privkey_get_subkey_pk_algorithm1010716
-Ref: gnutls_openpgp_privkey_get_subkey_revoked_status1011585
-Ref: gnutls_openpgp_privkey_import1012057
-Ref: gnutls_openpgp_privkey_init1012768
-Ref: gnutls_openpgp_privkey_sec_param1013095
-Ref: gnutls_openpgp_privkey_set_preferred_key_id1013558
-Ref: gnutls_openpgp_set_recv_key_function1014217
-Node: PKCS 12 API1014668
-Ref: gnutls_pkcs12_bag_decrypt1014961
-Ref: gnutls_pkcs12_bag_deinit1015393
-Ref: gnutls_pkcs12_bag_encrypt1015621
-Ref: gnutls_pkcs12_bag_get_count1016126
-Ref: gnutls_pkcs12_bag_get_data1016438
-Ref: gnutls_pkcs12_bag_get_friendly_name1017039
-Ref: gnutls_pkcs12_bag_get_key_id1017671
-Ref: gnutls_pkcs12_bag_get_type1018285
-Ref: gnutls_pkcs12_bag_init1018631
-Ref: gnutls_pkcs12_bag_set_crl1019081
-Ref: gnutls_pkcs12_bag_set_crt1019514
-Ref: gnutls_pkcs12_bag_set_data1019960
-Ref: gnutls_pkcs12_bag_set_friendly_name1020431
-Ref: gnutls_pkcs12_bag_set_key_id1021110
-Ref: gnutls_pkcs12_deinit1021761
-Ref: gnutls_pkcs12_export1021973
-Ref: gnutls_pkcs12_export21022893
-Ref: gnutls_pkcs12_generate_mac1023582
-Ref: gnutls_pkcs12_get_bag1023990
-Ref: gnutls_pkcs12_import1024605
-Ref: gnutls_pkcs12_init1025331
-Ref: gnutls_pkcs12_set_bag1025759
-Ref: gnutls_pkcs12_simple_parse1026170
-Ref: gnutls_pkcs12_verify_mac1028758
-Node: PKCS 11 API1029119
-Ref: gnutls_pkcs11_add_provider1029448
-Ref: gnutls_pkcs11_copy_secret_key1029978
-Ref: gnutls_pkcs11_copy_x509_crt1030703
-Ref: gnutls_pkcs11_copy_x509_privkey1031357
-Ref: gnutls_pkcs11_deinit1032147
-Ref: gnutls_pkcs11_delete_url1032340
-Ref: gnutls_pkcs11_get_pin_function1032856
-Ref: gnutls_pkcs11_init1033219
-Ref: gnutls_pkcs11_obj_deinit1034181
-Ref: gnutls_pkcs11_obj_export1034430
-Ref: gnutls_pkcs11_obj_export21035381
-Ref: gnutls_pkcs11_obj_export_url1036090
-Ref: gnutls_pkcs11_obj_get_info1036612
-Ref: gnutls_pkcs11_obj_get_type1037482
-Ref: gnutls_pkcs11_obj_import_url1037843
-Ref: gnutls_pkcs11_obj_init1038565
-Ref: gnutls_pkcs11_obj_list_import_url1038940
-Ref: gnutls_pkcs11_obj_list_import_url21039813
-Ref: gnutls_pkcs11_obj_set_pin_function1040716
-Ref: gnutls_pkcs11_privkey_deinit1041233
-Ref: gnutls_pkcs11_privkey_export_url1041494
-Ref: gnutls_pkcs11_privkey_generate1042004
-Ref: gnutls_pkcs11_privkey_generate21042674
-Ref: gnutls_pkcs11_privkey_get_info1043690
-Ref: gnutls_pkcs11_privkey_get_pk_algorithm1044577
-Ref: gnutls_pkcs11_privkey_import_url1045113
-Ref: gnutls_pkcs11_privkey_init1045834
-Ref: gnutls_pkcs11_privkey_set_pin_function1046209
-Ref: gnutls_pkcs11_privkey_status1046729
-Ref: gnutls_pkcs11_reinit1047100
-Ref: gnutls_pkcs11_set_pin_function1047538
-Ref: gnutls_pkcs11_set_token_function1048028
-Ref: gnutls_pkcs11_token_get_flags1048434
-Ref: gnutls_pkcs11_token_get_info1048946
-Ref: gnutls_pkcs11_token_get_mechanism1049623
-Ref: gnutls_pkcs11_token_get_url1050236
-Ref: gnutls_pkcs11_token_init1050904
-Ref: gnutls_pkcs11_token_set_pin1051542
-Ref: gnutls_pkcs11_type_get_name1052155
-Ref: gnutls_x509_crt_import_pkcs111052644
-Ref: gnutls_x509_crt_import_pkcs11_url1053164
-Ref: gnutls_x509_crt_list_import_pkcs111053823
-Node: TPM API1054437
-Ref: gnutls_tpm_get_registered1054716
-Ref: gnutls_tpm_key_list_deinit1055109
-Ref: gnutls_tpm_key_list_get_url1055377
-Ref: gnutls_tpm_privkey_delete1056029
-Ref: gnutls_tpm_privkey_generate1056465
-Node: Abstract key API1057811
-Ref: gnutls_certificate_set_key1058123
-Ref: gnutls_certificate_set_retrieve_function21059486
-Ref: gnutls_pcert_deinit1061351
-Ref: gnutls_pcert_import_openpgp1061596
-Ref: gnutls_pcert_import_openpgp_raw1062206
-Ref: gnutls_pcert_import_x5091062984
-Ref: gnutls_pcert_import_x509_raw1063582
-Ref: gnutls_pcert_list_import_x509_raw1064285
-Ref: gnutls_privkey_decrypt_data1065328
-Ref: gnutls_privkey_deinit1065962
-Ref: gnutls_privkey_get_pk_algorithm1066221
-Ref: gnutls_privkey_get_type1066840
-Ref: gnutls_privkey_import_ext1067326
-Ref: gnutls_privkey_import_ext21068281
-Ref: gnutls_privkey_import_openpgp1069461
-Ref: gnutls_privkey_import_openpgp_raw1070306
-Ref: gnutls_privkey_import_pkcs111071021
-Ref: gnutls_privkey_import_pkcs11_url1071784
-Ref: gnutls_privkey_import_tpm_raw1072238
-Ref: gnutls_privkey_import_tpm_url1073110
-Ref: gnutls_privkey_import_url1074217
-Ref: gnutls_privkey_import_x5091074764
-Ref: gnutls_privkey_import_x509_raw1075517
-Ref: gnutls_privkey_init1076300
-Ref: gnutls_privkey_set_pin_function1076659
-Ref: gnutls_privkey_sign_data1077231
-Ref: gnutls_privkey_sign_hash1078247
-Ref: gnutls_privkey_sign_raw_data1079427
-Ref: gnutls_privkey_status1080445
-Ref: gnutls_pubkey_deinit1080973
-Ref: gnutls_pubkey_encrypt_data1081219
-Ref: gnutls_pubkey_export1081779
-Ref: gnutls_pubkey_export21082793
-Ref: gnutls_pubkey_get_key_id1083558
-Ref: gnutls_pubkey_get_key_usage1084548
-Ref: gnutls_pubkey_get_openpgp_key_id1085050
-Ref: gnutls_pubkey_get_pk_algorithm1086252
-Ref: gnutls_pubkey_get_pk_dsa_raw1086877
-Ref: gnutls_pubkey_get_pk_ecc_raw1087558
-Ref: gnutls_pubkey_get_pk_ecc_x9621088201
-Ref: gnutls_pubkey_get_pk_rsa_raw1088853
-Ref: gnutls_pubkey_get_preferred_hash_algorithm1089481
-Ref: gnutls_pubkey_get_verify_algorithm1090445
-Ref: gnutls_pubkey_import1091067
-Ref: gnutls_pubkey_import_dsa_raw1091786
-Ref: gnutls_pubkey_import_ecc_raw1092447
-Ref: gnutls_pubkey_import_ecc_x9621093055
-Ref: gnutls_pubkey_import_openpgp1093689
-Ref: gnutls_pubkey_import_openpgp_raw1094334
-Ref: gnutls_pubkey_import_pkcs111095028
-Ref: gnutls_pubkey_import_pkcs11_url1095581
-Ref: gnutls_pubkey_import_privkey1096093
-Ref: gnutls_pubkey_import_rsa_raw1096688
-Ref: gnutls_pubkey_import_tpm_raw1097244
-Ref: gnutls_pubkey_import_tpm_url1098021
-Ref: gnutls_pubkey_import_url1098917
-Ref: gnutls_pubkey_import_x5091099410
-Ref: gnutls_pubkey_import_x509_crq1099915
-Ref: gnutls_pubkey_import_x509_raw1100423
-Ref: gnutls_pubkey_init1101005
-Ref: gnutls_pubkey_print1101337
-Ref: gnutls_pubkey_set_key_usage1102075
-Ref: gnutls_pubkey_set_pin_function1102644
-Ref: gnutls_pubkey_verify_data1103215
-Ref: gnutls_pubkey_verify_data21103986
-Ref: gnutls_pubkey_verify_hash1104709
-Ref: gnutls_pubkey_verify_hash21105490
-Ref: gnutls_x509_crl_privkey_sign1106229
-Ref: gnutls_x509_crq_privkey_sign1107151
-Ref: gnutls_x509_crq_set_pubkey1108164
-Ref: gnutls_x509_crt_privkey_sign1108635
-Ref: gnutls_x509_crt_set_pubkey1109513
-Node: DANE API1109925
-Ref: dane_cert_type_name1110296
-Ref: dane_cert_usage_name1110585
-Ref: dane_match_type_name1110874
-Ref: dane_query_data1111156
-Ref: dane_query_deinit1111835
-Ref: dane_query_entries1112040
-Ref: dane_query_status1112282
-Ref: dane_query_tlsa1112576
-Ref: dane_state_deinit1113155
-Ref: dane_state_init1113347
-Ref: dane_state_set_dlv_file1113730
-Ref: dane_strerror1114030
-Ref: dane_verification_status_print1114529
-Ref: dane_verify_crt1115123
-Ref: dane_verify_session_crt1116993
-Node: Cryptographic API1117946
-Ref: gnutls_cipher_add_auth1118274
-Ref: gnutls_cipher_decrypt1118856
-Ref: gnutls_cipher_decrypt21119340
-Ref: gnutls_cipher_deinit1119952
-Ref: gnutls_cipher_encrypt1120237
-Ref: gnutls_cipher_encrypt21120697
-Ref: gnutls_cipher_get_block_size1121325
-Ref: gnutls_cipher_init1121626
-Ref: gnutls_cipher_set_iv1122345
-Ref: gnutls_cipher_tag1122696
-Ref: gnutls_hash1123158
-Ref: gnutls_hash_deinit1123595
-Ref: gnutls_hash_fast1123929
-Ref: gnutls_hash_get_len1124440
-Ref: gnutls_hash_init1124768
-Ref: gnutls_hash_output1125310
-Ref: gnutls_hmac1125597
-Ref: gnutls_hmac_deinit1126034
-Ref: gnutls_hmac_fast1126367
-Ref: gnutls_hmac_get_len1126980
-Ref: gnutls_hmac_init1127295
-Ref: gnutls_hmac_output1127977
-Ref: gnutls_rnd1128260
-Ref: gnutls_rnd_refresh1128651
-Node: Compatibility API1128932
-Ref: gnutls_certificate_set_rsa_export_params1129310
-Ref: gnutls_certificate_type_set_priority1129826
-Ref: gnutls_cipher_set_priority1130555
-Ref: gnutls_compression_set_priority1131279
-Ref: gnutls_kx_set_priority1132153
-Ref: gnutls_mac_set_priority1132858
-Ref: gnutls_openpgp_privkey_sign_hash1133575
-Ref: gnutls_protocol_set_priority1134277
-Ref: gnutls_rsa_export_get_modulus_bits1134821
-Ref: gnutls_rsa_export_get_pubkey1135186
-Ref: gnutls_rsa_params_cpy1135777
-Ref: gnutls_rsa_params_deinit1136206
-Ref: gnutls_rsa_params_export_pkcs11136483
-Ref: gnutls_rsa_params_export_raw1137428
-Ref: gnutls_rsa_params_generate21138345
-Ref: gnutls_rsa_params_import_pkcs11139139
-Ref: gnutls_rsa_params_import_raw1139838
-Ref: gnutls_rsa_params_init1140640
-Ref: gnutls_set_default_export_priority1141021
-Ref: gnutls_sign_callback_get1141859
-Ref: gnutls_sign_callback_set1142355
-Ref: gnutls_x509_crl_sign1143309
-Ref: gnutls_x509_crq_sign1143924
-Ref: gnutls_x509_crt_get_preferred_hash_algorithm1144486
-Ref: gnutls_x509_crt_get_verify_algorithm1145377
-Ref: gnutls_x509_crt_verify_data1146089
-Ref: gnutls_x509_crt_verify_hash1146827
-Ref: gnutls_x509_privkey_sign_data1147580
-Ref: gnutls_x509_privkey_sign_hash1148849
-Node: Copying Information1149502
-Node: Bibliography1174676
-Ref: CBCATT1174815
-Ref: GPGH1174992
-Ref: GUTPKI1175114
-Ref: KEYPIN1175288
-Ref: NISTSP800571175462
-Ref: RFC22461175709
-Ref: RFC46801175864
-Ref: RFC45141176021
-Ref: RFC43461176224
-Ref: RFC43471176373
-Ref: RFC52461176539
-Ref: RFC24401176689
-Ref: RFC48801176870
-Ref: RFC42111177063
-Ref: RFC28171177256
-Ref: RFC28181177408
-Ref: RFC29451177521
-Ref: RFC29861177670
-Ref: PKIX1177858
-Ref: RFC37491178120
-Ref: RFC38201178285
-Ref: RFC65201178527
-Ref: RFC57461178765
-Ref: RFC52801178973
-Ref: TLSTKT1179239
-Ref: PKCS121179470
-Ref: PKCS111179610
-Ref: RESCORLA1179755
-Ref: SELKEY1179851
-Ref: SSL31180009
-Ref: STEVENS1180199
-Ref: TLSEXT1180307
-Ref: TLSPGP1180523
-Ref: TLSSRP1180687
-Ref: TLSPSK1180883
-Ref: TOMSRP1181051
-Ref: WEGER1181163
-Ref: ECRYPT1181354
-Ref: RFC50561181558
-Ref: RFC59291181710
-Ref: PKCS11URI1181852
-Ref: TPMURI1182035
-Ref: ANDERSON1182228
-Ref: RFC48211182374
-Ref: RFC25601182526
-Ref: RIVESTCRL1182719
-Node: Function and Data Index1183079
-Node: Concept Index1275242
+Node: Top1281
+Node: Preface2463
+Node: Introduction to GnuTLS3846
+Node: Downloading and installing5486
+Node: Document overview7998
+Node: Introduction to TLS8996
+Ref: Introduction to TLS-Footnote-110133
+Node: TLS layers10420
+Ref: fig:tls-layers11368
+Node: The transport layer11443
+Node: The TLS record protocol12047
+Node: Encryption algorithms used in the record layer13320
+Ref: tab:ciphers14197
+Ref: tab:macs15479
+Node: Compression algorithms used in the record layer16109
+Ref: gnutls_compression_method_t17051
+Node: Weaknesses and countermeasures17738
+Ref: Weaknesses and countermeasures-Footnote-118762
+Node: On Record Padding18837
+Node: The TLS Alert Protocol20760
+Ref: The Alert Protocol20960
+Ref: tab:alerts21839
+Node: The TLS Handshake Protocol24510
+Ref: The Handshake Protocol24709
+Node: TLS Cipher Suites25372
+Ref: TLS Cipher Suites-Footnote-126352
+Node: Authentication26461
+Node: Client Authentication27176
+Node: Resuming Sessions27652
+Ref: resume27811
+Node: TLS Extensions28455
+Node: Maximum fragment length negotiation29133
+Node: Server name indication29736
+Ref: serverind29936
+Node: Session tickets30782
+Node: HeartBeat31390
+Node: Safe renegotiation32696
+Node: OCSP status request37592
+Node: SRTP39414
+Ref: gnutls_srtp_profile_t39891
+Node: How to use TLS in application protocols42236
+Node: Separate ports42754
+Ref: Separate ports-Footnote-144162
+Node: Upward negotiation44235
+Ref: Upward negotiation-Footnote-146907
+Node: On SSL 2 and older protocols46932
+Node: Authentication methods48811
+Node: Certificate authentication49704
+Ref: tab:key-exchange50252
+Node: X.509 certificates52628
+Ref: fig:x50953106
+Node: X.509 certificate structure53654
+Ref: tab:x50954043
+Ref: tab:x509-ext55706
+Node: Importing an X.509 certificate58239
+Node: X.509 distinguished names59623
+Node: X.509 public and private keys63294
+Node: Verifying X.509 certificate paths65736
+Ref: gnutls_certificate_status_t73497
+Node: Verifying a certificate in the context of TLS session75495
+Ref: gnutls_certificate_verify_flags76976
+Node: OpenPGP certificates79109
+Ref: fig:openpgp79910
+Ref: tab:openpgp-certificate80694
+Ref: tab:openpgp-key-exchange82257
+Ref: OpenPGP certificates-Footnote-186276
+Node: Advanced certificate verification86328
+Node: Verifying a certificate using trust on first use authentication87212
+Node: Verifying a certificate using DANE88435
+Node: Digital signatures89938
+Node: More on certificate authentication95134
+Node: PKCS 10 certificate requests95953
+Ref: ex:crq99200
+Node: PKIX certificate revocation lists101281
+Ref: tab:crl102145
+Node: OCSP certificate status checking107568
+Ref: tab:ocsp-response114248
+Ref: gnutls_x509_crl_reason_t117669
+Node: Managing encrypted keys119003
+Ref: gnutls_pkcs_encrypt_flags_t123055
+Node: certtool Invocation129823
+Ref: certtool usage130411
+Ref: certtool debug136363
+Ref: certtool generate-request136508
+Ref: certtool verify-chain136851
+Ref: certtool verify137027
+Ref: certtool verify-crl137344
+Ref: certtool get-dh-params137643
+Ref: certtool load-privkey137940
+Ref: certtool load-pubkey138112
+Ref: certtool load-certificate138282
+Ref: certtool load-ca-privkey138463
+Ref: certtool load-ca-certificate138667
+Ref: certtool cprint138879
+Ref: certtool null-password139112
+Ref: certtool pubkey-info139304
+Ref: certtool to-p12139546
+Ref: certtool rsa139846
+Ref: certtool dsa139977
+Ref: certtool ecc140107
+Ref: certtool ecdsa140279
+Ref: certtool hash140396
+Ref: certtool inder140586
+Ref: certtool inraw140908
+Ref: certtool outder141031
+Ref: certtool outraw141181
+Ref: certtool sec-param141309
+Ref: certtool pkcs-cipher141531
+Ref: certtool exit status141770
+Ref: certtool See Also142001
+Ref: certtool Examples142051
+Ref: certtool Files145935
+Node: ocsptool Invocation151325
+Ref: ocsptool usage151866
+Ref: ocsptool debug154972
+Ref: ocsptool ask155117
+Ref: ocsptool exit status155512
+Ref: ocsptool See Also155743
+Ref: ocsptool Examples155794
+Node: danetool Invocation160755
+Ref: danetool usage161209
+Ref: danetool debug164403
+Ref: danetool load-pubkey164548
+Ref: danetool load-certificate164717
+Ref: danetool dlv164898
+Ref: danetool hash165058
+Ref: danetool check165248
+Ref: danetool check-ee165535
+Ref: danetool check-ca165716
+Ref: danetool insecure165892
+Ref: danetool local-dns166036
+Ref: danetool inder166265
+Ref: danetool inraw166587
+Ref: danetool tlsa-rr166710
+Ref: danetool host167007
+Ref: danetool proto167200
+Ref: danetool ca167421
+Ref: danetool x509167593
+Ref: danetool local167852
+Ref: danetool domain167978
+Ref: danetool exit status168383
+Ref: danetool See Also168614
+Ref: danetool Examples168665
+Node: Shared-key and anonymous authentication169822
+Node: SRP authentication170391
+Node: Authentication using SRP170654
+Node: srptool Invocation173700
+Ref: srptool usage174515
+Ref: srptool debug176528
+Ref: srptool verify176673
+Ref: srptool passwd-conf176810
+Ref: srptool create-conf177011
+Ref: srptool exit status177257
+Ref: srptool See Also177486
+Ref: srptool Examples177600
+Node: PSK authentication178238
+Node: Authentication using PSK178534
+Node: psktool Invocation179755
+Ref: psktool usage180242
+Ref: psktool debug181761
+Ref: psktool exit status181906
+Ref: psktool See Also182135
+Ref: psktool Examples182236
+Node: Anonymous authentication182690
+Node: Selecting an appropriate authentication method183679
+Node: Hardware security modules and abstract key types188504
+Node: Abstract key types189513
+Node: Abstract public keys190912
+Node: Abstract private keys195575
+Node: Operations198973
+Node: Smart cards and HSMs205265
+Ref: fig:pkcs11-vision207119
+Ref: Smart cards and HSMs-Footnote-1207428
+Node: PKCS11 Initialization207465
+Ref: PKCS11 Initialization-Footnote-1210011
+Node: Accessing objects that require a PIN210051
+Ref: gnutls_pin_flag_t211729
+Node: Reading objects213255
+Node: Writing objects218372
+Node: Using a PKCS11 token with TLS220758
+Node: p11tool Invocation222056
+Ref: p11tool usage222685
+Ref: p11tool debug226692
+Ref: p11tool write226837
+Ref: p11tool generate-rsa227012
+Ref: p11tool generate-dsa227181
+Ref: p11tool generate-ecc227350
+Ref: p11tool private227519
+Ref: p11tool sec-param227740
+Ref: p11tool inder227984
+Ref: p11tool inraw228124
+Ref: p11tool provider228246
+Ref: p11tool exit status228443
+Ref: p11tool See Also228673
+Ref: p11tool Examples228722
+Node: Trusted Platform Module229822
+Node: Keys in TPM231085
+Node: Key generation232555
+Node: Using keys234818
+Node: tpmtool Invocation238474
+Ref: tpmtool usage238900
+Ref: tpmtool debug242216
+Ref: tpmtool generate-rsa242361
+Ref: tpmtool user242630
+Ref: tpmtool system242990
+Ref: tpmtool sec-param243344
+Ref: tpmtool inder243669
+Ref: tpmtool outder243885
+Ref: tpmtool exit status244021
+Ref: tpmtool See Also244250
+Ref: tpmtool Examples244312
+Node: How to use GnuTLS in applications244920
+Node: Introduction to the library245489
+Node: General idea246039
+Ref: fig:gnutls-design246876
+Ref: General idea-Footnote-1248165
+Node: Error handling248207
+Node: Common types249772
+Node: Debugging and auditing250655
+Node: Thread safety252266
+Node: Callback functions254721
+Node: Preparation255684
+Node: Headers256102
+Node: Initialization256391
+Node: Version check257044
+Node: Building the source257581
+Node: Session initialization259686
+Node: Associating the credentials263221
+Ref: tab:key-exchange-cred263956
+Node: Certificate credentials265058
+Node: SRP credentials278465
+Node: PSK credentials282940
+Node: Anonymous credentials286698
+Node: Setting up the transport layer287597
+Node: Asynchronous operation295484
+Node: DTLS sessions298814
+Ref: DTLS sessions-Footnote-1301054
+Node: TLS handshake301128
+Node: Data transfer and termination303808
+Node: Buffered data transfer312437
+Node: Handling alerts313956
+Node: Priority Strings317323
+Ref: tab:prio-keywords318045
+Ref: tab:prio-algorithms321498
+Ref: tab:prio-special1323413
+Ref: tab:prio-special2325175
+Ref: Priority Strings-Footnote-1329157
+Ref: Priority Strings-Footnote-2329227
+Node: Selecting cryptographic key sizes329415
+Ref: tab:key-sizes330048
+Node: Advanced topics333931
+Node: Session resumption334303
+Node: Certificate verification338443
+Ref: dane_verify_status_t346943
+Node: Parameter generation347338
+Node: Keying Material Exporters351045
+Node: Channel Bindings352096
+Node: Interoperability353584
+Node: Compatibility with the OpenSSL library355186
+Node: GnuTLS application examples355910
+Ref: examples356128
+Node: Client examples356402
+Node: Simple client example with X.509 certificate support357287
+Ref: ex:verify357580
+Node: Simple client example with SSH-style certificate verification362454
+Node: Simple client example with anonymous authentication366373
+Node: Simple Datagram TLS client example369683
+Node: Obtaining session information373449
+Node: Using a callback to select the certificate to use377495
+Node: Verifying a certificate383442
+Ref: ex:verify2383679
+Node: Client using a smart card with TLS388034
+Ref: ex:pkcs11-client388267
+Node: Client with Resume capability example392472
+Ref: ex:resume-client392747
+Node: Simple client example with SRP authentication396885
+Node: Simple client example in C++400324
+Node: Helper functions for TCP connections402896
+Node: Helper functions for UDP connections404356
+Node: Server examples406045
+Node: Echo server with X.509 authentication406509
+Node: Echo server with OpenPGP authentication411922
+Node: Echo server with SRP authentication417152
+Node: Echo server with anonymous authentication422384
+Node: DTLS echo server with X.509 authentication427124
+Node: OCSP example439011
+Ref: Generate OCSP request439177
+Node: Miscellaneous examples447398
+Node: Checking for an alert447748
+Node: X.509 certificate parsing example449051
+Ref: ex:x509-info449308
+Node: Listing the ciphersuites in a priority string452574
+Node: PKCS #12 structure generation example454314
+Node: XSSL examples458016
+Node: Example client with X.509 certificate authentication458611
+Node: Example client with X.509 certificate authentication and TOFU460497
+Node: Using GnuTLS as a cryptographic library462947
+Node: Symmetric algorithms463611
+Node: Public key algorithms464974
+Node: Hash and HMAC functions465441
+Node: Random number generation467259
+Ref: gnutls_rnd_level_t467591
+Node: Other included programs468283
+Node: gnutls-cli Invocation468852
+Ref: gnutls-cli usage469411
+Ref: gnutls-cli debug474458
+Ref: gnutls-cli tofu474603
+Ref: gnutls-cli dane474854
+Ref: gnutls-cli local-dns475114
+Ref: gnutls-cli ca-verification475343
+Ref: gnutls-cli ocsp475628
+Ref: gnutls-cli resume475787
+Ref: gnutls-cli rehandshake475934
+Ref: gnutls-cli starttls476101
+Ref: gnutls-cli disable-extensions476286
+Ref: gnutls-cli dh-bits476479
+Ref: gnutls-cli priority476830
+Ref: gnutls-cli ranges477180
+Ref: gnutls-cli list477397
+Ref: gnutls-cli exit status477634
+Ref: gnutls-cli See Also477869
+Ref: gnutls-cli Examples477947
+Node: gnutls-serv Invocation479680
+Ref: gnutls-serv usage480154
+Ref: gnutls-serv debug484126
+Ref: gnutls-serv heartbeat484271
+Ref: gnutls-serv priority484421
+Ref: gnutls-serv ocsp-response484772
+Ref: gnutls-serv list484997
+Ref: gnutls-serv exit status485234
+Ref: gnutls-serv See Also485471
+Ref: gnutls-serv Examples485550
+Node: gnutls-cli-debug Invocation490905
+Ref: gnutls-cli-debug usage491721
+Ref: gnutls-cli-debug debug492520
+Ref: gnutls-cli-debug exit status492665
+Ref: gnutls-cli-debug See Also492912
+Ref: gnutls-cli-debug Examples492996
+Node: Internal architecture of GnuTLS495373
+Node: The TLS Protocol495915
+Ref: fig:client-server496380
+Node: TLS Handshake Protocol496470
+Ref: fig:gnutls-handshake496900
+Ref: fig:gnutls-handshake-sequence497395
+Node: TLS Authentication Methods497493
+Ref: TLS Authentication Methods-Footnote-1499784
+Node: TLS Extension Handling499847
+Node: Cryptographic Backend511400
+Ref: fig:crypto-layers512121
+Ref: Cryptographic Backend-Footnote-1515823
+Ref: Cryptographic Backend-Footnote-2515904
+Node: Upgrading from previous versions516008
+Node: Support519906
+Node: Getting help520136
+Node: Commercial Support520738
+Node: Bug Reports521566
+Node: Contributing522931
+Node: Error codes524936
+Node: Supported ciphersuites542725
+Ref: ciphersuites542898
+Node: API reference550229
+Node: Core TLS API550639
+Ref: gnutls_alert_get550868
+Ref: gnutls_alert_get_name551494
+Ref: gnutls_alert_get_strname551879
+Ref: gnutls_alert_send552214
+Ref: gnutls_alert_send_appropriate553100
+Ref: gnutls_anon_allocate_client_credentials553852
+Ref: gnutls_anon_allocate_server_credentials554317
+Ref: gnutls_anon_free_client_credentials554774
+Ref: gnutls_anon_free_server_credentials555151
+Ref: gnutls_anon_set_params_function555520
+Ref: gnutls_anon_set_server_dh_params556039
+Ref: gnutls_anon_set_server_params_function556563
+Ref: gnutls_auth_client_get_type557073
+Ref: gnutls_auth_get_type557587
+Ref: gnutls_auth_server_get_type558285
+Ref: gnutls_bye558779
+Ref: gnutls_certificate_activation_time_peers560391
+Ref: gnutls_certificate_allocate_credentials560859
+Ref: gnutls_certificate_client_get_request_status561336
+Ref: gnutls_certificate_expiration_time_peers561759
+Ref: gnutls_certificate_free_ca_names562164
+Ref: gnutls_certificate_free_cas562838
+Ref: gnutls_certificate_free_credentials563263
+Ref: gnutls_certificate_free_crls563785
+Ref: gnutls_certificate_free_keys564091
+Ref: gnutls_certificate_get_issuer564528
+Ref: gnutls_certificate_get_ours565162
+Ref: gnutls_certificate_get_peers565696
+Ref: gnutls_certificate_get_peers_subkey_id566562
+Ref: gnutls_certificate_send_x509_rdn_sequence567078
+Ref: gnutls_certificate_server_set_request567805
+Ref: gnutls_certificate_set_dh_params568458
+Ref: gnutls_certificate_set_ocsp_status_request_file569178
+Ref: gnutls_certificate_set_ocsp_status_request_function570053
+Ref: gnutls_certificate_set_params_function571438
+Ref: gnutls_certificate_set_pin_function571977
+Ref: gnutls_certificate_set_retrieve_function572641
+Ref: gnutls_certificate_set_verify_flags574517
+Ref: gnutls_certificate_set_verify_function575016
+Ref: gnutls_certificate_set_verify_limits576086
+Ref: gnutls_certificate_set_x509_crl576772
+Ref: gnutls_certificate_set_x509_crl_file577605
+Ref: gnutls_certificate_set_x509_crl_mem578392
+Ref: gnutls_certificate_set_x509_key579174
+Ref: gnutls_certificate_set_x509_key_file580192
+Ref: gnutls_certificate_set_x509_key_file2581501
+Ref: gnutls_certificate_set_x509_key_mem582955
+Ref: gnutls_certificate_set_x509_key_mem2584208
+Ref: gnutls_certificate_set_x509_simple_pkcs12_file585625
+Ref: gnutls_certificate_set_x509_simple_pkcs12_mem587160
+Ref: gnutls_certificate_set_x509_system_trust588667
+Ref: gnutls_certificate_set_x509_trust589240
+Ref: gnutls_certificate_set_x509_trust_file590226
+Ref: gnutls_certificate_set_x509_trust_mem591441
+Ref: gnutls_certificate_type_get592388
+Ref: gnutls_certificate_type_get_id592791
+Ref: gnutls_certificate_type_get_name593190
+Ref: gnutls_certificate_type_list593575
+Ref: gnutls_certificate_verification_status_print593918
+Ref: gnutls_certificate_verify_peers2594679
+Ref: gnutls_certificate_verify_peers3595945
+Ref: gnutls_check_version597292
+Ref: gnutls_cipher_get597906
+Ref: gnutls_cipher_get_id598213
+Ref: gnutls_cipher_get_key_size598601
+Ref: gnutls_cipher_get_name598928
+Ref: gnutls_cipher_list599276
+Ref: gnutls_cipher_suite_get_name599836
+Ref: gnutls_cipher_suite_info600464
+Ref: gnutls_compression_get601646
+Ref: gnutls_compression_get_id602001
+Ref: gnutls_compression_get_name602366
+Ref: gnutls_compression_list602749
+Ref: gnutls_credentials_clear603056
+Ref: gnutls_credentials_set603290
+Ref: gnutls_db_check_entry604670
+Ref: gnutls_db_check_entry_time605070
+Ref: gnutls_db_get_ptr605425
+Ref: gnutls_db_remove_session605743
+Ref: gnutls_db_set_cache_expiration606288
+Ref: gnutls_db_set_ptr606634
+Ref: gnutls_db_set_remove_function606975
+Ref: gnutls_db_set_retrieve_function607485
+Ref: gnutls_db_set_store_function608179
+Ref: gnutls_deinit608653
+Ref: gnutls_dh_get_group608999
+Ref: gnutls_dh_get_peers_public_bits609731
+Ref: gnutls_dh_get_prime_bits610175
+Ref: gnutls_dh_get_pubkey610815
+Ref: gnutls_dh_get_secret_bits611408
+Ref: gnutls_dh_params_cpy611841
+Ref: gnutls_dh_params_deinit612300
+Ref: gnutls_dh_params_export2_pkcs3612575
+Ref: gnutls_dh_params_export_pkcs3613396
+Ref: gnutls_dh_params_export_raw614414
+Ref: gnutls_dh_params_generate2615169
+Ref: gnutls_dh_params_import_pkcs3616121
+Ref: gnutls_dh_params_import_raw616895
+Ref: gnutls_dh_params_init617545
+Ref: gnutls_dh_set_prime_bits617915
+Ref: gnutls_ecc_curve_get619018
+Ref: gnutls_ecc_curve_get_name619411
+Ref: gnutls_ecc_curve_get_size619748
+Ref: gnutls_ecc_curve_list619994
+Ref: gnutls_error_is_fatal620316
+Ref: gnutls_error_to_alert621083
+Ref: gnutls_fingerprint621761
+Ref: gnutls_global_deinit622753
+Ref: gnutls_global_init623071
+Ref: gnutls_global_set_audit_log_function624425
+Ref: gnutls_global_set_log_function625065
+Ref: gnutls_global_set_log_level625573
+Ref: gnutls_global_set_mem_functions626075
+Ref: gnutls_global_set_mutex627308
+Ref: gnutls_global_set_time_function628148
+Ref: gnutls_handshake628559
+Ref: gnutls_handshake_get_last_in629904
+Ref: gnutls_handshake_get_last_out630526
+Ref: gnutls_handshake_set_max_packet_length631163
+Ref: gnutls_handshake_set_post_client_hello_function631856
+Ref: gnutls_handshake_set_private_extensions632944
+Ref: gnutls_handshake_set_random633631
+Ref: gnutls_handshake_set_timeout634344
+Ref: gnutls_heartbeat_allowed634897
+Ref: gnutls_heartbeat_enable635373
+Ref: gnutls_heartbeat_get_timeout635710
+Ref: gnutls_heartbeat_ping636254
+Ref: gnutls_heartbeat_pong637221
+Ref: gnutls_heartbeat_set_timeouts637635
+Ref: gnutls_hex2bin638640
+Ref: gnutls_hex_decode639211
+Ref: gnutls_hex_encode639787
+Ref: gnutls_init640371
+Ref: gnutls_key_generate641497
+Ref: gnutls_kx_get641919
+Ref: gnutls_kx_get_id642252
+Ref: gnutls_kx_get_name642597
+Ref: gnutls_kx_list642943
+Ref: gnutls_load_file643270
+Ref: gnutls_mac_get643805
+Ref: gnutls_mac_get_id644113
+Ref: gnutls_mac_get_key_size644530
+Ref: gnutls_mac_get_name644843
+Ref: gnutls_mac_list645163
+Ref: gnutls_ocsp_status_request_enable_client645753
+Ref: gnutls_ocsp_status_request_get646710
+Ref: gnutls_ocsp_status_request_is_checked647392
+Ref: gnutls_openpgp_send_cert648066
+Ref: gnutls_pem_base64_decode648641
+Ref: gnutls_pem_base64_decode_alloc649507
+Ref: gnutls_pem_base64_encode650304
+Ref: gnutls_pem_base64_encode_alloc651120
+Ref: gnutls_perror651828
+Ref: gnutls_pk_algorithm_get_name652123
+Ref: gnutls_pk_bits_to_sec_param652480
+Ref: gnutls_pk_get_id652952
+Ref: gnutls_pk_get_name653473
+Ref: gnutls_pk_list653836
+Ref: gnutls_pk_to_sign654168
+Ref: gnutls_prf654581
+Ref: gnutls_prf_raw656212
+Ref: gnutls_priority_certificate_type_list657862
+Ref: gnutls_priority_compression_list658311
+Ref: gnutls_priority_deinit658726
+Ref: gnutls_priority_ecc_curve_list658977
+Ref: gnutls_priority_get_cipher_suite_index659413
+Ref: gnutls_priority_init660306
+Ref: gnutls_priority_protocol_list662850
+Ref: gnutls_priority_set663259
+Ref: gnutls_priority_set_direct663694
+Ref: gnutls_priority_sign_list664497
+Ref: gnutls_protocol_get_id664910
+Ref: gnutls_protocol_get_name665227
+Ref: gnutls_protocol_get_version665587
+Ref: gnutls_protocol_list665892
+Ref: gnutls_psk_allocate_client_credentials666261
+Ref: gnutls_psk_allocate_server_credentials666758
+Ref: gnutls_psk_client_get_hint667231
+Ref: gnutls_psk_free_client_credentials667715
+Ref: gnutls_psk_free_server_credentials668087
+Ref: gnutls_psk_server_get_username668451
+Ref: gnutls_psk_set_client_credentials668823
+Ref: gnutls_psk_set_client_credentials_function669818
+Ref: gnutls_psk_set_params_function670741
+Ref: gnutls_psk_set_server_credentials_file671264
+Ref: gnutls_psk_set_server_credentials_function671914
+Ref: gnutls_psk_set_server_credentials_hint672865
+Ref: gnutls_psk_set_server_dh_params673502
+Ref: gnutls_psk_set_server_params_function674028
+Ref: gnutls_random_art674513
+Ref: gnutls_range_split675228
+Ref: gnutls_record_can_use_length_hiding676365
+Ref: gnutls_record_check_pending677121
+Ref: gnutls_record_cork677538
+Ref: gnutls_record_disable_padding677934
+Ref: gnutls_record_get_direction678546
+Ref: gnutls_record_get_max_size679462
+Ref: gnutls_record_recv679825
+Ref: gnutls_record_recv_seq681333
+Ref: gnutls_record_send682325
+Ref: gnutls_record_send_range683814
+Ref: gnutls_record_set_max_empty_records685005
+Ref: gnutls_record_set_max_size685903
+Ref: gnutls_record_set_timeout686819
+Ref: gnutls_record_uncork687404
+Ref: gnutls_rehandshake688081
+Ref: gnutls_safe_renegotiation_status689374
+Ref: gnutls_sec_param_get_name689790
+Ref: gnutls_sec_param_to_pk_bits690165
+Ref: gnutls_server_name_get690810
+Ref: gnutls_server_name_set692174
+Ref: gnutls_session_channel_binding693166
+Ref: gnutls_session_enable_compatibility_mode693896
+Ref: gnutls_session_force_valid694495
+Ref: gnutls_session_get_data694919
+Ref: gnutls_session_get_data2695712
+Ref: gnutls_session_get_desc696472
+Ref: gnutls_session_get_id696887
+Ref: gnutls_session_get_id2697781
+Ref: gnutls_session_get_ptr698255
+Ref: gnutls_session_get_random698657
+Ref: gnutls_session_is_resumed699257
+Ref: gnutls_session_resumption_requested699594
+Ref: gnutls_session_set_data699982
+Ref: gnutls_session_set_premaster700843
+Ref: gnutls_session_set_ptr701933
+Ref: gnutls_session_ticket_enable_client702350
+Ref: gnutls_session_ticket_enable_server702766
+Ref: gnutls_session_ticket_key_generate703333
+Ref: gnutls_set_default_priority703765
+Ref: gnutls_sign_algorithm_get704545
+Ref: gnutls_sign_algorithm_get_client704931
+Ref: gnutls_sign_algorithm_get_requested705341
+Ref: gnutls_sign_get_hash_algorithm706370
+Ref: gnutls_sign_get_id706784
+Ref: gnutls_sign_get_name707149
+Ref: gnutls_sign_get_pk_algorithm707500
+Ref: gnutls_sign_is_secure707913
+Ref: gnutls_sign_list708166
+Ref: gnutls_srp_allocate_client_credentials708495
+Ref: gnutls_srp_allocate_server_credentials708973
+Ref: gnutls_srp_base64_decode709423
+Ref: gnutls_srp_base64_decode_alloc710140
+Ref: gnutls_srp_base64_encode710813
+Ref: gnutls_srp_base64_encode_alloc711625
+Ref: gnutls_srp_free_client_credentials712362
+Ref: gnutls_srp_free_server_credentials712734
+Ref: gnutls_srp_server_get_username713098
+Ref: gnutls_srp_set_client_credentials713552
+Ref: gnutls_srp_set_client_credentials_function714313
+Ref: gnutls_srp_set_prime_bits715422
+Ref: gnutls_srp_set_server_credentials_file716114
+Ref: gnutls_srp_set_server_credentials_function716858
+Ref: gnutls_srp_verifier718236
+Ref: gnutls_srtp_get_keys719170
+Ref: gnutls_srtp_get_mki720572
+Ref: gnutls_srtp_get_profile_id721148
+Ref: gnutls_srtp_get_profile_name721607
+Ref: gnutls_srtp_get_selected_profile722028
+Ref: gnutls_srtp_set_mki722479
+Ref: gnutls_srtp_set_profile722935
+Ref: gnutls_srtp_set_profile_direct723474
+Ref: gnutls_store_commitment724204
+Ref: gnutls_store_pubkey725461
+Ref: gnutls_strerror726622
+Ref: gnutls_strerror_name727107
+Ref: gnutls_supplemental_get_name727576
+Ref: gnutls_tdb_deinit727986
+Ref: gnutls_tdb_init728201
+Ref: gnutls_tdb_set_store_commitment_func728552
+Ref: gnutls_tdb_set_store_func729145
+Ref: gnutls_tdb_set_verify_func729641
+Ref: gnutls_transport_get_int730126
+Ref: gnutls_transport_get_int2730541
+Ref: gnutls_transport_get_ptr731051
+Ref: gnutls_transport_get_ptr2731474
+Ref: gnutls_transport_set_errno732015
+Ref: gnutls_transport_set_errno_function732879
+Ref: gnutls_transport_set_int733422
+Ref: gnutls_transport_set_int2733784
+Ref: gnutls_transport_set_ptr734349
+Ref: gnutls_transport_set_ptr2734767
+Ref: gnutls_transport_set_pull_function735416
+Ref: gnutls_transport_set_pull_timeout_function736202
+Ref: gnutls_transport_set_push_function737169
+Ref: gnutls_transport_set_vec_push_function738020
+Ref: gnutls_url_is_supported738722
+Ref: gnutls_verify_stored_pubkey739103
+Node: High level TLS API740825
+Node: Datagram TLS API741054
+Ref: gnutls_dtls_cookie_send741336
+Ref: gnutls_dtls_cookie_verify742420
+Ref: gnutls_dtls_get_data_mtu743288
+Ref: gnutls_dtls_get_mtu743691
+Ref: gnutls_dtls_get_timeout744138
+Ref: gnutls_dtls_prestate_set744686
+Ref: gnutls_dtls_set_data_mtu745092
+Ref: gnutls_dtls_set_mtu745956
+Ref: gnutls_dtls_set_timeouts746566
+Ref: gnutls_record_get_discarded747580
+Node: X509 certificate API747860
+Ref: gnutls_pkcs7_deinit748179
+Ref: gnutls_pkcs7_delete_crl748392
+Ref: gnutls_pkcs7_delete_crt748851
+Ref: gnutls_pkcs7_export749324
+Ref: gnutls_pkcs7_export2750235
+Ref: gnutls_pkcs7_get_crl_count750917
+Ref: gnutls_pkcs7_get_crl_raw751292
+Ref: gnutls_pkcs7_get_crt_count752103
+Ref: gnutls_pkcs7_get_crt_raw752489
+Ref: gnutls_pkcs7_import753381
+Ref: gnutls_pkcs7_init754009
+Ref: gnutls_pkcs7_set_crl754429
+Ref: gnutls_pkcs7_set_crl_raw754861
+Ref: gnutls_pkcs7_set_crt755282
+Ref: gnutls_pkcs7_set_crt_raw755798
+Ref: gnutls_x509_crl_check_issuer756264
+Ref: gnutls_x509_crl_deinit756707
+Ref: gnutls_x509_crl_export756918
+Ref: gnutls_x509_crl_export2757845
+Ref: gnutls_x509_crl_get_authority_key_gn_serial758608
+Ref: gnutls_x509_crl_get_authority_key_id759929
+Ref: gnutls_x509_crl_get_crt_count760999
+Ref: gnutls_x509_crl_get_crt_serial761363
+Ref: gnutls_x509_crl_get_dn_oid762141
+Ref: gnutls_x509_crl_get_extension_data762957
+Ref: gnutls_x509_crl_get_extension_info764075
+Ref: gnutls_x509_crl_get_extension_oid765359
+Ref: gnutls_x509_crl_get_issuer_dn766228
+Ref: gnutls_x509_crl_get_issuer_dn2767105
+Ref: gnutls_x509_crl_get_issuer_dn_by_oid767788
+Ref: gnutls_x509_crl_get_next_update769298
+Ref: gnutls_x509_crl_get_number769738
+Ref: gnutls_x509_crl_get_raw_issuer_dn770470
+Ref: gnutls_x509_crl_get_signature770929
+Ref: gnutls_x509_crl_get_signature_algorithm771524
+Ref: gnutls_x509_crl_get_this_update771968
+Ref: gnutls_x509_crl_get_version772299
+Ref: gnutls_x509_crl_import772613
+Ref: gnutls_x509_crl_init773243
+Ref: gnutls_x509_crl_list_import773814
+Ref: gnutls_x509_crl_list_import2774803
+Ref: gnutls_x509_crl_print775709
+Ref: gnutls_x509_crl_set_authority_key_id776364
+Ref: gnutls_x509_crl_set_crt777017
+Ref: gnutls_x509_crl_set_crt_serial777597
+Ref: gnutls_x509_crl_set_next_update778235
+Ref: gnutls_x509_crl_set_number778648
+Ref: gnutls_x509_crl_set_this_update779225
+Ref: gnutls_x509_crl_set_version779635
+Ref: gnutls_x509_crl_sign2780184
+Ref: gnutls_x509_crl_verify781073
+Ref: gnutls_x509_crq_deinit782235
+Ref: gnutls_x509_crq_export782477
+Ref: gnutls_x509_crq_export2783481
+Ref: gnutls_x509_crq_get_attribute_by_oid784261
+Ref: gnutls_x509_crq_get_attribute_data785289
+Ref: gnutls_x509_crq_get_attribute_info786405
+Ref: gnutls_x509_crq_get_basic_constraints787607
+Ref: gnutls_x509_crq_get_challenge_password788867
+Ref: gnutls_x509_crq_get_dn789487
+Ref: gnutls_x509_crq_get_dn2790314
+Ref: gnutls_x509_crq_get_dn_by_oid791016
+Ref: gnutls_x509_crq_get_dn_oid792476
+Ref: gnutls_x509_crq_get_extension_by_oid793264
+Ref: gnutls_x509_crq_get_extension_data794418
+Ref: gnutls_x509_crq_get_extension_info795549
+Ref: gnutls_x509_crq_get_key_id796829
+Ref: gnutls_x509_crq_get_key_purpose_oid797861
+Ref: gnutls_x509_crq_get_key_rsa_raw798890
+Ref: gnutls_x509_crq_get_key_usage799516
+Ref: gnutls_x509_crq_get_pk_algorithm800609
+Ref: gnutls_x509_crq_get_private_key_usage_period801374
+Ref: gnutls_x509_crq_get_subject_alt_name802056
+Ref: gnutls_x509_crq_get_subject_alt_othername_oid803627
+Ref: gnutls_x509_crq_get_version805109
+Ref: gnutls_x509_crq_import805461
+Ref: gnutls_x509_crq_init806156
+Ref: gnutls_x509_crq_print806498
+Ref: gnutls_x509_crq_set_attribute_by_oid807160
+Ref: gnutls_x509_crq_set_basic_constraints808032
+Ref: gnutls_x509_crq_set_challenge_password808777
+Ref: gnutls_x509_crq_set_dn809235
+Ref: gnutls_x509_crq_set_dn_by_oid809789
+Ref: gnutls_x509_crq_set_key810902
+Ref: gnutls_x509_crq_set_key_purpose_oid811372
+Ref: gnutls_x509_crq_set_key_rsa_raw812162
+Ref: gnutls_x509_crq_set_key_usage812744
+Ref: gnutls_x509_crq_set_private_key_usage_period813249
+Ref: gnutls_x509_crq_set_subject_alt_name813779
+Ref: gnutls_x509_crq_set_version814581
+Ref: gnutls_x509_crq_sign2815075
+Ref: gnutls_x509_crq_verify816060
+Ref: gnutls_x509_crt_check_hostname816664
+Ref: gnutls_x509_crt_check_issuer817315
+Ref: gnutls_x509_crt_check_revocation817909
+Ref: gnutls_x509_crt_cpy_crl_dist_points818561
+Ref: gnutls_x509_crt_deinit819151
+Ref: gnutls_x509_crt_export819374
+Ref: gnutls_x509_crt_export2820284
+Ref: gnutls_x509_crt_get_activation_time820981
+Ref: gnutls_x509_crt_get_authority_info_access821365
+Ref: gnutls_x509_crt_get_authority_key_gn_serial824820
+Ref: gnutls_x509_crt_get_authority_key_id826269
+Ref: gnutls_x509_crt_get_basic_constraints827406
+Ref: gnutls_x509_crt_get_ca_status828626
+Ref: gnutls_x509_crt_get_crl_dist_points829519
+Ref: gnutls_x509_crt_get_dn830862
+Ref: gnutls_x509_crt_get_dn2831717
+Ref: gnutls_x509_crt_get_dn_by_oid832414
+Ref: gnutls_x509_crt_get_dn_oid834189
+Ref: gnutls_x509_crt_get_expiration_time835226
+Ref: gnutls_x509_crt_get_extension_by_oid835598
+Ref: gnutls_x509_crt_get_extension_data836720
+Ref: gnutls_x509_crt_get_extension_info837821
+Ref: gnutls_x509_crt_get_extension_oid839187
+Ref: gnutls_x509_crt_get_fingerprint840154
+Ref: gnutls_x509_crt_get_issuer840952
+Ref: gnutls_x509_crt_get_issuer_alt_name841600
+Ref: gnutls_x509_crt_get_issuer_alt_name2843412
+Ref: gnutls_x509_crt_get_issuer_alt_othername_oid845005
+Ref: gnutls_x509_crt_get_issuer_dn846666
+Ref: gnutls_x509_crt_get_issuer_dn2847546
+Ref: gnutls_x509_crt_get_issuer_dn_by_oid848274
+Ref: gnutls_x509_crt_get_issuer_dn_oid850067
+Ref: gnutls_x509_crt_get_issuer_unique_id851112
+Ref: gnutls_x509_crt_get_key_id851930
+Ref: gnutls_x509_crt_get_key_purpose_oid852917
+Ref: gnutls_x509_crt_get_key_usage854082
+Ref: gnutls_x509_crt_get_pk_algorithm855155
+Ref: gnutls_x509_crt_get_pk_dsa_raw855877
+Ref: gnutls_x509_crt_get_pk_rsa_raw856547
+Ref: gnutls_x509_crt_get_policy857127
+Ref: gnutls_x509_crt_get_private_key_usage_period858041
+Ref: gnutls_x509_crt_get_proxy858797
+Ref: gnutls_x509_crt_get_raw_dn859825
+Ref: gnutls_x509_crt_get_raw_issuer_dn860423
+Ref: gnutls_x509_crt_get_serial861008
+Ref: gnutls_x509_crt_get_signature861749
+Ref: gnutls_x509_crt_get_signature_algorithm862357
+Ref: gnutls_x509_crt_get_subject862832
+Ref: gnutls_x509_crt_get_subject_alt_name863485
+Ref: gnutls_x509_crt_get_subject_alt_name2865256
+Ref: gnutls_x509_crt_get_subject_alt_othername_oid866832
+Ref: gnutls_x509_crt_get_subject_key_id868484
+Ref: gnutls_x509_crt_get_subject_unique_id869323
+Ref: gnutls_x509_crt_get_version870123
+Ref: gnutls_x509_crt_import870456
+Ref: gnutls_x509_crt_init871151
+Ref: gnutls_x509_crt_list_import871491
+Ref: gnutls_x509_crt_list_import2872853
+Ref: gnutls_x509_crt_list_verify873804
+Ref: gnutls_x509_crt_print875482
+Ref: gnutls_x509_crt_set_activation_time876382
+Ref: gnutls_x509_crt_set_authority_info_access876850
+Ref: gnutls_x509_crt_set_authority_key_id877755
+Ref: gnutls_x509_crt_set_basic_constraints878338
+Ref: gnutls_x509_crt_set_ca_status879037
+Ref: gnutls_x509_crt_set_crl_dist_points879636
+Ref: gnutls_x509_crt_set_crl_dist_points2880289
+Ref: gnutls_x509_crt_set_crq880989
+Ref: gnutls_x509_crt_set_crq_extensions881547
+Ref: gnutls_x509_crt_set_dn882010
+Ref: gnutls_x509_crt_set_dn_by_oid882564
+Ref: gnutls_x509_crt_set_expiration_time883682
+Ref: gnutls_x509_crt_set_extension_by_oid884122
+Ref: gnutls_x509_crt_set_issuer_dn884907
+Ref: gnutls_x509_crt_set_issuer_dn_by_oid885482
+Ref: gnutls_x509_crt_set_key886737
+Ref: gnutls_x509_crt_set_key_purpose_oid887249
+Ref: gnutls_x509_crt_set_key_usage888028
+Ref: gnutls_x509_crt_set_pin_function888480
+Ref: gnutls_x509_crt_set_policy889160
+Ref: gnutls_x509_crt_set_private_key_usage_period889981
+Ref: gnutls_x509_crt_set_proxy890489
+Ref: gnutls_x509_crt_set_proxy_dn891306
+Ref: gnutls_x509_crt_set_serial892340
+Ref: gnutls_x509_crt_set_subject_alt_name893199
+Ref: gnutls_x509_crt_set_subject_alternative_name894021
+Ref: gnutls_x509_crt_set_subject_key_id894845
+Ref: gnutls_x509_crt_set_version895346
+Ref: gnutls_x509_crt_sign896169
+Ref: gnutls_x509_crt_sign2896726
+Ref: gnutls_x509_crt_verify897596
+Ref: gnutls_x509_dn_deinit898528
+Ref: gnutls_x509_dn_export898790
+Ref: gnutls_x509_dn_export2899684
+Ref: gnutls_x509_dn_get_rdn_ava900345
+Ref: gnutls_x509_dn_import901378
+Ref: gnutls_x509_dn_init902005
+Ref: gnutls_x509_dn_oid_known902433
+Ref: gnutls_x509_dn_oid_name903100
+Ref: gnutls_x509_policy_release903637
+Ref: gnutls_x509_privkey_cpy904000
+Ref: gnutls_x509_privkey_deinit904470
+Ref: gnutls_x509_privkey_export904717
+Ref: gnutls_x509_privkey_export2905782
+Ref: gnutls_x509_privkey_export2_pkcs8906615
+Ref: gnutls_x509_privkey_export_dsa_raw907890
+Ref: gnutls_x509_privkey_export_ecc_raw908667
+Ref: gnutls_x509_privkey_export_pkcs8909451
+Ref: gnutls_x509_privkey_export_rsa_raw910955
+Ref: gnutls_x509_privkey_export_rsa_raw2911853
+Ref: gnutls_x509_privkey_fix912876
+Ref: gnutls_x509_privkey_generate913270
+Ref: gnutls_x509_privkey_get_key_id914020
+Ref: gnutls_x509_privkey_get_pk_algorithm915012
+Ref: gnutls_x509_privkey_get_pk_algorithm2915447
+Ref: gnutls_x509_privkey_import915941
+Ref: gnutls_x509_privkey_import2916753
+Ref: gnutls_x509_privkey_import_dsa_raw917754
+Ref: gnutls_x509_privkey_import_ecc_raw918483
+Ref: gnutls_x509_privkey_import_openssl919199
+Ref: gnutls_x509_privkey_import_pkcs8920080
+Ref: gnutls_x509_privkey_import_rsa_raw921536
+Ref: gnutls_x509_privkey_import_rsa_raw2922398
+Ref: gnutls_x509_privkey_init923369
+Ref: gnutls_x509_privkey_sec_param923713
+Ref: gnutls_x509_privkey_verify_params924151
+Ref: gnutls_x509_rdn_get924510
+Ref: gnutls_x509_rdn_get_by_oid925217
+Ref: gnutls_x509_rdn_get_oid926196
+Ref: gnutls_x509_trust_list_add_cas926952
+Ref: gnutls_x509_trust_list_add_crls927570
+Ref: gnutls_x509_trust_list_add_named_crt928554
+Ref: gnutls_x509_trust_list_add_system_trust929669
+Ref: gnutls_x509_trust_list_add_trust_file930366
+Ref: gnutls_x509_trust_list_add_trust_mem931237
+Ref: gnutls_x509_trust_list_deinit932031
+Ref: gnutls_x509_trust_list_get_issuer932432
+Ref: gnutls_x509_trust_list_init933056
+Ref: gnutls_x509_trust_list_remove_cas933549
+Ref: gnutls_x509_trust_list_remove_trust_file934071
+Ref: gnutls_x509_trust_list_remove_trust_mem934682
+Ref: gnutls_x509_trust_list_verify_crt935224
+Ref: gnutls_x509_trust_list_verify_named_crt936398
+Node: OCSP API937625
+Ref: gnutls_ocsp_req_add_cert937918
+Ref: gnutls_ocsp_req_add_cert_id938889
+Ref: gnutls_ocsp_req_deinit940245
+Ref: gnutls_ocsp_req_export940467
+Ref: gnutls_ocsp_req_get_cert_id940886
+Ref: gnutls_ocsp_req_get_extension942504
+Ref: gnutls_ocsp_req_get_nonce943841
+Ref: gnutls_ocsp_req_get_version944497
+Ref: gnutls_ocsp_req_import944874
+Ref: gnutls_ocsp_req_init945377
+Ref: gnutls_ocsp_req_print945698
+Ref: gnutls_ocsp_req_randomize_nonce946436
+Ref: gnutls_ocsp_req_set_extension946876
+Ref: gnutls_ocsp_req_set_nonce947567
+Ref: gnutls_ocsp_resp_check_crt948161
+Ref: gnutls_ocsp_resp_deinit948745
+Ref: gnutls_ocsp_resp_export948974
+Ref: gnutls_ocsp_resp_get_certs949398
+Ref: gnutls_ocsp_resp_get_extension950530
+Ref: gnutls_ocsp_resp_get_nonce951875
+Ref: gnutls_ocsp_resp_get_produced952543
+Ref: gnutls_ocsp_resp_get_responder952890
+Ref: gnutls_ocsp_resp_get_response953641
+Ref: gnutls_ocsp_resp_get_signature954772
+Ref: gnutls_ocsp_resp_get_signature_algorithm955262
+Ref: gnutls_ocsp_resp_get_single955741
+Ref: gnutls_ocsp_resp_get_status957686
+Ref: gnutls_ocsp_resp_get_version958106
+Ref: gnutls_ocsp_resp_import958504
+Ref: gnutls_ocsp_resp_init959074
+Ref: gnutls_ocsp_resp_print959402
+Ref: gnutls_ocsp_resp_verify960130
+Ref: gnutls_ocsp_resp_verify_direct961733
+Node: OpenPGP API962852
+Ref: gnutls_certificate_set_openpgp_key963173
+Ref: gnutls_certificate_set_openpgp_key_file964105
+Ref: gnutls_certificate_set_openpgp_key_file2964849
+Ref: gnutls_certificate_set_openpgp_key_mem965858
+Ref: gnutls_certificate_set_openpgp_key_mem2966615
+Ref: gnutls_certificate_set_openpgp_keyring_file967641
+Ref: gnutls_certificate_set_openpgp_keyring_mem968360
+Ref: gnutls_openpgp_crt_check_hostname969119
+Ref: gnutls_openpgp_crt_deinit969690
+Ref: gnutls_openpgp_crt_export969913
+Ref: gnutls_openpgp_crt_export2970664
+Ref: gnutls_openpgp_crt_get_auth_subkey971230
+Ref: gnutls_openpgp_crt_get_creation_time971945
+Ref: gnutls_openpgp_crt_get_expiration_time972276
+Ref: gnutls_openpgp_crt_get_fingerprint972657
+Ref: gnutls_openpgp_crt_get_key_id973216
+Ref: gnutls_openpgp_crt_get_key_usage973604
+Ref: gnutls_openpgp_crt_get_name974166
+Ref: gnutls_openpgp_crt_get_pk_algorithm974900
+Ref: gnutls_openpgp_crt_get_pk_dsa_raw975618
+Ref: gnutls_openpgp_crt_get_pk_rsa_raw976321
+Ref: gnutls_openpgp_crt_get_preferred_key_id976964
+Ref: gnutls_openpgp_crt_get_revoked_status977432
+Ref: gnutls_openpgp_crt_get_subkey_count977806
+Ref: gnutls_openpgp_crt_get_subkey_creation_time978217
+Ref: gnutls_openpgp_crt_get_subkey_expiration_time978643
+Ref: gnutls_openpgp_crt_get_subkey_fingerprint979115
+Ref: gnutls_openpgp_crt_get_subkey_id979776
+Ref: gnutls_openpgp_crt_get_subkey_idx980210
+Ref: gnutls_openpgp_crt_get_subkey_pk_algorithm980624
+Ref: gnutls_openpgp_crt_get_subkey_pk_dsa_raw981446
+Ref: gnutls_openpgp_crt_get_subkey_pk_rsa_raw982219
+Ref: gnutls_openpgp_crt_get_subkey_revoked_status982928
+Ref: gnutls_openpgp_crt_get_subkey_usage983406
+Ref: gnutls_openpgp_crt_get_version984089
+Ref: gnutls_openpgp_crt_import984427
+Ref: gnutls_openpgp_crt_init984996
+Ref: gnutls_openpgp_crt_print985290
+Ref: gnutls_openpgp_crt_set_preferred_key_id985964
+Ref: gnutls_openpgp_crt_verify_ring986596
+Ref: gnutls_openpgp_crt_verify_self987495
+Ref: gnutls_openpgp_keyring_check_id988091
+Ref: gnutls_openpgp_keyring_deinit988600
+Ref: gnutls_openpgp_keyring_get_crt988863
+Ref: gnutls_openpgp_keyring_get_crt_count989532
+Ref: gnutls_openpgp_keyring_import989907
+Ref: gnutls_openpgp_keyring_init990532
+Ref: gnutls_openpgp_privkey_deinit990858
+Ref: gnutls_openpgp_privkey_export991107
+Ref: gnutls_openpgp_privkey_export2992076
+Ref: gnutls_openpgp_privkey_export_dsa_raw992851
+Ref: gnutls_openpgp_privkey_export_rsa_raw993628
+Ref: gnutls_openpgp_privkey_export_subkey_dsa_raw994536
+Ref: gnutls_openpgp_privkey_export_subkey_rsa_raw995388
+Ref: gnutls_openpgp_privkey_get_fingerprint996340
+Ref: gnutls_openpgp_privkey_get_key_id996943
+Ref: gnutls_openpgp_privkey_get_pk_algorithm997346
+Ref: gnutls_openpgp_privkey_get_preferred_key_id998117
+Ref: gnutls_openpgp_privkey_get_revoked_status998619
+Ref: gnutls_openpgp_privkey_get_subkey_count999055
+Ref: gnutls_openpgp_privkey_get_subkey_creation_time999482
+Ref: gnutls_openpgp_privkey_get_subkey_fingerprint999913
+Ref: gnutls_openpgp_privkey_get_subkey_id1000588
+Ref: gnutls_openpgp_privkey_get_subkey_idx1001065
+Ref: gnutls_openpgp_privkey_get_subkey_pk_algorithm1001507
+Ref: gnutls_openpgp_privkey_get_subkey_revoked_status1002366
+Ref: gnutls_openpgp_privkey_import1002838
+Ref: gnutls_openpgp_privkey_init1003551
+Ref: gnutls_openpgp_privkey_sec_param1003879
+Ref: gnutls_openpgp_privkey_set_preferred_key_id1004343
+Ref: gnutls_openpgp_set_recv_key_function1005005
+Node: PKCS 12 API1005456
+Ref: gnutls_pkcs12_bag_decrypt1005749
+Ref: gnutls_pkcs12_bag_deinit1006182
+Ref: gnutls_pkcs12_bag_encrypt1006410
+Ref: gnutls_pkcs12_bag_get_count1006917
+Ref: gnutls_pkcs12_bag_get_data1007229
+Ref: gnutls_pkcs12_bag_get_friendly_name1007829
+Ref: gnutls_pkcs12_bag_get_key_id1008461
+Ref: gnutls_pkcs12_bag_get_type1009075
+Ref: gnutls_pkcs12_bag_init1009422
+Ref: gnutls_pkcs12_bag_set_crl1009872
+Ref: gnutls_pkcs12_bag_set_crt1010304
+Ref: gnutls_pkcs12_bag_set_data1010749
+Ref: gnutls_pkcs12_bag_set_friendly_name1011220
+Ref: gnutls_pkcs12_bag_set_key_id1011898
+Ref: gnutls_pkcs12_deinit1012548
+Ref: gnutls_pkcs12_export1012760
+Ref: gnutls_pkcs12_export21013679
+Ref: gnutls_pkcs12_generate_mac1014367
+Ref: gnutls_pkcs12_get_bag1014776
+Ref: gnutls_pkcs12_import1015393
+Ref: gnutls_pkcs12_init1016119
+Ref: gnutls_pkcs12_set_bag1016547
+Ref: gnutls_pkcs12_simple_parse1016959
+Ref: gnutls_pkcs12_verify_mac1019550
+Node: PKCS 11 API1019912
+Ref: gnutls_pkcs11_add_provider1020241
+Ref: gnutls_pkcs11_copy_secret_key1020771
+Ref: gnutls_pkcs11_copy_x509_crt1021498
+Ref: gnutls_pkcs11_copy_x509_privkey1022155
+Ref: gnutls_pkcs11_deinit1022948
+Ref: gnutls_pkcs11_delete_url1023140
+Ref: gnutls_pkcs11_get_pin_function1023657
+Ref: gnutls_pkcs11_init1024020
+Ref: gnutls_pkcs11_obj_deinit1024985
+Ref: gnutls_pkcs11_obj_export1025234
+Ref: gnutls_pkcs11_obj_export21026186
+Ref: gnutls_pkcs11_obj_export_url1026896
+Ref: gnutls_pkcs11_obj_get_info1027419
+Ref: gnutls_pkcs11_obj_get_type1028291
+Ref: gnutls_pkcs11_obj_import_url1028652
+Ref: gnutls_pkcs11_obj_init1029374
+Ref: gnutls_pkcs11_obj_list_import_url1029750
+Ref: gnutls_pkcs11_obj_list_import_url21030634
+Ref: gnutls_pkcs11_obj_set_pin_function1031540
+Ref: gnutls_pkcs11_privkey_deinit1032056
+Ref: gnutls_pkcs11_privkey_export_url1032317
+Ref: gnutls_pkcs11_privkey_generate1032828
+Ref: gnutls_pkcs11_privkey_generate21033498
+Ref: gnutls_pkcs11_privkey_get_info1034512
+Ref: gnutls_pkcs11_privkey_get_pk_algorithm1035406
+Ref: gnutls_pkcs11_privkey_import_url1035944
+Ref: gnutls_pkcs11_privkey_init1036666
+Ref: gnutls_pkcs11_privkey_set_pin_function1037042
+Ref: gnutls_pkcs11_privkey_status1037561
+Ref: gnutls_pkcs11_reinit1037932
+Ref: gnutls_pkcs11_set_pin_function1038370
+Ref: gnutls_pkcs11_set_token_function1038861
+Ref: gnutls_pkcs11_token_get_flags1039267
+Ref: gnutls_pkcs11_token_get_info1039780
+Ref: gnutls_pkcs11_token_get_mechanism1040458
+Ref: gnutls_pkcs11_token_get_url1041072
+Ref: gnutls_pkcs11_token_init1041741
+Ref: gnutls_pkcs11_token_set_pin1042374
+Ref: gnutls_pkcs11_type_get_name1042989
+Ref: gnutls_x509_crt_import_pkcs111043479
+Ref: gnutls_x509_crt_import_pkcs11_url1044000
+Ref: gnutls_x509_crt_list_import_pkcs111044660
+Node: TPM API1045275
+Ref: gnutls_tpm_get_registered1045554
+Ref: gnutls_tpm_key_list_deinit1045948
+Ref: gnutls_tpm_key_list_get_url1046216
+Ref: gnutls_tpm_privkey_delete1046869
+Ref: gnutls_tpm_privkey_generate1047306
+Node: Abstract key API1048651
+Ref: gnutls_certificate_set_key1048962
+Ref: gnutls_certificate_set_retrieve_function21050329
+Ref: gnutls_pcert_deinit1052192
+Ref: gnutls_pcert_import_openpgp1052437
+Ref: gnutls_pcert_import_openpgp_raw1053048
+Ref: gnutls_pcert_import_x5091053827
+Ref: gnutls_pcert_import_x509_raw1054426
+Ref: gnutls_pcert_list_import_x509_raw1055130
+Ref: gnutls_privkey_decrypt_data1056171
+Ref: gnutls_privkey_deinit1056806
+Ref: gnutls_privkey_get_pk_algorithm1057065
+Ref: gnutls_privkey_get_type1057686
+Ref: gnutls_privkey_import_ext1058173
+Ref: gnutls_privkey_import_ext21059129
+Ref: gnutls_privkey_import_openpgp1060309
+Ref: gnutls_privkey_import_openpgp_raw1061156
+Ref: gnutls_privkey_import_pkcs111061873
+Ref: gnutls_privkey_import_pkcs11_url1062639
+Ref: gnutls_privkey_import_tpm_raw1063094
+Ref: gnutls_privkey_import_tpm_url1063969
+Ref: gnutls_privkey_import_url1065078
+Ref: gnutls_privkey_import_x5091065626
+Ref: gnutls_privkey_import_x509_raw1066382
+Ref: gnutls_privkey_init1067167
+Ref: gnutls_privkey_set_pin_function1067527
+Ref: gnutls_privkey_sign_data1068098
+Ref: gnutls_privkey_sign_hash1069115
+Ref: gnutls_privkey_sign_raw_data1070298
+Ref: gnutls_privkey_status1071317
+Ref: gnutls_pubkey_deinit1071845
+Ref: gnutls_pubkey_encrypt_data1072091
+Ref: gnutls_pubkey_export1072652
+Ref: gnutls_pubkey_export21073664
+Ref: gnutls_pubkey_get_key_id1074427
+Ref: gnutls_pubkey_get_key_usage1075416
+Ref: gnutls_pubkey_get_openpgp_key_id1075920
+Ref: gnutls_pubkey_get_pk_algorithm1077123
+Ref: gnutls_pubkey_get_pk_dsa_raw1077750
+Ref: gnutls_pubkey_get_pk_ecc_raw1078433
+Ref: gnutls_pubkey_get_pk_ecc_x9621079078
+Ref: gnutls_pubkey_get_pk_rsa_raw1079732
+Ref: gnutls_pubkey_get_preferred_hash_algorithm1080362
+Ref: gnutls_pubkey_get_verify_algorithm1081325
+Ref: gnutls_pubkey_import1081948
+Ref: gnutls_pubkey_import_dsa_raw1082667
+Ref: gnutls_pubkey_import_ecc_raw1083330
+Ref: gnutls_pubkey_import_ecc_x9621083940
+Ref: gnutls_pubkey_import_openpgp1084576
+Ref: gnutls_pubkey_import_openpgp_raw1085220
+Ref: gnutls_pubkey_import_pkcs111085916
+Ref: gnutls_pubkey_import_pkcs11_url1086470
+Ref: gnutls_pubkey_import_privkey1086983
+Ref: gnutls_pubkey_import_rsa_raw1087580
+Ref: gnutls_pubkey_import_tpm_raw1088137
+Ref: gnutls_pubkey_import_tpm_url1088916
+Ref: gnutls_pubkey_import_url1089814
+Ref: gnutls_pubkey_import_x5091090308
+Ref: gnutls_pubkey_import_x509_crq1090815
+Ref: gnutls_pubkey_import_x509_raw1091325
+Ref: gnutls_pubkey_init1091909
+Ref: gnutls_pubkey_print1092242
+Ref: gnutls_pubkey_set_key_usage1092983
+Ref: gnutls_pubkey_set_pin_function1093552
+Ref: gnutls_pubkey_verify_data1094122
+Ref: gnutls_pubkey_verify_data21094893
+Ref: gnutls_pubkey_verify_hash1095616
+Ref: gnutls_pubkey_verify_hash21096397
+Ref: gnutls_x509_crl_privkey_sign1097136
+Ref: gnutls_x509_crq_privkey_sign1098058
+Ref: gnutls_x509_crq_set_pubkey1099075
+Ref: gnutls_x509_crt_privkey_sign1099548
+Ref: gnutls_x509_crt_set_pubkey1100428
+Node: DANE API1100842
+Ref: dane_cert_type_name1101212
+Ref: dane_cert_usage_name1101502
+Ref: dane_match_type_name1101792
+Ref: dane_query_data1102075
+Ref: dane_query_deinit1102755
+Ref: dane_query_entries1102960
+Ref: dane_query_status1103202
+Ref: dane_query_tlsa1103497
+Ref: dane_state_deinit1104076
+Ref: dane_state_init1104268
+Ref: dane_state_set_dlv_file1104653
+Ref: dane_strerror1104955
+Ref: dane_verification_status_print1105454
+Ref: dane_verify_crt1106049
+Ref: dane_verify_session_crt1107920
+Node: Cryptographic API1108875
+Ref: gnutls_cipher_add_auth1109203
+Ref: gnutls_cipher_decrypt1109785
+Ref: gnutls_cipher_decrypt21110270
+Ref: gnutls_cipher_deinit1110883
+Ref: gnutls_cipher_encrypt1111169
+Ref: gnutls_cipher_encrypt21111630
+Ref: gnutls_cipher_get_block_size1112259
+Ref: gnutls_cipher_init1112560
+Ref: gnutls_cipher_set_iv1113279
+Ref: gnutls_cipher_tag1113631
+Ref: gnutls_hash1114094
+Ref: gnutls_hash_deinit1114532
+Ref: gnutls_hash_fast1114867
+Ref: gnutls_hash_get_len1115378
+Ref: gnutls_hash_init1115706
+Ref: gnutls_hash_output1116249
+Ref: gnutls_hmac1116537
+Ref: gnutls_hmac_deinit1116975
+Ref: gnutls_hmac_fast1117309
+Ref: gnutls_hmac_get_len1117922
+Ref: gnutls_hmac_init1118237
+Ref: gnutls_hmac_output1118920
+Ref: gnutls_rnd1119204
+Ref: gnutls_rnd_refresh1119595
+Node: Compatibility API1119875
+Ref: gnutls_certificate_set_rsa_export_params1120252
+Ref: gnutls_certificate_type_set_priority1120768
+Ref: gnutls_cipher_set_priority1121499
+Ref: gnutls_compression_set_priority1122224
+Ref: gnutls_kx_set_priority1123099
+Ref: gnutls_mac_set_priority1123805
+Ref: gnutls_openpgp_privkey_sign_hash1124523
+Ref: gnutls_protocol_set_priority1125228
+Ref: gnutls_rsa_export_get_modulus_bits1125773
+Ref: gnutls_rsa_export_get_pubkey1126138
+Ref: gnutls_rsa_params_cpy1126730
+Ref: gnutls_rsa_params_deinit1127160
+Ref: gnutls_rsa_params_export_pkcs11127437
+Ref: gnutls_rsa_params_export_raw1128381
+Ref: gnutls_rsa_params_generate21129299
+Ref: gnutls_rsa_params_import_pkcs11130094
+Ref: gnutls_rsa_params_import_raw1130793
+Ref: gnutls_rsa_params_init1131596
+Ref: gnutls_set_default_export_priority1131978
+Ref: gnutls_sign_callback_get1132824
+Ref: gnutls_sign_callback_set1133320
+Ref: gnutls_x509_crl_sign1134278
+Ref: gnutls_x509_crq_sign1134895
+Ref: gnutls_x509_crt_get_preferred_hash_algorithm1135461
+Ref: gnutls_x509_crt_get_verify_algorithm1136350
+Ref: gnutls_x509_crt_verify_data1137062
+Ref: gnutls_x509_crt_verify_hash1137800
+Ref: gnutls_x509_privkey_sign_data1138553
+Ref: gnutls_x509_privkey_sign_hash1139823
+Node: Copying Information1140474
+Node: Bibliography1165655
+Ref: CBCATT1165794
+Ref: GPGH1165971
+Ref: GUTPKI1166093
+Ref: KEYPIN1166267
+Ref: NISTSP800571166441
+Ref: RFC22461166688
+Ref: RFC46801166843
+Ref: RFC45141167000
+Ref: RFC43461167204
+Ref: RFC43471167353
+Ref: RFC52461167519
+Ref: RFC24401167669
+Ref: RFC48801167850
+Ref: RFC42111168043
+Ref: RFC28171168236
+Ref: RFC28181168388
+Ref: RFC29451168501
+Ref: RFC29861168650
+Ref: PKIX1168838
+Ref: RFC37491169100
+Ref: RFC38201169265
+Ref: RFC65201169507
+Ref: RFC57461169745
+Ref: RFC52801169953
+Ref: TLSTKT1170219
+Ref: PKCS121170450
+Ref: PKCS111170590
+Ref: RESCORLA1170735
+Ref: SELKEY1170831
+Ref: SSL31170989
+Ref: STEVENS1171179
+Ref: TLSEXT1171287
+Ref: TLSPGP1171503
+Ref: TLSSRP1171666
+Ref: TLSPSK1171861
+Ref: TOMSRP1172029
+Ref: WEGER1172141
+Ref: ECRYPT1172332
+Ref: RFC50561172536
+Ref: RFC59291172688
+Ref: PKCS11URI1172830
+Ref: TPMURI1173013
+Ref: ANDERSON1173206
+Ref: RFC48211173352
+Ref: RFC25601173504
+Ref: RIVESTCRL1173697
+Node: Function and Data Index1174057
+Node: Concept Index1264619
 
 End Tag Table
diff --git a/doc/gnutls.info-1 b/doc/gnutls.info-1
index 828d727..3bf17bf 100644
--- a/doc/gnutls.info-1
+++ b/doc/gnutls.info-1
@@ -1,4 +1,4 @@
-This is gnutls.info, produced by makeinfo version 5.1 from gnutls.texi.
+This is gnutls.info, produced by makeinfo version 4.13 from gnutls.texi.
 
 This manual is last updated 2 April 2013 for version 3.1.13 of GnuTLS.
 
@@ -11,6 +11,7 @@ Copyright (C) 2001-2013 Free Software Foundation, Inc.\\ Copyright (C)
      Foundation; with no Invariant Sections, no Front-Cover Texts, and
      no Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
+
 INFO-DIR-SECTION Software libraries
 START-INFO-DIR-ENTRY
 * GnuTLS: (gnutls).		GNU Transport Layer Security Library.
@@ -72,13 +73,13 @@ File: gnutls.info,  Node: Preface,  Next: Introduction to GnuTLS,  Prev: Top,  U
 1 Preface
 *********
 
-This document demonstrates and explains the GnuTLS library API. A brief
-introduction to the protocols and the technology involved is also
+This document demonstrates and explains the GnuTLS library API.  A
+brief introduction to the protocols and the technology involved is also
 included so that an application programmer can better understand the
 GnuTLS purpose and actual offerings.  Even if GnuTLS is a typical
 library software, it operates over several security and cryptographic
-protocols which require the programmer to make careful and correct usage
-of them.  Otherwise it is likely to only obtain a false sense of
+protocols which require the programmer to make careful and correct
+usage of them. Otherwise it is likely to only obtain a false sense of
 security.  The term of security is very broad even if restricted to
 computer software, and cannot be confined to a single cryptographic
 library.  For that reason, do not consider any program secure just
@@ -87,13 +88,13 @@ or a communication line and GnuTLS only helps with some of them.
 
 Although this document tries to be self contained, basic network
 programming and public key infrastructure (PKI) knowledge is assumed in
-most of it.  A good introduction to networking can be found in
+most of it. A good introduction to networking can be found in
 [_STEVENS_], to public key infrastructure in [_GUTPKI_] and to security
 engineering in [_ANDERSON_].
 
 Updated versions of the GnuTLS software and this document will be
-available from <http://www.gnutls.org/> and
-<http://www.gnu.org/software/gnutls/>.
+available from `http://www.gnutls.org/' and
+`http://www.gnu.org/software/gnutls/'.
 
 
 File: gnutls.info,  Node: Introduction to GnuTLS,  Next: Introduction to TLS,  Prev: Preface,  Up: Top
@@ -102,15 +103,15 @@ File: gnutls.info,  Node: Introduction to GnuTLS,  Next: Introduction to TLS,  P
 ************************
 
 In brief GnuTLS can be described as a library which offers an API to
-access secure communication protocols.  These protocols provide privacy
+access secure communication protocols. These protocols provide privacy
 over insecure lines, and were designed to prevent eavesdropping,
 tampering, or message forgery.
 
 Technically GnuTLS is a portable ANSI C based library which implements
-the protocols ranging from SSL 3.0 to TLS 1.2 (see *note Introduction to
-TLS::, for a detailed description of the protocols), accompanied with
-the required framework for authentication and public key infrastructure.
-Important features of the GnuTLS library include:
+the protocols ranging from SSL 3.0 to TLS 1.2 (see *note Introduction
+to TLS::, for a detailed description of the protocols), accompanied
+with the required framework for authentication and public key
+infrastructure.  Important features of the GnuTLS library include:
 
    * Support for TLS 1.2, TLS 1.1, TLS 1.0 and SSL 3.0 protocols.
 
@@ -125,13 +126,15 @@ Important features of the GnuTLS library include:
 
    * Support for TPM, PKCS #11 tokens and smart-cards.
 
+
 The GnuTLS library consists of three independent parts, namely the "TLS
-protocol part", the "Certificate part", and the "Cryptographic back-end"
-part.  The "TLS protocol part" is the actual protocol implementation,
-and is entirely implemented within the GnuTLS library.  The "Certificate
-part" consists of the certificate parsing, and verification functions
-and it uses functionality from the libtasn1 library.  The "Cryptographic
-back-end" is provided by the nettle and gmplib libraries.
+protocol part", the "Certificate part", and the "Cryptographic
+back-end" part.  The "TLS protocol part" is the actual protocol
+implementation, and is entirely implemented within the GnuTLS library.
+The "Certificate part" consists of the certificate parsing, and
+verification functions and it uses functionality from the libtasn1
+library.  The "Cryptographic back-end" is provided by the nettle and
+gmplib libraries.
 
 * Menu:
 
@@ -145,7 +148,7 @@ File: gnutls.info,  Node: Downloading and installing,  Next: Document overview,
 ==============================
 
 GnuTLS is available for download at:
-<http://www.gnutls.org/download.html>
+`http://www.gnutls.org/download.html'
 
 GnuTLS uses a development cycle where even minor version numbers
 indicate a stable release and a odd minor version number indicate a
@@ -153,32 +156,32 @@ development release.  For example, GnuTLS 1.6.3 denote a stable release
 since 6 is even, and GnuTLS 1.7.11 denote a development release since 7
 is odd.
 
-GnuTLS depends on 'nettle' and 'gmplib', and you will need to install it
-before installing GnuTLS. The 'nettle' library is available from
-<http://www.lysator.liu.se/~nisse/nettle/>, while 'gmplib' is available
-from <http://www.gmplib.org/>.  Don't forget to verify the cryptographic
-signature after downloading source code packages.
+GnuTLS depends on `nettle' and `gmplib', and you will need to install it
+before installing GnuTLS.  The `nettle' library is available from
+`http://www.lysator.liu.se/~nisse/nettle/', while `gmplib' is available
+from `http://www.gmplib.org/'.  Don't forget to verify the
+cryptographic signature after downloading source code packages.
 
 The package is then extracted, configured and built like many other
-packages that use Autoconf.  For detailed information on configuring and
-building it, refer to the 'INSTALL' file that is part of the
-distribution archive.  Typically you invoke './configure' and then 'make
-check install'.  There are a number of compile-time parameters, as
-discussed below.
+packages that use Autoconf.  For detailed information on configuring
+and building it, refer to the `INSTALL' file that is part of the
+distribution archive.  Typically you invoke `./configure' and then
+`make check install'.  There are a number of compile-time parameters,
+as discussed below.
 
 Several parts of GnuTLS require ASN.1 functionality, which is provided
-by a library called libtasn1.  A copy of libtasn1 is included in GnuTLS.
-If you want to install it separately (e.g., to make it possibly to use
-libtasn1 in other programs), you can get it from
-<http://www.gnu.org/software/libtasn1/>.
-
-The compression library, 'libz', the PKCS #11 helper library 'p11-kit',
-as well as the TPM library 'trousers', are optional dependencies.  You
-may get libz from <http://www.zlib.net/>, p11-kit from
-<http://p11-glue.freedesktop.org/> and trousers from
-<http://trousers.sourceforge.net/>.
-
-A few 'configure' options may be relevant, summarized below.  They
+by a library called libtasn1.  A copy of libtasn1 is included in
+GnuTLS.  If you want to install it separately (e.g., to make it
+possibly to use libtasn1 in other programs), you can get it from
+`http://www.gnu.org/software/libtasn1/'.
+
+The compression library, `libz', the PKCS #11 helper library `p11-kit',
+as well as the TPM library `trousers', are optional dependencies. You
+may get libz from `http://www.zlib.net/', p11-kit from
+`http://p11-glue.freedesktop.org/' and trousers from
+`http://trousers.sourceforge.net/'.
+
+A few `configure' options may be relevant, summarized below.  They
 disable or enable particular features, to create a smaller library with
 only the required features.  Note however, that although a smaller
 library is generated, the included programs are not guarranteed to
@@ -198,7 +201,7 @@ compile if some of these options are given.
 --with-tpm
 --disable-dtls-srtp-support
 
-For the complete list, refer to the output from 'configure --help'.
+For the complete list, refer to the output from `configure --help'.
 
 
 File: gnutls.info,  Node: Document overview,  Prev: Downloading and installing,  Up: Introduction to GnuTLS
@@ -207,18 +210,18 @@ File: gnutls.info,  Node: Document overview,  Prev: Downloading and installing,
 ============
 
 In this document we present an overview of the supported security
-protocols in *note Introduction to TLS::, and continue by providing more
-information on the certificate authentication in *note Certificate
+protocols in *note Introduction to TLS::, and continue by providing
+more information on the certificate authentication in *note Certificate
 authentication::, and shared-key as well anonymous authentication in
-*note Shared-key and anonymous authentication::.  We elaborate on
-certificate authentication by demonstrating advanced usage of the API in
-*note More on certificate authentication::.  The core of the TLS library
-is presented in *note How to use GnuTLS in applications:: and example
-applications are listed in *note GnuTLS application examples::.  In
-*note Other included programs:: the usage of few included programs that
-may assist debugging is presented.  The last chapter is *note Internal
-architecture of GnuTLS:: that provides a short introduction to GnuTLS'
-internal architecture.
+*note Shared-key and anonymous authentication::. We elaborate on
+certificate authentication by demonstrating advanced usage of the API
+in *note More on certificate authentication::.  The core of the TLS
+library is presented in *note How to use GnuTLS in applications:: and
+example applications are listed in *note GnuTLS application examples::.
+In *note Other included programs:: the usage of few included programs
+that may assist debugging is presented. The last chapter is *note
+Internal architecture of GnuTLS:: that provides a short introduction to
+GnuTLS' internal architecture.
 
 
 File: gnutls.info,  Node: Introduction to TLS,  Next: Authentication methods,  Prev: Introduction to GnuTLS,  Up: Top
@@ -227,16 +230,16 @@ File: gnutls.info,  Node: Introduction to TLS,  Next: Authentication methods,  P
 ******************************
 
 TLS stands for "Transport Layer Security" and is the successor of SSL,
-the Secure Sockets Layer protocol [_SSL3_] designed by Netscape.  TLS is
-an Internet protocol, defined by IETF(1), described in [_RFC5246_].  The
-protocol provides confidentiality, and authentication layers over any
-reliable transport layer.  The description, above, refers to TLS 1.0 but
-applies to all other TLS versions as the differences between the
-protocols are not major.
+the Secure Sockets Layer protocol [_SSL3_] designed by Netscape.  TLS
+is an Internet protocol, defined by IETF(1), described in [_RFC5246_].
+The protocol provides confidentiality, and authentication layers over
+any reliable transport layer.  The description, above, refers to TLS
+1.0 but applies to all other TLS versions as the differences between
+the protocols are not major.
 
 The DTLS protocol, or "Datagram TLS" [_RFC4347_] is a protocol with
 identical goals as TLS, but can operate under unreliable transport
-layers such as UDP.  The discussions below apply to this protocol as
+layers such as UDP. The discussions below apply to this protocol as
 well, except when noted otherwise.
 
 * Menu:
@@ -250,9 +253,9 @@ well, except when noted otherwise.
 * How to use TLS in application protocols::
 * On SSL 2 and older protocols::
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) IETF, or Internet Engineering Task Force, is a large open
+(1) IETF, or Internet Engineering Task Force, is a large open
 international community of network designers, operators, vendors, and
 researchers concerned with the evolution of the Internet architecture
 and the smooth operation of the Internet.  It is open to any interested
@@ -265,19 +268,19 @@ File: gnutls.info,  Node: TLS layers,  Next: The transport layer,  Up: Introduct
 ==============
 
 TLS is a layered protocol, and consists of the record protocol, the
-handshake protocol and the alert protocol.  The record protocol is to
+handshake protocol and the alert protocol. The record protocol is to
 serve all other protocols and is above the transport layer.  The record
 protocol offers symmetric encryption, data authenticity, and optionally
 compression.  The alert protocol offers some signaling to the other
-protocols.  It can help informing the peer for the cause of failures and
+protocols. It can help informing the peer for the cause of failures and
 other error conditions.  *Note The Alert Protocol::, for more
 information.  The alert protocol is above the record protocol.
 
 The handshake protocol is responsible for the security parameters'
 negotiation, the initial key exchange and authentication.  *Note The
-Handshake Protocol::, for more information about the handshake protocol.
-The protocol layering in TLS is shown in *note Figure 3.1:
-fig:tls-layers.
+Handshake Protocol::, for more information about the handshake
+protocol.  The protocol layering in TLS is shown in *note
+fig:tls-layers::.
 
  [image src="gnutls-layers.png" ]
 
@@ -290,9 +293,9 @@ File: gnutls.info,  Node: The transport layer,  Next: The TLS record protocol,
 =======================
 
 TLS is not limited to any transport layer and can be used above any
-transport layer, as long as it is a reliable one.  DTLS can be used over
-reliable and unreliable transport layers.  GnuTLS supports TCP and UDP
-layers transparently using the Berkeley sockets API. However, any
+transport layer, as long as it is a reliable one.  DTLS can be used
+over reliable and unreliable transport layers.  GnuTLS supports TCP and
+UDP layers transparently using the Berkeley sockets API. However, any
 transport layer can be used by providing callbacks for GnuTLS to access
 the transport layer (for details see *note Setting up the transport
 layer::).
@@ -303,21 +306,21 @@ File: gnutls.info,  Node: The TLS record protocol,  Next: The TLS Alert Protocol
 3.3 The TLS record protocol
 ===========================
 
-The record protocol is the secure communications provider.  Its purpose
+The record protocol is the secure communications provider. Its purpose
 is to encrypt, authenticate and --optionally-- compress packets.  The
 record layer functions can be called at any time after the handshake
-process is finished, when there is need to receive or send data.  In
+process is finished, when there is need to receive or send data. In
 DTLS however, due to re-transmission timers used in the handshake
 out-of-order handshake data might be received for some time (maximum 60
 seconds) after the handshake process is finished.
 
 The functions to access the record protocol are limited to send and
-receive functions, which might, given the importance of this protocol in
-TLS, seem awkward.  This is because the record protocol's parameters are
-all set by the handshake protocol.  The record protocol initially starts
-with NULL parameters, which means no encryption, and no MAC is used.
-Encryption and authentication begin just after the handshake protocol
-has finished.
+receive functions, which might, given the importance of this protocol
+in TLS, seem awkward.  This is because the record protocol's parameters
+are all set by the handshake protocol.  The record protocol initially
+starts with NULL parameters, which means no encryption, and no MAC is
+used. Encryption and authentication begin just after the handshake
+protocol has finished.
 
 * Menu:
 
@@ -332,66 +335,56 @@ File: gnutls.info,  Node: Encryption algorithms used in the record layer,  Next:
 3.3.1 Encryption algorithms used in the record layer
 ----------------------------------------------------
 
-Confidentiality in the record layer is achieved by using symmetric block
-encryption algorithms like '3DES', 'AES' or stream algorithms like
-'ARCFOUR_128'.  Ciphers are encryption algorithms that use a single,
-secret, key to encrypt and decrypt data.  Block algorithms in CBC mode
-also provide protection against statistical analysis of the data.  Thus,
-if you're using the TLS protocol, a random number of blocks will be
-appended to data, to prevent eavesdroppers from guessing the actual data
-size.
+Confidentiality in the record layer is achieved by using symmetric
+block encryption algorithms like `3DES', `AES' or stream algorithms
+like `ARCFOUR_128'.   Ciphers are encryption algorithms that use a
+single, secret, key to encrypt and decrypt data. Block algorithms in
+CBC mode also provide protection against statistical analysis of the
+data.  Thus, if you're using the TLS protocol, a random number of
+blocks will be appended to data, to prevent eavesdroppers from guessing
+the actual data size.
 
 The supported in GnuTLS ciphers and MAC algorithms are shown in *note
-Table 3.1: tab:ciphers. and *note Table 3.2: tab:macs.
+tab:ciphers:: and *note tab:macs::.
 
 Algorithm      Description
-------------------------------------------------------------------
-3DES_CBC       This is the DES block cipher algorithm used with
+------------------------------------------------------------------ 
+3DES_CBC        This is the DES block cipher algorithm used with
                triple encryption (EDE). Has 64 bits block size
                and is used in CBC mode.
-               
-ARCFOUR_128    ARCFOUR_128 is a compatible algorithm with RSA's
+ARCFOUR_128     ARCFOUR_128 is a compatible algorithm with RSA's
                RC4 algorithm, which is considered to be a trade
-               secret.  It is a fast cipher but considered weak
+               secret. It is a fast cipher but considered weak
                today.
-               
-ARCFOUR_40     This is the ARCFOUR cipher fed with a 40 bit
-               key, which is considered weak.
-               
-AES_CBC        AES or RIJNDAEL is the block cipher algorithm
+ARCFOUR_40      This is the ARCFOUR cipher fed with a 40 bit key,
+               which is considered weak.
+AES_CBC         AES or RIJNDAEL is the block cipher algorithm
                that replaces the old DES algorithm.  Has 128
                bits block size and is used in CBC mode.
-               
-AES_GCM        This is the AES algorithm in the authenticated
+AES_GCM         This is the AES algorithm in the authenticated
                encryption GCM mode.  This mode combines message
                authentication and encryption and can be
                extremely fast on CPUs that support hardware
                acceleration.
-               
-CAMELLIA_CBC   This is an 128-bit block cipher developed by
+CAMELLIA_CBC    This is an 128-bit block cipher developed by
                Mitsubishi and NTT. It is one of the approved
                ciphers of the European NESSIE and Japanese
                CRYPTREC projects.
-               
 
 Table 3.1: Supported ciphers.
 
 Algorithm      Description
-------------------------------------------------------------------
-MAC_MD5        This is an HMAC based on MD5 a cryptographic
-               hash algorithm designed by Ron Rivest.  Outputs
+------------------------------------------------------------------ 
+MAC_MD5         This is an HMAC based on MD5 a cryptographic
+               hash algorithm designed by Ron Rivest. Outputs
                128 bits of data.
-               
-MAC_SHA1       An HMAC based on the SHA1 cryptographic hash
+MAC_SHA1        An HMAC based on the SHA1 cryptographic hash
                algorithm designed by NSA. Outputs 160 bits of
                data.
-               
-MAC_SHA256     An HMAC based on SHA256.  Outputs 256 bits of
+MAC_SHA256      An HMAC based on SHA256. Outputs 256 bits of
                data.
-               
-MAC_AEAD       This indicates that an authenticated encryption
+MAC_AEAD        This indicates that an authenticated encryption
                algorithm, such as GCM, is in use.
-               
 
 Table 3.2: Supported MAC algorithms.
 
@@ -403,29 +396,32 @@ File: gnutls.info,  Node: Compression algorithms used in the record layer,  Next
 
 The TLS record layer also supports compression.  The algorithms
 implemented in GnuTLS can be found in the table below.  The included
-algorithms perform really good when text, or other compressible data are
-to be transferred, but offer nothing on already compressed data, such as
-compressed images, zipped archives etc.  These compression algorithms,
-may be useful in high bandwidth TLS tunnels, and in cases where network
-usage has to be minimized.  It should be noted however that compression
-increases latency.
+algorithms perform really good when text, or other compressible data
+are to be transferred, but offer nothing on already compressed data,
+such as compressed images, zipped archives etc.  These compression
+algorithms, may be useful in high bandwidth TLS tunnels, and in cases
+where network usage has to be minimized. It should be noted however
+that compression increases latency.
 
 The record layer compression in GnuTLS is implemented based on
-[_RFC3749_].  The supported algorithms are shown below.
+[_RFC3749_]. The supported algorithms are shown below.
 
-'GNUTLS_COMP_UNKNOWN'
+`GNUTLS_COMP_UNKNOWN'
      Unknown compression method.
-'GNUTLS_COMP_NULL'
+
+`GNUTLS_COMP_NULL'
      The NULL compression method (no compression).
-'GNUTLS_COMP_DEFLATE'
+
+`GNUTLS_COMP_DEFLATE'
      The DEFLATE compression method from zlib.
-'GNUTLS_COMP_ZLIB'
-     Same as 'GNUTLS_COMP_DEFLATE' .
+
+`GNUTLS_COMP_ZLIB'
+     Same as `GNUTLS_COMP_DEFLATE' .
 
 Figure 3.2: Supported compression algorithms
 
 Note that compression enables attacks such as traffic analysis, or even
-plaintext recovery under certain circumstances.  To avoid some of these
+plaintext recovery under certain circumstances. To avoid some of these
 attacks GnuTLS allows each record to be compressed independently (i.e.,
 stateless compression), by using the "%STATELESS_COMPRESSION" priority
 string, in order to be used in cases where the attacker controlled data
@@ -438,7 +434,7 @@ File: gnutls.info,  Node: Weaknesses and countermeasures,  Next: On Record Paddi
 ------------------------------------
 
 Some weaknesses that may affect the security of the record layer have
-been found in TLS 1.0 protocol.  These weaknesses can be exploited by
+been found in TLS 1.0 protocol. These weaknesses can be exploited by
 active attackers, and exploit the facts that
 
   1. TLS has separate alerts for "decryption_failed" and
@@ -450,15 +446,16 @@ active attackers, and exploit the facts that
   3. The IV for CBC encrypted packets is the last block of the previous
      encrypted packet.
 
-Those weaknesses were solved in TLS 1.1 [_RFC4346_] which is implemented
-in GnuTLS.  For this reason we suggest to always negotiate the highest
-supported TLS version with the peer(1).  For a detailed discussion of
-the issues see the archives of the TLS Working Group mailing list and
-[_CBCATT_].
 
-   ---------- Footnotes ----------
+Those weaknesses were solved in TLS 1.1 [_RFC4346_] which is
+implemented in GnuTLS. For this reason we suggest to always negotiate
+the highest supported TLS version with the peer(1).  For a detailed
+discussion of the issues see the archives of the TLS Working Group
+mailing list and [_CBCATT_].
 
-   (1) If this is not possible then please consult *note
+---------- Footnotes ----------
+
+(1) If this is not possible then please consult *note
 Interoperability::.
 
 
@@ -476,14 +473,14 @@ and GnuTLS adds extra padding to make sure the attacker cannot tell the
 real plaintext length is in a range smaller than the user-provided one.
 Use *note gnutls_record_send_range:: to send length-hidden messages and
 *note gnutls_record_can_use_length_hiding:: to check whether the current
-session supports length hiding.  Using the standard *note
+session supports length hiding. Using the standard *note
 gnutls_record_send:: will only add minimal padding.
 
 The TLS implementation in the Symbian operating system, frequently used
 by Nokia and Sony-Ericsson mobile phones, cannot handle non-minimal
-record padding.  What happens when one of these clients handshake with a
-GnuTLS server is that the client will fail to compute the correct MAC
-for the record.  The client sends a TLS alert ('bad_record_mac') and
+record padding.  What happens when one of these clients handshake with
+a GnuTLS server is that the client will fail to compute the correct MAC
+for the record.  The client sends a TLS alert (`bad_record_mac') and
 disconnects.  Typically this will result in error messages such as 'A
 TLS fatal alert has been received', 'Bad record MAC', or both, on the
 GnuTLS server side.
@@ -506,22 +503,22 @@ File: gnutls.info,  Node: The TLS Alert Protocol,  Next: The TLS Handshake Proto
 
 The alert protocol is there to allow signals to be sent between peers.
 These signals are mostly used to inform the peer about the cause of a
-protocol failure.  Some of these signals are used internally by the
+protocol failure. Some of these signals are used internally by the
 protocol and the application protocol does not have to cope with them
-(e.g.  'GNUTLS_A_CLOSE_NOTIFY'), and others refer to the application
-protocol solely (e.g.  'GNUTLS_A_USER_CANCELLED').  An alert signal
-includes a level indication which may be either fatal or warning.  Fatal
+(e.g. `GNUTLS_A_CLOSE_NOTIFY'), and others refer to the application
+protocol solely (e.g. `GNUTLS_A_USER_CANCELLED').  An alert signal
+includes a level indication which may be either fatal or warning. Fatal
 alerts always terminate the current connection, and prevent future
 re-negotiations using the current session ID. All alert messages are
 summarized in the table below.
 
 The alert messages are protected by the record protocol, thus the
-information that is included does not leak.  You must take extreme care
-for the alert information not to leak to a possible attacker, via public
-log files etc.
+information that is included does not leak. You must take extreme care
+for the alert information not to leak to a possible attacker, via
+public log files etc.
 
 Alert                                    ID      Description
-------------------------------------------------------------------------
+------------------------------------------------------------------------ 
 GNUTLS_A_CLOSE_NOTIFY                    0       Close notify
 GNUTLS_A_UNEXPECTED_MESSAGE              10      Unexpected message
 GNUTLS_A_BAD_RECORD_MAC                  20      Bad record MAC
@@ -536,8 +533,7 @@ GNUTLS_A_UNSUPPORTED_CERTIFICATE         43      Certificate is not
                                                  supported
 GNUTLS_A_CERTIFICATE_REVOKED             44      Certificate was
                                                  revoked
-GNUTLS_A_CERTIFICATE_EXPIRED             45      Certificate is
-                                                 expired
+GNUTLS_A_CERTIFICATE_EXPIRED             45      Certificate is expired
 GNUTLS_A_CERTIFICATE_UNKNOWN             46      Unknown certificate
 GNUTLS_A_ILLEGAL_PARAMETER               47      Illegal parameter
 GNUTLS_A_UNKNOWN_CA                      48      CA is unknown
@@ -547,8 +543,7 @@ GNUTLS_A_DECRYPT_ERROR                   51      Decrypt error
 GNUTLS_A_EXPORT_RESTRICTION              60      Export restriction
 GNUTLS_A_PROTOCOL_VERSION                70      Error in protocol
                                                  version
-GNUTLS_A_INSUFFICIENT_SECURITY           71      Insufficient
-                                                 security
+GNUTLS_A_INSUFFICIENT_SECURITY           71      Insufficient security
 GNUTLS_A_INTERNAL_ERROR                  80      Internal error
 GNUTLS_A_USER_CANCELED                   90      User canceled
 GNUTLS_A_NO_RENEGOTIATION                100     No renegotiation is
@@ -571,10 +566,10 @@ File: gnutls.info,  Node: The TLS Handshake Protocol,  Next: TLS Extensions,  Pr
 ==============================
 
 The handshake protocol is responsible for the ciphersuite negotiation,
-the initial key exchange, and the authentication of the two peers.  This
-is fully controlled by the application layer, thus your program has to
-set up the required parameters.  The main handshake function is *note
-gnutls_handshake::.  In the next paragraphs we elaborate on the
+the initial key exchange, and the authentication of the two peers.
+This is fully controlled by the application layer, thus your program
+has to set up the required parameters. The main handshake function is
+*note gnutls_handshake::. In the next paragraphs we elaborate on the
 handshake protocol, i.e., the ciphersuite negotiation.
 
 * Menu:
@@ -590,30 +585,31 @@ File: gnutls.info,  Node: TLS Cipher Suites,  Next: Authentication,  Up: The TLS
 3.5.1 TLS ciphersuites
 ----------------------
 
-The handshake protocol of TLS negotiates cipher suites of a special form
-illustrated by the 'TLS_DHE_RSA_WITH_3DES_CBC_SHA' cipher suite name.  A
-typical cipher suite contains these parameters:
+The handshake protocol of TLS negotiates cipher suites of a special
+form illustrated by the `TLS_DHE_RSA_WITH_3DES_CBC_SHA' cipher suite
+name.  A typical cipher suite contains these parameters:
 
-   * The key exchange algorithm.  'DHE_RSA' in the example.
+   * The key exchange algorithm.  `DHE_RSA' in the example.
 
-   * The Symmetric encryption algorithm and mode '3DES_CBC' in this
+   * The Symmetric encryption algorithm and mode `3DES_CBC' in this
      example.
 
-   * The MAC(1) algorithm used for authentication.  'MAC_SHA' is used in
-     the above example.
+   * The MAC(1) algorithm used for authentication.  `MAC_SHA' is used
+     in the above example.
+
 
 The cipher suite negotiated in the handshake protocol will affect the
 record protocol, by enabling encryption and data authentication.  Note
 that you should not over rely on TLS to negotiate the strongest
-available cipher suite.  Do not enable ciphers and algorithms that you
+available cipher suite. Do not enable ciphers and algorithms that you
 consider weak.
 
 All the supported ciphersuites are listed in *note ciphersuites::.
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) MAC stands for Message Authentication Code.  It can be described
-as a keyed hash algorithm.  See RFC2104.
+(1) MAC stands for Message Authentication Code. It can be described as
+a keyed hash algorithm. See RFC2104.
 
 
 File: gnutls.info,  Node: Authentication,  Next: Client Authentication,  Prev: TLS Cipher Suites,  Up: The TLS Handshake Protocol
@@ -625,13 +621,17 @@ The key exchange algorithms of the TLS protocol offer authentication,
 which is a prerequisite for a secure connection.  The available
 authentication methods in GnuTLS follow.
 
-   * Certificate authentication: Authenticated key exchange using public
-     key infrastructure and certificates (X.509 or OpenPGP).
+   * Certificate authentication: Authenticated key exchange using
+     public key infrastructure and certificates (X.509 or OpenPGP).
+
    * SRP authentication: Authenticated key exchange using a password.
+
    * PSK authentication: Authenticated key exchange using a pre-shared
      key.
+
    * Anonymous authentication: Key exchange without peer authentication.
 
+
 
 File: gnutls.info,  Node: Client Authentication,  Next: Resuming Sessions,  Prev: Authentication,  Up: The TLS Handshake Protocol
 
@@ -639,9 +639,9 @@ File: gnutls.info,  Node: Client Authentication,  Next: Resuming Sessions,  Prev
 ---------------------------
 
 In the case of ciphersuites that use certificate authentication, the
-authentication of the client is optional in TLS.  A server may request a
-certificate from the client using the *note
-gnutls_certificate_server_set_request:: function.  We elaborate in *note
+authentication of the client is optional in TLS.  A server may request
+a certificate from the client using the *note
+gnutls_certificate_server_set_request:: function. We elaborate in *note
 Certificate credentials::.
 
 
@@ -651,13 +651,13 @@ File: gnutls.info,  Node: Resuming Sessions,  Prev: Client Authentication,  Up:
 -----------------------
 
 The TLS handshake process performs expensive calculations and a busy
-server might easily be put under load.  To reduce the load, session
-resumption may be used.  This is a feature of the TLS protocol which
+server might easily be put under load. To reduce the load, session
+resumption may be used. This is a feature of the TLS protocol which
 allows a client to connect to a server after a successful handshake,
 without the expensive calculations.  This is achieved by re-using the
-previously established keys, meaning the server needs to store the state
-of established connections (unless session tickets are used - *note
-Session tickets::).
+previously established keys, meaning the server needs to store the
+state of established connections (unless session tickets are used -
+*note Session tickets::).
 
 Session resumption is an integral part of GnuTLS, and *note Session
 resumption::, *note ex:resume-client:: illustrate typical uses of it.
@@ -672,9 +672,13 @@ A number of extensions to the TLS protocol have been proposed mainly in
 [_TLSEXT_]. The extensions supported in GnuTLS are:
 
    * Maximum fragment length negotiation
+
    * Server name indication
+
    * Session tickets
+
    * HeartBeat
+
    * Safe Renegotiation
 
 and they will be discussed in the subsections that follow.
@@ -696,12 +700,13 @@ File: gnutls.info,  Node: Maximum fragment length negotiation,  Next: Server nam
 -----------------------------------------
 
 This extension allows a TLS implementation to negotiate a smaller value
-for record packet maximum length.  This extension may be useful to
-clients with constrained capabilities.  The functions shown below can be
+for record packet maximum length. This extension may be useful to
+clients with constrained capabilities. The functions shown below can be
 used to control this extension.
 
-'SIZE_T *note gnutls_record_get_max_size:: (gnutls_session_t SESSION)'
-'SSIZE_T *note gnutls_record_set_max_size:: (gnutls_session_t SESSION, size_t SIZE)'
+`SIZE_T *note gnutls_record_get_max_size:: (gnutls_session_t SESSION)'
+
+`SSIZE_T *note gnutls_record_set_max_size:: (gnutls_session_t SESSION, size_t SIZE)'
 
 
 File: gnutls.info,  Node: Server name indication,  Next: Session tickets,  Prev: Maximum fragment length negotiation,  Up: TLS Extensions
@@ -711,17 +716,18 @@ File: gnutls.info,  Node: Server name indication,  Next: Session tickets,  Prev:
 
 A common problem in HTTPS servers is the fact that the TLS protocol is
 not aware of the hostname that a client connects to, when the handshake
-procedure begins.  For that reason the TLS server has no way to know
+procedure begins. For that reason the TLS server has no way to know
 which certificate to send.
 
-This extension solves that problem within the TLS protocol, and allows a
-client to send the HTTP hostname before the handshake begins within the
-first handshake packet.  The functions *note gnutls_server_name_set::
-and *note gnutls_server_name_get:: can be used to enable this extension,
-or to retrieve the name sent by a client.
+This extension solves that problem within the TLS protocol, and allows
+a client to send the HTTP hostname before the handshake begins within
+the first handshake packet.  The functions *note
+gnutls_server_name_set:: and *note gnutls_server_name_get:: can be used
+to enable this extension, or to retrieve the name sent by a client.
+
+`INT *note gnutls_server_name_set:: (gnutls_session_t SESSION, gnutls_server_name_type_t TYPE, const void * NAME, size_t NAME_LENGTH)'
 
-'INT *note gnutls_server_name_set:: (gnutls_session_t SESSION, gnutls_server_name_type_t TYPE, const void * NAME, size_t NAME_LENGTH)'
-'INT *note gnutls_server_name_get:: (gnutls_session_t SESSION, void * DATA, size_t * DATA_LENGTH, unsigned int * TYPE, unsigned int INDX)'
+`INT *note gnutls_server_name_get:: (gnutls_session_t SESSION, void * DATA, size_t * DATA_LENGTH, unsigned int * TYPE, unsigned int INDX)'
 
 
 File: gnutls.info,  Node: Session tickets,  Next: HeartBeat,  Prev: Server name indication,  Up: TLS Extensions
@@ -731,9 +737,9 @@ File: gnutls.info,  Node: Session tickets,  Next: HeartBeat,  Prev: Server name
 
 To resume a TLS session the server normally store session parameters.
 This complicates deployment, and could be avoiding by delegating the
-storage to the client.  Because session parameters are sensitive they
+storage to the client. Because session parameters are sensitive they
 are encrypted and authenticated with a key only known to the server and
-then sent to the client.  The Session Tickets extension is described in
+then sent to the client. The Session Tickets extension is described in
 RFC 5077 [_TLSTKT_].
 
 Since version 3.1.3 GnuTLS clients transparently support session
@@ -746,22 +752,26 @@ File: gnutls.info,  Node: HeartBeat,  Next: Safe renegotiation,  Prev: Session t
 ---------------
 
 This TLS extension allows to ping and receive confirmation from the
-peer, is described in [_RFC6520_].  The extension is disabled by default
-and *note gnutls_heartbeat_enable:: can be used to enable it.  A policy
+peer, is described in [_RFC6520_]. The extension is disabled by default
+and *note gnutls_heartbeat_enable:: can be used to enable it. A policy
 may be negotiated to only allow sending heartbeat messages or sending
 and receiving.  The current session policy can be checked with *note
-gnutls_heartbeat_allowed::.  The requests coming from the peer result to
-'GNUTLS_E_HERTBEAT_PING_RECEIVED' being returned from the receive
-function.  Ping requests to peer can be send via *note
+gnutls_heartbeat_allowed::.  The requests coming from the peer result
+to `GNUTLS_E_HERTBEAT_PING_RECEIVED' being returned from the receive
+function. Ping requests to peer can be send via *note
 gnutls_heartbeat_ping::.
 
-'INT *note gnutls_heartbeat_allowed:: (gnutls_session_t SESSION, unsigned int TYPE)'
-'VOID *note gnutls_heartbeat_enable:: (gnutls_session_t SESSION, unsigned int TYPE)'
+`INT *note gnutls_heartbeat_allowed:: (gnutls_session_t SESSION, unsigned int TYPE)'
+
+`VOID *note gnutls_heartbeat_enable:: (gnutls_session_t SESSION, unsigned int TYPE)'
+
+`INT *note gnutls_heartbeat_ping:: (gnutls_session_t SESSION, size_t DATA_SIZE, unsigned int MAX_TRIES, unsigned int FLAGS)'
 
-'INT *note gnutls_heartbeat_ping:: (gnutls_session_t SESSION, size_t DATA_SIZE, unsigned int MAX_TRIES, unsigned int FLAGS)'
-'INT *note gnutls_heartbeat_pong:: (gnutls_session_t SESSION, unsigned int FLAGS)'
-'VOID *note gnutls_heartbeat_set_timeouts:: (gnutls_session_t SESSION, unsigned int RETRANS_TIMEOUT, unsigned int TOTAL_TIMEOUT)'
-'UNSIGNED INT *note gnutls_heartbeat_get_timeout:: (gnutls_session_t SESSION)'
+`INT *note gnutls_heartbeat_pong:: (gnutls_session_t SESSION, unsigned int FLAGS)'
+
+`VOID *note gnutls_heartbeat_set_timeouts:: (gnutls_session_t SESSION, unsigned int RETRANS_TIMEOUT, unsigned int TOTAL_TIMEOUT)'
+
+`UNSIGNED INT *note gnutls_heartbeat_get_timeout:: (gnutls_session_t SESSION)'
 
 
 File: gnutls.info,  Node: Safe renegotiation,  Next: OCSP status request,  Prev: HeartBeat,  Up: TLS Extensions
@@ -770,9 +780,9 @@ File: gnutls.info,  Node: Safe renegotiation,  Next: OCSP status request,  Prev:
 ------------------------
 
 TLS gives the option to two communicating parties to renegotiate and
-update their security parameters.  One useful example of this feature
+update their security parameters. One useful example of this feature
 was for a client to initially connect using anonymous negotiation to a
-server, and the renegotiate using some authenticated ciphersuite.  This
+server, and the renegotiate using some authenticated ciphersuite. This
 occurred to avoid having the client sending its credentials in the
 clear.
 
@@ -784,41 +794,42 @@ negotiation attempt.
 
 This might be seen as a valid design decision, but it seems it was not
 widely known or understood, thus today some application protocols the
-TLS renegotiation feature in a manner that enables a malicious server to
-insert content of his choice in the beginning of a TLS session.
-
-The most prominent vulnerability was with HTTPS. There servers request a
-renegotiation to enforce an anonymous user to use a certificate in order
-to access certain parts of a web site.  The attack works by having the
-attacker simulate a client and connect to a server, with server-only
-authentication, and send some data intended to cause harm.  The server
-will then require renegotiation from him in order to perform the
-request.  When the proper client attempts to contact the server, the
-attacker hijacks that connection and forwards traffic to the initial
-server that requested renegotiation.  The attacker will not be able to
-read the data exchanged between the client and the server.  However, the
-server will (incorrectly) assume that the initial request sent by the
-attacker was sent by the now authenticated client.  The result is a
-prefix plain-text injection attack.
-
-The above is just one example.  Other vulnerabilities exists that do not
-rely on the TLS renegotiation to change the client's authenticated
+TLS renegotiation feature in a manner that enables a malicious server
+to insert content of his choice in the beginning of a TLS session.
+
+The most prominent vulnerability was with HTTPS. There servers request
+a renegotiation to enforce an anonymous user to use a certificate in
+order to access certain parts of a web site.  The attack works by
+having the attacker simulate a client and connect to a server, with
+server-only authentication, and send some data intended to cause harm.
+The server will then require renegotiation from him in order to perform
+the request.  When the proper client attempts to contact the server,
+the attacker hijacks that connection and forwards traffic to the
+initial server that requested renegotiation.  The attacker will not be
+able to read the data exchanged between the client and the server.
+However, the server will (incorrectly) assume that the initial request
+sent by the attacker was sent by the now authenticated client.  The
+result is a prefix plain-text injection attack.
+
+The above is just one example.  Other vulnerabilities exists that do
+not rely on the TLS renegotiation to change the client's authenticated
 status (either TLS or application layer).
 
 While fixing these application protocols and implementations would be
 one natural reaction, an extension to TLS has been designed that
 cryptographically binds together any renegotiated handshakes with the
-initial negotiation.  When the extension is used, the attack is detected
-and the session can be terminated.  The extension is specified in
-[_RFC5746_].
+initial negotiation.  When the extension is used, the attack is
+detected and the session can be terminated.  The extension is specified
+in [_RFC5746_].
 
 GnuTLS supports the safe renegotiation extension.  The default behavior
-is as follows.  Clients will attempt to negotiate the safe renegotiation
-extension when talking to servers.  Servers will accept the extension
-when presented by clients.  Clients and servers will permit an initial
-handshake to complete even when the other side does not support the safe
-renegotiation extension.  Clients and servers will refuse renegotiation
-attempts when the extension has not been negotiated.
+is as follows.  Clients will attempt to negotiate the safe
+renegotiation extension when talking to servers.  Servers will accept
+the extension when presented by clients.  Clients and servers will
+permit an initial handshake to complete even when the other side does
+not support the safe renegotiation extension.  Clients and servers will
+refuse renegotiation attempts when the extension has not been
+negotiated.
 
 Note that permitting clients to connect to servers when the safe
 renegotiation extension is not enabled, is open up for attacks.
@@ -829,36 +840,36 @@ Note that it is easy to configure clients to always require the safe
 renegotiation extension from servers.
 
 To modify the default behavior, we have introduced some new priority
-strings (see *note Priority Strings::).  The '%UNSAFE_RENEGOTIATION'
-priority string permits (re-)handshakes even when the safe renegotiation
-extension was not negotiated.  The default behavior is
-'%PARTIAL_RENEGOTIATION' that will prevent renegotiation with clients
-and servers not supporting the extension.  This is secure for servers
+strings (see *note Priority Strings::).  The `%UNSAFE_RENEGOTIATION'
+priority string permits (re-)handshakes even when the safe
+renegotiation extension was not negotiated. The default behavior is
+`%PARTIAL_RENEGOTIATION' that will prevent renegotiation with clients
+and servers not supporting the extension. This is secure for servers
 but leaves clients vulnerable to some attacks, but this is a trade-off
-between security and compatibility with old servers.  The
-'%SAFE_RENEGOTIATION' priority string makes clients and servers require
-the extension for every handshake.  The latter is the most secure option
-for clients, at the cost of not being able to connect to legacy servers.
-Servers will also deny clients that do not support the extension from
-connecting.
+between security and compatibility with old servers. The
+`%SAFE_RENEGOTIATION' priority string makes clients and servers require
+the extension for every handshake. The latter is the most secure option
+for clients, at the cost of not being able to connect to legacy
+servers. Servers will also deny clients that do not support the
+extension from connecting.
 
 It is possible to disable use of the extension completely, in both
-clients and servers, by using the '%DISABLE_SAFE_RENEGOTIATION' priority
-string however we strongly recommend you to only do this for debugging
-and test purposes.
+clients and servers, by using the `%DISABLE_SAFE_RENEGOTIATION'
+priority string however we strongly recommend you to only do this for
+debugging and test purposes.
 
 The default values if the flags above are not specified are:
-
-'Server:'
+`Server:'
      %PARTIAL_RENEGOTIATION
 
-'Client:'
+`Client:'
      %PARTIAL_RENEGOTIATION
 
+
 For applications we have introduced a new API related to safe
 renegotiation.  The *note gnutls_safe_renegotiation_status:: function is
-used to check if the extension has been negotiated on a session, and can
-be used both by clients and servers.
+used to check if the extension has been negotiated on a session, and
+can be used both by clients and servers.
 
 
 File: gnutls.info,  Node: OCSP status request,  Next: SRTP,  Prev: Safe renegotiation,  Up: TLS Extensions
@@ -868,19 +879,22 @@ File: gnutls.info,  Node: OCSP status request,  Next: SRTP,  Prev: Safe renegoti
 
 The Online Certificate Status Protocol (OCSP) is a protocol that allows
 the client to verify the server certificate for revocation without
-messing with certificate revocation lists.  Its drawback is that it
+messing with certificate revocation lists. Its drawback is that it
 requires the client to connect to the server's CA OCSP server and
-request the status of the certificate.  This extension however, enables
+request the status of the certificate. This extension however, enables
 a TLS server to include its CA OCSP server response in the handshake.
-That is an HTTPS server may periodically run 'ocsptool' (see *note
+That is an HTTPS server may periodically run `ocsptool' (see *note
 ocsptool Invocation::) to obtain its certificate revocation status and
-serve it to the clients.  That way a client avoids an additional
+serve it to the clients. That way a client avoids an additional
 connection to the OCSP server.
 
-'VOID *note gnutls_certificate_set_ocsp_status_request_function:: (gnutls_certificate_credentials_t SC, gnutls_status_request_ocsp_func OCSP_FUNC, void * PTR)'
-'INT *note gnutls_certificate_set_ocsp_status_request_file:: (gnutls_certificate_credentials_t SC, const char* RESPONSE_FILE, unsigned int FLAGS)'
-'INT *note gnutls_ocsp_status_request_enable_client:: (gnutls_session_t SESSION, gnutls_datum_t * RESPONDER_ID, size_t RESPONDER_ID_SIZE, gnutls_datum_t * EXTENSIONS)'
-'INT *note gnutls_ocsp_status_request_is_checked:: (gnutls_session_t SESSION, unsigned int FLAGS)'
+`VOID *note gnutls_certificate_set_ocsp_status_request_function:: (gnutls_certificate_credentials_t SC, gnutls_status_request_ocsp_func OCSP_FUNC, void * PTR)'
+
+`INT *note gnutls_certificate_set_ocsp_status_request_file:: (gnutls_certificate_credentials_t SC, const char* RESPONSE_FILE, unsigned int FLAGS)'
+
+`INT *note gnutls_ocsp_status_request_enable_client:: (gnutls_session_t SESSION, gnutls_datum_t * RESPONDER_ID, size_t RESPONDER_ID_SIZE, gnutls_datum_t * EXTENSIONS)'
+
+`INT *note gnutls_ocsp_status_request_is_checked:: (gnutls_session_t SESSION, unsigned int FLAGS)'
 
 A server is required to provide the OCSP server's response using the
 *note gnutls_certificate_set_ocsp_status_request_file::.  The response
@@ -889,8 +903,8 @@ may be obtained periodically using the following command.
      ocsptool --ask --load-cert server_cert.pem --load-issuer the_issuer.pem
               --load-signer the_issuer.pem --outfile ocsp.response
 
-Since version 3.1.3 GnuTLS clients transparently support the certificate
-status request.
+Since version 3.1.3 GnuTLS clients transparently support the
+certificate status request.
 
 
 File: gnutls.info,  Node: SRTP,  Prev: OCSP status request,  Up: TLS Extensions
@@ -899,35 +913,39 @@ File: gnutls.info,  Node: SRTP,  Prev: OCSP status request,  Up: TLS Extensions
 ----------
 
 The TLS protocol was extended in [_RFC5764_] to provide keying material
-to the Secure RTP (SRTP) protocol.  The SRTP protocol provides an
-encapsulation of encrypted data that is optimized for voice data.  With
+to the Secure RTP (SRTP) protocol. The SRTP protocol provides an
+encapsulation of encrypted data that is optimized for voice data. With
 the SRTP TLS extension two peers can negotiate keys using TLS or DTLS
 and obtain keying material for use with SRTP. The available SRTP
 profiles are listed below.
 
-'GNUTLS_SRTP_AES128_CM_HMAC_SHA1_80'
+`GNUTLS_SRTP_AES128_CM_HMAC_SHA1_80'
      128 bit AES with a 80 bit HMAC-SHA1
-'GNUTLS_SRTP_AES128_CM_HMAC_SHA1_32'
+
+`GNUTLS_SRTP_AES128_CM_HMAC_SHA1_32'
      128 bit AES with a 32 bit HMAC-SHA1
-'GNUTLS_SRTP_NULL_HMAC_SHA1_80'
+
+`GNUTLS_SRTP_NULL_HMAC_SHA1_80'
      NULL cipher with a 80 bit HMAC-SHA1
-'GNUTLS_SRTP_NULL_HMAC_SHA1_32'
+
+`GNUTLS_SRTP_NULL_HMAC_SHA1_32'
      NULL cipher with a 32 bit HMAC-SHA1
 
 Figure 3.3: Supported SRTP profiles
 
 To enable use the following functions.
 
-'INT *note gnutls_srtp_set_profile:: (gnutls_session_t SESSION, gnutls_srtp_profile_t PROFILE)'
-'INT *note gnutls_srtp_set_profile_direct:: (gnutls_session_t SESSION, const char * PROFILES, const char ** ERR_POS)'
+`INT *note gnutls_srtp_set_profile:: (gnutls_session_t SESSION, gnutls_srtp_profile_t PROFILE)'
+
+`INT *note gnutls_srtp_set_profile_direct:: (gnutls_session_t SESSION, const char * PROFILES, const char ** ERR_POS)'
 
 To obtain the negotiated keys use the function below.
 
- -- Function: int gnutls_srtp_get_keys (gnutls_session_t SESSION, void *
-          KEY_MATERIAL, unsigned int KEY_MATERIAL_SIZE, gnutls_datum_t *
-          CLIENT_KEY, gnutls_datum_t * CLIENT_SALT, gnutls_datum_t *
-          SERVER_KEY, gnutls_datum_t * SERVER_SALT)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: int gnutls_srtp_get_keys (gnutls_session_t SESSION, void
+          * KEY_MATERIAL, unsigned int KEY_MATERIAL_SIZE,
+          gnutls_datum_t * CLIENT_KEY, gnutls_datum_t * CLIENT_SALT,
+          gnutls_datum_t * SERVER_KEY, gnutls_datum_t * SERVER_SALT)
+     SESSION: is a `gnutls_session_t'  structure.
 
      KEY_MATERIAL: Space to hold the generated key material
 
@@ -947,22 +965,24 @@ To obtain the negotiated keys use the function below.
 
      This is a helper function to generate the keying material for SRTP.
      It requires the space of the key material to be pre-allocated
-     (should be at least 2x the maximum key size and salt size).  The
-     'client_key' , 'client_salt' , 'server_key' and 'server_salt' are
-     convenience datums that point inside the key material.  They may be
-     'NULL' .
+     (should be at least 2x the maximum key size and salt size). The
+     `client_key' ,  `client_salt' ,  `server_key' and  `server_salt'
+     are convenience datums that point inside the key material. They may
+     be `NULL' .
 
      *Returns:* On success the size of the key material is returned,
-     otherwise, 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the buffer given is
+     otherwise, `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the buffer given is
      not sufficient, or a negative error code.
 
      Since 3.1.4
 
 Other helper functions are listed below.
 
-'INT *note gnutls_srtp_get_selected_profile:: (gnutls_session_t SESSION, gnutls_srtp_profile_t * PROFILE)'
-'CONST CHAR * *note gnutls_srtp_get_profile_name:: (gnutls_srtp_profile_t PROFILE)'
-'INT *note gnutls_srtp_get_profile_id:: (const char * NAME, gnutls_srtp_profile_t * PROFILE)'
+`INT *note gnutls_srtp_get_selected_profile:: (gnutls_session_t SESSION, gnutls_srtp_profile_t * PROFILE)'
+
+`CONST CHAR * *note gnutls_srtp_get_profile_name:: (gnutls_srtp_profile_t PROFILE)'
+
+`INT *note gnutls_srtp_get_profile_id:: (const char * NAME, gnutls_srtp_profile_t * PROFILE)'
 
 
 File: gnutls.info,  Node: How to use TLS in application protocols,  Next: On SSL 2 and older protocols,  Prev: TLS Extensions,  Up: Introduction to TLS
@@ -972,8 +992,8 @@ File: gnutls.info,  Node: How to use TLS in application protocols,  Next: On SSL
 
 This chapter is intended to provide some hints on how to use the TLS
 over simple custom made application protocols.  The discussion below
-mainly refers to the TCP/IP transport layer but may be extended to other
-ones too.
+mainly refers to the TCP/IP transport layer but may be extended to
+other ones too.
 
 * Menu:
 
@@ -987,31 +1007,30 @@ File: gnutls.info,  Node: Separate ports,  Next: Upward negotiation,  Up: How to
 --------------------
 
 Traditionally SSL was used in application protocols by assigning a new
-port number for the secure services.  That way two separate ports were
-assigned, one for the non secure sessions, and one for the secured ones.
-This has the benefit that if a user requests a secure session then the
-client will try to connect to the secure port and fail otherwise.  The
-only possible attack with this method is a denial of service one.  The
-most famous example of this method is the famous "HTTP over TLS" or
-HTTPS protocol [_RFC2818_].
+port number for the secure services. That way two separate ports were
+assigned, one for the non secure sessions, and one for the secured
+ones. This has the benefit that if a user requests a secure session
+then the client will try to connect to the secure port and fail
+otherwise. The only possible attack with this method is a denial of
+service one. The most famous example of this method is the famous "HTTP
+over TLS" or HTTPS protocol [_RFC2818_].
 
 Despite its wide use, this method is not as good as it seems.  This
 approach starts the TLS Handshake procedure just after the client
 connects on the --so called-- secure port.  That way the TLS protocol
 does not know anything about the client, and popular methods like the
-host advertising in HTTP do not work(1).  There is no way for the client
-to say "I connected to YYY server" before the Handshake starts, so the
-server cannot possibly know which certificate to use.
+host advertising in HTTP do not work(1).  There is no way for the
+client to say "I connected to YYY server" before the Handshake starts,
+so the server cannot possibly know which certificate to use.
 
 Other than that it requires two separate ports to run a single service,
-which is unnecessary complication.  Due to the fact that there is a
+which is unnecessary complication. Due to the fact that there is a
 limitation on the available privileged ports, this approach was soon
 obsoleted.
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) See also the Server Name Indication extension on *note
-serverind::.
+(1) See also the Server Name Indication extension on *note serverind::.
 
 
 File: gnutls.info,  Node: Upward negotiation,  Prev: Separate ports,  Up: How to use TLS in application protocols
@@ -1019,9 +1038,9 @@ File: gnutls.info,  Node: Upward negotiation,  Prev: Separate ports,  Up: How to
 3.7.2 Upward negotiation
 ------------------------
 
-Other application protocols(1) use a different approach to enable the
+Other application protocols(1)  use a different approach to enable the
 secure layer.  They use something often called as the "TLS upgrade"
-method.  This method is quite tricky but it is more flexible.  The idea
+method. This method is quite tricky but it is more flexible. The idea
 is to extend the application protocol to have a "STARTTLS" request,
 whose purpose it to start the TLS protocols just after the client
 requests it.  This approach does not require any extra port to be
@@ -1064,12 +1083,12 @@ And see an example of a conversation where someone is acting in between:
 
      CLIENT: HERE ARE SOME CONFIDENTIAL DATA
 
-As you can see above the client was fooled, and was dummy enough to send
-the confidential data in the clear.
+As you can see above the client was fooled, and was dummy enough to
+send the confidential data in the clear.
 
-How to avoid the above attack?  As you may have already noticed this one
-is easy to avoid.  The client has to ask the user before it connects
-whether the user requests TLS or not.  If the user answered that he
+How to avoid the above attack? As you may have already noticed this one
+is easy to avoid. The client has to ask the user before it connects
+whether the user requests TLS or not. If the user answered that he
 certainly wants the secure layer the last conversation should be:
 
      (client connects to the server)
@@ -1089,16 +1108,16 @@ certainly wants the secure layer the last conversation should be:
      (the client notifies the user that the secure connection was not
      possible)
 
-This method, if implemented properly, is far better than the traditional
-method, and the security properties remain the same, since only denial
-of service is possible.  The benefit is that the server may request
-additional data before the TLS Handshake protocol starts, in order to
-send the correct certificate, use the correct password file, or anything
-else!
+This method, if implemented properly, is far better than the
+traditional method, and the security properties remain the same, since
+only denial of service is possible. The benefit is that the server may
+request additional data before the TLS Handshake protocol starts, in
+order to send the correct certificate, use the correct password file,
+or anything else!
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) See LDAP, IMAP etc.
+(1) See LDAP, IMAP etc.
 
 
 File: gnutls.info,  Node: On SSL 2 and older protocols,  Prev: How to use TLS in application protocols,  Up: Introduction to TLS
@@ -1107,19 +1126,19 @@ File: gnutls.info,  Node: On SSL 2 and older protocols,  Prev: How to use TLS in
 ================================
 
 One of the initial decisions in the GnuTLS development was to implement
-the known security protocols for the transport layer.  Initially TLS 1.0
-was implemented since it was the latest at that time, and was considered
-to be the most advanced in security properties.  Later the SSL 3.0
-protocol was implemented since it is still the only protocol supported
-by several servers and there are no serious security vulnerabilities
-known.
+the known security protocols for the transport layer.  Initially TLS
+1.0 was implemented since it was the latest at that time, and was
+considered to be the most advanced in security properties.  Later the
+SSL 3.0 protocol was implemented since it is still the only protocol
+supported by several servers and there are no serious security
+vulnerabilities known.
 
 One question that may arise is why we didn't implement SSL 2.0 in the
 library.  There are several reasons, most important being that it has
 serious security flaws, unacceptable for a modern security library.
-Other than that, this protocol is barely used by anyone these days since
-it has been deprecated since 1996.  The security problems in SSL 2.0
-include:
+Other than that, this protocol is barely used by anyone these days
+since it has been deprecated since 1996.  The security problems in SSL
+2.0 include:
 
    * Message integrity compromised.  The SSLv2 message authentication
      uses the MD5 function, and is insecure.
@@ -1128,8 +1147,8 @@ include:
      in SSLv2, which permits a man-in-the-middle attack.
 
    * Truncation attack.  SSLv2 relies on TCP FIN to close the session,
-     so the attacker can forge a TCP FIN, and the peer cannot tell if it
-     was a legitimate end of data or not.
+     so the attacker can forge a TCP FIN, and the peer cannot tell if
+     it was a legitimate end of data or not.
 
    * Weak message integrity for export ciphers.  The cryptographic keys
      in SSLv2 are used for both message authentication and encryption,
@@ -1137,9 +1156,10 @@ include:
      message authentication code uses the same weak key, which isn't
      necessary.
 
-Other protocols such as Microsoft's PCT 1 and PCT 2 were not implemented
-because they were also abandoned and deprecated by SSL 3.0 and later TLS
-1.0.
+
+Other protocols such as Microsoft's PCT 1 and PCT 2 were not
+implemented because they were also abandoned and deprecated by SSL 3.0
+and later TLS 1.0.
 
 
 File: gnutls.info,  Node: Authentication methods,  Next: Hardware security modules and abstract key types,  Prev: Introduction to TLS,  Up: Top
@@ -1148,12 +1168,12 @@ File: gnutls.info,  Node: Authentication methods,  Next: Hardware security modul
 ************************
 
 The initial key exchange of the TLS protocol performs authentication of
-the peers.  In typical scenarios the server is authenticated to the
+the peers. In typical scenarios the server is authenticated to the
 client, and optionally the client to the server.
 
 While many associate TLS with X.509 certificates and public key
 authentication, the protocol supports various authentication methods,
-including pre-shared keys, and passwords.  In this chapter a description
+including pre-shared keys, and passwords. In this chapter a description
 of the existing authentication methods is provided, as well as some
 guidance on which use-cases each method can be used at.
 
@@ -1172,58 +1192,50 @@ File: gnutls.info,  Node: Certificate authentication,  Next: More on certificate
 
 The most known authentication method of TLS are certificates.  The PKIX
 [_PKIX_] public key infrastructure is daily used by anyone using a
-browser today.  GnuTLS supports both X.509 certificates [_PKIX_] and
+browser today. GnuTLS supports both X.509 certificates [_PKIX_] and
 OpenPGP certificates using a common API.
 
 The key exchange algorithms supported by certificate authentication are
-shown in *note Table 4.1: tab:key-exchange.
+shown in *note tab:key-exchange::.
 
 Key exchange   Description
-               
-------------------------------------------------------------------
-RSA            The RSA algorithm is used to encrypt a key and
+------------------------------------------------------------------ 
+RSA             The RSA algorithm is used to encrypt a key and
                send it to the peer.  The certificate must allow
                the key to be used for encryption.
-               
-RSA_EXPORT     The RSA algorithm is used to encrypt a key and
+RSA_EXPORT      The RSA algorithm is used to encrypt a key and
                send it to the peer.  In the EXPORT algorithm,
                the server signs temporary RSA parameters of 512
                bits -- which are considered weak -- and sends
                them to the client.
-               
-DHE_RSA        The RSA algorithm is used to sign ephemeral
+DHE_RSA         The RSA algorithm is used to sign ephemeral
                Diffie-Hellman parameters which are sent to the
-               peer.  The key in the certificate must allow the
-               key to be used for signing.  Note that key
+               peer. The key in the certificate must allow the
+               key to be used for signing. Note that key
                exchange algorithms which use ephemeral
                Diffie-Hellman parameters, offer perfect forward
-               secrecy.  That means that even if the private
-               key used for signing is compromised, it cannot
-               be used to reveal past session data.
-               
-ECDHE_RSA      The RSA algorithm is used to sign ephemeral
+               secrecy. That means that even if the private key
+               used for signing is compromised, it cannot be
+               used to reveal past session data.
+ECDHE_RSA       The RSA algorithm is used to sign ephemeral
                elliptic curve Diffie-Hellman parameters which
-               are sent to the peer.  The key in the
-               certificate must allow the key to be used for
-               signing.  It also offers perfect forward
-               secrecy.  That means that even if the private
-               key used for signing is compromised, it cannot
-               be used to reveal past session data.
-               
-DHE_DSS        The DSA algorithm is used to sign ephemeral
+               are sent to the peer. The key in the certificate
+               must allow the key to be used for signing. It
+               also offers perfect forward secrecy. That means
+               that even if the private key used for signing is
+               compromised, it cannot be used to reveal past
+               session data.
+DHE_DSS         The DSA algorithm is used to sign ephemeral
                Diffie-Hellman parameters which are sent to the
-               peer.  The certificate must contain DSA
-               parameters to use this key exchange algorithm.
-               DSA is the algorithm of the Digital Signature
-               Standard (DSS).
-               
-ECDHE_ECDSA    The Elliptic curve DSA algorithm is used to sign
+               peer. The certificate must contain DSA parameters
+               to use this key exchange algorithm. DSA is the
+               algorithm of the Digital Signature Standard (DSS).
+ECDHE_ECDSA     The Elliptic curve DSA algorithm is used to sign
                ephemeral elliptic curve Diffie-Hellman
-               parameters which are sent to the peer.  The
+               parameters which are sent to the peer. The
                certificate must contain ECDSA parameters (i.e.,
                EC and marked for signing) to use this key
                exchange algorithm.
-               
 
 Table 4.1: Supported key exchange algorithms.
 
@@ -1240,17 +1252,17 @@ File: gnutls.info,  Node: X.509 certificates,  Next: OpenPGP certificates,  Up:
 4.1.1 X.509 certificates
 ------------------------
 
-The X.509 protocols rely on a hierarchical trust model.  In this trust
+The X.509 protocols rely on a hierarchical trust model. In this trust
 model Certification Authorities (CAs) are used to certify entities.
-Usually more than one certification authorities exist, and certification
-authorities may certify other authorities to issue certificates as well,
-following a hierarchical model.
+Usually more than one certification authorities exist, and
+certification authorities may certify other authorities to issue
+certificates as well, following a hierarchical model.
 
  [image src="gnutls-x509.png" ]
 
 Figure 4.1: An example of the X.509 hierarchical trust model.
 
-One needs to trust one or more CAs for his secure communications.  In
+One needs to trust one or more CAs for his secure communications. In
 that case only the certificates issued by the trusted authorities are
 acceptable.  The framework is illustrated on *note Figure 4.1: fig:x509.
 
@@ -1271,37 +1283,29 @@ File: gnutls.info,  Node: X.509 certificate structure,  Next: Importing an X.509
 
 An X.509 certificate usually contains information about the certificate
 holder, the signer, a unique serial number, expiration dates and some
-other fields [_PKIX_] as shown in *note Table 4.2: tab:x509.
+other fields [_PKIX_] as shown in *note tab:x509::.
 
 Field          Description
-               
-------------------------------------------------------------------
-version        The field that indicates the version of the
+------------------------------------------------------------------ 
+version         The field that indicates the version of the
                certificate.
-               
-serialNumber   This field holds a unique serial number per
+serialNumber    This field holds a unique serial number per
                certificate.
-               
-signature      The issuing authority's signature.
-               
-issuer         Holds the issuer's distinguished name.
-               
-validity       The activation and expiration dates.
-               
-subject        The subject's distinguished name of the
+signature       The issuing authority's signature.
+issuer          Holds the issuer's distinguished name.
+validity        The activation and expiration dates.
+subject         The subject's distinguished name of the
                certificate.
-               
-extensions     The extensions are fields only present in
+extensions      The extensions are fields only present in
                version 3 certificates.
-               
 
 Table 4.2: X.509 certificate fields.
 
 The certificate's _subject or issuer name_ is not just a single string.
 It is a Distinguished name and in the ASN.1 notation is a sequence of
-several object identifiers with their corresponding values.  Some of
+several object identifiers with their corresponding values. Some of
 available OIDs to be used in an X.509 distinguished name are defined in
-'gnutls/x509.h'.
+`gnutls/x509.h'.
 
 The _Version_ field in a certificate has values either 1 or 3 for
 version 3 certificates.  Version 1 certificates do not support the
@@ -1314,63 +1318,51 @@ considered invalid.
 
 Certificate _extensions_ are there to include information about the
 certificate's subject that did not fit in the typical certificate
-fields.  Those may be e-mail addresses, flags that indicate whether the
+fields. Those may be e-mail addresses, flags that indicate whether the
 belongs to a CA etc.  All the supported X.509 version 3 extensions are
-shown in *note Table 4.3: tab:x509-ext.
+shown in *note tab:x509-ext::.
 
 Extension              OID            Description
-                                      
---------------------------------------------------------------------
-Subject key id         2.5.29.14      An identifier of the key of
+-------------------------------------------------------------------- 
+Subject key id         2.5.29.14       An identifier of the key of
                                       the subject.
-                                      
-Authority key id       2.5.29.35      An identifier of the
-                                      authority's key used to
-                                      sign the certificate.
-                                      
-Subject alternative    2.5.29.17      Alternative names to
-name                                  subject's distinguished
-                                      name.
-                                      
-Key usage              2.5.29.15      Constraints the key's usage
+Authority key id       2.5.29.35       An identifier of the
+                                      authority's key used to sign
+                                      the certificate.
+Subject alternative    2.5.29.17       Alternative names to
+name                                  subject's distinguished name.
+Key usage              2.5.29.15       Constraints the key's usage
                                       of the certificate.
-                                      
-Extended key usage     2.5.29.37      Constraints the purpose of
+Extended key usage     2.5.29.37       Constraints the purpose of
                                       the certificate.
-                                      
-Basic constraints      2.5.29.19      Indicates whether this is a
+Basic constraints      2.5.29.19       Indicates whether this is a
                                       CA certificate or not, and
                                       specify the maximum path
                                       lengths of certificate
                                       chains.
-                                      
-CRL distribution       2.5.29.31      This extension is set by
+CRL distribution       2.5.29.31       This extension is set by
 points                                the CA, in order to inform
                                       about the issued CRLs.
-                                      
-Certificate policy     2.5.29.32      This extension is set to
+Certificate policy     2.5.29.32       This extension is set to
                                       indicate the certificate
                                       policy as object identifier
                                       and may contain a
                                       descriptive string or URL.
-                                      
-Proxy Certification    1.3.6.1.5.5.7.1.14Proxy Certificates includes
-Information                           this extension that
-                                      contains the OID of the
-                                      proxy policy language used,
-                                      and can specify limits on
-                                      the maximum lengths of
-                                      proxy chains.  Proxy
-                                      Certificates are specified
-                                      in [_RFC3820_].
-                                      
+Proxy Certification    1.3.6.1.5.5.7.1.14 Proxy Certificates includes
+Information                           this extension that contains
+                                      the OID of the proxy policy
+                                      language used, and can
+                                      specify limits on the maximum
+                                      lengths of proxy chains.
+                                      Proxy Certificates are
+                                      specified in [_RFC3820_].
 
 Table 4.3: X.509 certificate extensions.
 
 In GnuTLS the X.509 certificate structures are handled using the
-'gnutls_x509_crt_t' type and the corresponding private keys with the
-'gnutls_x509_privkey_t' type.  All the available functions for X.509
-certificate handling have their prototypes in 'gnutls/x509.h'.  An
+`gnutls_x509_crt_t' type and the corresponding private keys with the
+`gnutls_x509_privkey_t' type.  All the available functions for X.509
+certificate handling have their prototypes in `gnutls/x509.h'. An
 example program to demonstrate the X.509 parsing capabilities can be
 found in *note ex:x509-info::.
 
@@ -1384,20 +1376,23 @@ The certificate structure should be initialized using *note
 gnutls_x509_crt_init::, and a certificate structure can be imported
 using *note gnutls_x509_crt_import::.
 
-'INT *note gnutls_x509_crt_init:: (gnutls_x509_crt_t * CERT)'
-'INT *note gnutls_x509_crt_import:: (gnutls_x509_crt_t CERT, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)'
-'VOID *note gnutls_x509_crt_deinit:: (gnutls_x509_crt_t CERT)'
+`INT *note gnutls_x509_crt_init:: (gnutls_x509_crt_t * CERT)'
 
-In several functions an array of certificates is required.  To assist in
+`INT *note gnutls_x509_crt_import:: (gnutls_x509_crt_t CERT, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)'
+
+`VOID *note gnutls_x509_crt_deinit:: (gnutls_x509_crt_t CERT)'
+
+In several functions an array of certificates is required. To assist in
 initialization and import the following two functions are provided.
 
-'INT *note gnutls_x509_crt_list_import:: (gnutls_x509_crt_t * CERTS, unsigned int * CERT_MAX, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)'
-'INT *note gnutls_x509_crt_list_import2:: (gnutls_x509_crt_t ** CERTS, unsigned int * SIZE, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)'
+`INT *note gnutls_x509_crt_list_import:: (gnutls_x509_crt_t * CERTS, unsigned int * CERT_MAX, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)'
+
+`INT *note gnutls_x509_crt_list_import2:: (gnutls_x509_crt_t ** CERTS, unsigned int * SIZE, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)'
 
 In all cases after use a certificate must be deinitialized using *note
 gnutls_x509_crt_deinit::.  Note that although the functions above apply
-to 'gnutls_x509_crt_t' structure, similar functions exist for the CRL
-structure 'gnutls_x509_crl_t'.
+to `gnutls_x509_crt_t' structure, similar functions exist for the CRL
+structure `gnutls_x509_crl_t'.
 
 
 File: gnutls.info,  Node: X.509 distinguished names,  Next: X.509 public and private keys,  Prev: Importing an X.509 certificate,  Up: X.509 certificates
@@ -1405,49 +1400,57 @@ File: gnutls.info,  Node: X.509 distinguished names,  Next: X.509 public and pri
 4.1.1.3 X.509 distinguished names
 .................................
 
-The "subject" of an X.509 certificate is not described by a single name,
-but rather with a distinguished name.  This in X.509 terminology is a
-list of strings each associated an object identifier.  To make things
-simple GnuTLS provides *note gnutls_x509_crt_get_dn2:: which follows the
-rules in [_RFC4514_] and returns a single string.  Access to each string
-by individual object identifiers can be accessed using *note
-gnutls_x509_crt_get_dn_by_oid::.
+The "subject" of an X.509 certificate is not described by a single
+name, but rather with a distinguished name. This in X.509 terminology
+is a list of strings each associated an object identifier. To make
+things simple GnuTLS provides *note gnutls_x509_crt_get_dn2:: which
+follows the rules in [_RFC4514_] and returns a single string. Access to
+each string by individual object identifiers can be accessed using
+*note gnutls_x509_crt_get_dn_by_oid::.
 
  -- Function: int gnutls_x509_crt_get_dn2 (gnutls_x509_crt_t CERT,
           gnutls_datum_t * DN)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      DN: a pointer to a structure to hold the name
 
      This function will allocate buffer and copy the name of the
      Certificate.  The name will be in the form "C=xxxx,O=yyyy,CN=zzzz"
-     as described in RFC4514.  The output string will be ASCII or UTF-8
+     as described in RFC4514. The output string will be ASCII or UTF-8
      encoded, depending on the certificate data.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      error.
 
      *Since:* 3.1.10
-'INT *note gnutls_x509_crt_get_dn:: (gnutls_x509_crt_t CERT, char * BUF, size_t * BUF_SIZE)'
-'INT *note gnutls_x509_crt_get_dn_by_oid:: (gnutls_x509_crt_t CERT, const char * OID, int INDX, unsigned int RAW_FLAG, void * BUF, size_t * BUF_SIZE)'
-'INT *note gnutls_x509_crt_get_dn_oid:: (gnutls_x509_crt_t CERT, int INDX, void * OID, size_t * OID_SIZE)'
+
+`INT *note gnutls_x509_crt_get_dn:: (gnutls_x509_crt_t CERT, char * BUF, size_t * BUF_SIZE)'
+
+`INT *note gnutls_x509_crt_get_dn_by_oid:: (gnutls_x509_crt_t CERT, const char * OID, int INDX, unsigned int RAW_FLAG, void * BUF, size_t * BUF_SIZE)'
+
+`INT *note gnutls_x509_crt_get_dn_oid:: (gnutls_x509_crt_t CERT, int INDX, void * OID, size_t * OID_SIZE)'
 
 Similar functions exist to access the distinguished name of the issuer
 of the certificate.
 
-'INT *note gnutls_x509_crt_get_issuer_dn:: (gnutls_x509_crt_t CERT, char * BUF, size_t * BUF_SIZE)'
-'INT *note gnutls_x509_crt_get_issuer_dn2:: (gnutls_x509_crt_t CERT, gnutls_datum_t * DN)'
-'INT *note gnutls_x509_crt_get_issuer_dn_by_oid:: (gnutls_x509_crt_t CERT, const char * OID, int INDX, unsigned int RAW_FLAG, void * BUF, size_t * BUF_SIZE)'
-'INT *note gnutls_x509_crt_get_issuer_dn_oid:: (gnutls_x509_crt_t CERT, int INDX, void * OID, size_t * OID_SIZE)'
-'INT *note gnutls_x509_crt_get_issuer:: (gnutls_x509_crt_t CERT, gnutls_x509_dn_t * DN)'
+`INT *note gnutls_x509_crt_get_issuer_dn:: (gnutls_x509_crt_t CERT, char * BUF, size_t * BUF_SIZE)'
+
+`INT *note gnutls_x509_crt_get_issuer_dn2:: (gnutls_x509_crt_t CERT, gnutls_datum_t * DN)'
+
+`INT *note gnutls_x509_crt_get_issuer_dn_by_oid:: (gnutls_x509_crt_t CERT, const char * OID, int INDX, unsigned int RAW_FLAG, void * BUF, size_t * BUF_SIZE)'
+
+`INT *note gnutls_x509_crt_get_issuer_dn_oid:: (gnutls_x509_crt_t CERT, int INDX, void * OID, size_t * OID_SIZE)'
+
+`INT *note gnutls_x509_crt_get_issuer:: (gnutls_x509_crt_t CERT, gnutls_x509_dn_t * DN)'
 
 The more powerful *note gnutls_x509_crt_get_subject:: and *note
 gnutls_x509_dn_get_rdn_ava:: provide efficient but low-level access to
 the contents of the distinguished name structure.
 
-'INT *note gnutls_x509_crt_get_subject:: (gnutls_x509_crt_t CERT, gnutls_x509_dn_t * DN)'
-'INT *note gnutls_x509_crt_get_issuer:: (gnutls_x509_crt_t CERT, gnutls_x509_dn_t * DN)'
+`INT *note gnutls_x509_crt_get_subject:: (gnutls_x509_crt_t CERT, gnutls_x509_dn_t * DN)'
+
+`INT *note gnutls_x509_crt_get_issuer:: (gnutls_x509_crt_t CERT, gnutls_x509_dn_t * DN)'
 
  -- Function: int gnutls_x509_dn_get_rdn_ava (gnutls_x509_dn_t DN, int
           IRDN, int IAVA, gnutls_x509_ava_st * AVA)
@@ -1459,21 +1462,21 @@ the contents of the distinguished name structure.
 
      AVA: Pointer to structure which will hold output information.
 
-     Get pointers to data within the DN. The format of the 'ava'
+     Get pointers to data within the DN. The format of the  `ava'
      structure is shown below.
 
      struct gnutls_x509_ava_st { gnutls_datum_t oid; gnutls_datum_t
      value; unsigned long value_tag; };
 
      The X.509 distinguished name is a sequence of sequences of strings
-     and this is what the 'irdn' and 'iava' indexes model.
+     and this is what the  `irdn' and  `iava' indexes model.
 
-     Note that 'ava' will contain pointers into the 'dn' structure which
-     in turns points to the original certificate.  Thus you should not
-     modify any data or deallocate any of those.
+     Note that  `ava' will contain pointers into the  `dn' structure
+     which in turns points to the original certificate. Thus you should
+     not modify any data or deallocate any of those.
 
      This is a low-level function that requires the caller to do the
-     value conversions when necessary (e.g.  from UCS-2).
+     value conversions when necessary (e.g. from UCS-2).
 
      *Returns:* Returns 0 on success, or an error code.
 
@@ -1484,10 +1487,10 @@ File: gnutls.info,  Node: X.509 public and private keys,  Next: Verifying X.509
 .........................................
 
 Each X.509 certificate contains a public key that corresponds to a
-private key.  To get a unique identifier of the public key the *note
-gnutls_x509_crt_get_key_id:: function is provided.  To export the public
+private key. To get a unique identifier of the public key the *note
+gnutls_x509_crt_get_key_id:: function is provided. To export the public
 key or its parameters you may need to convert the X.509 structure to a
-'gnutls_pubkey_t'.  See *note Abstract public keys:: for more
+`gnutls_pubkey_t'. See *note Abstract public keys:: for more
 information.
 
  -- Function: int gnutls_x509_crt_get_key_id (gnutls_x509_crt_t CRT,
@@ -1503,7 +1506,7 @@ information.
      replaced by the actual size of parameters)
 
      This function will return a unique ID that depends on the public
-     key parameters.  This ID can be used in checking whether a
+     key parameters. This ID can be used in checking whether a
      certificate corresponds to the given private key.
 
      If the buffer provided is not long enough to hold the output, then
@@ -1517,11 +1520,15 @@ information.
 The private key parameters may be directly accessed by using one of the
 following functions.
 
-'INT *note gnutls_x509_privkey_get_pk_algorithm2:: (gnutls_x509_privkey_t KEY, unsigned int * BITS)'
-'INT *note gnutls_x509_privkey_export_rsa_raw2:: (gnutls_x509_privkey_t KEY, gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D, gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U, gnutls_datum_t * E1, gnutls_datum_t * E2)'
-'INT *note gnutls_x509_privkey_export_ecc_raw:: (gnutls_x509_privkey_t KEY, gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X, gnutls_datum_t * Y, gnutls_datum_t* K)'
-'INT *note gnutls_x509_privkey_export_dsa_raw:: (gnutls_x509_privkey_t KEY, gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y, gnutls_datum_t * X)'
-'INT *note gnutls_x509_privkey_get_key_id:: (gnutls_x509_privkey_t KEY, unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
+`INT *note gnutls_x509_privkey_get_pk_algorithm2:: (gnutls_x509_privkey_t KEY, unsigned int * BITS)'
+
+`INT *note gnutls_x509_privkey_export_rsa_raw2:: (gnutls_x509_privkey_t KEY, gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D, gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U, gnutls_datum_t * E1, gnutls_datum_t * E2)'
+
+`INT *note gnutls_x509_privkey_export_ecc_raw:: (gnutls_x509_privkey_t KEY, gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X, gnutls_datum_t * Y, gnutls_datum_t* K)'
+
+`INT *note gnutls_x509_privkey_export_dsa_raw:: (gnutls_x509_privkey_t KEY, gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y, gnutls_datum_t * X)'
+
+`INT *note gnutls_x509_privkey_get_key_id:: (gnutls_x509_privkey_t KEY, unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
 
 
 File: gnutls.info,  Node: Verifying X.509 certificate paths,  Next: Verifying a certificate in the context of TLS session,  Prev: X.509 public and private keys,  Up: X.509 certificates
@@ -1529,7 +1536,7 @@ File: gnutls.info,  Node: Verifying X.509 certificate paths,  Next: Verifying a
 4.1.1.5 Verifying X.509 certificate paths
 .........................................
 
-Verifying certificate paths is important in X.509 authentication.  For
+Verifying certificate paths is important in X.509 authentication. For
 this purpose the following functions are provided.
 
  -- Function: int gnutls_x509_trust_list_add_cas
@@ -1544,7 +1551,7 @@ this purpose the following functions are provided.
      FLAGS: should be 0.
 
      This function will add the given certificate authorities to the
-     trusted list.  The list of CAs must not be deinitialized during
+     trusted list. The list of CAs must not be deinitialized during
      this structure's lifetime.
 
      *Returns:* The number of added elements is returned.
@@ -1565,9 +1572,9 @@ this purpose the following functions are provided.
      FLAGS: should be 0.
 
      This function will add the given certificate to the trusted list
-     and associate it with a name.  The certificate will not be be used
-     for verification with 'gnutls_x509_trust_list_verify_crt()' but
-     only with 'gnutls_x509_trust_list_verify_named_crt()' .
+     and associate it with a name. The certificate will not be be used
+     for verification with `gnutls_x509_trust_list_verify_crt()' but
+     only with `gnutls_x509_trust_list_verify_named_crt()' .
 
      In principle this function can be used to set individual "server"
      certificates that are trusted by the user for that specific server
@@ -1576,7 +1583,7 @@ this purpose the following functions are provided.
      The certificate must not be deinitialized during the lifetime of
      the trusted list.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -1598,11 +1605,11 @@ this purpose the following functions are provided.
      specifies GNUTLS_TL_VERIFY_CRL
 
      This function will add the given certificate revocation lists to
-     the trusted list.  The list of CRLs must not be deinitialized
+     the trusted list. The list of CRLs must not be deinitialized
      during this structure's lifetime.
 
      This function must be called after
-     'gnutls_x509_trust_list_add_cas()' to allow verifying the CRLs for
+     `gnutls_x509_trust_list_add_cas()' to allow verifying the CRLs for
      validity.
 
      *Returns:* The number of added elements is returned.
@@ -1610,31 +1617,32 @@ this purpose the following functions are provided.
      *Since:* 3.0
 
  -- Function: int gnutls_x509_trust_list_verify_crt
-          (gnutls_x509_trust_list_t LIST, gnutls_x509_crt_t * CERT_LIST,
-          unsigned int CERT_LIST_SIZE, unsigned int FLAGS, unsigned int
-          * VERIFY, gnutls_verify_output_function FUNC)
+          (gnutls_x509_trust_list_t LIST, gnutls_x509_crt_t *
+          CERT_LIST, unsigned int CERT_LIST_SIZE, unsigned int FLAGS,
+          unsigned int * VERIFY, gnutls_verify_output_function FUNC)
      LIST: The structure of the list
 
      CERT_LIST: is the certificate list to be verified
 
      CERT_LIST_SIZE: is the certificate list size
 
-     FLAGS: Flags that may be used to change the verification algorithm.
-     Use OR of the gnutls_certificate_verify_flags enumerations.
+     FLAGS: Flags that may be used to change the verification
+     algorithm. Use OR of the gnutls_certificate_verify_flags
+     enumerations.
 
      VERIFY: will hold the certificate verification output.
 
-     FUNC: If non-null will be called on each chain element verification
-     with the output.
+     FUNC: If non-null will be called on each chain element
+     verification with the output.
 
      This function will try to verify the given certificate and return
-     its status.  The 'verify' parameter will hold an OR'ed sequence of
-     'gnutls_certificate_status_t' flags.
+     its status. The  `verify' parameter will hold an OR'ed sequence of
+     `gnutls_certificate_status_t'  flags.
 
      *Limitation:* Pathlen constraints or key usage flags are not
      consulted.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -1651,22 +1659,23 @@ this purpose the following functions are provided.
 
      NAME_SIZE: is the certificate's name size
 
-     FLAGS: Flags that may be used to change the verification algorithm.
-     Use OR of the gnutls_certificate_verify_flags enumerations.
+     FLAGS: Flags that may be used to change the verification
+     algorithm. Use OR of the gnutls_certificate_verify_flags
+     enumerations.
 
      VERIFY: will hold the certificate verification output.
 
-     FUNC: If non-null will be called on each chain element verification
-     with the output.
+     FUNC: If non-null will be called on each chain element
+     verification with the output.
 
      This function will try to find a certificate that is associated
      with the provided name -see
-     'gnutls_x509_trust_list_add_named_crt()' .  If a match is found the
-     certificate is considered valid.  In addition to that this function
-     will also check CRLs.  The 'verify' parameter will hold an OR'ed
-     sequence of 'gnutls_certificate_status_t' flags.
+     `gnutls_x509_trust_list_add_named_crt()' . If a match is found the
+     certificate is considered valid. In addition to that this function
+     will also check CRLs. The  `verify' parameter will hold an OR'ed
+     sequence of `gnutls_certificate_status_t'  flags.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -1689,7 +1698,7 @@ this purpose the following functions are provided.
      GNUTLS_TL_VERIFY_CRL
 
      This function will add the given certificate authorities to the
-     trusted list.  pkcs11 URLs are also accepted, instead of files, by
+     trusted list. pkcs11 URLs are also accepted, instead of files, by
      this function.
 
      *Returns:* The number of added elements is returned.
@@ -1731,64 +1740,77 @@ this purpose the following functions are provided.
      GNUTLS_TL_VERIFY_CRL
 
      This function adds the system's default trusted certificate
-     authorities to the trusted list.  Note that on unsupported system
-     this function returns 'GNUTLS_E_UNIMPLEMENTED_FEATURE' .
+     authorities to the trusted list. Note that on unsupported system
+     this function returns `GNUTLS_E_UNIMPLEMENTED_FEATURE' .
 
-     *Returns:* The number of added elements or a negative error code on
-     error.
+     *Returns:* The number of added elements or a negative error code
+     on error.
 
      *Since:* 3.1
 
 The verification function will verify a given certificate chain against
 a list of certificate authorities and certificate revocation lists, and
-output a bit-wise OR of elements of the 'gnutls_certificate_status_t'
-enumeration shown in *note Figure 4.2: gnutls_certificate_status_t.  The
-'GNUTLS_CERT_INVALID' flag is always set on a verification error and
+output a bit-wise OR of elements of the `gnutls_certificate_status_t'
+enumeration shown in *note gnutls_certificate_status_t::. The
+`GNUTLS_CERT_INVALID' flag is always set on a verification error and
 more detailed flags will also be set when appropriate.
 
-'GNUTLS_CERT_INVALID'
+`GNUTLS_CERT_INVALID'
      The certificate is not signed by one of the known authorities or
      the signature is invalid (deprecated by the flags
-     'GNUTLS_CERT_SIGNATURE_FAILURE' and 'GNUTLS_CERT_SIGNER_NOT_FOUND'
-     ).
-'GNUTLS_CERT_REVOKED'
-     Certificate is revoked by its authority.  In X.509 this will be set
-     only if CRLs are checked.
-'GNUTLS_CERT_SIGNER_NOT_FOUND'
+     `GNUTLS_CERT_SIGNATURE_FAILURE'  and
+     `GNUTLS_CERT_SIGNER_NOT_FOUND' ).
+
+`GNUTLS_CERT_REVOKED'
+     Certificate is revoked by its authority.  In X.509 this will be
+     set only if CRLs are checked.
+
+`GNUTLS_CERT_SIGNER_NOT_FOUND'
      The certificate's issuer is not known.  This is the case if the
      issuer is not included in the trusted certificate list.
-'GNUTLS_CERT_SIGNER_NOT_CA'
+
+`GNUTLS_CERT_SIGNER_NOT_CA'
      The certificate's signer was not a CA. This may happen if this was
      a version 1 certificate, which is common with some CAs, or a
      version 3 certificate without the basic constrains extension.
-'GNUTLS_CERT_INSECURE_ALGORITHM'
+
+`GNUTLS_CERT_INSECURE_ALGORITHM'
      The certificate was signed using an insecure algorithm such as MD2
-     or MD5.  These algorithms have been broken and should not be
+     or MD5. These algorithms have been broken and should not be
      trusted.
-'GNUTLS_CERT_NOT_ACTIVATED'
+
+`GNUTLS_CERT_NOT_ACTIVATED'
      The certificate is not yet activated.
-'GNUTLS_CERT_EXPIRED'
+
+`GNUTLS_CERT_EXPIRED'
      The certificate has expired.
-'GNUTLS_CERT_SIGNATURE_FAILURE'
+
+`GNUTLS_CERT_SIGNATURE_FAILURE'
      The signature verification failed.
-'GNUTLS_CERT_REVOCATION_DATA_SUPERSEDED'
+
+`GNUTLS_CERT_REVOCATION_DATA_SUPERSEDED'
      The revocation data are old and have been superseded.
-'GNUTLS_CERT_UNEXPECTED_OWNER'
+
+`GNUTLS_CERT_UNEXPECTED_OWNER'
      The owner is not the expected one.
-'GNUTLS_CERT_REVOCATION_DATA_ISSUED_IN_FUTURE'
+
+`GNUTLS_CERT_REVOCATION_DATA_ISSUED_IN_FUTURE'
      The revocation data have a future issue date.
-'GNUTLS_CERT_SIGNER_CONSTRAINTS_FAILURE'
+
+`GNUTLS_CERT_SIGNER_CONSTRAINTS_FAILURE'
      The certificate's signer constraints were violated.
-'GNUTLS_CERT_MISMATCH'
+
+`GNUTLS_CERT_MISMATCH'
      The certificate presented isn't the expected one (TOFU)
 
-Figure 4.2: The 'gnutls_certificate_status_t' enumeration.
+Figure 4.2: The `gnutls_certificate_status_t' enumeration.
 
 An example of certificate verification is shown in *note ex:verify2::.
-It is also possible to have a set of certificates that are trusted for a
-particular server but not to authorize other certificates.  This purpose
-is served by the functions *note gnutls_x509_trust_list_add_named_crt::
-and *note gnutls_x509_trust_list_verify_named_crt::.
+It is also possible to have a set of certificates that are trusted for
+a particular server but not to authorize other certificates.  This
+purpose is served by the functions *note
+gnutls_x509_trust_list_add_named_crt:: and *note
+gnutls_x509_trust_list_verify_named_crt::.
 
 
 File: gnutls.info,  Node: Verifying a certificate in the context of TLS session,  Prev: Verifying X.509 certificate paths,  Up: X.509 certificates
@@ -1798,64 +1820,77 @@ File: gnutls.info,  Node: Verifying a certificate in the context of TLS session,
 
 When operating in the context of a TLS session, the trusted certificate
 authority list may also be set using:
-'INT *note gnutls_certificate_set_x509_trust_file:: (gnutls_certificate_credentials_t CRED, const char * CAFILE, gnutls_x509_crt_fmt_t TYPE)'
-'INT *note gnutls_certificate_set_x509_crl_file:: (gnutls_certificate_credentials_t RES, const char * CRLFILE, gnutls_x509_crt_fmt_t TYPE)'
-'INT *note gnutls_certificate_set_x509_system_trust:: (gnutls_certificate_credentials_t CRED)'
+`INT *note gnutls_certificate_set_x509_trust_file:: (gnutls_certificate_credentials_t CRED, const char * CAFILE, gnutls_x509_crt_fmt_t TYPE)'
+
+`INT *note gnutls_certificate_set_x509_crl_file:: (gnutls_certificate_credentials_t RES, const char * CRLFILE, gnutls_x509_crt_fmt_t TYPE)'
+
+`INT *note gnutls_certificate_set_x509_system_trust:: (gnutls_certificate_credentials_t CRED)'
 
 Then it is not required to setup a trusted list as above.  The function
 *note gnutls_certificate_verify_peers3:: may then be used to verify the
-peer's certificate chain and identity.  The flags are set similarly to
+peer's certificate chain and identity. The flags are set similarly to
 the verification functions in the previous section.
 
 There is also the possibility to pass some input to the verification
-functions in the form of flags.  For *note
+functions in the form of flags. For *note
 gnutls_x509_trust_list_verify_crt:: the flags are passed
-straightforward, but *note gnutls_certificate_verify_peers3:: depends on
-the flags set by calling *note gnutls_certificate_set_verify_flags::.
-All the available flags are part of the enumeration
-'gnutls_certificate_verify_flags' shown in *note Figure 4.3:
-gnutls_certificate_verify_flags.
-
-'GNUTLS_VERIFY_DISABLE_CA_SIGN'
-     If set a signer does not have to be a certificate authority.  This
+straightforward, but *note gnutls_certificate_verify_peers3:: depends
+on the flags set by calling *note
+gnutls_certificate_set_verify_flags::.  All the available flags are
+part of the enumeration `gnutls_certificate_verify_flags' shown in
+*note gnutls_certificate_verify_flags::.
+
+`GNUTLS_VERIFY_DISABLE_CA_SIGN'
+     If set a signer does not have to be a certificate authority. This
      flag should normaly be disabled, unless you know what this means.
-'GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT'
-     Allow trusted CA certificates with version 1.  This is safer than
-     'GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT' , and should be used
-     instead.  That way only signers in your trusted list will be
-     allowed to have certificates of version 1.  This is the default.
-'GNUTLS_VERIFY_DO_NOT_ALLOW_SAME'
+
+`GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT'
+     Allow trusted CA certificates with version 1. This is safer than
+     `GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT' , and should be used
+     instead. That way only signers in your trusted list will be
+     allowed to have certificates of version 1. This is the default.
+
+`GNUTLS_VERIFY_DO_NOT_ALLOW_SAME'
      If a certificate is not signed by anyone trusted but exists in the
      trusted CA list do not treat it as trusted.
-'GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT'
+
+`GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT'
      Allow CA certificates that have version 1 (both root and
-     intermediate).  This might be dangerous since those haven't the
-     basicConstraints extension.  Must be used in combination with
-     'GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT' .
-'GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2'
+     intermediate). This might be dangerous since those haven't the
+     basicConstraints extension. Must be used in combination with
+     `GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT' .
+
+`GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2'
      Allow certificates to be signed using the broken MD2 algorithm.
-'GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5'
+
+`GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5'
      Allow certificates to be signed using the broken MD5 algorithm.
-'GNUTLS_VERIFY_DISABLE_TIME_CHECKS'
+
+`GNUTLS_VERIFY_DISABLE_TIME_CHECKS'
      Disable checking of activation and expiration validity periods of
-     certificate chains.  Don't set this unless you understand the
+     certificate chains. Don't set this unless you understand the
      security implications.
-'GNUTLS_VERIFY_DISABLE_TRUSTED_TIME_CHECKS'
-     If set a signer in the trusted list is never checked for expiration
-     or activation.
-'GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT'
+
+`GNUTLS_VERIFY_DISABLE_TRUSTED_TIME_CHECKS'
+     If set a signer in the trusted list is never checked for
+     expiration or activation.
+
+`GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT'
      Do not allow trusted CA certificates that have version 1.  This
      option is to be used to deprecate all certificates of version 1.
-'GNUTLS_VERIFY_DISABLE_CRL_CHECKS'
-     Disable checking for validity using certificate revocation lists or
-     the available OCSP data.
-'GNUTLS_VERIFY_ALLOW_UNSORTED_CHAIN'
+
+`GNUTLS_VERIFY_DISABLE_CRL_CHECKS'
+     Disable checking for validity using certificate revocation lists
+     or the available OCSP data.
+
+`GNUTLS_VERIFY_ALLOW_UNSORTED_CHAIN'
      A certificate chain is tolerated if unsorted (the case with many
-     TLS servers out there).  This is the default since GnuTLS 3.1.4.
-'GNUTLS_VERIFY_DO_NOT_ALLOW_UNSORTED_CHAIN'
+     TLS servers out there). This is the default since GnuTLS 3.1.4.
+
+`GNUTLS_VERIFY_DO_NOT_ALLOW_UNSORTED_CHAIN'
      Do not tolerate an unsorted certificate chain.
 
-Figure 4.3: The 'gnutls_certificate_verify_flags' enumeration.
+Figure 4.3: The `gnutls_certificate_verify_flags' enumeration.
 
 
 File: gnutls.info,  Node: OpenPGP certificates,  Next: Advanced certificate verification,  Prev: X.509 certificates,  Up: Certificate authentication
@@ -1864,52 +1899,45 @@ File: gnutls.info,  Node: OpenPGP certificates,  Next: Advanced certificate veri
 --------------------------
 
 The OpenPGP key authentication relies on a distributed trust model,
-called the "web of trust".  The "web of trust" uses a decentralized
+called the "web of trust". The "web of trust" uses a decentralized
 system of trusted introducers, which are the same as a CA. OpenPGP
-allows anyone to sign anyone else's public key.  When Alice signs Bob's
-key, she is introducing Bob's key to anyone who trusts Alice.  If
+allows anyone to sign anyone else's public key. When Alice signs Bob's
+key, she is introducing Bob's key to anyone who trusts Alice. If
 someone trusts Alice to introduce keys, then Alice is a trusted
-introducer in the mind of that observer.  For example in *note Figure
-4.4: fig:openpgp, David trusts Alice to be an introducer and Alice
-signed Bob's key thus Dave trusts Bob's key to be the real one.
+introducer in the mind of that observer.  For example in *note
+fig:openpgp::, David trusts Alice to be an introducer and Alice signed
+Bob's key thus Dave trusts Bob's key to be the real one.
 
  [image src="gnutls-pgp.png" ]
 
 Figure 4.4: An example of the OpenPGP trust model.
 
-There are some key points that are important in that model.  In the
+There are some key points that are important in that model. In the
 example Alice has to sign Bob's key, only if she is sure that the key
-belongs to Bob.  Otherwise she may also make Dave falsely believe that
-this is Bob's key.  Dave has also the responsibility to know who to
+belongs to Bob. Otherwise she may also make Dave falsely believe that
+this is Bob's key. Dave has also the responsibility to know who to
 trust.  This model is similar to real life relations.
 
-Just see how Charlie behaves in the previous example.  Although he has
+Just see how Charlie behaves in the previous example. Although he has
 signed Bob's key - because he knows, somehow, that it belongs to Bob -
-he does not trust Bob to be an introducer.  Charlie decided to trust
-only Kevin, for some reason.  A reason could be that Bob is lazy enough,
-and signs other people's keys without being sure that they belong to the
-actual owner.
+he does not trust Bob to be an introducer. Charlie decided to trust
+only Kevin, for some reason. A reason could be that Bob is lazy enough,
+and signs other people's keys without being sure that they belong to
+the actual owner.
 
 Field          Description
-               
-------------------------------------------------------------------
-version        The field that indicates the version of the
+------------------------------------------------------------------ 
+version         The field that indicates the version of the
                OpenPGP structure.
-               
-user ID        An RFC 2822 string that identifies the owner of
-               the key.  There may be multiple user identifiers
+user ID         An RFC 2822 string that identifies the owner of
+               the key. There may be multiple user identifiers
                in a key.
-               
-public key     The main public key of the certificate.
-               
-expiration     The expiration time of the main public key.
-               
-public         An additional public key of the certificate.
-subkey         There may be multiple subkeys in a certificate.
-               
-public         The expiration time of the subkey.
-subkey         
-expiration
+public key      The main public key of the certificate.
+expiration      The expiration time of the main public key.
+public subkey   An additional public key of the certificate.
+               There may be multiple subkeys in a certificate.
+public subkey   The expiration time of the subkey.
+expiration     
 
 Table 4.4: OpenPGP certificate fields.
 
@@ -1917,41 +1945,36 @@ Table 4.4: OpenPGP certificate fields.
 .....................................
 
 In GnuTLS the OpenPGP certificate structures [_RFC2440_] are handled
-using the 'gnutls_openpgp_crt_t' type.  A typical certificate contains
+using the `gnutls_openpgp_crt_t' type.  A typical certificate contains
 the user ID, which is an RFC 2822 mail and name address, a public key,
 possibly a number of additional public keys (called subkeys), and a
-number of signatures.  The various fields are shown in *note Table 4.4:
+number of signatures. The various fields are shown in *note Table 4.4:
 tab:openpgp-certificate.
 
 The additional subkeys may provide key for various different purposes,
-e.g.  one key to encrypt mail, and another to sign a TLS key exchange.
-Each subkey is identified by a unique key ID. The keys that are to be
+e.g. one key to encrypt mail, and another to sign a TLS key exchange.
+Each subkey is identified by a unique key ID.  The keys that are to be
 used in a TLS key exchange that requires signatures are called
 authentication keys in the OpenPGP jargon.  The mapping of TLS key
-exchange methods to public keys is shown in *note Table 4.5:
-tab:openpgp-key-exchange.
+exchange methods to public keys is shown in *note
+tab:openpgp-key-exchange::.
 
 Key exchange   Public key requirements
-               
-------------------------------------------------------------------
-RSA            An RSA public key that allows encryption.
-               
-DHE_RSA        An RSA public key that is marked for
+------------------------------------------------------------------ 
+RSA             An RSA public key that allows encryption.
+DHE_RSA         An RSA public key that is marked for
                authentication.
-               
-ECDHE_RSA      An RSA public key that is marked for
+ECDHE_RSA       An RSA public key that is marked for
                authentication.
-               
-DHE_DSS        A DSA public key that is marked for
+DHE_DSS         A DSA public key that is marked for
                authentication.
-               
 
 Table 4.5: The types of (sub)keys required for the various TLS key
 exchange methods.
 
 The corresponding private keys are stored in the
-'gnutls_openpgp_privkey_t' type.  All the prototypes for the key
-handling functions can be found in 'gnutls/openpgp.h'.
+`gnutls_openpgp_privkey_t' type. All the prototypes for the key
+handling functions can be found in `gnutls/openpgp.h'.
 
 4.1.2.2 Verifying an OpenPGP certificate
 ........................................
@@ -1961,14 +1984,14 @@ simple ones, and do not use the features of the "web of trust".  For
 that reason, if the verification needs are complex, the assistance of
 external tools like GnuPG and GPGME(1) is recommended.
 
-In GnuTLS there is a verification function for OpenPGP certificates, the
-*note gnutls_openpgp_crt_verify_ring::.  This checks an OpenPGP key
-against a given set of public keys (keyring) and returns the key status.
-The key verification status is the same as in X.509 certificates,
-although the meaning and interpretation are different.  For example an
-OpenPGP key may be valid, if the self signature is ok, even if no
-signers were found.  The meaning of verification status flags is the
-same as in the X.509 certificates (see *note Figure 4.3:
+In GnuTLS there is a verification function for OpenPGP certificates,
+the *note gnutls_openpgp_crt_verify_ring::.  This checks an OpenPGP key
+against a given set of public keys (keyring) and returns the key
+status. The key verification status is the same as in X.509
+certificates, although the meaning and interpretation are different.
+For example an OpenPGP key may be valid, if the self signature is ok,
+even if no signers were found.  The meaning of verification status
+flags is the same as in the X.509 certificates (see *note Figure 4.3:
 gnutls_certificate_verify_flags.).
 
  -- Function: int gnutls_openpgp_crt_verify_ring (gnutls_openpgp_crt_t
@@ -1985,15 +2008,15 @@ gnutls_certificate_verify_flags.).
      Verify all signatures in the key, using the given set of keys
      (keyring).
 
-     The key verification output will be put in 'verify' and will be one
-     or more of the 'gnutls_certificate_status_t' enumerated elements
-     bitwise or'd.
+     The key verification output will be put in  `verify' and will be
+     one or more of the `gnutls_certificate_status_t'  enumerated
+     elements bitwise or'd.
 
      Note that this function does not verify using any "web of trust".
      You may use GnuPG for that purpose, or any other external PGP
      application.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
  -- Function: int gnutls_openpgp_crt_verify_self (gnutls_openpgp_crt_t
           KEY, unsigned int FLAGS, unsigned int * VERIFY)
@@ -2004,18 +2027,18 @@ gnutls_certificate_verify_flags.).
      VERIFY: will hold the key verification output.
 
      Verifies the self signature in the key.  The key verification
-     output will be put in 'verify' and will be one or more of the
+     output will be put in  `verify' and will be one or more of the
      gnutls_certificate_status_t enumerated elements bitwise or'd.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 4.1.2.3 Verifying a certificate in the context of a TLS session
 ...............................................................
 
 Similarly with X.509 certificates, one needs to specify the OpenPGP
-keyring file in the credentials structure.  The certificates in this
-file will be used by *note gnutls_certificate_verify_peers3:: to verify
-the signatures in the certificate sent by the peer.
+keyring file in the credentials structure. The certificates in this
+file will be  used by *note gnutls_certificate_verify_peers3:: to
+verify the signatures in the certificate sent by the peer.
 
  -- Function: int gnutls_certificate_set_openpgp_keyring_file
           (gnutls_certificate_credentials_t C, const char * FILE,
@@ -2027,16 +2050,16 @@ the signatures in the certificate sent by the peer.
      FORMAT: format of keyring.
 
      The function is used to set keyrings that will be used internally
-     by various OpenPGP functions.  For example to find a key when it is
-     needed for an operations.  The keyring will also be used at the
+     by various OpenPGP functions. For example to find a key when it is
+     needed for an operations. The keyring will also be used at the
      verification functions.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) <http://www.gnupg.org/related_software/gpgme/>
+(1) `http://www.gnupg.org/related_software/gpgme/'
 
 
 File: gnutls.info,  Node: Advanced certificate verification,  Next: Digital signatures,  Prev: OpenPGP certificates,  Up: Certificate authentication
@@ -2048,10 +2071,10 @@ The verification of X.509 certificates in the HTTPS and other Internet
 protocols is typically done by loading a trusted list of commercial
 Certificate Authorities (see *note
 gnutls_certificate_set_x509_system_trust::), and using them as trusted
-anchors.  However, there are several examples (eg.  the Diginotar
-incident) where one of these authorities was compromised.  This risk can
+anchors.  However, there are several examples (eg. the Diginotar
+incident) where one of these authorities was compromised. This risk can
 be mitigated by using in addition to CA certificate verification, other
-verification methods.  In this section we list the available in GnuTLS
+verification methods. In this section we list the available in GnuTLS
 methods.
 
 * Menu:
@@ -2071,8 +2094,8 @@ public key of the peer is not verified, or verified in an out-of-bound
 way, but subsequent connections to the same peer require the public key
 to remain the same.  Such a system in combination with the typical CA
 verification of a certificate, and OCSP revocation checks, can help to
-provide multiple factor verification, where a single point of failure is
-not enough to compromise the system.  For example a server compromise
+provide multiple factor verification, where a single point of failure
+is not enough to compromise the system. For example a server compromise
 may be detected using OCSP, and a CA compromise can be detected using
 the trust on first use method.  Such a hybrid system with X.509 and
 trust on first use authentication is shown in *note Simple client
@@ -2088,25 +2111,25 @@ File: gnutls.info,  Node: Verifying a certificate using DANE,  Prev: Verifying a
 ...................................................
 
 The DANE protocol is a protocol that can be used to verify TLS
-certificates using the DNS (or better DNSSEC) protocols.  The DNS
+certificates using the DNS (or better DNSSEC) protocols. The DNS
 security extensions (DNSSEC) provide an alternative public key
-infrastructure to the commercial CAs that are typically used to sign TLS
-certificates.  The DANE protocol takes advantage of the DNSSEC
-infrastructure to verify TLS certificates.  This can be in addition to
+infrastructure to the commercial CAs that are typically used to sign
+TLS certificates. The DANE protocol takes advantage of the DNSSEC
+infrastructure to verify TLS certificates. This can be in addition to
 the verification by CA infrastructure or may even replace it where
-DNSSEC is fully deployed.  Note however, that DNSSEC deployment is
+DNSSEC is fully deployed. Note however, that DNSSEC deployment is
 fairly new and it would be better to use it as an additional
 verification method rather than the only one.
 
-The DANE functionality is provided by the 'libgnutls-dane' library that
+The DANE functionality is provided by the `libgnutls-dane' library that
 is shipped with GnuTLS and the function prototypes are in
-'gnutls/dane.h'.  See *note Certificate verification:: for information
+`gnutls/dane.h'.  See *note Certificate verification:: for information
 on how to use the library.
 
 Note however, that the DANE RFC mandates the verification methods one
 should use in addition to the validation via DNSSEC TLSA entries.
 GnuTLS doesn't follow that RFC requirement, and the term DANE
-verification in this manual refers to the TLSA entry verification.  In
+verification in this manual refers to the TLSA entry verification. In
 GnuTLS any other verification methods can be used (e.g., PKIX or TOFU)
 on top of DANE.
 
@@ -2123,12 +2146,12 @@ the algorithms used.
 Digital signatures work by using somebody's secret key to sign some
 arbitrary data.  Then anybody else could use the public key of that
 person to verify the signature.  Since the data may be arbitrary it is
-not suitable input to a cryptographic digital signature algorithm.  For
+not suitable input to a cryptographic digital signature algorithm. For
 this reason and also for performance cryptographic hash algorithms are
-used to preprocess the input to the signature algorithm.  This works as
+used to preprocess the input to the signature algorithm. This works as
 long as it is difficult enough to generate two different messages with
-the same hash algorithm output.  In that case the same signature could
-be used as a proof for both messages.  Nobody wants to sign an innocent
+the same hash algorithm output. In that case the same signature could
+be used as a proof for both messages. Nobody wants to sign an innocent
 message of donating 1 euro to Greenpeace and find out that he donated
 1.000.000 euros to Bad Inc.
 
@@ -2146,22 +2169,22 @@ requirements must hold:
      calculate random x and x' such H(x')=H(x).
 
 The last two requirements in the list are the most important in digital
-signatures.  These protect against somebody who would like to generate
-two messages with the same hash output.  When an algorithm is considered
+signatures. These protect against somebody who would like to generate
+two messages with the same hash output. When an algorithm is considered
 broken usually it means that the Collision resistance of the algorithm
-is less than brute force.  Using the birthday paradox the brute force
-attack takes 2^{((hash size) / 2)} operations.  Today colliding
+is less than brute force. Using the birthday paradox the brute force
+attack takes 2^((hash size) / 2) operations. Today colliding
 certificates using the MD5 hash algorithm have been generated as shown
 in [_WEGER_].
 
 There has been cryptographic results for the SHA-1 hash algorithms as
 well, although they are not yet critical.  Before 2004, MD5 had a
-presumed collision strength of 2^{64}, but it has been showed to have a
-collision strength well under 2^{50}.  As of November 2005, it is
-believed that SHA-1's collision strength is around 2^{63}.  We consider
+presumed collision strength of 2^64, but it has been showed to have a
+collision strength well under 2^50.  As of November 2005, it is
+believed that SHA-1's collision strength is around 2^63.  We consider
 this sufficiently hard so that we still support SHA-1.  We anticipate
 that SHA-256/386/512 will be used in publicly-distributed certificates
-in the future.  When 2^{63} can be considered too weak compared to the
+in the future.  When 2^63 can be considered too weak compared to the
 computer power available sometime in the future, SHA-1 will be disabled
 as well.  The collision attacks on SHA-1 may also get better, given the
 new interest in tools for creating them.
@@ -2170,37 +2193,38 @@ new interest in tools for creating them.
 .............................................
 
 If you connect to a server and use GnuTLS' functions to verify the
-certificate chain, and get a 'GNUTLS_CERT_INSECURE_ALGORITHM' validation
-error (see *note Verifying X.509 certificate paths::), it means that
-somewhere in the certificate chain there is a certificate signed using
-'RSA-MD2' or 'RSA-MD5'.  These two digital signature algorithms are
-considered broken, so GnuTLS fails verifying the certificate.  In some
-situations, it may be useful to be able to verify the certificate chain
-anyway, assuming an attacker did not utilize the fact that these
-signatures algorithms are broken.  This section will give help on how to
-achieve that.
+certificate chain, and get a `GNUTLS_CERT_INSECURE_ALGORITHM'
+validation error (see *note Verifying X.509 certificate paths::), it
+means that somewhere in the certificate chain there is a certificate
+signed using `RSA-MD2' or `RSA-MD5'.  These two digital signature
+algorithms are considered broken, so GnuTLS fails verifying the
+certificate.  In some situations, it may be useful to be able to verify
+the certificate chain anyway, assuming an attacker did not utilize the
+fact that these signatures algorithms are broken.  This section will
+give help on how to achieve that.
 
 It is important to know that you do not have to enable any of the flags
 discussed here to be able to use trusted root CA certificates
-self-signed using 'RSA-MD2' or 'RSA-MD5'.  The certificates in the
+self-signed using `RSA-MD2' or `RSA-MD5'. The certificates in the
 trusted list are considered trusted irrespective of the signature.
 
 If you are using *note gnutls_certificate_verify_peers3:: to verify the
 certificate chain, you can call *note
 gnutls_certificate_set_verify_flags:: with the flags:
-   * 'GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2'
-   * 'GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5'
+   * `GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2'
+
+   * `GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5'
 as in the following example:
 
        gnutls_certificate_set_verify_flags (x509cred,
                                             GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5);
 
-This will signal the verifier algorithm to enable 'RSA-MD5' when
+This will signal the verifier algorithm to enable `RSA-MD5' when
 verifying the certificates.
 
 If you are using *note gnutls_x509_crt_verify:: or *note
 gnutls_x509_crt_list_verify::, you can pass the
-'GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5' parameter directly in the 'flags'
+`GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5' parameter directly in the `flags'
 parameter.
 
 If you are using these flags, it may also be a good idea to warn the
@@ -2212,7 +2236,7 @@ the raw server's certificate chain, *note gnutls_x509_crt_list_import::
 to parse each of the certificates, and then *note
 gnutls_x509_crt_get_signature_algorithm:: to find out the signing
 algorithm used for each certificate.  If any of the intermediary
-certificates are using 'GNUTLS_SIGN_RSA_MD2' or 'GNUTLS_SIGN_RSA_MD5',
+certificates are using `GNUTLS_SIGN_RSA_MD2' or `GNUTLS_SIGN_RSA_MD5',
 you could present a warning.
 
 
@@ -2222,7 +2246,7 @@ File: gnutls.info,  Node: More on certificate authentication,  Next: Shared-key
 ======================================
 
 Certificates are not the only structures involved in a public key
-infrastructure.  Several other structures that are used for certificate
+infrastructure. Several other structures that are used for certificate
 requests, encrypted private keys, revocation lists, GnuTLS abstract key
 structures, etc., are discussed in this chapter.
 
@@ -2242,68 +2266,73 @@ File: gnutls.info,  Node: PKCS 10 certificate requests,  Next: PKIX certificate
 4.2.1 PKCS #10 certificate requests
 -----------------------------------
 
-A certificate request is a structure, which contain information about an
-applicant of a certificate service.  It usually contains a private key,
-a distinguished name and secondary data such as a challenge password.
-GnuTLS supports the requests defined in PKCS #10 [_RFC2986_].  Other
-formats of certificate requests are not currently supported.
+A certificate request is a structure, which contain information about
+an applicant of a certificate service.  It usually contains a private
+key, a distinguished name and secondary data such as a challenge
+password. GnuTLS supports the requests defined in PKCS #10 [_RFC2986_].
+Other formats of certificate requests are not currently supported.
 
 A certificate request can be generated by associating it with a private
-key, setting the subject's information and finally self signing it.  The
-last step ensures that the requester is in possession of the private
-key.
+key, setting the subject's information and finally self signing it.
+The last step ensures that the requester is in possession of the
+private key.
+
+`INT *note gnutls_x509_crq_set_version:: (gnutls_x509_crq_t CRQ, unsigned int VERSION)'
+
+`INT *note gnutls_x509_crq_set_dn:: (gnutls_x509_crq_t CRQ, const char * DN, const char** ERR)'
 
-'INT *note gnutls_x509_crq_set_version:: (gnutls_x509_crq_t CRQ, unsigned int VERSION)'
-'INT *note gnutls_x509_crq_set_dn:: (gnutls_x509_crq_t CRQ, const char * DN, const char** ERR)'
-'INT *note gnutls_x509_crq_set_dn_by_oid:: (gnutls_x509_crq_t CRQ, const char * OID, unsigned int RAW_FLAG, const void * DATA, unsigned int SIZEOF_DATA)'
-'INT *note gnutls_x509_crq_set_key_usage:: (gnutls_x509_crq_t CRQ, unsigned int USAGE)'
-'INT *note gnutls_x509_crq_set_key_purpose_oid:: (gnutls_x509_crq_t CRQ, const void * OID, unsigned int CRITICAL)'
-'INT *note gnutls_x509_crq_set_basic_constraints:: (gnutls_x509_crq_t CRQ, unsigned int CA, int PATHLENCONSTRAINT)'
+`INT *note gnutls_x509_crq_set_dn_by_oid:: (gnutls_x509_crq_t CRQ, const char * OID, unsigned int RAW_FLAG, const void * DATA, unsigned int SIZEOF_DATA)'
+
+`INT *note gnutls_x509_crq_set_key_usage:: (gnutls_x509_crq_t CRQ, unsigned int USAGE)'
+
+`INT *note gnutls_x509_crq_set_key_purpose_oid:: (gnutls_x509_crq_t CRQ, const void * OID, unsigned int CRITICAL)'
+
+`INT *note gnutls_x509_crq_set_basic_constraints:: (gnutls_x509_crq_t CRQ, unsigned int CA, int PATHLENCONSTRAINT)'
 
 The *note gnutls_x509_crq_set_key:: and *note gnutls_x509_crq_sign2::
-functions associate the request with a private key and sign it.  If a
+functions associate the request with a private key and sign it. If a
 request is to be signed with a key residing in a PKCS #11 token it is
 recommended to use the signing functions shown in *note Abstract key
 types::.
 
  -- Function: int gnutls_x509_crq_set_key (gnutls_x509_crq_t CRQ,
           gnutls_x509_privkey_t KEY)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      KEY: holds a private key
 
      This function will set the public parameters from the given private
      key to the request.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
  -- Function: int gnutls_x509_crq_sign2 (gnutls_x509_crq_t CRQ,
           gnutls_x509_privkey_t KEY, gnutls_digest_algorithm_t DIG,
           unsigned int FLAGS)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      KEY: holds a private key
 
-     DIG: The message digest to use, i.e., 'GNUTLS_DIG_SHA1'
+     DIG: The message digest to use, i.e., `GNUTLS_DIG_SHA1'
 
      FLAGS: must be 0
 
      This function will sign the certificate request with a private key.
      This must be the same key as the one used in
-     'gnutls_x509_crt_set_key()' since a certificate request is self
+     `gnutls_x509_crt_set_key()'  since a certificate request is self
      signed.
 
      This must be the last step in a certificate request generation
      since all the previously set parameters are now signed.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.  'GNUTLS_E_ASN1_VALUE_NOT_FOUND' is returned if you
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.  `GNUTLS_E_ASN1_VALUE_NOT_FOUND'  is returned if you
      didn't set all information in the certificate request (e.g., the
-     version using 'gnutls_x509_crq_set_version()' ).
+     version using `gnutls_x509_crq_set_version()' ).
 
 The following example is about generating a certificate request, and a
-private key.  A certificate request can be later be processed by a CA
+private key. A certificate request can be later be processed by a CA
 which should return a signed certificate.
 
 /* This example code is placed in the public domain. */
@@ -2403,56 +2432,51 @@ File: gnutls.info,  Node: PKIX certificate revocation lists,  Next: OCSP certifi
 A certificate revocation list (CRL) is a structure issued by an
 authority periodically containing a list of revoked certificates serial
 numbers.  The CRL structure is signed with the issuing authorities'
-keys.  A typical CRL contains the fields as shown in *note Table 4.6:
-tab:crl.  Certificate revocation lists are used to complement the
-expiration date of a certificate, in order to account for other reasons
-of revocation, such as compromised keys, etc.
+keys. A typical CRL contains the fields as shown in *note tab:crl::.
+Certificate revocation lists are used to complement the expiration date
+of a certificate, in order to account for other reasons of revocation,
+such as compromised keys, etc.
 
-Each CRL is valid for limited amount of time and is required to provide,
-except for the current issuing time, also the issuing time of the next
-update.
+Each CRL is valid for limited amount of time and is required to
+provide, except for the current issuing time, also the issuing time of
+the next update.
 
 Field          Description
-               
-------------------------------------------------------------------
-version        The field that indicates the version of the CRL
+------------------------------------------------------------------ 
+version         The field that indicates the version of the CRL
                structure.
-               
-signature      A signature by the issuing authority.
-               
-issuer         Holds the issuer's distinguished name.
-               
-thisUpdate     The issuing time of the revocation list.
-               
-nextUpdate     The issuing time of the revocation list that
+signature       A signature by the issuing authority.
+issuer          Holds the issuer's distinguished name.
+thisUpdate      The issuing time of the revocation list.
+nextUpdate      The issuing time of the revocation list that
                will update that one.
-               
-revokedCertificatesList of revoked certificates serial numbers.
-               
-extensions     Optional CRL structure extensions.
-               
+revokedCertificates List of revoked certificates serial numbers.
+extensions      Optional CRL structure extensions.
 
 Table 4.6: Certificate revocation list fields.
 
 The basic CRL structure functions follow.
 
-'INT *note gnutls_x509_crl_init:: (gnutls_x509_crl_t * CRL)'
-'INT *note gnutls_x509_crl_import:: (gnutls_x509_crl_t CRL, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)'
-'INT *note gnutls_x509_crl_export:: (gnutls_x509_crl_t CRL, gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
-'INT *note gnutls_x509_crl_export:: (gnutls_x509_crl_t CRL, gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
+`INT *note gnutls_x509_crl_init:: (gnutls_x509_crl_t * CRL)'
+
+`INT *note gnutls_x509_crl_import:: (gnutls_x509_crl_t CRL, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)'
+
+`INT *note gnutls_x509_crl_export:: (gnutls_x509_crl_t CRL, gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
+
+`INT *note gnutls_x509_crl_export:: (gnutls_x509_crl_t CRL, gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
 
 Reading a CRL
 .............
 
 The most important function that extracts the certificate revocation
-information from a CRL is *note gnutls_x509_crl_get_crt_serial::.  Other
+information from a CRL is *note gnutls_x509_crl_get_crt_serial::. Other
 functions that return other fields of the CRL structure are also
 provided.
 
- -- Function: int gnutls_x509_crl_get_crt_serial (gnutls_x509_crl_t CRL,
-          int INDX, unsigned char * SERIAL, size_t * SERIAL_SIZE, time_t
-          * T)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+ -- Function: int gnutls_x509_crl_get_crt_serial (gnutls_x509_crl_t
+          CRL, int INDX, unsigned char * SERIAL, size_t * SERIAL_SIZE,
+          time_t * T)
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      INDX: the index of the certificate to extract (starting from 0)
 
@@ -2465,31 +2489,40 @@ provided.
      This function will retrieve the serial number of the specified, by
      the index, revoked certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      error.
 
-'INT *note gnutls_x509_crl_get_version:: (gnutls_x509_crl_t CRL)'
-'INT *note gnutls_x509_crl_get_issuer_dn:: (const gnutls_x509_crl_t CRL, char * BUF, size_t * SIZEOF_BUF)'
-'INT *note gnutls_x509_crl_get_issuer_dn2:: (gnutls_x509_crl_t CRL, gnutls_datum_t * DN)'
-'TIME_T *note gnutls_x509_crl_get_this_update:: (gnutls_x509_crl_t CRL)'
-'TIME_T *note gnutls_x509_crl_get_next_update:: (gnutls_x509_crl_t CRL)'
-'INT *note gnutls_x509_crl_get_crt_count:: (gnutls_x509_crl_t CRL)'
+`INT *note gnutls_x509_crl_get_version:: (gnutls_x509_crl_t CRL)'
+
+`INT *note gnutls_x509_crl_get_issuer_dn:: (const gnutls_x509_crl_t CRL, char * BUF, size_t * SIZEOF_BUF)'
+
+`INT *note gnutls_x509_crl_get_issuer_dn2:: (gnutls_x509_crl_t CRL, gnutls_datum_t * DN)'
+
+`TIME_T *note gnutls_x509_crl_get_this_update:: (gnutls_x509_crl_t CRL)'
+
+`TIME_T *note gnutls_x509_crl_get_next_update:: (gnutls_x509_crl_t CRL)'
+
+`INT *note gnutls_x509_crl_get_crt_count:: (gnutls_x509_crl_t CRL)'
 
 Generation of a CRL
 ...................
 
 The following functions can be used to generate a CRL.
 
-'INT *note gnutls_x509_crl_set_version:: (gnutls_x509_crl_t CRL, unsigned int VERSION)'
-'INT *note gnutls_x509_crl_set_crt_serial:: (gnutls_x509_crl_t CRL, const void * SERIAL, size_t SERIAL_SIZE, time_t REVOCATION_TIME)'
-'INT *note gnutls_x509_crl_set_crt:: (gnutls_x509_crl_t CRL, gnutls_x509_crt_t CRT, time_t REVOCATION_TIME)'
-'INT *note gnutls_x509_crl_set_next_update:: (gnutls_x509_crl_t CRL, time_t EXP_TIME)'
-'INT *note gnutls_x509_crl_set_this_update:: (gnutls_x509_crl_t CRL, time_t ACT_TIME)'
+`INT *note gnutls_x509_crl_set_version:: (gnutls_x509_crl_t CRL, unsigned int VERSION)'
+
+`INT *note gnutls_x509_crl_set_crt_serial:: (gnutls_x509_crl_t CRL, const void * SERIAL, size_t SERIAL_SIZE, time_t REVOCATION_TIME)'
+
+`INT *note gnutls_x509_crl_set_crt:: (gnutls_x509_crl_t CRL, gnutls_x509_crt_t CRT, time_t REVOCATION_TIME)'
+
+`INT *note gnutls_x509_crl_set_next_update:: (gnutls_x509_crl_t CRL, time_t EXP_TIME)'
+
+`INT *note gnutls_x509_crl_set_this_update:: (gnutls_x509_crl_t CRL, time_t ACT_TIME)'
 
 The *note gnutls_x509_crl_sign2:: and *note
-gnutls_x509_crl_privkey_sign:: functions sign the revocation list with a
-private key.  The latter function can be used to sign with a key
+gnutls_x509_crl_privkey_sign:: functions sign the revocation list with
+a private key. The latter function can be used to sign with a key
 residing in a PKCS #11 token.
 
  -- Function: int gnutls_x509_crl_sign2 (gnutls_x509_crl_t CRL,
@@ -2501,7 +2534,7 @@ residing in a PKCS #11 token.
 
      ISSUER_KEY: holds the issuer's private key
 
-     DIG: The message digest to use.  GNUTLS_DIG_SHA1 is the safe choice
+     DIG: The message digest to use. GNUTLS_DIG_SHA1 is the safe choice
      unless you know what you're doing.
 
      FLAGS: must be 0
@@ -2512,7 +2545,7 @@ residing in a PKCS #11 token.
      This must be the last step in a certificate CRL since all the
      previously set parameters are now signed.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
  -- Function: int gnutls_x509_crl_privkey_sign (gnutls_x509_crl_t CRL,
@@ -2524,7 +2557,7 @@ residing in a PKCS #11 token.
 
      ISSUER_KEY: holds the issuer's private key
 
-     DIG: The message digest to use.  GNUTLS_DIG_SHA1 is the safe choice
+     DIG: The message digest to use. GNUTLS_DIG_SHA1 is the safe choice
      unless you know what you're doing.
 
      FLAGS: must be 0
@@ -2535,7 +2568,7 @@ residing in a PKCS #11 token.
      This must be the last step in a certificate CRL since all the
      previously set parameters are now signed.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      Since 2.12.0
@@ -2543,8 +2576,9 @@ residing in a PKCS #11 token.
 Few extensions on the CRL structure are supported, including the CRL
 number extension and the authority key identifier.
 
-'INT *note gnutls_x509_crl_set_number:: (gnutls_x509_crl_t CRL, const void * NR, size_t NR_SIZE)'
-'INT *note gnutls_x509_crl_set_authority_key_id:: (gnutls_x509_crl_t CRL, const void * ID, size_t ID_SIZE)'
+`INT *note gnutls_x509_crl_set_number:: (gnutls_x509_crl_t CRL, const void * NR, size_t NR_SIZE)'
+
+`INT *note gnutls_x509_crl_set_authority_key_id:: (gnutls_x509_crl_t CRL, const void * ID, size_t ID_SIZE)'
 
 
 File: gnutls.info,  Node: OCSP certificate status checking,  Next: Managing encrypted keys,  Prev: PKIX certificate revocation lists,  Up: More on certificate authentication
@@ -2559,38 +2593,38 @@ has been compromised.  Traditionally, Certificate Revocation Lists
 (CRLs) have been used by application to implement revocation checking,
 however, several problems with CRLs have been identified [_RIVESTCRL_].
 
-The Online Certificate Status Protocol, or OCSP [_RFC2560_], is a widely
-implemented protocol to perform certificate revocation status checking.
-An application that wish to verify the identity of a peer will verify
-the certificate against a set of trusted certificates and then check
-whether the certificate is listed in a CRL and/or perform an OCSP check
-for the certificate.
+The Online Certificate Status Protocol, or OCSP [_RFC2560_], is a
+widely implemented protocol to perform certificate revocation status
+checking.  An application that wish to verify the identity of a peer
+will verify the certificate against a set of trusted certificates and
+then check whether the certificate is listed in a CRL and/or perform an
+OCSP check for the certificate.
 
-Note that in the context of a TLS session the server may provide an OCSP
-response that will used during the TLS certificate verification (see
-*note gnutls_certificate_verify_peers3::).  You may obtain this response
-using *note gnutls_ocsp_status_request_get::.
+Note that in the context of a TLS session the server may provide an
+OCSP response that will used during the TLS certificate verification
+(see *note gnutls_certificate_verify_peers3::).  You may obtain this
+response using *note gnutls_ocsp_status_request_get::.
 
 Before performing the OCSP query, the application will need to figure
 out the address of the OCSP server.  The OCSP server address can be
 provided by the local user in manual configuration or may be stored in
-the certificate that is being checked.  When stored in a certificate the
-OCSP server is in the extension field called the Authority Information
-Access (AIA). The following function extracts this information from a
-certificate.
-
-'INT *note gnutls_x509_crt_get_authority_info_access:: (gnutls_x509_crt_t CRT, unsigned int SEQ, int WHAT, gnutls_datum_t * DATA, unsigned int * CRITICAL)'
-
-There are several functions in GnuTLS for creating and manipulating OCSP
-requests and responses.  The general idea is that a client application
-create an OCSP request object, store some information about the
-certificate to check in the request, and then export the request in DER
-format.  The request will then need to be sent to the OCSP responder,
-which needs to be done by the application (GnuTLS does not send and
-receive OCSP packets).  Normally an OCSP response is received that the
-application will need to import into an OCSP response object.  The
-digital signature in the OCSP response needs to be verified against a
-set of trust anchors before the information in the response can be
+the certificate that is being checked.  When stored in a certificate
+the OCSP server is in the extension field called the Authority
+Information Access (AIA). The following function extracts this
+information from a certificate.
+
+`INT *note gnutls_x509_crt_get_authority_info_access:: (gnutls_x509_crt_t CRT, unsigned int SEQ, int WHAT, gnutls_datum_t * DATA, unsigned int * CRITICAL)'
+
+There are several functions in GnuTLS for creating and manipulating
+OCSP requests and responses.  The general idea is that a client
+application create an OCSP request object, store some information about
+the certificate to check in the request, and then export the request in
+DER format.  The request will then need to be sent to the OCSP
+responder, which needs to be done by the application (GnuTLS does not
+send and receive OCSP packets).  Normally an OCSP response is received
+that the application will need to import into an OCSP response object.
+The digital signature in the OCSP response needs to be verified against
+a set of trust anchors before the information in the response can be
 trusted.
 
 The ASN.1 structure of OCSP requests are briefly as follows.  It is
@@ -2620,32 +2654,39 @@ are modified by GnuTLS functions.
 The basic functions to initialize, import, export and deallocate OCSP
 requests are the following.
 
-'INT *note gnutls_ocsp_req_init:: (gnutls_ocsp_req_t * REQ)'
-'VOID *note gnutls_ocsp_req_deinit:: (gnutls_ocsp_req_t REQ)'
-'INT *note gnutls_ocsp_req_import:: (gnutls_ocsp_req_t REQ, const gnutls_datum_t * DATA)'
-'INT *note gnutls_ocsp_req_export:: (gnutls_ocsp_req_t REQ, gnutls_datum_t * DATA)'
-'INT *note gnutls_ocsp_req_print:: (gnutls_ocsp_req_t REQ, gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)'
+`INT *note gnutls_ocsp_req_init:: (gnutls_ocsp_req_t * REQ)'
+
+`VOID *note gnutls_ocsp_req_deinit:: (gnutls_ocsp_req_t REQ)'
+
+`INT *note gnutls_ocsp_req_import:: (gnutls_ocsp_req_t REQ, const gnutls_datum_t * DATA)'
+
+`INT *note gnutls_ocsp_req_export:: (gnutls_ocsp_req_t REQ, gnutls_datum_t * DATA)'
+
+`INT *note gnutls_ocsp_req_print:: (gnutls_ocsp_req_t REQ, gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)'
 
 To generate an OCSP request the issuer name hash, issuer key hash, and
-the checked certificate's serial number are required.  There are two
+the checked certificate's serial number are required. There are two
 interfaces available for setting those in an OCSP request.  The is a
 low-level function when you have the issuer name hash, issuer key hash,
-and certificate serial number in binary form.  The second is more useful
-if you have the certificate (and its issuer) in a 'gnutls_x509_crt_t'
-type.  There is also a function to extract this information from
-existing an OCSP request.
+and certificate serial number in binary form.  The second is more
+useful if you have the certificate (and its issuer) in a
+`gnutls_x509_crt_t' type.  There is also a function to extract this
+information from existing an OCSP request.
+
+`INT *note gnutls_ocsp_req_add_cert_id:: (gnutls_ocsp_req_t REQ, gnutls_digest_algorithm_t DIGEST, const gnutls_datum_t * ISSUER_NAME_HASH, const gnutls_datum_t * ISSUER_KEY_HASH, const gnutls_datum_t * SERIAL_NUMBER)'
 
-'INT *note gnutls_ocsp_req_add_cert_id:: (gnutls_ocsp_req_t REQ, gnutls_digest_algorithm_t DIGEST, const gnutls_datum_t * ISSUER_NAME_HASH, const gnutls_datum_t * ISSUER_KEY_HASH, const gnutls_datum_t * SERIAL_NUMBER)'
-'INT *note gnutls_ocsp_req_add_cert:: (gnutls_ocsp_req_t REQ, gnutls_digest_algorithm_t DIGEST, gnutls_x509_crt_t ISSUER, gnutls_x509_crt_t CERT)'
-'INT *note gnutls_ocsp_req_get_cert_id:: (gnutls_ocsp_req_t REQ, unsigned INDX, gnutls_digest_algorithm_t * DIGEST, gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t * ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER)'
+`INT *note gnutls_ocsp_req_add_cert:: (gnutls_ocsp_req_t REQ, gnutls_digest_algorithm_t DIGEST, gnutls_x509_crt_t ISSUER, gnutls_x509_crt_t CERT)'
+
+`INT *note gnutls_ocsp_req_get_cert_id:: (gnutls_ocsp_req_t REQ, unsigned INDX, gnutls_digest_algorithm_t * DIGEST, gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t * ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER)'
 
 Each OCSP request may contain a number of extensions.  Extensions are
-identified by an Object Identifier (OID) and an opaque data buffer whose
-syntax and semantics is implied by the OID. You can extract or set those
-extensions using the following functions.
+identified by an Object Identifier (OID) and an opaque data buffer
+whose syntax and semantics is implied by the OID. You can extract or
+set those extensions using the following functions.
+
+`INT *note gnutls_ocsp_req_get_extension:: (gnutls_ocsp_req_t REQ, unsigned INDX, gnutls_datum_t * OID, unsigned int * CRITICAL, gnutls_datum_t * DATA)'
 
-'INT *note gnutls_ocsp_req_get_extension:: (gnutls_ocsp_req_t REQ, unsigned INDX, gnutls_datum_t * OID, unsigned int * CRITICAL, gnutls_datum_t * DATA)'
-'INT *note gnutls_ocsp_req_set_extension:: (gnutls_ocsp_req_t REQ, const char * OID, unsigned int CRITICAL, const gnutls_datum_t * DATA)'
+`INT *note gnutls_ocsp_req_set_extension:: (gnutls_ocsp_req_t REQ, const char * OID, unsigned int CRITICAL, const gnutls_datum_t * DATA)'
 
 A common OCSP Request extension is the nonce extension (OID
 1.3.6.1.5.5.7.48.1.2), which is used to avoid replay attacks of earlier
@@ -2653,50 +2694,47 @@ recorded OCSP responses.  The nonce extension carries a value that is
 intended to be sufficiently random and unique so that an attacker will
 not be able to give a stale response for the same nonce.
 
-'INT *note gnutls_ocsp_req_get_nonce:: (gnutls_ocsp_req_t REQ, unsigned int * CRITICAL, gnutls_datum_t * NONCE)'
-'INT *note gnutls_ocsp_req_set_nonce:: (gnutls_ocsp_req_t REQ, unsigned int CRITICAL, const gnutls_datum_t * NONCE)'
-'INT *note gnutls_ocsp_req_randomize_nonce:: (gnutls_ocsp_req_t REQ)'
+`INT *note gnutls_ocsp_req_get_nonce:: (gnutls_ocsp_req_t REQ, unsigned int * CRITICAL, gnutls_datum_t * NONCE)'
+
+`INT *note gnutls_ocsp_req_set_nonce:: (gnutls_ocsp_req_t REQ, unsigned int CRITICAL, const gnutls_datum_t * NONCE)'
 
-The OCSP response structures is a complex structure.  A simplified
-overview of it is in *note Table 4.7: tab:ocsp-response.  Note that a
-response may contain information on multiple certificates.
+`INT *note gnutls_ocsp_req_randomize_nonce:: (gnutls_ocsp_req_t REQ)'
+
+The OCSP response structures is a complex structure. A simplified
+overview of it is in *note tab:ocsp-response::. Note that a response
+may contain information on multiple certificates.
 
 Field          Description
-               
-------------------------------------------------------------------
-version        The OCSP response version number (typically 1).
-               
-responder ID   An identifier of the responder (DN name or a
+------------------------------------------------------------------ 
+version         The OCSP response version number (typically 1).
+responder ID    An identifier of the responder (DN name or a
                hash of its key).
-               
-issue time     The time the response was generated.
-               
-thisUpdate     The issuing time of the revocation information.
-               
-nextUpdate     The issuing time of the revocation information
+issue time      The time the response was generated.
+thisUpdate      The issuing time of the revocation information.
+nextUpdate      The issuing time of the revocation information
                that will update that one.
-               
                Revoked certificates
-               
-certificate    The status of the certificate.
+certificate     The status of the certificate.
 status         
-certificate    The certificate's serial number.
+certificate     The certificate's serial number.
 serial         
-revocationTime The time the certificate was revoked.
-               
-revocationReasonThe reason the certificate was revoked.
-               
+revocationTime  The time the certificate was revoked.
+revocationReason The reason the certificate was revoked.
 
 Table 4.7: The most important OCSP response fields.
 
 We provide basic functions for initialization, importing, exporting and
 deallocating OCSP responses.
 
-'INT *note gnutls_ocsp_resp_init:: (gnutls_ocsp_resp_t * RESP)'
-'VOID *note gnutls_ocsp_resp_deinit:: (gnutls_ocsp_resp_t RESP)'
-'INT *note gnutls_ocsp_resp_import:: (gnutls_ocsp_resp_t RESP, const gnutls_datum_t * DATA)'
-'INT *note gnutls_ocsp_resp_export:: (gnutls_ocsp_resp_t RESP, gnutls_datum_t * DATA)'
-'INT *note gnutls_ocsp_resp_print:: (gnutls_ocsp_resp_t RESP, gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)'
+`INT *note gnutls_ocsp_resp_init:: (gnutls_ocsp_resp_t * RESP)'
+
+`VOID *note gnutls_ocsp_resp_deinit:: (gnutls_ocsp_resp_t RESP)'
+
+`INT *note gnutls_ocsp_resp_import:: (gnutls_ocsp_resp_t RESP, const gnutls_datum_t * DATA)'
+
+`INT *note gnutls_ocsp_resp_export:: (gnutls_ocsp_resp_t RESP, gnutls_datum_t * DATA)'
+
+`INT *note gnutls_ocsp_resp_print:: (gnutls_ocsp_resp_t RESP, gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)'
 
 The utility function that extracts the revocation as well as other
 information from a response is shown below.
@@ -2707,12 +2745,12 @@ information from a response is shown below.
           ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER, unsigned int
           * CERT_STATUS, time_t * THIS_UPDATE, time_t * NEXT_UPDATE,
           time_t * REVOCATION_TIME, unsigned int * REVOCATION_REASON)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
 
-     INDX: Specifies response number to get.  Use (0) to get the first
+     INDX: Specifies response number to get. Use (0) to get the first
      one.
 
-     DIGEST: output variable with 'gnutls_digest_algorithm_t' hash
+     DIGEST: output variable with `gnutls_digest_algorithm_t'  hash
      algorithm
 
      ISSUER_NAME_HASH: output buffer with hash of issuer's DN
@@ -2722,7 +2760,7 @@ information from a response is shown below.
      SERIAL_NUMBER: output buffer with serial number of certificate to
      check
 
-     CERT_STATUS: a certificate status, a 'gnutls_ocsp_cert_status_t'
+     CERT_STATUS: a certificate status, a `gnutls_ocsp_cert_status_t'
      enum.
 
      THIS_UPDATE: time at which the status is known to be correct.
@@ -2730,59 +2768,70 @@ information from a response is shown below.
      NEXT_UPDATE: when newer information will be available, or
      (time_t)-1 if unspecified
 
-     REVOCATION_TIME: when 'cert_status' is 'GNUTLS_OCSP_CERT_REVOKED' ,
-     holds time of revocation.
+     REVOCATION_TIME: when  `cert_status' is `GNUTLS_OCSP_CERT_REVOKED'
+     , holds time of revocation.
 
-     REVOCATION_REASON: revocation reason, a 'gnutls_x509_crl_reason_t'
+     REVOCATION_REASON: revocation reason, a `gnutls_x509_crl_reason_t'
      enum.
 
-     This function will return the certificate information of the 'indx'
-     'ed response in the Basic OCSP Response 'resp' .  The information
-     returned corresponds to the OCSP SingleResponse structure except
-     the final singleExtensions.
+     This function will return the certificate information of the
+     `indx' 'ed response in the Basic OCSP Response  `resp' .  The
+     information returned corresponds to the OCSP SingleResponse
+     structure except the final singleExtensions.
 
      Each of the pointers to output variables may be NULL to indicate
      that the caller is not interested in that value.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.  If you have reached
-     the last CertID available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
+     the last CertID available `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
      will be returned.
 
 The possible revocation reasons available in an OCSP response are shown
 below.
 
-'GNUTLS_X509_CRLREASON_UNSPECIFIED'
+`GNUTLS_X509_CRLREASON_UNSPECIFIED'
      Unspecified reason.
-'GNUTLS_X509_CRLREASON_KEYCOMPROMISE'
+
+`GNUTLS_X509_CRLREASON_KEYCOMPROMISE'
      Private key compromised.
-'GNUTLS_X509_CRLREASON_CACOMPROMISE'
+
+`GNUTLS_X509_CRLREASON_CACOMPROMISE'
      CA compromised.
-'GNUTLS_X509_CRLREASON_AFFILIATIONCHANGED'
+
+`GNUTLS_X509_CRLREASON_AFFILIATIONCHANGED'
      Affiliation has changed.
-'GNUTLS_X509_CRLREASON_SUPERSEDED'
+
+`GNUTLS_X509_CRLREASON_SUPERSEDED'
      Certificate superseded.
-'GNUTLS_X509_CRLREASON_CESSATIONOFOPERATION'
+
+`GNUTLS_X509_CRLREASON_CESSATIONOFOPERATION'
      Operation has ceased.
-'GNUTLS_X509_CRLREASON_CERTIFICATEHOLD'
+
+`GNUTLS_X509_CRLREASON_CERTIFICATEHOLD'
      Certificate is on hold.
-'GNUTLS_X509_CRLREASON_REMOVEFROMCRL'
+
+`GNUTLS_X509_CRLREASON_REMOVEFROMCRL'
      Will be removed from delta CRL.
-'GNUTLS_X509_CRLREASON_PRIVILEGEWITHDRAWN'
+
+`GNUTLS_X509_CRLREASON_PRIVILEGEWITHDRAWN'
      Privilege withdrawn.
-'GNUTLS_X509_CRLREASON_AACOMPROMISE'
+
+`GNUTLS_X509_CRLREASON_AACOMPROMISE'
      AA compromised.
 
 Figure 4.5: The revocation reasons
 
 Note, that the OCSP response needs to be verified against some set of
-trust anchors before it can be relied upon.  It is also important to
+trust anchors before it can be relied upon. It is also important to
 check whether the received OCSP response corresponds to the certificate
 being checked.
 
-'INT *note gnutls_ocsp_resp_verify:: (gnutls_ocsp_resp_t RESP, gnutls_x509_trust_list_t TRUSTLIST, unsigned int * VERIFY, unsigned int FLAGS)'
-'INT *note gnutls_ocsp_resp_verify_direct:: (gnutls_ocsp_resp_t RESP, gnutls_x509_crt_t ISSUER, unsigned int * VERIFY, unsigned int FLAGS)'
-'INT *note gnutls_ocsp_resp_check_crt:: (gnutls_ocsp_resp_t RESP, unsigned int INDX, gnutls_x509_crt_t CRT)'
+`INT *note gnutls_ocsp_resp_verify:: (gnutls_ocsp_resp_t RESP, gnutls_x509_trust_list_t TRUSTLIST, unsigned int * VERIFY, unsigned int FLAGS)'
+
+`INT *note gnutls_ocsp_resp_verify_direct:: (gnutls_ocsp_resp_t RESP, gnutls_x509_crt_t ISSUER, unsigned int * VERIFY, unsigned int FLAGS)'
+
+`INT *note gnutls_ocsp_resp_check_crt:: (gnutls_ocsp_resp_t RESP, unsigned int INDX, gnutls_x509_crt_t CRT)'
 
 
 File: gnutls.info,  Node: Managing encrypted keys,  Next: certtool Invocation,  Prev: OCSP certificate status checking,  Up: More on certificate authentication
@@ -2799,10 +2848,10 @@ keys.
 
 There are methods for key encryption, namely the PKCS #8, PKCS #12 and
 OpenSSL's custom encrypted private key formats.  The PKCS #8 and the
-OpenSSL's method allow encryption of the private key, while the PKCS #12
-method allows, in addition, the bundling of accompanying data into the
-structure.  That is typically the corresponding certificate, as well as
-a trusted CA certificate.
+OpenSSL's method allow encryption of the private key, while the PKCS
+#12 method allows, in addition, the bundling of accompanying data into
+the structure. That is typically the corresponding certificate, as well
+as a trusted CA certificate.
 
 High level functionality
 ........................
@@ -2811,9 +2860,9 @@ Generic and higher level private key import functions are available,
 that import plain or encrypted keys and will auto-detect the encrypted
 key format.
 
- -- Function: int gnutls_privkey_import_x509_raw (gnutls_privkey_t PKEY,
-          const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT,
-          const char* PASSWORD, unsigned int FLAGS)
+ -- Function: int gnutls_privkey_import_x509_raw (gnutls_privkey_t
+          PKEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t
+          FORMAT, const char* PASSWORD, unsigned int FLAGS)
      PKEY: The private key
 
      DATA: The private key data to be imported
@@ -2825,12 +2874,12 @@ key format.
      FLAGS: an ORed sequence of gnutls_pkcs_encrypt_flags_t
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     The supported formats are basic unencrypted key, PKCS8, PKCS12, and
-     the openssl format.
+     The supported formats are basic unencrypted key, PKCS8, PKCS12,
+     and the openssl format.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -2849,16 +2898,16 @@ key format.
      FLAGS: an ORed sequence of gnutls_pkcs_encrypt_flags_t
 
      This function will import the given DER or PEM encoded key, to the
-     native 'gnutls_x509_privkey_t' format, irrespective of the input
-     format.  The input format is auto-detected.
+     native `gnutls_x509_privkey_t'  format, irrespective of the input
+     format. The input format is auto-detected.
 
-     The supported formats are basic unencrypted key, PKCS8, PKCS12, and
-     the openssl format.
+     The supported formats are basic unencrypted key, PKCS8, PKCS12,
+     and the openssl format.
 
      If the provided key is encrypted but no password was given, then
-     'GNUTLS_E_DECRYPTION_FAILED' is returned.
+     `GNUTLS_E_DECRYPTION_FAILED'  is returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 Any keys imported using those functions can be imported to a certificate
@@ -2870,33 +2919,43 @@ PKCS #8 structures
 ..................
 
 PKCS #8 keys can be imported and exported as normal private keys using
-the functions below.  An addition to the normal import functions, are a
-password and a flags argument.  The flags can be any element of the
-'gnutls_pkcs_encrypt_flags_t' enumeration.  Note however, that GnuTLS
-only supports the PKCS #5 PBES2 encryption scheme.  Keys encrypted with
+the functions below. An addition to the normal import functions, are a
+password and a flags argument. The flags can be any element of the
+`gnutls_pkcs_encrypt_flags_t' enumeration. Note however, that GnuTLS
+only supports the PKCS #5 PBES2 encryption scheme. Keys encrypted with
 the obsolete PBES1 scheme cannot be decrypted.
 
-'INT *note gnutls_x509_privkey_import_pkcs8:: (gnutls_x509_privkey_t KEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, const char * PASSWORD, unsigned int FLAGS)'
-'INT *note gnutls_x509_privkey_export_pkcs8:: (gnutls_x509_privkey_t KEY, gnutls_x509_crt_fmt_t FORMAT, const char * PASSWORD, unsigned int FLAGS, void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
-'INT *note gnutls_x509_privkey_export2_pkcs8:: (gnutls_x509_privkey_t KEY, gnutls_x509_crt_fmt_t FORMAT, const char * PASSWORD, unsigned int FLAGS, gnutls_datum_t * OUT)'
+`INT *note gnutls_x509_privkey_import_pkcs8:: (gnutls_x509_privkey_t KEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, const char * PASSWORD, unsigned int FLAGS)'
+
+`INT *note gnutls_x509_privkey_export_pkcs8:: (gnutls_x509_privkey_t KEY, gnutls_x509_crt_fmt_t FORMAT, const char * PASSWORD, unsigned int FLAGS, void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
+
+`INT *note gnutls_x509_privkey_export2_pkcs8:: (gnutls_x509_privkey_t KEY, gnutls_x509_crt_fmt_t FORMAT, const char * PASSWORD, unsigned int FLAGS, gnutls_datum_t * OUT)'
 
-'GNUTLS_PKCS_PLAIN'
+`GNUTLS_PKCS_PLAIN'
      Unencrypted private key.
-'GNUTLS_PKCS_USE_PKCS12_3DES'
+
+`GNUTLS_PKCS_USE_PKCS12_3DES'
      PKCS-12 3DES.
-'GNUTLS_PKCS_USE_PKCS12_ARCFOUR'
+
+`GNUTLS_PKCS_USE_PKCS12_ARCFOUR'
      PKCS-12 ARCFOUR.
-'GNUTLS_PKCS_USE_PKCS12_RC2_40'
+
+`GNUTLS_PKCS_USE_PKCS12_RC2_40'
      PKCS-12 RC2-40.
-'GNUTLS_PKCS_USE_PBES2_3DES'
+
+`GNUTLS_PKCS_USE_PBES2_3DES'
      PBES2 3DES.
-'GNUTLS_PKCS_USE_PBES2_AES_128'
+
+`GNUTLS_PKCS_USE_PBES2_AES_128'
      PBES2 AES-128.
-'GNUTLS_PKCS_USE_PBES2_AES_192'
+
+`GNUTLS_PKCS_USE_PBES2_AES_192'
      PBES2 AES-192.
-'GNUTLS_PKCS_USE_PBES2_AES_256'
+
+`GNUTLS_PKCS_USE_PBES2_AES_256'
      PBES2 AES-256.
-'GNUTLS_PKCS_NULL_PASSWORD'
+
+`GNUTLS_PKCS_NULL_PASSWORD'
      Some schemas distinguish between an empty and a NULL password.
 
 Figure 4.6: Encryption flags
@@ -2905,30 +2964,33 @@ PKCS #12 structures
 ...................
 
 A PKCS #12 structure [_PKCS12_] usually contains a user's private keys
-and certificates.  It is commonly used in browsers to export and import
-the user's identities.  A file containing such a key can be directly
+and certificates. It is commonly used in browsers to export and import
+the user's identities. A file containing such a key can be directly
 imported to a certificate credentials structure by using *note
 gnutls_certificate_set_x509_simple_pkcs12_file::.
 
 In GnuTLS the PKCS #12 structures are handled using the
-'gnutls_pkcs12_t' type.  This is an abstract type that may hold several
-'gnutls_pkcs12_bag_t' types.  The bag types are the holders of the
+`gnutls_pkcs12_t' type. This is an abstract type that may hold several
+`gnutls_pkcs12_bag_t' types.  The bag types are the holders of the
 actual data, which may be certificates, private keys or encrypted data.
 A bag of type encrypted should be decrypted in order for its data to be
 accessed.
 
 To reduce the complexity in parsing the structures the simple helper
-function *note gnutls_pkcs12_simple_parse:: is provided.  For more
+function *note gnutls_pkcs12_simple_parse:: is provided. For more
 advanced uses, manual parsing of the structure is required using the
 functions below.
 
-'INT *note gnutls_pkcs12_get_bag:: (gnutls_pkcs12_t PKCS12, int INDX, gnutls_pkcs12_bag_t BAG)'
-'INT *note gnutls_pkcs12_verify_mac:: (gnutls_pkcs12_t PKCS12, const char * PASS)'
-'INT *note gnutls_pkcs12_bag_decrypt:: (gnutls_pkcs12_bag_t BAG, const char * PASS)'
-'INT *note gnutls_pkcs12_bag_get_count:: (gnutls_pkcs12_bag_t BAG)'
+`INT *note gnutls_pkcs12_get_bag:: (gnutls_pkcs12_t PKCS12, int INDX, gnutls_pkcs12_bag_t BAG)'
+
+`INT *note gnutls_pkcs12_verify_mac:: (gnutls_pkcs12_t PKCS12, const char * PASS)'
+
+`INT *note gnutls_pkcs12_bag_decrypt:: (gnutls_pkcs12_bag_t BAG, const char * PASS)'
+
+`INT *note gnutls_pkcs12_bag_get_count:: (gnutls_pkcs12_bag_t BAG)'
 
- -- Function: int gnutls_pkcs12_simple_parse (gnutls_pkcs12_t P12, const
-          char * PASSWORD, gnutls_x509_privkey_t * KEY,
+ -- Function: int gnutls_pkcs12_simple_parse (gnutls_pkcs12_t P12,
+          const char * PASSWORD, gnutls_x509_privkey_t * KEY,
           gnutls_x509_crt_t ** CHAIN, unsigned int * CHAIN_LEN,
           gnutls_x509_crt_t ** EXTRA_CERTS, unsigned int *
           EXTRA_CERTS_LEN, gnutls_x509_crl_t * CRL, unsigned int FLAGS)
@@ -2939,29 +3001,29 @@ functions below.
 
      KEY: a structure to store the parsed private key.
 
-     CHAIN: the corresponding to key certificate chain (may be 'NULL' )
+     CHAIN: the corresponding to key certificate chain (may be `NULL' )
 
      CHAIN_LEN: will be updated with the number of additional (may be
-     'NULL' )
+     `NULL' )
 
      EXTRA_CERTS: optional pointer to receive an array of additional
-     certificates found in the PKCS12 blob (may be 'NULL' ).
+     certificates found in the PKCS12 blob (may be `NULL' ).
 
      EXTRA_CERTS_LEN: will be updated with the number of additional
-     certs (may be 'NULL' ).
+     certs (may be `NULL' ).
 
-     CRL: an optional structure to store the parsed CRL (may be 'NULL'
+     CRL: an optional structure to store the parsed CRL (may be `NULL'
      ).
 
      FLAGS: should be zero or one of GNUTLS_PKCS12_SP_*
 
-     This function parses a PKCS12 blob in 'p12blob' and extracts the
+     This function parses a PKCS12 blob in  `p12blob' and extracts the
      private key, the corresponding certificate chain, and any
      additional certificates and a CRL.
 
-     The 'extra_certs_ret' and 'extra_certs_len' parameters are optional
-     and both may be set to 'NULL' .  If either is non-'NULL' , then
-     both must be set.
+     The  `extra_certs_ret' and  `extra_certs_len' parameters are
+     optional and both may be set to `NULL' . If either is non-`NULL' ,
+     then both must be set.
 
      Encrypted PKCS12 bags and PKCS8 private keys are supported.
      However, only password based security, and the same password for
@@ -2978,47 +3040,57 @@ functions below.
      all.
 
      If the provided structure has encrypted fields but no password is
-     provided then this function returns 'GNUTLS_E_DECRYPTION_FAILED' .
+     provided then this function returns `GNUTLS_E_DECRYPTION_FAILED' .
 
      Note that normally the chain constructed does not include self
-     signed certificates, to comply with TLS' requirements.  If,
-     however, the flag 'GNUTLS_PKCS12_SP_INCLUDE_SELF_SIGNED' is
+     signed certificates, to comply with TLS' requirements. If,
+     however, the flag `GNUTLS_PKCS12_SP_INCLUDE_SELF_SIGNED'  is
      specified then self signed certificates will be included in the
      chain.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1
-'INT *note gnutls_pkcs12_bag_get_data:: (gnutls_pkcs12_bag_t BAG, int INDX, gnutls_datum_t * DATA)'
-'INT *note gnutls_pkcs12_bag_get_key_id:: (gnutls_pkcs12_bag_t BAG, int INDX, gnutls_datum_t * ID)'
-'INT *note gnutls_pkcs12_bag_get_friendly_name:: (gnutls_pkcs12_bag_t BAG, int INDX, char ** NAME)'
 
-The functions below are used to generate a PKCS #12 structure.  An
+`INT *note gnutls_pkcs12_bag_get_data:: (gnutls_pkcs12_bag_t BAG, int INDX, gnutls_datum_t * DATA)'
+
+`INT *note gnutls_pkcs12_bag_get_key_id:: (gnutls_pkcs12_bag_t BAG, int INDX, gnutls_datum_t * ID)'
+
+`INT *note gnutls_pkcs12_bag_get_friendly_name:: (gnutls_pkcs12_bag_t BAG, int INDX, char ** NAME)'
+
+The functions below are used to generate a PKCS #12 structure. An
 example of their usage is shown at *note PKCS #12 structure generation
 example::.
 
-'INT *note gnutls_pkcs12_set_bag:: (gnutls_pkcs12_t PKCS12, gnutls_pkcs12_bag_t BAG)'
-'INT *note gnutls_pkcs12_bag_encrypt:: (gnutls_pkcs12_bag_t BAG, const char * PASS, unsigned int FLAGS)'
-'INT *note gnutls_pkcs12_generate_mac:: (gnutls_pkcs12_t PKCS12, const char * PASS)'
-'INT *note gnutls_pkcs12_bag_set_data:: (gnutls_pkcs12_bag_t BAG, gnutls_pkcs12_bag_type_t TYPE, const gnutls_datum_t * DATA)'
-'INT *note gnutls_pkcs12_bag_set_crl:: (gnutls_pkcs12_bag_t BAG, gnutls_x509_crl_t CRL)'
-'INT *note gnutls_pkcs12_bag_set_crt:: (gnutls_pkcs12_bag_t BAG, gnutls_x509_crt_t CRT)'
-'INT *note gnutls_pkcs12_bag_set_key_id:: (gnutls_pkcs12_bag_t BAG, int INDX, const gnutls_datum_t * ID)'
-'INT *note gnutls_pkcs12_bag_set_friendly_name:: (gnutls_pkcs12_bag_t BAG, int INDX, const char * NAME)'
+`INT *note gnutls_pkcs12_set_bag:: (gnutls_pkcs12_t PKCS12, gnutls_pkcs12_bag_t BAG)'
+
+`INT *note gnutls_pkcs12_bag_encrypt:: (gnutls_pkcs12_bag_t BAG, const char * PASS, unsigned int FLAGS)'
+
+`INT *note gnutls_pkcs12_generate_mac:: (gnutls_pkcs12_t PKCS12, const char * PASS)'
+
+`INT *note gnutls_pkcs12_bag_set_data:: (gnutls_pkcs12_bag_t BAG, gnutls_pkcs12_bag_type_t TYPE, const gnutls_datum_t * DATA)'
+
+`INT *note gnutls_pkcs12_bag_set_crl:: (gnutls_pkcs12_bag_t BAG, gnutls_x509_crl_t CRL)'
+
+`INT *note gnutls_pkcs12_bag_set_crt:: (gnutls_pkcs12_bag_t BAG, gnutls_x509_crt_t CRT)'
+
+`INT *note gnutls_pkcs12_bag_set_key_id:: (gnutls_pkcs12_bag_t BAG, int INDX, const gnutls_datum_t * ID)'
+
+`INT *note gnutls_pkcs12_bag_set_friendly_name:: (gnutls_pkcs12_bag_t BAG, int INDX, const char * NAME)'
 
 OpenSSL encrypted keys
 ......................
 
 Unfortunately the structures discussed in the previous sections are not
-the only structures that may hold an encrypted private key.  For example
-the OpenSSL library offers a custom key encryption method.  Those
+the only structures that may hold an encrypted private key. For example
+the OpenSSL library offers a custom key encryption method. Those
 structures are also supported in GnuTLS with *note
 gnutls_x509_privkey_import_openssl::.
 
  -- Function: int gnutls_x509_privkey_import_openssl
-          (gnutls_x509_privkey_t KEY, const gnutls_datum_t * DATA, const
-          char* PASSWORD)
+          (gnutls_x509_privkey_t KEY, const gnutls_datum_t * DATA,
+          const char* PASSWORD)
      KEY: The structure to store the parsed key
 
      DATA: The DER or PEM encoded key.
@@ -3026,15 +3098,15 @@ gnutls_x509_privkey_import_openssl::.
      PASSWORD: the password to decrypt the key (if it is encrypted).
 
      This function will convert the given PEM encrypted to the native
-     gnutls_x509_privkey_t format.  The output will be stored in 'key' .
+     gnutls_x509_privkey_t format. The output will be stored in  `key' .
 
-     The 'password' should be in ASCII. If the password is not provided
-     or wrong then 'GNUTLS_E_DECRYPTION_FAILED' will be returned.
+     The  `password' should be in ASCII. If the password is not provided
+     or wrong then `GNUTLS_E_DECRYPTION_FAILED'  will be returned.
 
      If the Certificate is PEM encoded it should have a header of
      "PRIVATE KEY" and the "DEK-Info" header.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 
@@ -3047,118 +3119,119 @@ Tool to parse and generate X.509 certificates, requests and private
 keys.  It can be used interactively or non interactively by specifying
 the template command line option.
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'certtool' program.  This software
-is released under the GNU General Public License, version 3 or later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `certtool' program.  This
+software is released under the GNU General Public License, version 3 or
+later.
 
-certtool help/usage ('--help')
+certtool help/usage (`--help')
 ..............................
 
 This is the automatically generated usage text for certtool.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
-
-     certtool - GnuTLS certificate tool - Ver. @VERSION@
-     USAGE:  lt-certtool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
-
-        -d, --debug=num            Enable debugging.
-                                     - It must be in the range:
-                                       0 to 9999
-        -V, --verbose              More verbose output
-                                     - may appear multiple times
-            --infile=file          Input file
-                                     - file must pre-exist
-            --outfile=str          Output file
-        -s, --generate-self-signed  Generate a self-signed certificate
-        -c, --generate-certificate  Generate a signed certificate
-            --generate-proxy       Generates a proxy certificate
-            --generate-crl         Generate a CRL
-        -u, --update-certificate   Update a signed certificate
-        -p, --generate-privkey     Generate a private key
-        -q, --generate-request     Generate a PKCS #10 certificate request
-                                     - prohibits these options:
-                                     infile
-        -e, --verify-chain         Verify a PEM encoded certificate chain.
-            --verify               Verify a PEM encoded certificate chain using a trusted list.
-                                     - requires these options:
-                                     load-ca-certificate
-            --verify-crl           Verify a CRL using a trusted list.
-                                     - requires these options:
-                                     load-ca-certificate
-            --generate-dh-params   Generate PKCS #3 encoded Diffie-Hellman parameters.
-            --get-dh-params        Get the included PKCS #3 encoded Diffie-Hellman parameters.
-            --dh-info              Print information PKCS #3 encoded Diffie-Hellman parameters
-            --load-privkey=str     Loads a private key file
-            --load-pubkey=str      Loads a public key file
-            --load-request=file    Loads a certificate request file
-                                     - file must pre-exist
-            --load-certificate=str Loads a certificate file
-            --load-ca-privkey=str  Loads the certificate authority's private key file
-            --load-ca-certificate=str Loads the certificate authority's certificate file
-            --password=str         Password to use
-            --hex-numbers          Print big number in an easier format to parse
-            --cprint               In certain operations it prints the information is C-friendly format
-            --null-password        Enforce a NULL password
-        -i, --certificate-info     Print information on the given certificate
-            --certificate-pubkey   Print certificate's public key
-            --pgp-certificate-info  Print information on the given OpenPGP certificate
-            --pgp-ring-info        Print information on the given OpenPGP keyring structure
-        -l, --crl-info             Print information on the given CRL structure
-            --crq-info             Print information on the given certificate request
-            --no-crq-extensions    Do not use extensions in certificate requests
-            --p12-info             Print information on a PKCS #12 structure
-            --p7-info              Print information on a PKCS #7 structure
-            --smime-to-p7          Convert S/MIME to PKCS #7 structure
-        -k, --key-info             Print information on a private key
-            --pgp-key-info         Print information on an OpenPGP private key
-            --pubkey-info          Print information on a public key
-            --v1                   Generate an X.509 version 1 certificate (with no extensions)
-            --to-p12               Generate a PKCS #12 structure
-                                     - requires these options:
-                                     load-certificate
-            --to-p8                Generate a PKCS #8 structure
-        -8, --pkcs8                Use PKCS #8 format for private keys
-            --rsa                  Generate RSA key
-            --dsa                  Generate DSA key
-            --ecc                  Generate ECC (ECDSA) key
-            --ecdsa                This is an alias for 'ecc'
-            --hash=str             Hash algorithm to use for signing.
-            --inder                Use DER format for input certificates and private keys.
-                                     - disabled as --no-inder
-            --inraw                This is an alias for 'inder'
-            --outder               Use DER format for output certificates and private keys
-                                     - disabled as --no-outder
-            --outraw               This is an alias for 'outder'
-            --bits=num             Specify the number of bits for key generate
-            --sec-param=str        Specify the security level [low, legacy, normal, high, ultra].
-            --disable-quick-random  No effect
-            --template=file        Template file to use for non-interactive operation
-                                     - file must pre-exist
-            --pkcs-cipher=str      Cipher to use for PKCS #8 and #12 operations
-        -v, --version[=arg]        Output version information and exit
-        -h, --help                 Display extended usage information and exit
-        -!, --more-help            Extended usage information passed thru pager
-
-     Options are specified by doubled hyphens and their name or by a single
-     hyphen and the flag character.
-
-
-
-     Tool to parse and generate X.509 certificates, requests and private keys.
-     It can be used interactively or non interactively by specifying the
-     template command line option.
-
-     please send bug reports to:  bug-gnutls@gnu.org
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
+
+certtool - GnuTLS certificate tool - Ver. 3.1.13
+USAGE:  lt-certtool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
+
+   -d, --debug=num            Enable debugging.
+                                - It must be in the range:
+                                  0 to 9999
+   -V, --verbose              More verbose output
+                                - may appear multiple times
+       --infile=file          Input file
+                                - file must pre-exist
+       --outfile=str          Output file
+   -s, --generate-self-signed  Generate a self-signed certificate
+   -c, --generate-certificate  Generate a signed certificate
+       --generate-proxy       Generates a proxy certificate
+       --generate-crl         Generate a CRL
+   -u, --update-certificate   Update a signed certificate
+   -p, --generate-privkey     Generate a private key
+   -q, --generate-request     Generate a PKCS #10 certificate request
+                                - prohibits these options:
+                                infile
+   -e, --verify-chain         Verify a PEM encoded certificate chain.
+       --verify               Verify a PEM encoded certificate chain using a trusted list.
+                                - requires these options:
+                                load-ca-certificate
+       --verify-crl           Verify a CRL using a trusted list.
+                                - requires these options:
+                                load-ca-certificate
+       --generate-dh-params   Generate PKCS #3 encoded Diffie-Hellman parameters.
+       --get-dh-params        Get the included PKCS #3 encoded Diffie-Hellman parameters.
+       --dh-info              Print information PKCS #3 encoded Diffie-Hellman parameters
+       --load-privkey=str     Loads a private key file
+       --load-pubkey=str      Loads a public key file
+       --load-request=file    Loads a certificate request file
+                                - file must pre-exist
+       --load-certificate=str Loads a certificate file
+       --load-ca-privkey=str  Loads the certificate authority's private key file
+       --load-ca-certificate=str Loads the certificate authority's certificate file
+       --password=str         Password to use
+       --hex-numbers          Print big number in an easier format to parse
+       --cprint               In certain operations it prints the information is C-friendly format
+       --null-password        Enforce a NULL password
+   -i, --certificate-info     Print information on the given certificate
+       --certificate-pubkey   Print certificate's public key
+       --pgp-certificate-info  Print information on the given OpenPGP certificate
+       --pgp-ring-info        Print information on the given OpenPGP keyring structure
+   -l, --crl-info             Print information on the given CRL structure
+       --crq-info             Print information on the given certificate request
+       --no-crq-extensions    Do not use extensions in certificate requests
+       --p12-info             Print information on a PKCS #12 structure
+       --p7-info              Print information on a PKCS #7 structure
+       --smime-to-p7          Convert S/MIME to PKCS #7 structure
+   -k, --key-info             Print information on a private key
+       --pgp-key-info         Print information on an OpenPGP private key
+       --pubkey-info          Print information on a public key
+       --v1                   Generate an X.509 version 1 certificate (with no extensions)
+       --to-p12               Generate a PKCS #12 structure
+                                - requires these options:
+                                load-certificate
+       --to-p8                Generate a PKCS #8 structure
+   -8, --pkcs8                Use PKCS #8 format for private keys
+       --rsa                  Generate RSA key
+       --dsa                  Generate DSA key
+       --ecc                  Generate ECC (ECDSA) key
+       --ecdsa                This is an alias for 'ecc'
+       --hash=str             Hash algorithm to use for signing.
+       --inder                Use DER format for input certificates and private keys.
+                                - disabled as --no-inder
+       --inraw                This is an alias for 'inder'
+       --outder               Use DER format for output certificates and private keys
+                                - disabled as --no-outder
+       --outraw               This is an alias for 'outder'
+       --bits=num             Specify the number of bits for key generate
+       --sec-param=str        Specify the security level [low, legacy, normal, high, ultra].
+       --disable-quick-random  No effect
+       --template=file        Template file to use for non-interactive operation
+                                - file must pre-exist
+       --pkcs-cipher=str      Cipher to use for PKCS #8 and #12 operations
+   -v, --version[=arg]        Output version information and exit
+   -h, --help                 Display extended usage information and exit
+   -!, --more-help            Extended usage information passed thru pager
+
+Options are specified by doubled hyphens and their name or by a single
+hyphen and the flag character.
+
+
+
+Tool to parse and generate X.509 certificates, requests and private keys.
+It can be used interactively or non interactively by specifying the
+template command line option.
+
+please send bug reports to:  bug-gnutls@gnu.org
 
 debug option (-d)
 .................
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 generate-request option (-q)
@@ -3170,20 +3243,20 @@ This option has some usage constraints.  It:
    * must not appear in combination with any of the following options:
      infile.
 
-Will generate a PKCS #10 certificate request.  To specify a private key
+Will generate a PKCS #10 certificate request. To specify a private key
 use -load-privkey.
 
 verify-chain option (-e)
 ........................
 
-This is the "verify a pem encoded certificate chain."  option.  The last
+This is the "verify a pem encoded certificate chain." option.  The last
 certificate in the chain must be a self signed one.
 
 verify option
 .............
 
 This is the "verify a pem encoded certificate chain using a trusted
-list."  option.
+list." option.
 
 This option has some usage constraints.  It:
    * must appear in combination with the following options:
@@ -3194,7 +3267,7 @@ The trusted certificate list must be loaded with -load-ca-certificate.
 verify-crl option
 .................
 
-This is the "verify a crl using a trusted list."  option.
+This is the "verify a crl using a trusted list." option.
 
 This option has some usage constraints.  It:
    * must appear in combination with the following options:
@@ -3206,8 +3279,8 @@ get-dh-params option
 ....................
 
 This is the "get the included pkcs #3 encoded diffie-hellman
-parameters."  option.  Returns stored DH parameters in GnuTLS. Those
-parameters are used in the SRP protocol.  The parameters returned by
+parameters." option.  Returns stored DH parameters in GnuTLS. Those
+parameters are used in the SRP protocol. The parameters returned by
 fresh generation are more efficient since GnuTLS 3.0.9.
 
 load-privkey option
@@ -3254,7 +3327,7 @@ null-password option
 ....................
 
 This is the "enforce a null password" option.  This option enforces a
-NULL password.  This may be different than the empty password in some
+NULL password. This may be different than the empty password in some
 schemas.
 
 pubkey-info option
@@ -3298,13 +3371,13 @@ with ECDSA.
 ecdsa option
 ............
 
-This is an alias for the 'ecc' option, *note the ecc option
+This is an alias for the `ecc' option, *note the ecc option
 documentation: certtool ecc.
 
 hash option
 ...........
 
-This is the "hash algorithm to use for signing."  option.  This option
+This is the "hash algorithm to use for signing." option.  This option
 takes an argument string.  Available hash functions are SHA1, RMD160,
 SHA256, SHA384, SHA512.
 
@@ -3320,7 +3393,7 @@ structure is read.
 inraw option
 ............
 
-This is an alias for the 'inder' option, *note the inder option
+This is an alias for the `inder' option, *note the inder option
 documentation: certtool inder.
 
 outder option
@@ -3332,30 +3405,31 @@ option.  The output will be in DER or RAW format.
 outraw option
 .............
 
-This is an alias for the 'outder' option, *note the outder option
+This is an alias for the `outder' option, *note the outder option
 documentation: certtool outder.
 
 sec-param option
 ................
 
 This is the "specify the security level [low, legacy, normal, high,
-ultra]."  option.  This option takes an argument string 'Security
+ultra]." option.  This option takes an argument string `Security
 parameter'.  This is alternative to the bits option.
 
 pkcs-cipher option
 ..................
 
-This is the "cipher to use for pkcs #8 and #12 operations" option.  This
-option takes an argument string 'Cipher'.  Cipher may be one of 3des,
-3des-pkcs12, aes-128, aes-192, aes-256, rc2-40, arcfour.
+This is the "cipher to use for pkcs #8 and #12 operations" option.
+This option takes an argument string `Cipher'.  Cipher may be one of
+3des, 3des-pkcs12, aes-128, aes-192, aes-256, rc2-40, arcfour.
 
 certtool exit status
 ....................
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 certtool See Also
@@ -3370,7 +3444,7 @@ Generating private keys
 .......................
 
 To create an RSA private key, run:
-     $ certtool --generate-privkey --outfile key.pem --rsa
+    $ certtool --generate-privkey --outfile key.pem --rsa
 
 To create a DSA or elliptic curves (ECDSA) private key use the above
 command combined with 'dsa' or 'ecc' options.
@@ -3378,23 +3452,23 @@ command combined with 'dsa' or 'ecc' options.
 Generating certificate requests
 ...............................
 
-To create a certificate request (needed when the certificate is issued
+To create a certificate request (needed when the certificate is  issued
 by another party), run:
-     certtool --generate-request --load-privkey key.pem \
-        --outfile request.pem
+    certtool --generate-request --load-privkey key.pem \
+       --outfile request.pem
 
 If the private key is stored in a smart card you can generate a request
 by specifying the private key object URL.
-     $ ./certtool --generate-request --load-privkey "pkcs11:..." \
-       --load-pubkey "pkcs11:..." --outfile request.pem
+    $ ./certtool --generate-request --load-privkey "pkcs11:..." \
+      --load-pubkey "pkcs11:..." --outfile request.pem
 
 Generating a self-signed certificate
 ....................................
 
 To create a self signed certificate, use the command:
-     $ certtool --generate-privkey --outfile ca-key.pem
-     $ certtool --generate-self-signed --load-privkey ca-key.pem \
-        --outfile ca-cert.pem
+    $ certtool --generate-privkey --outfile ca-key.pem
+    $ certtool --generate-self-signed --load-privkey ca-key.pem \
+       --outfile ca-cert.pem
 
 Note that a self-signed certificate usually belongs to a certificate
 authority, that signs other certificates.
@@ -3403,43 +3477,43 @@ Generating a certificate
 ........................
 
 To generate a certificate using the previous request, use the command:
-     $ certtool --generate-certificate --load-request request.pem \
-        --outfile cert.pem --load-ca-certificate ca-cert.pem \
-        --load-ca-privkey ca-key.pem
+    $ certtool --generate-certificate --load-request request.pem \
+       --outfile cert.pem --load-ca-certificate ca-cert.pem \
+       --load-ca-privkey ca-key.pem
 
 To generate a certificate using the private key only, use the command:
-     $ certtool --generate-certificate --load-privkey key.pem \
-        --outfile cert.pem --load-ca-certificate ca-cert.pem \
-        --load-ca-privkey ca-key.pem
+    $ certtool --generate-certificate --load-privkey key.pem \
+       --outfile cert.pem --load-ca-certificate ca-cert.pem \
+       --load-ca-privkey ca-key.pem
 
 Certificate information
 .......................
 
 To view the certificate information, use:
-     $ certtool --certificate-info --infile cert.pem
+    $ certtool --certificate-info --infile cert.pem
 
 PKCS #12 structure generation
 .............................
 
 To generate a PKCS #12 structure using the previous key and certificate,
 use the command:
-     $ certtool --load-certificate cert.pem --load-privkey key.pem \
-        --to-p12 --outder --outfile key.p12
+    $ certtool --load-certificate cert.pem --load-privkey key.pem \
+       --to-p12 --outder --outfile key.p12
 
 Some tools (reportedly web browsers) have problems with that file
 because it does not contain the CA certificate for the certificate.  To
 work around that problem in the tool, you can use the
 -load-ca-certificate parameter as follows:
 
-     $ certtool --load-ca-certificate ca.pem \
-       --load-certificate cert.pem --load-privkey key.pem \
-       --to-p12 --outder --outfile key.p12
+    $ certtool --load-ca-certificate ca.pem \
+      --load-certificate cert.pem --load-privkey key.pem \
+      --to-p12 --outder --outfile key.p12
 
 Diffie-Hellman parameter generation
 ...................................
 
 To generate parameters for Diffie-Hellman key exchange, use the command:
-     $ certtool --generate-dh-params --outfile dh.pem --sec-param normal
+    $ certtool --generate-dh-params --outfile dh.pem --sec-param normal
 
 Proxy certificate generation
 ............................
@@ -3449,28 +3523,28 @@ temporary, typically short-lived, certificate.  To create one from the
 previously created certificate, first create a temporary key and then
 generate a proxy certificate for it, using the commands:
 
-     $ certtool --generate-privkey > proxy-key.pem
-     $ certtool --generate-proxy --load-ca-privkey key.pem \
-       --load-privkey proxy-key.pem --load-certificate cert.pem \
-       --outfile proxy-cert.pem
+    $ certtool --generate-privkey > proxy-key.pem
+    $ certtool --generate-proxy --load-ca-privkey key.pem \
+      --load-privkey proxy-key.pem --load-certificate cert.pem \
+      --outfile proxy-cert.pem
 
 Certificate revocation list generation
 ......................................
 
 To create an empty Certificate Revocation List (CRL) do:
 
-     $ certtool --generate-crl --load-ca-privkey x509-ca-key.pem \
-                --load-ca-certificate x509-ca.pem
+    $ certtool --generate-crl --load-ca-privkey x509-ca-key.pem \
+               --load-ca-certificate x509-ca.pem
 
 To create a CRL that contains some revoked certificates, place the
-certificates in a file and use '--load-certificate' as follows:
+certificates in a file and use `--load-certificate' as follows:
 
-     $ certtool --generate-crl --load-ca-privkey x509-ca-key.pem \
-       --load-ca-certificate x509-ca.pem --load-certificate revoked-certs.pem
+    $ certtool --generate-crl --load-ca-privkey x509-ca-key.pem \
+      --load-ca-certificate x509-ca.pem --load-certificate revoked-certs.pem
 
 To verify a Certificate Revocation List (CRL) do:
 
-     $ certtool --verify-crl --load-ca-certificate x509-ca.pem < crl.pem
+    $ certtool --verify-crl --load-ca-certificate x509-ca.pem < crl.pem
 
 certtool Files
 ..............
@@ -3479,180 +3553,180 @@ Certtool's template file format
 ...............................
 
 A template file can be used to avoid the interactive questions of
-certtool.  Initially create a file named 'cert.cfg' that contains the
-information about the certificate.  The template can be used as below:
+certtool. Initially create a file named 'cert.cfg' that contains the
+information about the certificate. The template can be used as below:
 
-     $ certtool --generate-certificate cert.pem --load-privkey key.pem  \
-        --template cert.cfg \
-        --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem
+    $ certtool --generate-certificate cert.pem --load-privkey key.pem  \
+       --template cert.cfg \
+       --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem
 
 An example certtool template file that can be used to generate a
 certificate request or a self signed certificate follows.
 
-     # X.509 Certificate options
-     #
-     # DN options
+    # X.509 Certificate options
+    #
+    # DN options
 
-     # The organization of the subject.
-     organization = "Koko inc."
+    # The organization of the subject.
+    organization = "Koko inc."
 
-     # The organizational unit of the subject.
-     unit = "sleeping dept."
+    # The organizational unit of the subject.
+    unit = "sleeping dept."
 
-     # The locality of the subject.
-     # locality =
+    # The locality of the subject.
+    # locality =
 
-     # The state of the certificate owner.
-     state = "Attiki"
+    # The state of the certificate owner.
+    state = "Attiki"
 
-     # The country of the subject. Two letter code.
-     country = GR
+    # The country of the subject. Two letter code.
+    country = GR
 
-     # The common name of the certificate owner.
-     cn = "Cindy Lauper"
+    # The common name of the certificate owner.
+    cn = "Cindy Lauper"
 
-     # A user id of the certificate owner.
-     #uid = "clauper"
+    # A user id of the certificate owner.
+    #uid = "clauper"
 
-     # Set domain components
-     #dc = "name"
-     #dc = "domain"
+    # Set domain components
+    #dc = "name"
+    #dc = "domain"
 
-     # If the supported DN OIDs are not adequate you can set
-     # any OID here.
-     # For example set the X.520 Title and the X.520 Pseudonym
-     # by using OID and string pairs.
-     #dn_oid = 2.5.4.12 Dr.
-     #dn_oid = 2.5.4.65 jackal
+    # If the supported DN OIDs are not adequate you can set
+    # any OID here.
+    # For example set the X.520 Title and the X.520 Pseudonym
+    # by using OID and string pairs.
+    #dn_oid = 2.5.4.12 Dr.
+    #dn_oid = 2.5.4.65 jackal
 
-     # This is deprecated and should not be used in new
-     # certificates.
-     # pkcs9_email = "none@none.org"
+    # This is deprecated and should not be used in new
+    # certificates.
+    # pkcs9_email = "none@none.org"
 
-     # An alternative way to set the certificate's distinguished name directly
-     # is with the "dn" option. The attribute names allowed are:
-     # C (country), street, O (organization), OU (unit), title, CN (common name),
-     # L (locality), ST (state), placeOfBirth, gender, countryOfCitizenship,
-     # countryOfResidence, serialNumber, telephoneNumber, surName, initials,
-     # generationQualifier, givenName, pseudonym, dnQualifier, postalCode, name,
-     # businessCategory, DC, UID, jurisdictionOfIncorporationLocalityName,
-     # jurisdictionOfIncorporationStateOrProvinceName,
-     # jurisdictionOfIncorporationCountryName, XmppAddr, and numeric OIDs.
+    # An alternative way to set the certificate's distinguished name directly
+    # is with the "dn" option. The attribute names allowed are:
+    # C (country), street, O (organization), OU (unit), title, CN (common name),
+    # L (locality), ST (state), placeOfBirth, gender, countryOfCitizenship,
+    # countryOfResidence, serialNumber, telephoneNumber, surName, initials,
+    # generationQualifier, givenName, pseudonym, dnQualifier, postalCode, name,
+    # businessCategory, DC, UID, jurisdictionOfIncorporationLocalityName,
+    # jurisdictionOfIncorporationStateOrProvinceName,
+    # jurisdictionOfIncorporationCountryName, XmppAddr, and numeric OIDs.
 
-     #dn = "cn=Nik,st=Attiki,C=GR,surName=Mavrogiannopoulos,2.5.4.9=Arkadias"
+    #dn = "cn=Nik,st=Attiki,C=GR,surName=Mavrogiannopoulos,2.5.4.9=Arkadias"
 
-     # The serial number of the certificate
-     serial = 007
+    # The serial number of the certificate
+    serial = 007
 
-     # In how many days, counting from today, this certificate will expire.
-     expiration_days = 700
+    # In how many days, counting from today, this certificate will expire.
+    expiration_days = 700
 
-     # X.509 v3 extensions
+    # X.509 v3 extensions
 
-     # A dnsname in case of a WWW server.
-     #dns_name = "www.none.org"
-     #dns_name = "www.morethanone.org"
+    # A dnsname in case of a WWW server.
+    #dns_name = "www.none.org"
+    #dns_name = "www.morethanone.org"
 
-     # A subject alternative name URI
-     #uri = "http://www.example.com"
+    # A subject alternative name URI
+    #uri = "http://www.example.com"
 
-     # An IP address in case of a server.
-     #ip_address = "192.168.1.1"
+    # An IP address in case of a server.
+    #ip_address = "192.168.1.1"
 
-     # An email in case of a person
-     email = "none@none.org"
+    # An email in case of a person
+    email = "none@none.org"
 
-     # Challenge password used in certificate requests
-     challenge_password = 123456
+    # Challenge password used in certificate requests
+    challenge_password = 123456
 
-     # Password when encrypting a private key
-     #password = secret
+    # Password when encrypting a private key
+    #password = secret
 
-     # An URL that has CRLs (certificate revocation lists)
-     # available. Needed in CA certificates.
-     #crl_dist_points = "http://www.getcrl.crl/getcrl/"
+    # An URL that has CRLs (certificate revocation lists)
+    # available. Needed in CA certificates.
+    #crl_dist_points = "http://www.getcrl.crl/getcrl/"
 
-     # Whether this is a CA certificate or not
-     #ca
+    # Whether this is a CA certificate or not
+    #ca
 
-     # for microsoft smart card logon
-     # key_purpose_oid = 1.3.6.1.4.1.311.20.2.2
+    # for microsoft smart card logon
+    # key_purpose_oid = 1.3.6.1.4.1.311.20.2.2
 
-     ### Other predefined key purpose OIDs
+    ### Other predefined key purpose OIDs
 
-     # Whether this certificate will be used for a TLS client
-     #tls_www_client
+    # Whether this certificate will be used for a TLS client
+    #tls_www_client
 
-     # Whether this certificate will be used for a TLS server
-     #tls_www_server
+    # Whether this certificate will be used for a TLS server
+    #tls_www_server
 
-     # Whether this certificate will be used to sign data (needed
-     # in TLS DHE ciphersuites).
-     signing_key
+    # Whether this certificate will be used to sign data (needed
+    # in TLS DHE ciphersuites).
+    signing_key
 
-     # Whether this certificate will be used to encrypt data (needed
-     # in TLS RSA ciphersuites). Note that it is preferred to use different
-     # keys for encryption and signing.
-     encryption_key
+    # Whether this certificate will be used to encrypt data (needed
+    # in TLS RSA ciphersuites). Note that it is preferred to use different
+    # keys for encryption and signing.
+    encryption_key
 
-     # Whether this key will be used to sign other certificates.
-     #cert_signing_key
+    # Whether this key will be used to sign other certificates.
+    #cert_signing_key
 
-     # Whether this key will be used to sign CRLs.
-     #crl_signing_key
+    # Whether this key will be used to sign CRLs.
+    #crl_signing_key
 
-     # Whether this key will be used to sign code.
-     #code_signing_key
+    # Whether this key will be used to sign code.
+    #code_signing_key
 
-     # Whether this key will be used to sign OCSP data.
-     #ocsp_signing_key
+    # Whether this key will be used to sign OCSP data.
+    #ocsp_signing_key
 
-     # Whether this key will be used for time stamping.
-     #time_stamping_key
+    # Whether this key will be used for time stamping.
+    #time_stamping_key
 
-     # Whether this key will be used for IPsec IKE operations.
-     #ipsec_ike_key
+    # Whether this key will be used for IPsec IKE operations.
+    #ipsec_ike_key
 
-     ### end of key purpose OIDs
+    ### end of key purpose OIDs
 
-     # When generating a certificate from a certificate
-     # request, then honor the extensions stored in the request
-     # and store them in the real certificate.
-     #honor_crq_extensions
+    # When generating a certificate from a certificate
+    # request, then honor the extensions stored in the request
+    # and store them in the real certificate.
+    #honor_crq_extensions
 
-     # Path length contraint. Sets the maximum number of
-     # certificates that can be used to certify this certificate.
-     # (i.e. the certificate chain length)
-     #path_len = -1
-     #path_len = 2
+    # Path length contraint. Sets the maximum number of
+    # certificates that can be used to certify this certificate.
+    # (i.e. the certificate chain length)
+    #path_len = -1
+    #path_len = 2
 
-     # OCSP URI
-     # ocsp_uri = http://my.ocsp.server/ocsp
+    # OCSP URI
+    # ocsp_uri = http://my.ocsp.server/ocsp
 
-     # CA issuers URI
-     # ca_issuers_uri = http://my.ca.issuer
+    # CA issuers URI
+    # ca_issuers_uri = http://my.ca.issuer
 
-     # Certificate policies
-     # policy1 = 1.3.6.1.4.1.5484.1.10.99.1.0
-     # policy1_txt = "This is a long policy to summarize"
-     # policy1_url = http://www.example.com/a-policy-to-read
+    # Certificate policies
+    # policy1 = 1.3.6.1.4.1.5484.1.10.99.1.0
+    # policy1_txt = "This is a long policy to summarize"
+    # policy1_url = http://www.example.com/a-policy-to-read
 
-     # policy2 = 1.3.6.1.4.1.5484.1.10.99.1.1
-     # policy2_txt = "This is a short policy"
-     # policy2_url = http://www.example.com/another-policy-to-read
+    # policy2 = 1.3.6.1.4.1.5484.1.10.99.1.1
+    # policy2_txt = "This is a short policy"
+    # policy2_url = http://www.example.com/another-policy-to-read
 
 
-     # Options for proxy certificates
-     # proxy_policy_language = 1.3.6.1.5.5.7.21.1
+    # Options for proxy certificates
+    # proxy_policy_language = 1.3.6.1.5.5.7.21.1
 
 
-     # Options for generating a CRL
+    # Options for generating a CRL
 
-     # next CRL update will be in 43 days (wow)
-     #crl_next_update = 43
+    # next CRL update will be in 43 days (wow)
+    #crl_next_update = 43
 
-     # this is the 5th CRL by this CA
-     #crl_number = 5
+    # this is the 5th CRL by this CA
+    #crl_number = 5
 
 
 File: gnutls.info,  Node: ocsptool Invocation,  Next: danetool Invocation,  Prev: certtool Invocation,  Up: More on certificate authentication
@@ -3663,82 +3737,83 @@ File: gnutls.info,  Node: ocsptool Invocation,  Next: danetool Invocation,  Prev
 Ocsptool is a program that can parse and print information about OCSP
 requests/responses, generate requests and verify responses.
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'ocsptool' program.  This software
-is released under the GNU General Public License, version 3 or later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `ocsptool' program.  This
+software is released under the GNU General Public License, version 3 or
+later.
 
-ocsptool help/usage ('--help')
+ocsptool help/usage (`--help')
 ..............................
 
 This is the automatically generated usage text for ocsptool.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
-
-     ocsptool - GnuTLS OCSP tool
-     Usage:  ocsptool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
-
-        -d, --debug=num            Enable debugging.
-                                     - it must be in the range:
-                                       0 to 9999
-        -V, --verbose              More verbose output
-                                     - may appear multiple times
-            --infile=file          Input file
-                                     - file must pre-exist
-            --outfile=str          Output file
-            --ask[=arg]            Ask an OCSP/HTTP server on a certificate validity
-                                     - requires these options:
-                                     load-cert
-                                     load-issuer
-        -e, --verify-response      Verify response
-        -i, --request-info         Print information on a OCSP request
-        -j, --response-info        Print information on a OCSP response
-        -q, --generate-request     Generate an OCSP request
-            --nonce                Don't add nonce to OCSP request
-                                     - disabled as '--no-nonce'
-            --load-issuer=file     Read issuer certificate from file
-                                     - file must pre-exist
-            --load-cert=file       Read certificate to check from file
-                                     - file must pre-exist
-            --load-trust=file      Read OCSP trust anchors from file
-                                     - prohibits the option 'load-signer'
-                                     - file must pre-exist
-            --load-signer=file     Read OCSP response signer from file
-                                     - prohibits the option 'load-trust'
-                                     - file must pre-exist
-            --inder                Use DER format for input certificates and private keys
-                                     - disabled as '--no-inder'
-        -Q, --load-request=file    Read DER encoded OCSP request from file
-                                     - file must pre-exist
-        -S, --load-response=file   Read DER encoded OCSP response from file
-                                     - file must pre-exist
-        -v, --version[=arg]        output version information and exit
-        -h, --help                 display extended usage information and exit
-        -!, --more-help            extended usage information passed thru pager
-
-     Options are specified by doubled hyphens and their name or by a single
-     hyphen and the flag character.
-
-     Ocsptool is a program that can parse and print information about OCSP
-     requests/responses, generate requests and verify responses.
-
-     Please send bug reports to:  <bug-gnutls@gnu.org>
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
+
+ocsptool - GnuTLS OCSP tool
+Usage:  ocsptool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
+
+   -d, --debug=num            Enable debugging.
+                                - it must be in the range:
+                                  0 to 9999
+   -V, --verbose              More verbose output
+                                - may appear multiple times
+       --infile=file          Input file
+                                - file must pre-exist
+       --outfile=str          Output file
+       --ask[=arg]            Ask an OCSP/HTTP server on a certificate validity
+                                - requires these options:
+                                load-cert
+                                load-issuer
+   -e, --verify-response      Verify response
+   -i, --request-info         Print information on a OCSP request
+   -j, --response-info        Print information on a OCSP response
+   -q, --generate-request     Generate an OCSP request
+       --nonce                Don't add nonce to OCSP request
+                                - disabled as '--no-nonce'
+       --load-issuer=file     Read issuer certificate from file
+                                - file must pre-exist
+       --load-cert=file       Read certificate to check from file
+                                - file must pre-exist
+       --load-trust=file      Read OCSP trust anchors from file
+                                - prohibits the option 'load-signer'
+                                - file must pre-exist
+       --load-signer=file     Read OCSP response signer from file
+                                - prohibits the option 'load-trust'
+                                - file must pre-exist
+       --inder                Use DER format for input certificates and private keys
+                                - disabled as '--no-inder'
+   -Q, --load-request=file    Read DER encoded OCSP request from file
+                                - file must pre-exist
+   -S, --load-response=file   Read DER encoded OCSP response from file
+                                - file must pre-exist
+   -v, --version[=arg]        output version information and exit
+   -h, --help                 display extended usage information and exit
+   -!, --more-help            extended usage information passed thru pager
+
+Options are specified by doubled hyphens and their name or by a single
+hyphen and the flag character.
+
+Ocsptool is a program that can parse and print information about OCSP
+requests/responses, generate requests and verify responses.
+
+Please send bug reports to:  <bug-gnutls@gnu.org>
 
 debug option (-d)
 .................
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 ask option
 ..........
 
 This is the "ask an ocsp/http server on a certificate validity" option.
-This option takes an optional argument string 'server name|url'.
+This option takes an optional argument string `server name|url'.
 
 This option has some usage constraints.  It:
    * must appear in combination with the following options: load-cert,
@@ -3751,9 +3826,10 @@ ocsptool exit status
 ....................
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 ocsptool See Also
@@ -3768,59 +3844,60 @@ Print information about an OCSP request
 .......................................
 
 To parse an OCSP request and print information about the content, the
-'-i' or '--request-info' parameter may be used as follows.  The '-Q'
+`-i' or `--request-info' parameter may be used as follows.  The `-Q'
 parameter specify the name of the file containing the OCSP request, and
 it should contain the OCSP request in binary DER format.
 
-     $ ocsptool -i -Q ocsp-request.der
+    $ ocsptool -i -Q ocsp-request.der
 
 The input file may also be sent to standard input like this:
 
-     $ cat ocsp-request.der | ocsptool --request-info
+    $ cat ocsp-request.der | ocsptool --request-info
 
 Print information about an OCSP response
 ........................................
 
-Similar to parsing OCSP requests, OCSP responses can be parsed using the
-'-j' or '--response-info' as follows.
+Similar to parsing OCSP requests, OCSP responses can be parsed using
+the `-j' or `--response-info' as follows.
 
-     $ ocsptool -j -Q ocsp-response.der
-     $ cat ocsp-response.der | ocsptool --response-info
+    $ ocsptool -j -Q ocsp-response.der
+    $ cat ocsp-response.der | ocsptool --response-info
 
 Generate an OCSP request
 ........................
 
-The '-q' or '--generate-request' parameters are used to generate an OCSP
-request.  By default the OCSP request is written to standard output in
-binary DER format, but can be stored in a file using '--outfile'.  To
-generate an OCSP request the issuer of the certificate to check needs to
-be specified with '--load-issuer' and the certificate to check with
-'--load-cert'.  By default PEM format is used for these files, although
-'--inder' can be used to specify that the input files are in DER format.
+The `-q' or `--generate-request' parameters are used to generate an
+OCSP request.  By default the OCSP request is written to standard
+output in binary DER format, but can be stored in a file using
+`--outfile'.  To generate an OCSP request the issuer of the certificate
+to check needs to be specified with `--load-issuer' and the certificate
+to check with `--load-cert'.  By default PEM format is used for these
+files, although `--inder' can be used to specify that the input files
+are in DER format.
 
-     $ ocsptool -q --load-issuer issuer.pem --load-cert client.pem \
-                --outfile ocsp-request.der
+    $ ocsptool -q --load-issuer issuer.pem --load-cert client.pem \
+               --outfile ocsp-request.der
 
 When generating OCSP requests, the tool will add an OCSP extension
 containing a nonce.  This behaviour can be disabled by specifying
-'--no-nonce'.
+`--no-nonce'.
 
 Verify signature in OCSP response
 .................................
 
-To verify the signature in an OCSP response the '-e' or
-'--verify-response' parameter is used.  The tool will read an OCSP
+To verify the signature in an OCSP response the `-e' or
+`--verify-response' parameter is used.  The tool will read an OCSP
 response in DER format from standard input, or from the file specified
-by '--load-response'.  The OCSP response is verified against a set of
-trust anchors, which are specified using '--load-trust'.  The trust
+by `--load-response'.  The OCSP response is verified against a set of
+trust anchors, which are specified using `--load-trust'.  The trust
 anchors are concatenated certificates in PEM format.  The certificate
 that signed the OCSP response needs to be in the set of trust anchors,
 or the issuer of the signer certificate needs to be in the set of trust
 anchors and the OCSP Extended Key Usage bit has to be asserted in the
 signer certificate.
 
-     $ ocsptool -e --load-trust issuer.pem \
-                --load-response ocsp-response.der
+    $ ocsptool -e --load-trust issuer.pem \
+               --load-response ocsp-response.der
 
 The tool will print status of verification.
 
@@ -3830,16 +3907,16 @@ Verify signature in OCSP response against given certificate
 It is possible to override the normal trust logic if you know that a
 certain certificate is supposed to have signed the OCSP response, and
 you want to use it to check the signature.  This is achieved using
-'--load-signer' instead of '--load-trust'.  This will load one
+`--load-signer' instead of `--load-trust'.  This will load one
 certificate and it will be used to verify the signature in the OCSP
 response.  It will not check the Extended Key Usage bit.
 
-     $ ocsptool -e --load-signer ocsp-signer.pem \
-                --load-response ocsp-response.der
+    $ ocsptool -e --load-signer ocsp-signer.pem \
+               --load-response ocsp-response.der
 
-This approach is normally only relevant in two situations.  The first is
-when the OCSP response does not contain a copy of the signer
-certificate, so the '--load-trust' code would fail.  The second is if
+This approach is normally only relevant in two situations.  The first
+is when the OCSP response does not contain a copy of the signer
+certificate, so the `--load-trust' code would fail.  The second is if
 you want to avoid the indirect mode where the OCSP response signer
 certificate is signed by a trust anchor.
 
@@ -3848,34 +3925,34 @@ Real-world example
 
 Here is an example of how to generate an OCSP request for a certificate
 and to verify the response.  For illustration we'll use the
-'blog.josefsson.org' host, which (as of writing) uses a certificate from
-CACert.  First we'll use 'gnutls-cli' to get a copy of the server
-certificate chain.  The server is not required to send this information,
-but this particular one is configured to do so.
+`blog.josefsson.org' host, which (as of writing) uses a certificate
+from CACert.  First we'll use `gnutls-cli' to get a copy of the server
+certificate chain.  The server is not required to send this
+information, but this particular one is configured to do so.
 
-     $ echo | gnutls-cli -p 443 blog.josefsson.org --print-cert > chain.pem
+    $ echo | gnutls-cli -p 443 blog.josefsson.org --print-cert > chain.pem
 
-Use a text editor on 'chain.pem' to create three files for each separate
-certificates, called 'cert.pem' for the first certificate for the domain
-itself, secondly 'issuer.pem' for the intermediate certificate and
-'root.pem' for the final root certificate.
+Use a text editor on `chain.pem' to create three files for each
+separate certificates, called `cert.pem' for the first certificate for
+the domain itself, secondly `issuer.pem' for the intermediate
+certificate and `root.pem' for the final root certificate.
 
 The domain certificate normally contains a pointer to where the OCSP
 responder is located, in the Authority Information Access Information
-extension.  For example, from 'certtool -i < cert.pem' there is this
+extension.  For example, from `certtool -i < cert.pem' there is this
 information:
 
-     Authority Information Access Information (not critical):
-     Access Method: 1.3.6.1.5.5.7.48.1 (id-ad-ocsp)
-     Access Location URI: http://ocsp.CAcert.org/
+    Authority Information Access Information (not critical):
+    Access Method: 1.3.6.1.5.5.7.48.1 (id-ad-ocsp)
+    Access Location URI: http://ocsp.CAcert.org/
 
-This means the CA support OCSP queries over HTTP. We are now ready to
+This means the CA support OCSP queries over HTTP.  We are now ready to
 create a OCSP request for the certificate.
 
-     $ ocsptool --ask ocsp.CAcert.org --load-issuer issuer.pem \
-                --load-cert cert.pem --outfile ocsp-response.der
+    $ ocsptool --ask ocsp.CAcert.org --load-issuer issuer.pem \
+               --load-cert cert.pem --outfile ocsp-response.der
 
-The request is sent via HTTP to the OCSP server address specified.  If
+The request is sent via HTTP to the OCSP server address specified. If
 the address is ommited ocsptool will use the address stored in the
 certificate.
 
@@ -3887,74 +3964,75 @@ File: gnutls.info,  Node: danetool Invocation,  Prev: ocsptool Invocation,  Up:
 
 Tool to generate and check DNS resource records for the DANE protocol.
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'danetool' program.  This software
-is released under the GNU General Public License, version 3 or later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `danetool' program.  This
+software is released under the GNU General Public License, version 3 or
+later.
 
-danetool help/usage ('--help')
+danetool help/usage (`--help')
 ..............................
 
 This is the automatically generated usage text for danetool.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
-
-     danetool - GnuTLS DANE tool
-     Usage:  danetool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
-
-        -d, --debug=num            Enable debugging.
-                                     - it must be in the range:
-                                       0 to 9999
-        -V, --verbose              More verbose output
-                                     - may appear multiple times
-            --infile=file          Input file
-                                     - file must pre-exist
-            --outfile=str          Output file
-            --load-pubkey=str      Loads a public key file
-            --load-certificate=str Loads a certificate file
-            --dlv=str              Sets a DLV file
-            --hash=str             Hash algorithm to use for signing.
-            --check=str            Check a host's DANE TLSA entry.
-            --check-ee             Check only the end-entity's certificate.
-            --check-ca             Check only the CA's certificate.
-            --insecure             Do not verify any DNSSEC signature.
-            --local-dns            Use the local DNS server for DNSSEC resolving.
-                                     - disabled as '--no-local-dns'
-            --inder                Use DER format for input certificates and private keys.
-                                     - disabled as '--no-inder'
-            --inraw                an alias for the 'inder' option
-            --tlsa-rr              Print the DANE RR data on a certificate or public key
-                                     - requires the option 'host'
-            --host=str             Specify the hostname to be used in the DANE RR
-            --proto=str            The protocol set for DANE data (tcp, udp etc.)
-            --port=num             Specify the port number for the DANE data.
-            --ca                   Whether the provided certificate or public key is a Certificate
-     Authority.
-            --x509                 Use the hash of the X.509 certificate, rather than the public key.
-            --local                an alias for the 'domain' option
-                                     - enabled by default
-            --domain               The provided certificate or public key is issued by the local domain.
-                                     - disabled as '--no-domain'
-                                     - enabled by default
-        -v, --version[=arg]        output version information and exit
-        -h, --help                 display extended usage information and exit
-        -!, --more-help            extended usage information passed thru pager
-
-     Options are specified by doubled hyphens and their name or by a single
-     hyphen and the flag character.
-
-     Tool to generate and check DNS resource records for the DANE protocol.
-
-     Please send bug reports to:  <bug-gnutls@gnu.org>
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
+
+danetool - GnuTLS DANE tool
+Usage:  danetool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
+
+   -d, --debug=num            Enable debugging.
+                                - it must be in the range:
+                                  0 to 9999
+   -V, --verbose              More verbose output
+                                - may appear multiple times
+       --infile=file          Input file
+                                - file must pre-exist
+       --outfile=str          Output file
+       --load-pubkey=str      Loads a public key file
+       --load-certificate=str Loads a certificate file
+       --dlv=str              Sets a DLV file
+       --hash=str             Hash algorithm to use for signing.
+       --check=str            Check a host's DANE TLSA entry.
+       --check-ee             Check only the end-entity's certificate.
+       --check-ca             Check only the CA's certificate.
+       --insecure             Do not verify any DNSSEC signature.
+       --local-dns            Use the local DNS server for DNSSEC resolving.
+                                - disabled as '--no-local-dns'
+       --inder                Use DER format for input certificates and private keys.
+                                - disabled as '--no-inder'
+       --inraw                an alias for the 'inder' option
+       --tlsa-rr              Print the DANE RR data on a certificate or public key
+                                - requires the option 'host'
+       --host=str             Specify the hostname to be used in the DANE RR
+       --proto=str            The protocol set for DANE data (tcp, udp etc.)
+       --port=num             Specify the port number for the DANE data.
+       --ca                   Whether the provided certificate or public key is a Certificate
+Authority.
+       --x509                 Use the hash of the X.509 certificate, rather than the public key.
+       --local                an alias for the 'domain' option
+                                - enabled by default
+       --domain               The provided certificate or public key is issued by the local domain.
+                                - disabled as '--no-domain'
+                                - enabled by default
+   -v, --version[=arg]        output version information and exit
+   -h, --help                 display extended usage information and exit
+   -!, --more-help            extended usage information passed thru pager
+
+Options are specified by doubled hyphens and their name or by a single
+hyphen and the flag character.
+
+Tool to generate and check DNS resource records for the DANE protocol.
+
+Please send bug reports to:  <bug-gnutls@gnu.org>
 
 debug option (-d)
 .................
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 load-pubkey option
@@ -3978,43 +4056,43 @@ string.  This sets a DLV file to be used for DNSSEC verification.
 hash option
 ...........
 
-This is the "hash algorithm to use for signing."  option.  This option
+This is the "hash algorithm to use for signing." option.  This option
 takes an argument string.  Available hash functions are SHA1, RMD160,
 SHA256, SHA384, SHA512.
 
 check option
 ............
 
-This is the "check a host's dane tlsa entry."  option.  This option
+This is the "check a host's dane tlsa entry." option.  This option
 takes an argument string.  Obtains the DANE TLSA entry from the given
-hostname and prints information.  Note that the actual certificate of
+hostname and prints information. Note that the actual certificate of
 the host has to be provided using -load-certificate.
 
 check-ee option
 ...............
 
-This is the "check only the end-entity's certificate."  option.  Checks
-the end-entity's certificate only.  Trust anchors or CAs are not
+This is the "check only the end-entity's certificate." option.  Checks
+the end-entity's certificate only. Trust anchors or CAs are not
 considered.
 
 check-ca option
 ...............
 
-This is the "check only the ca's certificate."  option.  Checks the
-trust anchor's and CA's certificate only.  End-entities are not
+This is the "check only the ca's certificate." option.  Checks the
+trust anchor's and CA's certificate only. End-entities are not
 considered.
 
 insecure option
 ...............
 
-This is the "do not verify any dnssec signature."  option.  Ignores any
+This is the "do not verify any dnssec signature." option.  Ignores any
 DNSSEC signature verification results.
 
 local-dns option
 ................
 
-This is the "use the local dns server for dnssec resolving."  option.
-This option will use the local DNS server for DNSSEC. This is disabled
+This is the "use the local dns server for dnssec resolving." option.
+This option will use the local DNS server for DNSSEC.  This is disabled
 by default due to many servers not allowing DNSSEC.
 
 inder option
@@ -4029,7 +4107,7 @@ structure is read.
 inraw option
 ............
 
-This is an alias for the 'inder' option, *note the inder option
+This is an alias for the `inder' option, *note the inder option
 documentation: danetool inder.
 
 tlsa-rr option
@@ -4048,57 +4126,58 @@ host option
 ...........
 
 This is the "specify the hostname to be used in the dane rr" option.
-This option takes an argument string 'Hostname'.  This command sets the
+This option takes an argument string `Hostname'.  This command sets the
 hostname for the DANE RR.
 
 proto option
 ............
 
-This is the "the protocol set for dane data (tcp, udp etc.)"  option.
-This option takes an argument string 'Protocol'.  This command specifies
-the protocol for the service set in the DANE data.
+This is the "the protocol set for dane data (tcp, udp etc.)" option.
+This option takes an argument string `Protocol'.  This command
+specifies the protocol for the service set in the DANE data.
 
 ca option
 .........
 
 This is the "whether the provided certificate or public key is a
-certificate authority."  option.  Marks the DANE RR as a CA certificate
+certificate authority." option.  Marks the DANE RR as a CA certificate
 if specified.
 
 x509 option
 ...........
 
 This is the "use the hash of the x.509 certificate, rather than the
-public key."  option.  This option forces the generated record to
-contain the hash of the full X.509 certificate.  By default only the
+public key." option.  This option forces the generated record to
+contain the hash of the full X.509 certificate. By default only the
 hash of the public key is used.
 
 local option
 ............
 
-This is an alias for the 'domain' option, *note the domain option
+This is an alias for the `domain' option, *note the domain option
 documentation: danetool domain.
 
 domain option
 .............
 
 This is the "the provided certificate or public key is issued by the
-local domain."  option.
+local domain." option.
 
 This option has some usage constraints.  It:
    * is enabled by default.
 
 DANE distinguishes certificates and public keys offered via the DNSSEC
-to trusted and local entities.  This flag indicates that this is a
+to trusted and local entities. This flag indicates that this is a
 domain-issued certificate, meaning that there could be no CA involved.
 
 danetool exit status
 ....................
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 danetool See Also
@@ -4115,12 +4194,12 @@ DANE TLSA RR generation
 To create a DANE TLSA resource record for a certificate (or public key)
 that was issued localy and may or may not be signed by a CA use the
 following command.
-     $ danetool --tlsa-rr --host www.example.com --load-certificate cert.pem
+    $ danetool --tlsa-rr --host www.example.com --load-certificate cert.pem
 
-To create a DANE TLSA resource record for a CA signed certificate, which
-will be marked as such use the following command.
-     $ danetool --tlsa-rr --host www.example.com --load-certificate cert.pem \
-       --no-domain
+To create a DANE TLSA resource record for a CA signed certificate,
+which will be marked as such use the following command.
+    $ danetool --tlsa-rr --host www.example.com --load-certificate cert.pem \
+      --no-domain
 
 The former is useful to add in your DNS entry even if your certificate
 is signed by a CA. That way even users who do not trust your CA will be
@@ -4128,14 +4207,14 @@ able to verify your certificate using DANE.
 
 In order to create a record for the CA signer of your certificate use
 the following.
-     $ danetool --tlsa-rr --host www.example.com --load-certificate cert.pem \
-       --ca --no-domain
+    $ danetool --tlsa-rr --host www.example.com --load-certificate cert.pem \
+      --ca --no-domain
 
 To read a server's DANE TLSA entry, use:
-     $ danetool --check www.example.com --proto tcp --port 443
+    $ danetool --check www.example.com --proto tcp --port 443
 
 To verify a server's DANE TLSA entry, use:
-     $ danetool --check www.example.com --proto tcp --port 443 --load-certificate chain.pem
+    $ danetool --check www.example.com --proto tcp --port 443 --load-certificate chain.pem
 
 
 File: gnutls.info,  Node: Shared-key and anonymous authentication,  Next: Selecting an appropriate authentication method,  Prev: More on certificate authentication,  Up: Authentication methods
@@ -4173,44 +4252,46 @@ File: gnutls.info,  Node: Authentication using SRP,  Next: srptool Invocation,
 GnuTLS supports authentication via the Secure Remote Password or SRP
 protocol (see [_RFC2945,TOMSRP_] for a description).  The SRP key
 exchange is an extension to the TLS protocol, and it provides an
-authenticated with a password key exchange.  The peers can be identified
+authenticated with a password key exchange. The peers can be identified
 using a single password, or there can be combinations where the client
 is authenticated using SRP and the server using a certificate.
 
-The advantage of SRP authentication, over other proposed secure password
-authentication schemes, is that SRP is not susceptible to off-line
-dictionary attacks.  Moreover, SRP does not require the server to hold
-the user's password.  This kind of protection is similar to the one used
-traditionally in the UNIX '/etc/passwd' file, where the contents of this
-file did not cause harm to the system security if they were revealed.
-The SRP needs instead of the plain password something called a verifier,
-which is calculated using the user's password, and if stolen cannot be
-used to impersonate the user.
-
-Typical conventions in SRP are a password file, called 'tpasswd' that
+The advantage of SRP authentication, over other proposed secure
+password authentication schemes, is that SRP is not susceptible to
+off-line dictionary attacks.  Moreover, SRP does not require the server
+to hold the user's password.  This kind of protection is similar to the
+one used traditionally in the UNIX `/etc/passwd' file, where the
+contents of this file did not cause harm to the system security if they
+were revealed.  The SRP needs instead of the plain password something
+called a verifier, which is calculated using the user's password, and
+if stolen cannot be used to impersonate the user.
+
+Typical conventions in SRP are a password file, called `tpasswd' that
 holds the SRP verifiers (encoded passwords) and another file,
-'tpasswd.conf', which holds the allowed SRP parameters.  The included in
-GnuTLS helper follow those conventions.  The srptool program, discussed
-in the next section is a tool to manipulate the SRP parameters.
+`tpasswd.conf', which holds the allowed SRP parameters.  The included
+in GnuTLS helper follow those conventions. The srptool program,
+discussed in the next section is a tool to manipulate the SRP
+parameters.
 
 The implementation in GnuTLS is based on [_TLSSRP_]. The supported key
 exchange methods are shown below.
 
-'SRP:'
+`SRP:'
      Authentication using the SRP protocol.
 
-'SRP_DSS:'
-     Client authentication using the SRP protocol.  Server is
+`SRP_DSS:'
+     Client authentication using the SRP protocol. Server is
      authenticated using a certificate with DSA parameters.
 
-'SRP_RSA:'
-     Client authentication using the SRP protocol.  Server is
+`SRP_RSA:'
+     Client authentication using the SRP protocol. Server is
      authenticated using a certificate with RSA parameters.
 
- -- Function: int gnutls_srp_verifier (const char * USERNAME, const char
-          * PASSWORD, const gnutls_datum_t * SALT, const gnutls_datum_t
-          * GENERATOR, const gnutls_datum_t * PRIME, gnutls_datum_t *
-          RES)
+
+ -- Function: int gnutls_srp_verifier (const char * USERNAME, const
+          char * PASSWORD, const gnutls_datum_t * SALT, const
+          gnutls_datum_t * GENERATOR, const gnutls_datum_t * PRIME,
+          gnutls_datum_t * RES)
      USERNAME: is the user's name
 
      PASSWORD: is the user's password
@@ -4223,18 +4304,19 @@ exchange methods are shown below.
 
      RES: where the verifier will be stored.
 
-     This function will create an SRP verifier, as specified in RFC2945.
-     The 'prime' and 'generator' should be one of the static parameters
-     defined in gnutls/gnutls.h or may be generated.
+     This function will create an SRP verifier, as specified in
+     RFC2945.  The  `prime' and  `generator' should be one of the static
+     parameters defined in gnutls/gnutls.h or may be generated.
 
-     The verifier will be allocated with 'gnutls_malloc' () and will be
-     stored in 'res' using binary format.
+     The verifier will be allocated with  `gnutls_malloc' () and will
+     be stored in  `res' using binary format.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
-'INT *note gnutls_srp_base64_encode_alloc:: (const gnutls_datum_t * DATA, gnutls_datum_t * RESULT)'
-'INT *note gnutls_srp_base64_decode_alloc:: (const gnutls_datum_t * B64_DATA, gnutls_datum_t * RESULT)'
+`INT *note gnutls_srp_base64_encode_alloc:: (const gnutls_datum_t * DATA, gnutls_datum_t * RESULT)'
+
+`INT *note gnutls_srp_base64_decode_alloc:: (const gnutls_datum_t * B64_DATA, gnutls_datum_t * RESULT)'
 
 
 File: gnutls.info,  Node: srptool Invocation,  Prev: Authentication using SRP,  Up: SRP authentication
@@ -4243,84 +4325,85 @@ File: gnutls.info,  Node: srptool Invocation,  Prev: Authentication using SRP,
 ........................
 
 Simple program that emulates the programs in the Stanford SRP (Secure
-Remote Password) libraries using GnuTLS. It is intended for use in
+Remote Password) libraries using GnuTLS.  It is intended for use in
 places where you don't expect SRP authentication to be the used for
 system users.
 
-In brief, to use SRP you need to create two files.  These are the
+In  brief,  to use SRP you need to create two files. These are the
 password file that holds the users and the verifiers associated with
-them and the configuration file to hold the group parameters (called
+them  and  the configuration file to hold the group parameters (called
 tpasswd.conf).
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'srptool' program.  This software is
-released under the GNU General Public License, version 3 or later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `srptool' program.  This
+software is released under the GNU General Public License, version 3 or
+later.
 
-srptool help/usage ('--help')
+srptool help/usage (`--help')
 .............................
 
 This is the automatically generated usage text for srptool.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
-
-     srptool - GnuTLS SRP tool
-     Usage:  srptool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
-
-        -d, --debug=num            Enable debugging.
-                                     - it must be in the range:
-                                       0 to 9999
-        -i, --index                specify the index of the group parameters in tpasswd.conf to use.
-        -u, --username=str         specify a username
-        -p, --passwd=str           specify a password file.
-        -s, --salt=num             specify salt size.
-            --verify               just verify the password.
-        -v, --passwd-conf=str      specify a password conf file.
-            --create-conf=str      Generate a password configuration file.
-        -v, --version[=arg]        output version information and exit
-        -h, --help                 display extended usage information and exit
-        -!, --more-help            extended usage information passed thru pager
-
-     Options are specified by doubled hyphens and their name or by a single
-     hyphen and the flag character.
-
-     Simple program that emulates the programs in the Stanford SRP (Secure
-     Remote Password) libraries using GnuTLS.  It is intended for use in places
-     where you don't expect SRP authentication to be the used for system users.
-
-     In brief, to use SRP you need to create two files.  These are the password
-     file that holds the users and the verifiers associated with them and the
-     configuration file to hold the group parameters (called tpasswd.conf).
-
-     Please send bug reports to:  <bug-gnutls@gnu.org>
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
+
+srptool - GnuTLS SRP tool
+Usage:  srptool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
+
+   -d, --debug=num            Enable debugging.
+                                - it must be in the range:
+                                  0 to 9999
+   -i, --index                specify the index of the group parameters in tpasswd.conf to use.
+   -u, --username=str         specify a username
+   -p, --passwd=str           specify a password file.
+   -s, --salt=num             specify salt size.
+       --verify               just verify the password.
+   -v, --passwd-conf=str      specify a password conf file.
+       --create-conf=str      Generate a password configuration file.
+   -v, --version[=arg]        output version information and exit
+   -h, --help                 display extended usage information and exit
+   -!, --more-help            extended usage information passed thru pager
+
+Options are specified by doubled hyphens and their name or by a single
+hyphen and the flag character.
+
+Simple program that emulates the programs in the Stanford SRP (Secure
+Remote Password) libraries using GnuTLS.  It is intended for use in places
+where you don't expect SRP authentication to be the used for system users.
+
+In brief, to use SRP you need to create two files.  These are the password
+file that holds the users and the verifiers associated with them and the
+configuration file to hold the group parameters (called tpasswd.conf).
+
+Please send bug reports to:  <bug-gnutls@gnu.org>
 
 debug option (-d)
 .................
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 verify option
 .............
 
-This is the "just verify the password."  option.  Verifies the password
+This is the "just verify the password." option.  Verifies the password
 provided against the password file.
 
 passwd-conf option (-v)
 .......................
 
-This is the "specify a password conf file."  option.  This option takes
+This is the "specify a password conf file." option.  This option takes
 an argument string.  Specify a filename or a PKCS #11 URL to read the
 CAs from.
 
 create-conf option
 ..................
 
-This is the "generate a password configuration file."  option.  This
+This is the "generate a password configuration file." option.  This
 option takes an argument string.  This generates a password
 configuration file (tpasswd.conf) containing the required for TLS
 parameters.
@@ -4329,9 +4412,10 @@ srptool exit status
 ...................
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 srptool See Also
@@ -4343,18 +4427,18 @@ certtool (1)
 srptool Examples
 ................
 
-To create 'tpasswd.conf' which holds the g and n values for SRP protocol
+To create `tpasswd.conf' which holds the g and n values for SRP protocol
 (generator and a large prime), run:
-     $ srptool --create-conf /etc/tpasswd.conf
+    $ srptool --create-conf /etc/tpasswd.conf
 
-This command will create '/etc/tpasswd' and will add user 'test' (you
-will also be prompted for a password).  Verifiers are stored by default
+This command will create `/etc/tpasswd' and will add user 'test' (you
+will also be prompted for a password). Verifiers are stored by default
 in the way libsrp expects.
-     $ srptool --passwd /etc/tpasswd --passwd-conf /etc/tpasswd.conf -u test
+    $ srptool --passwd /etc/tpasswd --passwd-conf /etc/tpasswd.conf -u test
 
-This command will check against a password.  If the password matches the
-one in '/etc/tpasswd' you will get an ok.
-     $ srptool --passwd /etc/tpasswd --passwd\-conf /etc/tpasswd.conf --verify -u test
+This command will check against a password. If the password matches the
+one in `/etc/tpasswd' you will get an ok.
+    $ srptool --passwd /etc/tpasswd --passwd\-conf /etc/tpasswd.conf --verify -u test
 
 
 File: gnutls.info,  Node: PSK authentication,  Next: Anonymous authentication,  Prev: SRP authentication,  Up: Shared-key and anonymous authentication
@@ -4374,31 +4458,34 @@ File: gnutls.info,  Node: Authentication using PSK,  Next: psktool Invocation,
 ................................
 
 Authentication using Pre-shared keys is a method to authenticate using
-usernames and binary keys.  This protocol avoids making use of public
+usernames and binary keys. This protocol avoids making use of public
 key infrastructure and expensive calculations, thus it is suitable for
 constraint clients.
 
-The implementation in GnuTLS is based on [_TLSPSK_]. The supported PSK
+The implementation in GnuTLS is based on [_TLSPSK_].  The supported PSK
 key exchange methods are:
 
-'PSK:'
+`PSK:'
      Authentication using the PSK protocol.
 
-'DHE-PSK:'
+`DHE-PSK:'
      Authentication using the PSK protocol and Diffie-Hellman key
      exchange.  This method offers perfect forward secrecy.
 
-'ECDHE-PSK:'
+`ECDHE-PSK:'
      Authentication using the PSK protocol and Elliptic curve
      Diffie-Hellman key exchange.  This method offers perfect forward
      secrecy.
 
+
 Helper functions to generate and maintain PSK keys are also included in
 GnuTLS.
 
-'INT *note gnutls_key_generate:: (gnutls_datum_t * KEY, unsigned int KEY_SIZE)'
-'INT *note gnutls_hex_encode:: (const gnutls_datum_t * DATA, char * RESULT, size_t * RESULT_SIZE)'
-'INT *note gnutls_hex_decode:: (const gnutls_datum_t * HEX_DATA, void * RESULT, size_t * RESULT_SIZE)'
+`INT *note gnutls_key_generate:: (gnutls_datum_t * KEY, unsigned int KEY_SIZE)'
+
+`INT *note gnutls_hex_encode:: (const gnutls_datum_t * DATA, char * RESULT, size_t * RESULT_SIZE)'
+
+`INT *note gnutls_hex_decode:: (const gnutls_datum_t * HEX_DATA, void * RESULT, size_t * RESULT_SIZE)'
 
 
 File: gnutls.info,  Node: psktool Invocation,  Prev: Authentication using PSK,  Up: PSK authentication
@@ -4406,61 +4493,63 @@ File: gnutls.info,  Node: psktool Invocation,  Prev: Authentication using PSK,
 4.3.2.2 Invoking psktool
 ........................
 
-Program that generates random keys for use with TLS-PSK. The keys are
+Program  that generates random keys for use with TLS-PSK. The keys are
 stored in hexadecimal format in a key file.
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'psktool' program.  This software is
-released under the GNU General Public License, version 3 or later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `psktool' program.  This
+software is released under the GNU General Public License, version 3 or
+later.
 
-psktool help/usage ('--help')
+psktool help/usage (`--help')
 .............................
 
 This is the automatically generated usage text for psktool.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
-
-     psktool - GnuTLS PSK tool
-     Usage:  psktool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
-
-        -d, --debug=num            Enable debugging.
-                                     - it must be in the range:
-                                       0 to 9999
-        -s, --keysize=num          specify the key size in bytes
-                                     - it must be in the range:
-                                       0 to 512
-        -u, --username=str         specify a username
-        -p, --passwd=str           specify a password file.
-        -v, --version[=arg]        output version information and exit
-        -h, --help                 display extended usage information and exit
-        -!, --more-help            extended usage information passed thru pager
-
-     Options are specified by doubled hyphens and their name or by a single
-     hyphen and the flag character.
-
-     Program that generates random keys for use with TLS-PSK.  The keys are
-     stored in hexadecimal format in a key file.
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
+
+psktool - GnuTLS PSK tool
+Usage:  psktool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
+
+   -d, --debug=num            Enable debugging.
+                                - it must be in the range:
+                                  0 to 9999
+   -s, --keysize=num          specify the key size in bytes
+                                - it must be in the range:
+                                  0 to 512
+   -u, --username=str         specify a username
+   -p, --passwd=str           specify a password file.
+   -v, --version[=arg]        output version information and exit
+   -h, --help                 display extended usage information and exit
+   -!, --more-help            extended usage information passed thru pager
+
+Options are specified by doubled hyphens and their name or by a single
+hyphen and the flag character.
+
+Program that generates random keys for use with TLS-PSK.  The keys are
+stored in hexadecimal format in a key file.
 
-     Please send bug reports to:  <bug-gnutls@gnu.org>
+Please send bug reports to:  <bug-gnutls@gnu.org>
 
 debug option (-d)
 .................
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 psktool exit status
 ...................
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 psktool See Also
@@ -4471,15 +4560,15 @@ gnutls-cli-debug (1), gnutls-serv (1), srptool (1), certtool (1)
 psktool Examples
 ................
 
-To add a user 'psk_identity' in 'passwd.psk' for use with GnuTLS run:
-     $ ./psktool -u psk_identity -p passwd.psk
-     Generating a random key for user 'psk_identity'
-     Key stored to passwd.psk
-     $ cat psks.txt
-     psk_identity:88f3824b3e5659f52d00e959bacab954b6540344
-     $
+To add a user 'psk_identity' in `passwd.psk' for use with GnuTLS run:
+    $ ./psktool -u psk_identity -p passwd.psk
+    Generating a random key for user 'psk_identity'
+    Key stored to passwd.psk
+    $ cat psks.txt
+    psk_identity:88f3824b3e5659f52d00e959bacab954b6540344
+    $
 
-This command will create 'passwd.psk' if it does not exist and will add
+This command will create `passwd.psk' if it does not exist and will add
 user 'psk_identity' (you will also be prompted for a password).
 
 
@@ -4489,23 +4578,24 @@ File: gnutls.info,  Node: Anonymous authentication,  Prev: PSK authentication,
 ------------------------------
 
 The anonymous key exchange offers encryption without any indication of
-the peer's identity.  This kind of authentication is vulnerable to a man
-in the middle attack, but can be used even if there is no prior
-communication or shared trusted parties with the peer.  Moreover it is
+the peer's identity.  This kind of authentication is vulnerable to a
+man in the middle attack, but can be used even if there is no prior
+communication or shared trusted parties with the peer. Moreover it is
 useful when complete anonymity is required.  Unless in one of the above
 cases, do not use anonymous authentication.
 
 The available key exchange algorithms for anonymous authentication are
-shown below, but note that few public servers support them.  They
+shown below, but note that few public servers support them. They
 typically have to be explicitly enabled.
 
-'ANON_DH:'
+`ANON_DH:'
      This algorithm exchanges Diffie-Hellman parameters.
 
-'ANON_ECDH:'
+`ANON_ECDH:'
      This algorithm exchanges elliptic curve Diffie-Hellman parameters.
      It is more efficient than ANON_DH on equivalent security levels.
 
+
 
 File: gnutls.info,  Node: Selecting an appropriate authentication method,  Prev: Shared-key and anonymous authentication,  Up: Authentication methods
 
@@ -4519,39 +4609,39 @@ authentication methods in GnuTLS in various scenarios.
 -------------------------------------------
 
 Let's consider two peers need to communicate over an untrusted channel
-(the Internet), but have an out-of-band channel available.  The latter
+(the Internet), but have an out-of-band channel available. The latter
 channel is considered safe from eavesdropping and message modification
-and thus can be used for an initial bootstrapping of the protocol.  The
+and thus can be used for an initial bootstrapping of the protocol. The
 options available are:
-   * Pre-shared keys (see *note PSK authentication::).  The server and a
+   * Pre-shared keys (see *note PSK authentication::). The server and a
      client communicate a shared randomly generated key over the trusted
-     channel and use it to negotiate further sessions over the untrusted
-     channel.
+     channel and use it to negotiate further sessions over the
+     untrusted channel.
 
-   * Passwords (see *note SRP authentication::).  The client
-     communicates to the server his username and password of choice and
-     uses it to negotiate further sessions over the untrusted channel.
+   * Passwords (see *note SRP authentication::). The client communicates
+     to the server his username and password of choice and uses it to
+     negotiate further sessions over the untrusted channel.
 
-   * Public keys (see *note Certificate authentication::).  The client
+   * Public keys (see *note Certificate authentication::). The client
      and the server exchange their public keys (or fingerprints of them)
      over the trusted channel.  On future sessions over the untrusted
      channel they verify the key being the same (similar to *note
      Verifying a certificate using trust on first use authentication::).
 
 Provided that the out-of-band channel is trusted all of the above
-provide a similar level of protection.  An out-of-band channel may be
+provide a similar level of protection. An out-of-band channel may be
 the initial bootstrapping of a user's PC in a corporate environment,
-in-person communication, communication over an alternative network (e.g.
-the phone network), etc.
+in-person communication, communication over an alternative network
+(e.g. the phone network), etc.
 
 4.4.2 Two peers without an out-of-band channel
 ----------------------------------------------
 
 When an out-of-band channel is not available a peer cannot be reliably
-authenticated.  What can be done, however, is to allow some form of
+authenticated. What can be done, however, is to allow some form of
 registration of users connecting for the first time and ensure that
-their keys remain the same after that initial connection.  This is
-termed key continuity or trust on first use (TOFU).
+their keys remain the same after that initial connection. This is termed
+key continuity or trust on first use (TOFU).
 
 The available option is to use public key authentication (see *note
 Certificate authentication::).  The client and the server store each
@@ -4567,31 +4657,31 @@ connection other channels over the Internet may be used, e.g., DNSSEC
 4.4.3 Two peers and a trusted third party
 -----------------------------------------
 
-When a trusted third party is available (or a certificate authority) the
-most suitable option is to use certificate authentication (see *note
-Certificate authentication::).  The client and the server obtain
+When a trusted third party is available (or a certificate authority)
+the most suitable option is to use certificate authentication (see
+*note Certificate authentication::).  The client and the server obtain
 certificates that associate their identity and public keys using a
-digital signature by the trusted party and use them to on the subsequent
-communications with each other.  Each party verifies the peer's
-certificate using the trusted third party's signature.  The parameters
-of the third party's signature are present in its certificate which must
-be available to all communicating parties.
+digital signature by the trusted party and use them to on the
+subsequent communications with each other.  Each party verifies the
+peer's certificate using the trusted third party's signature. The
+parameters of the third party's signature are present in its
+certificate which must be available to all communicating parties.
 
 While the above is the typical authentication method for servers in the
 Internet by using the commercial CAs, the users that act as clients in
-the protocol rarely possess such certificates.  In that case a hybrid
-method can be used where the server is authenticated by the client using
-the commercial CAs and the client is authenticated based on some
+the protocol rarely possess such certificates. In that case a hybrid
+method can be used where the server is authenticated by the client
+using the commercial CAs and the client is authenticated based on some
 information the client provided over the initial server-authenticated
-channel.  The available options are:
-   * Passwords (see *note SRP authentication::).  The client
-     communicates to the server his username and password of choice on
-     the initial server-authenticated connection and uses it to
-     negotiate further sessions.  This is possible because the SRP
-     protocol allows for the server to be authenticated using a
-     certificate and the client using the password.
-
-   * Public keys (see *note Certificate authentication::).  The client
+channel. The available options are:
+   * Passwords (see *note SRP authentication::). The client communicates
+     to the server his username and password of choice on the initial
+     server-authenticated connection and uses it to negotiate further
+     sessions.  This is possible because the SRP protocol allows for
+     the server to be authenticated using a certificate and the client
+     using the password.
+
+   * Public keys (see *note Certificate authentication::). The client
      sends its public key to the server (or a fingerprint of it) over
      the initial server-authenticated connection.  On future sessions
      the client verifies the server using the third party certificate
@@ -4605,12 +4695,12 @@ File: gnutls.info,  Node: Hardware security modules and abstract key types,  Nex
 5 Hardware security modules and abstract key types
 **************************************************
 
-In several cases storing the long term cryptographic keys in a hard disk
-or even in memory poses a significant risk.  Once the system they are
-stored is compromised the keys must be replaced as the secrecy of future
-sessions is no longer guarranteed.  Moreover, past sessions that were
-not protected by a perfect forward secrecy offering ciphersuite are also
-to be assumed compromised.
+In several cases storing the long term cryptographic keys in a hard
+disk or even in memory poses a significant risk. Once the system they
+are stored is compromised the keys must be replaced as the secrecy of
+future sessions is no longer guarranteed. Moreover, past sessions that
+were not protected by a perfect forward secrecy offering ciphersuite
+are also to be assumed compromised.
 
 If such threats need to be addressed, then it may be wise storing the
 keys in a security module such as a smart card, an HSM or the TPM chip.
@@ -4631,33 +4721,33 @@ File: gnutls.info,  Node: Abstract key types,  Next: Smart cards and HSMs,  Up:
 
 Since there are many forms of a public or private keys supported by
 GnuTLS such as X.509, OpenPGP, PKCS #11 or TPM it is desirable to allow
-common operations on them.  For these reasons the abstract
-'gnutls_privkey_t' and 'gnutls_pubkey_t' were introduced in
-'gnutls/abstract.h' header.  Those types are initialized using a
+common operations on them. For these reasons the abstract
+`gnutls_privkey_t' and `gnutls_pubkey_t' were introduced in
+`gnutls/abstract.h' header. Those types are initialized using a
 specific type of key and then can be used to perform operations in an
-abstract way.  For example in order to sign an X.509 certificate with a
+abstract way. For example in order to sign an X.509 certificate with a
 key that resides in a token the following steps must be used.
 
-     #inlude <gnutls/abstract.h>
+    #inlude <gnutls/abstract.h>
 
-     void sign_cert( gnutls_x509_crt_t to_be_signed)
-     {
-     gnutls_x509_crt_t ca_cert;
-     gnutls_privkey_t abs_key;
+    void sign_cert( gnutls_x509_crt_t to_be_signed)
+    {
+    gnutls_x509_crt_t ca_cert;
+    gnutls_privkey_t abs_key;
 
-       /* initialize the abstract key */
-       gnutls_privkey_init(&abs_key);
+      /* initialize the abstract key */
+      gnutls_privkey_init(&abs_key);
 
-       /* keys stored in tokens are identified by URLs */
-       gnutls_privkey_import_url(abs_key, key_url);
+      /* keys stored in tokens are identified by URLs */
+      gnutls_privkey_import_url(abs_key, key_url);
 
-       gnutls_x509_crt_init(&ca_cert);
-       gnutls_x509_crt_import_pkcs11_url(&ca_cert, cert_url);
+      gnutls_x509_crt_init(&ca_cert);
+      gnutls_x509_crt_import_pkcs11_url(&ca_cert, cert_url);
 
-       /* sign the certificate to be signed */
-       gnutls_x509_crt_privkey_sign(to_be_signed, ca_cert, abs_key,
-                                    GNUTLS_DIG_SHA256, 0);
-     }
+      /* sign the certificate to be signed */
+      gnutls_x509_crt_privkey_sign(to_be_signed, ca_cert, abs_key,
+                                   GNUTLS_DIG_SHA256, 0);
+    }
 
 * Menu:
 
@@ -4671,33 +4761,38 @@ File: gnutls.info,  Node: Abstract public keys,  Next: Abstract private keys,  U
 5.1.1 Public keys
 -----------------
 
-An abstract 'gnutls_pubkey_t' can be initialized using the functions
-below.  It can be imported through an existing structure like
-'gnutls_x509_crt_t', or through an ASN.1 encoding of the X.509
-'SubjectPublicKeyInfo' sequence.
+An abstract `gnutls_pubkey_t' can be initialized using the functions
+below. It can be imported through an existing structure like
+`gnutls_x509_crt_t', or through an ASN.1 encoding of the X.509
+`SubjectPublicKeyInfo' sequence.
 
-'INT *note gnutls_pubkey_import_x509:: (gnutls_pubkey_t KEY, gnutls_x509_crt_t CRT, unsigned int FLAGS)'
-'INT *note gnutls_pubkey_import_openpgp:: (gnutls_pubkey_t KEY, gnutls_openpgp_crt_t CRT, unsigned int FLAGS)'
-'INT *note gnutls_pubkey_import_pkcs11:: (gnutls_pubkey_t KEY, gnutls_pkcs11_obj_t OBJ, unsigned int FLAGS)'
+`INT *note gnutls_pubkey_import_x509:: (gnutls_pubkey_t KEY, gnutls_x509_crt_t CRT, unsigned int FLAGS)'
 
-'INT *note gnutls_pubkey_import_url:: (gnutls_pubkey_t KEY, const char * URL, unsigned int FLAGS)'
-'INT *note gnutls_pubkey_import_privkey:: (gnutls_pubkey_t KEY, gnutls_privkey_t PKEY, unsigned int USAGE, unsigned int FLAGS)'
-'INT *note gnutls_pubkey_import:: (gnutls_pubkey_t KEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)'
-'INT *note gnutls_pubkey_export:: (gnutls_pubkey_t KEY, gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
+`INT *note gnutls_pubkey_import_openpgp:: (gnutls_pubkey_t KEY, gnutls_openpgp_crt_t CRT, unsigned int FLAGS)'
+
+`INT *note gnutls_pubkey_import_pkcs11:: (gnutls_pubkey_t KEY, gnutls_pkcs11_obj_t OBJ, unsigned int FLAGS)'
+
+`INT *note gnutls_pubkey_import_url:: (gnutls_pubkey_t KEY, const char * URL, unsigned int FLAGS)'
+
+`INT *note gnutls_pubkey_import_privkey:: (gnutls_pubkey_t KEY, gnutls_privkey_t PKEY, unsigned int USAGE, unsigned int FLAGS)'
+
+`INT *note gnutls_pubkey_import:: (gnutls_pubkey_t KEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)'
+
+`INT *note gnutls_pubkey_export:: (gnutls_pubkey_t KEY, gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
 
  -- Function: int gnutls_pubkey_export2 (gnutls_pubkey_t KEY,
           gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
      KEY: Holds the certificate
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUT: will contain a certificate PEM or DER encoded
 
-     This function will export the public key to DER or PEM format.  The
-     contents of the exported data is the SubjectPublicKeyInfo X.509
-     structure.
+     This function will export the public key to DER or PEM format.
+     The contents of the exported data is the SubjectPublicKeyInfo
+     X.509 structure.
 
-     The output buffer will be allocated using 'gnutls_malloc()' .
+     The output buffer will be allocated using `gnutls_malloc()' .
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      CERTIFICATE".
@@ -4710,13 +4805,14 @@ below.  It can be imported through an existing structure like
 Other helper functions that allow directly importing from raw X.509 or
 OpenPGP structures are shown below.
 
-'INT *note gnutls_pubkey_import_x509_raw:: (gnutls_pubkey_t PKEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)'
-'INT *note gnutls_pubkey_import_openpgp_raw:: (gnutls_pubkey_t PKEY, const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t FORMAT, const gnutls_openpgp_keyid_t KEYID, unsigned int FLAGS)'
+`INT *note gnutls_pubkey_import_x509_raw:: (gnutls_pubkey_t PKEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)'
+
+`INT *note gnutls_pubkey_import_openpgp_raw:: (gnutls_pubkey_t PKEY, const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t FORMAT, const gnutls_openpgp_keyid_t KEYID, unsigned int FLAGS)'
 
 An important function is *note gnutls_pubkey_import_url:: which will
-import public keys from URLs that identify objects stored in tokens (see
-*note Smart cards and HSMs:: and *note Trusted Platform Module::).  A
-function to check for a supported by GnuTLS URL is *note
+import public keys from URLs that identify objects stored in tokens
+(see *note Smart cards and HSMs:: and *note Trusted Platform Module::).
+A function to check for a supported by GnuTLS URL is *note
 gnutls_url_is_supported::.
 
  -- Function: int gnutls_url_is_supported (const char* URL)
@@ -4740,18 +4836,24 @@ implementations use different approaches, e.g., some use the "common
 method" described in section 4.2.1.2 of [_RFC5280_] which calculates a
 digest on a part of the subjectPublicKeyInfo object.
 
-'INT *note gnutls_pubkey_get_pk_algorithm:: (gnutls_pubkey_t KEY, unsigned int * BITS)'
-'INT *note gnutls_pubkey_get_preferred_hash_algorithm:: (gnutls_pubkey_t KEY, gnutls_digest_algorithm_t * HASH, unsigned int * MAND)'
-'INT *note gnutls_pubkey_get_key_id:: (gnutls_pubkey_t KEY, unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
-'INT *note gnutls_random_art:: (gnutls_random_art_t TYPE, const char* KEY_TYPE, unsigned int KEY_SIZE, void * FPR, size_t FPR_SIZE, gnutls_datum_t* ART)'
+`INT *note gnutls_pubkey_get_pk_algorithm:: (gnutls_pubkey_t KEY, unsigned int * BITS)'
+
+`INT *note gnutls_pubkey_get_preferred_hash_algorithm:: (gnutls_pubkey_t KEY, gnutls_digest_algorithm_t *                                             HASH, unsigned int * MAND)'
+
+`INT *note gnutls_pubkey_get_key_id:: (gnutls_pubkey_t KEY, unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)'
+
+`INT *note gnutls_random_art:: (gnutls_random_art_t TYPE, const char* KEY_TYPE, unsigned int KEY_SIZE, void * FPR, size_t FPR_SIZE, gnutls_datum_t* ART)'
 
 To export the key-specific parameters, or obtain a unique key ID the
 following functions are provided.
 
-'INT *note gnutls_pubkey_get_pk_rsa_raw:: (gnutls_pubkey_t KEY, gnutls_datum_t * M, gnutls_datum_t * E)'
-'INT *note gnutls_pubkey_get_pk_dsa_raw:: (gnutls_pubkey_t KEY, gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y)'
-'INT *note gnutls_pubkey_get_pk_ecc_raw:: (gnutls_pubkey_t KEY, gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X, gnutls_datum_t * Y)'
-'INT *note gnutls_pubkey_get_pk_ecc_x962:: (gnutls_pubkey_t KEY, gnutls_datum_t* PARAMETERS, gnutls_datum_t * ECPOINT)'
+`INT *note gnutls_pubkey_get_pk_rsa_raw:: (gnutls_pubkey_t KEY, gnutls_datum_t * M, gnutls_datum_t * E)'
+
+`INT *note gnutls_pubkey_get_pk_dsa_raw:: (gnutls_pubkey_t KEY, gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y)'
+
+`INT *note gnutls_pubkey_get_pk_ecc_raw:: (gnutls_pubkey_t KEY, gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X, gnutls_datum_t * Y)'
+
+`INT *note gnutls_pubkey_get_pk_ecc_x962:: (gnutls_pubkey_t KEY, gnutls_datum_t* PARAMETERS, gnutls_datum_t * ECPOINT)'
 
 
 File: gnutls.info,  Node: Abstract private keys,  Next: Operations,  Prev: Abstract public keys,  Up: Abstract key types
@@ -4759,26 +4861,29 @@ File: gnutls.info,  Node: Abstract private keys,  Next: Operations,  Prev: Abstr
 5.1.2 Private keys
 ------------------
 
-An abstract 'gnutls_privkey_t' can be initialized using the functions
-below.  It can be imported through an existing structure like
-'gnutls_x509_privkey_t', but unlike public keys it cannot be exported.
+An abstract `gnutls_privkey_t' can be initialized using the functions
+below. It can be imported through an existing structure like
+`gnutls_x509_privkey_t', but unlike public keys it cannot be exported.
 That is to allow abstraction over keys stored in hardware that makes
 available only operations.
 
-'INT *note gnutls_privkey_import_x509:: (gnutls_privkey_t PKEY, gnutls_x509_privkey_t KEY, unsigned int FLAGS)'
-'INT *note gnutls_privkey_import_openpgp:: (gnutls_privkey_t PKEY, gnutls_openpgp_privkey_t KEY, unsigned int FLAGS)'
-'INT *note gnutls_privkey_import_pkcs11:: (gnutls_privkey_t PKEY, gnutls_pkcs11_privkey_t KEY, unsigned int FLAGS)'
+`INT *note gnutls_privkey_import_x509:: (gnutls_privkey_t PKEY, gnutls_x509_privkey_t KEY, unsigned int FLAGS)'
+
+`INT *note gnutls_privkey_import_openpgp:: (gnutls_privkey_t PKEY, gnutls_openpgp_privkey_t KEY, unsigned int FLAGS)'
+
+`INT *note gnutls_privkey_import_pkcs11:: (gnutls_privkey_t PKEY, gnutls_pkcs11_privkey_t KEY, unsigned int FLAGS)'
 
 Other helper functions that allow directly importing from raw X.509 or
-OpenPGP structures are shown below.  Again, as with public keys, private
+OpenPGP structures are shown below. Again, as with public keys, private
 keys can be imported from a hardware module using URLs.
 
-'INT *note gnutls_privkey_import_x509_raw:: (gnutls_privkey_t PKEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, const char* PASSWORD, unsigned int FLAGS)'
-'INT *note gnutls_privkey_import_openpgp_raw:: (gnutls_privkey_t PKEY, const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t FORMAT, const gnutls_openpgp_keyid_t KEYID, const char* PASSWORD)'
+`INT *note gnutls_privkey_import_x509_raw:: (gnutls_privkey_t PKEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, const char* PASSWORD, unsigned int FLAGS)'
 
- -- Function: int gnutls_privkey_import_url (gnutls_privkey_t KEY, const
-          char * URL, unsigned int FLAGS)
-     KEY: A key of type 'gnutls_privkey_t'
+`INT *note gnutls_privkey_import_openpgp_raw:: (gnutls_privkey_t PKEY, const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t FORMAT, const gnutls_openpgp_keyid_t KEYID, const char* PASSWORD)'
+
+ -- Function: int gnutls_privkey_import_url (gnutls_privkey_t KEY,
+          const char * URL, unsigned int FLAGS)
+     KEY: A key of type `gnutls_privkey_t'
 
      URL: A PKCS 11 url
 
@@ -4786,16 +4891,18 @@ keys can be imported from a hardware module using URLs.
 
      This function will import a PKCS11 or TPM URL as a private key.
      The supported URL types can be checked using
-     'gnutls_url_is_supported()' .
+     `gnutls_url_is_supported()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
 
-'INT *note gnutls_privkey_get_pk_algorithm:: (gnutls_privkey_t KEY, unsigned int * BITS)'
-'GNUTLS_PRIVKEY_TYPE_T *note gnutls_privkey_get_type:: (gnutls_privkey_t KEY)'
-'INT *note gnutls_privkey_status:: (gnutls_privkey_t KEY)'
+`INT *note gnutls_privkey_get_pk_algorithm:: (gnutls_privkey_t KEY, unsigned int * BITS)'
+
+`GNUTLS_PRIVKEY_TYPE_T *note gnutls_privkey_get_type:: (gnutls_privkey_t KEY)'
+
+`INT *note gnutls_privkey_status:: (gnutls_privkey_t KEY)'
 
 In order to support cryptographic operations using an external API, the
 following function is provided.  This allows for a simple extensibility
@@ -4821,14 +4928,14 @@ API without resorting to PKCS #11.
      FLAGS: Flags for the import
 
      This function will associate the given callbacks with the
-     'gnutls_privkey_t' structure.  At least one of the two callbacks
-     must be non-null.  If a deinitialization function is provided then
-     flags is assumed to contain 'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' .
+     `gnutls_privkey_t'  structure. At least one of the two callbacks
+     must be non-null. If a deinitialization function is provided then
+     flags is assumed to contain `GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' .
 
      Note that the signing function is supposed to "raw" sign data,
      i.e., without any hashing or preprocessing.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1
@@ -4849,7 +4956,7 @@ verification operations with the underlying keys.
 
      ALGO: The signature algorithm used
 
-     FLAGS: Zero or on of 'gnutls_pubkey_flags_t'
+     FLAGS: Zero or on of `gnutls_pubkey_flags_t'
 
      DATA: holds the signed data
 
@@ -4859,7 +4966,7 @@ verification operations with the underlying keys.
      parameters from the certificate.
 
      *Returns:* In case of a verification failure
-     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
+     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
      code on success.
 
      *Since:* 3.0
@@ -4871,7 +4978,7 @@ verification operations with the underlying keys.
 
      ALGO: The signature algorithm used
 
-     FLAGS: Zero or on of 'gnutls_pubkey_flags_t'
+     FLAGS: Zero or on of `gnutls_pubkey_flags_t'
 
      HASH: holds the hash digest to be verified
 
@@ -4881,7 +4988,7 @@ verification operations with the underlying keys.
      parameters from the public key.
 
      *Returns:* In case of a verification failure
-     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
+     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
      code on success.
 
      *Since:* 3.0
@@ -4899,7 +5006,7 @@ verification operations with the underlying keys.
 
      This function will encrypt the given data, using the public key.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -4911,54 +5018,54 @@ verification operations with the underlying keys.
 
      HASH: should be a digest algorithm
 
-     FLAGS: Zero or on of 'gnutls_privkey_flags_t'
+     FLAGS: Zero or on of `gnutls_privkey_flags_t'
 
      DATA: holds the data to be signed
 
      SIGNATURE: will contain the signature allocate with
-     'gnutls_malloc()'
+     `gnutls_malloc()'
 
      This function will sign the given data using a signature algorithm
-     supported by the private key.  Signature algorithms are always used
+     supported by the private key. Signature algorithms are always used
      together with a hash functions.  Different hash functions may be
      used for the RSA algorithm, but only the SHA family for the DSA
      keys.
 
-     You may use 'gnutls_pubkey_get_preferred_hash_algorithm()' to
+     You may use `gnutls_pubkey_get_preferred_hash_algorithm()'  to
      determine the hash algorithm.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
 
  -- Function: int gnutls_privkey_sign_hash (gnutls_privkey_t SIGNER,
-          gnutls_digest_algorithm_t HASH_ALGO, unsigned int FLAGS, const
-          gnutls_datum_t * HASH_DATA, gnutls_datum_t * SIGNATURE)
+          gnutls_digest_algorithm_t HASH_ALGO, unsigned int FLAGS,
+          const gnutls_datum_t * HASH_DATA, gnutls_datum_t * SIGNATURE)
      SIGNER: Holds the signer's key
 
      HASH_ALGO: The hash algorithm used
 
-     FLAGS: Zero or one of 'gnutls_privkey_flags_t'
+     FLAGS: Zero or one of `gnutls_privkey_flags_t'
 
      HASH_DATA: holds the data to be signed
 
      SIGNATURE: will contain newly allocated signature
 
      This function will sign the given hashed data using a signature
-     algorithm supported by the private key.  Signature algorithms are
+     algorithm supported by the private key. Signature algorithms are
      always used together with a hash functions.  Different hash
      functions may be used for the RSA algorithm, but only SHA-XXX for
      the DSA keys.
 
-     You may use 'gnutls_pubkey_get_preferred_hash_algorithm()' to
+     You may use `gnutls_pubkey_get_preferred_hash_algorithm()'  to
      determine the hash algorithm.
 
-     Note that if 'GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA' flag is specified
-     this function will ignore 'hash_algo' and perform a raw PKCS1
-     signature.
+     Note that if `GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA'  flag is
+     specified this function will ignore  `hash_algo' and perform a raw
+     PKCS1 signature.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4973,12 +5080,12 @@ verification operations with the underlying keys.
      CIPHERTEXT: holds the data to be decrypted
 
      PLAINTEXT: will contain the decrypted data, allocated with
-     'gnutls_malloc()'
+     `gnutls_malloc()'
 
      This function will decrypt the given data using the algorithm
      supported by the private key.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4989,34 +5096,37 @@ possible using the key abstractions.
 
  -- Function: int gnutls_x509_crq_set_pubkey (gnutls_x509_crq_t CRQ,
           gnutls_pubkey_t KEY)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      KEY: holds a public key
 
      This function will set the public parameters from the given public
      key to the request.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
 
  -- Function: int gnutls_x509_crt_set_pubkey (gnutls_x509_crt_t CRT,
           gnutls_pubkey_t KEY)
-     CRT: should contain a 'gnutls_x509_crt_t' structure
+     CRT: should contain a `gnutls_x509_crt_t'  structure
 
      KEY: holds a public key
 
      This function will set the public parameters from the given public
      key to the request.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
-'INT *note gnutls_x509_crt_privkey_sign:: (gnutls_x509_crt_t CRT, gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY, gnutls_digest_algorithm_t DIG, unsigned int FLAGS)'
-'INT *note gnutls_x509_crl_privkey_sign:: (gnutls_x509_crl_t CRL, gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY, gnutls_digest_algorithm_t DIG, unsigned int FLAGS)'
-'INT *note gnutls_x509_crq_privkey_sign:: (gnutls_x509_crq_t CRQ, gnutls_privkey_t KEY, gnutls_digest_algorithm_t DIG, unsigned int FLAGS)'
+
+`INT *note gnutls_x509_crt_privkey_sign:: (gnutls_x509_crt_t CRT, gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY, gnutls_digest_algorithm_t DIG, unsigned int FLAGS)'
+
+`INT *note gnutls_x509_crl_privkey_sign:: (gnutls_x509_crl_t CRL, gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY, gnutls_digest_algorithm_t DIG, unsigned int FLAGS)'
+
+`INT *note gnutls_x509_crq_privkey_sign:: (gnutls_x509_crq_t CRQ, gnutls_privkey_t KEY, gnutls_digest_algorithm_t DIG, unsigned int FLAGS)'
 
 
 File: gnutls.info,  Node: Smart cards and HSMs,  Next: Trusted Platform Module,  Prev: Abstract key types,  Up: Hardware security modules and abstract key types
@@ -5025,9 +5135,9 @@ File: gnutls.info,  Node: Smart cards and HSMs,  Next: Trusted Platform Module,
 ========================
 
 In this section we present the smart-card and hardware security module
-(HSM) support in GnuTLS using PKCS #11 [_PKCS11_].  Hardware security
+(HSM) support in GnuTLS using PKCS #11 [_PKCS11_]. Hardware security
 modules and smart cards provide a way to store private keys and perform
-operations on them without exposing them.  This decouples cryptographic
+operations on them without exposing them. This decouples cryptographic
 keys from the applications that use them and provide an additional
 security layer against cryptographic key extraction.  Since this can
 also be achieved in software components such as in Gnome keyring, we
@@ -5038,18 +5148,18 @@ PKCS #11 is plugin API allowing applications to access cryptographic
 operations on a security module, as well as to objects residing on it.
 PKCS #11 modules exist for hardware tokens such as smart cards(1),
 cryptographic tokens, as well as for software modules like Gnome
-Keyring.  The objects residing on a security module may be certificates,
-public keys, private keys or secret keys.  Of those certificates and
-public/private key pairs can be used with GnuTLS.  PKCS #11's main
-advantage is that it allows operations on private key objects such as
-decryption and signing without exposing the key.  In GnuTLS the PKCS #11
-functionality is available in 'gnutls/pkcs11.h'.
+Keyring.  The objects residing on a security module may be
+certificates, public keys, private keys or secret keys. Of those
+certificates and public/private key pairs can be used with GnuTLS. PKCS
+#11's main advantage is that it allows operations on private key
+objects such as decryption and signing without exposing the key. In
+GnuTLS the PKCS #11 functionality is available in `gnutls/pkcs11.h'.
 
 Moreover PKCS #11 can be (ab)used to allow all applications in the same
-operating system to access shared cryptographic keys and certificates in
-a uniform way, as in *note Figure 5.1: fig:pkcs11-vision.  That way
+operating system to access shared cryptographic keys and certificates
+in a uniform way, as in *note fig:pkcs11-vision::.  That way
 applications could load their trusted certificate list, as well as user
-certificates from a common PKCS #11 module.  Such a provider exists in
+certificates from a common PKCS #11 module. Such a provider exists in
 the Gnome system, being the Gnome Keyring.
 
  [image src="pkcs11-vision.png" ]
@@ -5065,9 +5175,9 @@ Figure 5.1: PKCS #11 module usage.
 * Using a PKCS11 token with TLS::
 * p11tool Invocation::             Invoking p11tool
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) <http://www.opensc-project.org>
+(1) `http://www.opensc-project.org'
 
 
 File: gnutls.info,  Node: PKCS11 Initialization,  Next: Accessing objects that require a PIN,  Up: Smart cards and HSMs
@@ -5075,66 +5185,65 @@ File: gnutls.info,  Node: PKCS11 Initialization,  Next: Accessing objects that r
 5.2.1 Initialization
 --------------------
 
-To allow all the GnuTLS applications to access PKCS #11 tokens you can
-use a configuration per module, stored in '/etc/pkcs11/modules/'.  These
-are the configuration files of p11-kit(1).  For example a file that will
-load the OpenSC module, could be named '/etc/pkcs11/modules/opensc' and
-contain the following:
+To allow all the  GnuTLS applications to access PKCS #11 tokens you can
+use a configuration per module, stored in `/etc/pkcs11/modules/'.
+These are the configuration files of p11-kit(1).  For example a file
+that will load the OpenSC module, could be named
+`/etc/pkcs11/modules/opensc' and contain the following:
 
-     module: /usr/lib/opensc-pkcs11.so
+    module: /usr/lib/opensc-pkcs11.so
 
 If you use this file, then there is no need for other initialization in
 GnuTLS, except for the PIN and token functions (see next section).  In
 several cases, however, it is desirable to limit badly behaving modules
 (e.g., modules that add an unacceptable delay on initialization) to
-single applications.  That can be done using the "enable-in:" option
+single applications. That can be done using the "enable-in:" option
 followed by the base name of applications that this module should be
 used.
 
-In all cases, you may also manually initialize the PKCS #11 subsystem if
-the default settings are not desirable.
+In all cases, you may also manually initialize the PKCS #11 subsystem
+if the default settings are not desirable.
 
  -- Function: int gnutls_pkcs11_init (unsigned int FLAGS, const char *
           DEPRECATED_CONFIG_FILE)
-     FLAGS: 'GNUTLS_PKCS11_FLAG_MANUAL' or 'GNUTLS_PKCS11_FLAG_AUTO'
+     FLAGS: `GNUTLS_PKCS11_FLAG_MANUAL'  or `GNUTLS_PKCS11_FLAG_AUTO'
 
      DEPRECATED_CONFIG_FILE: either NULL or the location of a deprecated
      configuration file
 
-     This function will initialize the PKCS 11 subsystem in gnutls.  It
-     will read configuration files if 'GNUTLS_PKCS11_FLAG_AUTO' is used
-     or allow you to independently load PKCS 11 modules using
-     'gnutls_pkcs11_add_provider()' if 'GNUTLS_PKCS11_FLAG_MANUAL' is
+     This function will initialize the PKCS 11 subsystem in gnutls. It
+     will read configuration files if `GNUTLS_PKCS11_FLAG_AUTO'  is
+     used or allow you to independently load PKCS 11 modules using
+     `gnutls_pkcs11_add_provider()' if `GNUTLS_PKCS11_FLAG_MANUAL'  is
      specified.
 
      Normally you don't need to call this function since it is being
-     called by 'gnutls_global_init()' using the
-     'GNUTLS_PKCS11_FLAG_AUTO' .  If other option is required then it
+     called by `gnutls_global_init()'  using the
+     `GNUTLS_PKCS11_FLAG_AUTO' . If other option is required then it
      must be called before it.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
 
 Note that PKCS #11 modules must be reinitialized on the child processes
-after a 'fork'.  GnuTLS provides *note gnutls_pkcs11_reinit:: to be
+after a `fork'. GnuTLS provides *note gnutls_pkcs11_reinit:: to be
 called for this purpose.
 
  -- Function: int gnutls_pkcs11_reinit ( VOID)
-
      This function will reinitialize the PKCS 11 subsystem in gnutls.
-     This is required by PKCS 11 when an application uses 'fork()' .
-     The reinitialization function must be called on the child.
+     This is required by PKCS 11 when an application uses `fork()' . The
+     reinitialization function must be called on the child.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) <http://p11-glue.freedesktop.org/>
+(1) `http://p11-glue.freedesktop.org/'
 
 
 File: gnutls.info,  Node: Accessing objects that require a PIN,  Next: Reading objects,  Prev: PKCS11 Initialization,  Up: Smart cards and HSMs
@@ -5143,21 +5252,24 @@ File: gnutls.info,  Node: Accessing objects that require a PIN,  Next: Reading o
 ------------------------------------------
 
 Objects stored in token such as a private keys are typically protected
-from access by a PIN or password.  This PIN may be required to either
-read the object (if allowed) or to perform operations with it.  To allow
+from access by a PIN or password. This PIN may be required to either
+read the object (if allowed) or to perform operations with it. To allow
 obtaining the PIN when accessing a protected object, as well as probe
 the user to insert the token the following functions allow to set a
 callback.
 
-'VOID *note gnutls_pkcs11_set_token_function:: (gnutls_pkcs11_token_callback_t FN, void * USERDATA)'
-'VOID *note gnutls_pkcs11_set_pin_function:: (gnutls_pin_callback_t FN, void * USERDATA)'
-'INT *note gnutls_pkcs11_add_provider:: (const char * NAME, const char * PARAMS)'
-'GNUTLS_PIN_CALLBACK_T *note gnutls_pkcs11_get_pin_function:: (void ** USERDATA)'
+`VOID *note gnutls_pkcs11_set_token_function:: (gnutls_pkcs11_token_callback_t FN, void * USERDATA)'
+
+`VOID *note gnutls_pkcs11_set_pin_function:: (gnutls_pin_callback_t FN, void * USERDATA)'
+
+`INT *note gnutls_pkcs11_add_provider:: (const char * NAME, const char * PARAMS)'
+
+`GNUTLS_PIN_CALLBACK_T *note gnutls_pkcs11_get_pin_function:: (void ** USERDATA)'
 
-The callback is of type 'gnutls_pin_callback_t' and will have as input
+The callback is of type `gnutls_pin_callback_t' and will have as input
 the provided userdata, the PIN attempt number, a URL describing the
-token, a label describing the object and flags.  The PIN must be at most
-of 'pin_max' size and must be copied to pin variable.  The function must
+token, a label describing the object and flags. The PIN must be at most
+of `pin_max' size and must be copied to pin variable. The function must
 return 0 on success or a negative error code otherwise.
 
 typedef int (*gnutls_pin_callback_t) (void *userdata, int attempt,
@@ -5166,38 +5278,47 @@ typedef int (*gnutls_pin_callback_t) (void *userdata, int attempt,
                                       unsigned int flags,
                                       char *pin, size_t pin_max);
 
-The flags are of 'gnutls_pin_flag_t' type and are explained below.
+The flags are of `gnutls_pin_flag_t' type and are explained below.
 
-'GNUTLS_PIN_USER'
+`GNUTLS_PIN_USER'
      The PIN for the user.
-'GNUTLS_PIN_SO'
+
+`GNUTLS_PIN_SO'
      The PIN for the security officer (admin).
-'GNUTLS_PIN_FINAL_TRY'
+
+`GNUTLS_PIN_FINAL_TRY'
      This is the final try before blocking.
-'GNUTLS_PIN_COUNT_LOW'
+
+`GNUTLS_PIN_COUNT_LOW'
      Few tries remain before token blocks.
-'GNUTLS_PIN_CONTEXT_SPECIFIC'
+
+`GNUTLS_PIN_CONTEXT_SPECIFIC'
      The PIN is for a specific action and key like signing.
-'GNUTLS_PIN_WRONG'
+
+`GNUTLS_PIN_WRONG'
      Last given PIN was not correct.
 
-Figure 5.2: The 'gnutls_pin_flag_t' enumeration.
+Figure 5.2: The `gnutls_pin_flag_t' enumeration.
 
 Note that due to limitations of PKCS #11 there are issues when multiple
-libraries are sharing a module.  To avoid this problem GnuTLS uses
+libraries are sharing a module. To avoid this problem GnuTLS uses
 p11-kit that provides a middleware to control access to resources over
 the multiple users.
 
 To avoid conflicts with multiple registered callbacks for PIN functions,
 *note gnutls_pkcs11_get_pin_function:: may be used to check for any
-previously set functions.  In addition context specific PIN functions
+previously set functions. In addition context specific PIN functions
 are allowed, e.g., by using functions below.
 
-'VOID *note gnutls_certificate_set_pin_function:: (gnutls_certificate_credentials_t CRED, gnutls_pin_callback_t FN, void * USERDATA)'
-'VOID *note gnutls_pubkey_set_pin_function:: (gnutls_pubkey_t KEY, gnutls_pin_callback_t FN, void * USERDATA)'
-'VOID *note gnutls_privkey_set_pin_function:: (gnutls_privkey_t KEY, gnutls_pin_callback_t FN, void * USERDATA)'
-'VOID *note gnutls_pkcs11_obj_set_pin_function:: (gnutls_pkcs11_obj_t OBJ, gnutls_pin_callback_t FN, void * USERDATA)'
-'VOID *note gnutls_x509_crt_set_pin_function:: (gnutls_x509_crt_t CRT, gnutls_pin_callback_t FN, void * USERDATA)'
+`VOID *note gnutls_certificate_set_pin_function:: (gnutls_certificate_credentials_t CRED, gnutls_pin_callback_t FN, void * USERDATA)'
+
+`VOID *note gnutls_pubkey_set_pin_function:: (gnutls_pubkey_t KEY, gnutls_pin_callback_t FN, void * USERDATA)'
+
+`VOID *note gnutls_privkey_set_pin_function:: (gnutls_privkey_t KEY, gnutls_pin_callback_t FN, void * USERDATA)'
+
+`VOID *note gnutls_pkcs11_obj_set_pin_function:: (gnutls_pkcs11_obj_t OBJ, gnutls_pin_callback_t FN, void * USERDATA)'
+
+`VOID *note gnutls_x509_crt_set_pin_function:: (gnutls_x509_crt_t CRT, gnutls_pin_callback_t FN, void * USERDATA)'
 
 
 File: gnutls.info,  Node: Reading objects,  Next: Writing objects,  Prev: Accessing objects that require a PIN,  Up: Smart cards and HSMs
@@ -5206,30 +5327,31 @@ File: gnutls.info,  Node: Reading objects,  Next: Writing objects,  Prev: Access
 ---------------------
 
 All PKCS #11 objects are referenced by GnuTLS functions by URLs as
-described in [_PKCS11URI_]. This allows for a consistent naming of
-objects across systems and applications in the same system.  For example
+described in [_PKCS11URI_].  This allows for a consistent naming of
+objects across systems and applications in the same system. For example
 a public key on a smart card may be referenced as:
 
-     pkcs11:token=Nikos;serial=307521161601031;model=PKCS%2315; \
-     manufacturer=EnterSafe;object=test1;objecttype=public;\
-     id=32f153f3e37990b08624141077ca5dec2d15faed
+    pkcs11:token=Nikos;serial=307521161601031;model=PKCS%2315; \
+    manufacturer=EnterSafe;object=test1;objecttype=public;\
+    id=32f153f3e37990b08624141077ca5dec2d15faed
 
 while the smart card itself can be referenced as:
-     pkcs11:token=Nikos;serial=307521161601031;model=PKCS%2315;manufacturer=EnterSafe
+    pkcs11:token=Nikos;serial=307521161601031;model=PKCS%2315;manufacturer=EnterSafe
 
 Objects stored in a PKCS #11 token can be extracted if they are not
-marked as sensitive.  Usually only private keys are marked as sensitive
+marked as sensitive. Usually only private keys are marked as sensitive
 and cannot be extracted, while certificates and other data can be
-retrieved.  The functions that can be used to access objects are shown
+retrieved. The functions that can be used to access objects are shown
 below.
 
-'INT *note gnutls_pkcs11_obj_import_url:: (gnutls_pkcs11_obj_t OBJ, const char * URL, unsigned int FLAGS)'
-'INT *note gnutls_pkcs11_obj_export_url:: (gnutls_pkcs11_obj_t OBJ, gnutls_pkcs11_url_type_t DETAILED, char ** URL)'
+`INT *note gnutls_pkcs11_obj_import_url:: (gnutls_pkcs11_obj_t OBJ, const char * URL, unsigned int FLAGS)'
+
+`INT *note gnutls_pkcs11_obj_export_url:: (gnutls_pkcs11_obj_t OBJ, gnutls_pkcs11_url_type_t DETAILED, char ** URL)'
 
  -- Function: int gnutls_pkcs11_obj_get_info (gnutls_pkcs11_obj_t CRT,
           gnutls_pkcs11_obj_info_t ITYPE, void * OUTPUT, size_t *
           OUTPUT_SIZE)
-     CRT: should contain a 'gnutls_pkcs11_obj_t' structure
+     CRT: should contain a `gnutls_pkcs11_obj_t'  structure
 
      ITYPE: Denotes the type of information requested
 
@@ -5240,51 +5362,57 @@ below.
 
      This function will return information about the PKCS11 certificate
      such as the label, id as well as token information where the key is
-     stored.  When output is text it returns null terminated string
-     although 'output_size' contains the size of the actual data only.
+     stored. When output is text it returns null terminated string
+     although  `output_size' contains the size of the actual data only.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success or a negative error
      code on error.
 
      *Since:* 2.12.0
 
-'INT *note gnutls_x509_crt_import_pkcs11:: (gnutls_x509_crt_t CRT, gnutls_pkcs11_obj_t PKCS11_CRT)'
-'INT *note gnutls_x509_crt_import_pkcs11_url:: (gnutls_x509_crt_t CRT, const char * URL, unsigned int FLAGS)'
-'INT *note gnutls_x509_crt_list_import_pkcs11:: (gnutls_x509_crt_t * CERTS, unsigned int CERT_MAX, gnutls_pkcs11_obj_t * const OBJS, unsigned int FLAGS)'
+`INT *note gnutls_x509_crt_import_pkcs11:: (gnutls_x509_crt_t CRT, gnutls_pkcs11_obj_t PKCS11_CRT)'
+
+`INT *note gnutls_x509_crt_import_pkcs11_url:: (gnutls_x509_crt_t CRT, const char * URL, unsigned int FLAGS)'
+
+`INT *note gnutls_x509_crt_list_import_pkcs11:: (gnutls_x509_crt_t * CERTS, unsigned int CERT_MAX, gnutls_pkcs11_obj_t * const OBJS, unsigned int FLAGS)'
 
 Properties of the physical token can also be accessed and altered with
 GnuTLS.  For example data in a token can be erased (initialized), PIN
 can be altered, etc.
 
-'INT *note gnutls_pkcs11_token_init:: (const char * TOKEN_URL, const char * SO_PIN, const char * LABEL)'
-'INT *note gnutls_pkcs11_token_get_url:: (unsigned int SEQ, gnutls_pkcs11_url_type_t DETAILED, char ** URL)'
-'INT *note gnutls_pkcs11_token_get_info:: (const char * URL, gnutls_pkcs11_token_info_t TTYPE, void * OUTPUT, size_t * OUTPUT_SIZE)'
-'INT *note gnutls_pkcs11_token_get_flags:: (const char * URL, unsigned int * FLAGS)'
-'INT *note gnutls_pkcs11_token_set_pin:: (const char * TOKEN_URL, const char * OLDPIN, const char * NEWPIN, unsigned int FLAGS)'
+`INT *note gnutls_pkcs11_token_init:: (const char * TOKEN_URL, const char * SO_PIN, const char * LABEL)'
+
+`INT *note gnutls_pkcs11_token_get_url:: (unsigned int SEQ, gnutls_pkcs11_url_type_t DETAILED, char ** URL)'
+
+`INT *note gnutls_pkcs11_token_get_info:: (const char * URL, gnutls_pkcs11_token_info_t TTYPE, void * OUTPUT, size_t * OUTPUT_SIZE)'
+
+`INT *note gnutls_pkcs11_token_get_flags:: (const char * URL, unsigned int * FLAGS)'
+
+`INT *note gnutls_pkcs11_token_set_pin:: (const char * TOKEN_URL, const char * OLDPIN, const char * NEWPIN, unsigned int FLAGS)'
 
 The following examples demonstrate the usage of the API. The first
 example will list all available PKCS #11 tokens in a system and the
 latter will list all certificates in a token that have a corresponding
 private key.
 
-     int i;
-     char* url;
+    int i;
+    char* url;
 
-     gnutls_global_init();
+    gnutls_global_init();
 
-     for (i=0;;i++)
-       {
-         ret = gnutls_pkcs11_token_get_url(i, &url);
-         if (ret == GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE)
-           break;
+    for (i=0;;i++)
+      {
+        ret = gnutls_pkcs11_token_get_url(i, &url);
+        if (ret == GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE)
+          break;
 
-         if (ret < 0)
-           exit(1);
+        if (ret < 0)
+          exit(1);
 
-         fprintf(stdout, "Token[%d]: URL: %s\n", i, url);
-         gnutls_free(url);
-       }
-     gnutls_global_deinit();
+        fprintf(stdout, "Token[%d]: URL: %s\n", i, url);
+        gnutls_free(url);
+      }
+    gnutls_global_deinit();
 
 /* This example code is placed in the public domain. */
 
@@ -5346,16 +5474,16 @@ File: gnutls.info,  Node: Writing objects,  Next: Using a PKCS11 token with TLS,
 ---------------------
 
 With GnuTLS you can copy existing private keys and certificates to a
-token.  Note that when copying private keys it is recommended to mark
-them as sensitive using the 'GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE' to
-prevent its extraction.  An object can be marked as private using the
-flag 'GNUTLS_PKCS11_OBJ_FLAG_MARK_PRIVATE', to require PIN to be entered
-before accessing the object (for operations or otherwise).
+token. Note that when copying private keys it is recommended to mark
+them as sensitive using the `GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE' to
+prevent its extraction. An object can be marked as private using the
+flag `GNUTLS_PKCS11_OBJ_FLAG_MARK_PRIVATE', to require PIN to be
+entered before accessing the object (for operations or otherwise).
 
  -- Function: int gnutls_pkcs11_copy_x509_privkey (const char *
           TOKEN_URL, gnutls_x509_privkey_t KEY, const char * LABEL,
           unsigned int KEY_USAGE, unsigned int FLAGS)
-     TOKEN_URL: A PKCS '11' URL specifying a token
+     TOKEN_URL: A PKCS `11'  URL specifying a token
 
      KEY: A private key
 
@@ -5365,19 +5493,19 @@ before accessing the object (for operations or otherwise).
 
      FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
 
-     This function will copy a private key into a PKCS '11' token
+     This function will copy a private key into a PKCS `11'  token
      specified by a URL. It is highly recommended flags to contain
-     'GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE' unless there is a strong
+     `GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE' unless there is a strong
      reason not to.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
 
  -- Function: int gnutls_pkcs11_copy_x509_crt (const char * TOKEN_URL,
           gnutls_x509_crt_t CRT, const char * LABEL, unsigned int FLAGS)
-     TOKEN_URL: A PKCS '11' URL specifying a token
+     TOKEN_URL: A PKCS `11'  URL specifying a token
 
      CRT: A certificate
 
@@ -5385,11 +5513,11 @@ before accessing the object (for operations or otherwise).
 
      FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*
 
-     This function will copy a certificate into a PKCS '11' token
+     This function will copy a certificate into a PKCS `11'  token
      specified by a URL. The certificate can be marked as trusted or
      not.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -5400,8 +5528,8 @@ before accessing the object (for operations or otherwise).
 
      FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
 
-     This function will delete objects matching the given URL. Note that
-     not all tokens support the delete operation.
+     This function will delete objects matching the given URL.  Note
+     that not all tokens support the delete operation.
 
      *Returns:* On success, the number of objects deleted is returned,
      otherwise a negative error value.
@@ -5415,25 +5543,26 @@ File: gnutls.info,  Node: Using a PKCS11 token with TLS,  Next: p11tool Invocati
 -------------------------------------
 
 It is possible to use a PKCS #11 token to a TLS session, as shown in
-*note ex:pkcs11-client::.  In addition the following functions can be
+*note ex:pkcs11-client::. In addition the following functions can be
 used to load PKCS #11 key and certificates by specifying a PKCS #11 URL
 instead of a filename.
 
-'INT *note gnutls_certificate_set_x509_trust_file:: (gnutls_certificate_credentials_t CRED, const char * CAFILE, gnutls_x509_crt_fmt_t TYPE)'
-'INT *note gnutls_certificate_set_x509_key_file2:: (gnutls_certificate_credentials_t RES, const char * CERTFILE, const char * KEYFILE, gnutls_x509_crt_fmt_t TYPE, const char* PASS, unsigned int FLAGS)'
+`INT *note gnutls_certificate_set_x509_trust_file:: (gnutls_certificate_credentials_t CRED, const char * CAFILE, gnutls_x509_crt_fmt_t TYPE)'
+
+`INT *note gnutls_certificate_set_x509_key_file2:: (gnutls_certificate_credentials_t RES, const char * CERTFILE, const char * KEYFILE, gnutls_x509_crt_fmt_t TYPE, const char* PASS, unsigned int FLAGS)'
 
  -- Function: int gnutls_certificate_set_x509_system_trust
           (gnutls_certificate_credentials_t CRED)
-     CRED: is a 'gnutls_certificate_credentials_t' structure.
+     CRED: is a `gnutls_certificate_credentials_t'  structure.
 
      This function adds the system's default trusted CAs in order to
      verify client or server certificates.
 
      In the case the system is currently unsupported
-     'GNUTLS_E_UNIMPLEMENTED_FEATURE' is returned.
+     `GNUTLS_E_UNIMPLEMENTED_FEATURE' is returned.
 
-     *Returns:* the number of certificates processed or a negative error
-     code on error.
+     *Returns:* the number of certificates processed or a negative
+     error code on error.
 
      *Since:* 3.0
 
@@ -5443,96 +5572,97 @@ File: gnutls.info,  Node: p11tool Invocation,  Prev: Using a PKCS11 token with T
 5.2.6 Invoking p11tool
 ----------------------
 
-Program that allows handling data from PKCS #11 smart cards and security
-modules.
+Program that allows handling data from PKCS #11 smart cards and
+security modules.
 
 To use PKCS #11 tokens with gnutls the configuration file
 /etc/gnutls/pkcs11.conf has to exist and contain a number of lines of
 the form 'load=/usr/lib/opensc-pkcs11.so'.
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'p11tool' program.  This software is
-released under the GNU General Public License, version 3 or later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `p11tool' program.  This
+software is released under the GNU General Public License, version 3 or
+later.
 
-p11tool help/usage ('--help')
+p11tool help/usage (`--help')
 .............................
 
 This is the automatically generated usage text for p11tool.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
-
-     p11tool - GnuTLS PKCS #11 tool
-     Usage:  p11tool [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [url]
-
-        -d, --debug=num            Enable debugging.
-                                     - it must be in the range:
-                                       0 to 9999
-            --outfile=str          Output file
-            --list-tokens          List all available tokens
-            --export               Export the object specified by the URL
-            --list-mechanisms      List all available mechanisms in a token
-            --list-all             List all available objects in a token
-            --list-all-certs       List all available certificates in a token
-            --list-certs           List all certificates that have an associated private key
-            --list-all-privkeys    List all available private keys in a token
-            --list-all-trusted     List all available certificates marked as trusted
-            --initialize           Initializes a PKCS #11 token
-            --write                Writes the loaded objects to a PKCS #11 token
-            --delete               Deletes the objects matching the PKCS #11 URL
-            --generate-rsa         Generate an RSA private-public key pair
-            --generate-dsa         Generate an RSA private-public key pair
-            --generate-ecc         Generate an RSA private-public key pair
-            --label=str            Sets a label for the write operation
-            --trusted              Marks the object to be written as trusted
-                                     - disabled as '--no-trusted'
-            --private              Marks the object to be written as private
-                                     - disabled as '--no-private'
-                                     - enabled by default
-            --login                Force login to token
-                                     - disabled as '--no-login'
-            --detailed-url         Print detailed URLs
-                                     - disabled as '--no-detailed-url'
-            --secret-key=str       Provide a hex encoded secret key
-            --load-privkey=file    Private key file to use
-                                     - file must pre-exist
-            --load-pubkey=file     Public key file to use
-                                     - file must pre-exist
-            --load-certificate=file Certificate file to use
-                                     - file must pre-exist
-        -8, --pkcs8                Use PKCS #8 format for private keys
-            --bits=num             Specify the number of bits for key generate
-            --sec-param=str        Specify the security level
-            --inder                Use DER/RAW format for input
-                                     - disabled as '--no-inder'
-            --inraw                an alias for the 'inder' option
-            --provider=file        Specify the PKCS #11 provider library
-                                     - file must pre-exist
-        -v, --version[=arg]        output version information and exit
-        -h, --help                 display extended usage information and exit
-        -!, --more-help            extended usage information passed thru pager
-
-     Options are specified by doubled hyphens and their name or by a single
-     hyphen and the flag character.
-     Operands and options may be intermixed.  They will be reordered.
-
-     Program that allows handling data from PKCS #11 smart cards and security
-     modules.
-
-     To use PKCS #11 tokens with gnutls the configuration file
-     /etc/gnutls/pkcs11.conf has to exist and contain a number of lines of the
-     form 'load=/usr/lib/opensc-pkcs11.so'.
-
-     Please send bug reports to:  <bug-gnutls@gnu.org>
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
+
+p11tool - GnuTLS PKCS #11 tool
+Usage:  p11tool [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [url]
+
+   -d, --debug=num            Enable debugging.
+                                - it must be in the range:
+                                  0 to 9999
+       --outfile=str          Output file
+       --list-tokens          List all available tokens
+       --export               Export the object specified by the URL
+       --list-mechanisms      List all available mechanisms in a token
+       --list-all             List all available objects in a token
+       --list-all-certs       List all available certificates in a token
+       --list-certs           List all certificates that have an associated private key
+       --list-all-privkeys    List all available private keys in a token
+       --list-all-trusted     List all available certificates marked as trusted
+       --initialize           Initializes a PKCS #11 token
+       --write                Writes the loaded objects to a PKCS #11 token
+       --delete               Deletes the objects matching the PKCS #11 URL
+       --generate-rsa         Generate an RSA private-public key pair
+       --generate-dsa         Generate an RSA private-public key pair
+       --generate-ecc         Generate an RSA private-public key pair
+       --label=str            Sets a label for the write operation
+       --trusted              Marks the object to be written as trusted
+                                - disabled as '--no-trusted'
+       --private              Marks the object to be written as private
+                                - disabled as '--no-private'
+                                - enabled by default
+       --login                Force login to token
+                                - disabled as '--no-login'
+       --detailed-url         Print detailed URLs
+                                - disabled as '--no-detailed-url'
+       --secret-key=str       Provide a hex encoded secret key
+       --load-privkey=file    Private key file to use
+                                - file must pre-exist
+       --load-pubkey=file     Public key file to use
+                                - file must pre-exist
+       --load-certificate=file Certificate file to use
+                                - file must pre-exist
+   -8, --pkcs8                Use PKCS #8 format for private keys
+       --bits=num             Specify the number of bits for key generate
+       --sec-param=str        Specify the security level
+       --inder                Use DER/RAW format for input
+                                - disabled as '--no-inder'
+       --inraw                an alias for the 'inder' option
+       --provider=file        Specify the PKCS #11 provider library
+                                - file must pre-exist
+   -v, --version[=arg]        output version information and exit
+   -h, --help                 display extended usage information and exit
+   -!, --more-help            extended usage information passed thru pager
+
+Options are specified by doubled hyphens and their name or by a single
+hyphen and the flag character.
+Operands and options may be intermixed.  They will be reordered.
+
+Program that allows handling data from PKCS #11 smart cards and security
+modules.
+
+To use PKCS #11 tokens with gnutls the configuration file
+/etc/gnutls/pkcs11.conf has to exist and contain a number of lines of the
+form 'load=/usr/lib/opensc-pkcs11.so'.
+
+Please send bug reports to:  <bug-gnutls@gnu.org>
 
 debug option (-d)
 .................
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 write option
@@ -5545,20 +5675,20 @@ token.
 generate-rsa option
 ...................
 
-This is the "generate an rsa private-public key pair" option.  Generates
-an RSA private-public key pair on the specified token.
+This is the "generate an rsa private-public key pair" option.
+Generates an RSA private-public key pair on the specified token.
 
 generate-dsa option
 ...................
 
-This is the "generate an rsa private-public key pair" option.  Generates
-an RSA private-public key pair on the specified token.
+This is the "generate an rsa private-public key pair" option.
+Generates an RSA private-public key pair on the specified token.
 
 generate-ecc option
 ...................
 
-This is the "generate an rsa private-public key pair" option.  Generates
-an RSA private-public key pair on the specified token.
+This is the "generate an rsa private-public key pair" option.
+Generates an RSA private-public key pair on the specified token.
 
 private option
 ..............
@@ -5574,8 +5704,8 @@ sec-param option
 ................
 
 This is the "specify the security level" option.  This option takes an
-argument string 'Security parameter'.  This is alternative to the bits
-option.  Available options are [low, legacy, normal, high, ultra].
+argument string `Security parameter'.  This is alternative to the bits
+option. Available options are [low, legacy, normal, high, ultra].
 
 inder option
 ............
@@ -5586,23 +5716,24 @@ for input certificates and private keys.
 inraw option
 ............
 
-This is an alias for the 'inder' option, *note the inder option
+This is an alias for the `inder' option, *note the inder option
 documentation: p11tool inder.
 
 provider option
 ...............
 
-This is the "specify the pkcs #11 provider library" option.  This option
-takes an argument file.  This will override the default options in
-/etc/gnutls/pkcs11.conf
+This is the "specify the pkcs #11 provider library" option.  This
+option takes an argument file.  This will override the default options
+in /etc/gnutls/pkcs11.conf
 
 p11tool exit status
 ...................
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 p11tool See Also
@@ -5614,28 +5745,28 @@ p11tool Examples
 ................
 
 To view all tokens in your system use:
-     $ p11tool --list-tokens
+    $ p11tool --list-tokens
 
 To view all objects in a token use:
-     $ p11tool --login --list-all "pkcs11:TOKEN-URL"
+    $ p11tool --login --list-all "pkcs11:TOKEN-URL"
 
 To store a private key and a certificate in a token run:
-     $ p11tool --login --write "pkcs11:URL" --load-privkey key.pem \
-               --label "Mykey"
-     $ p11tool --login --write "pkcs11:URL" --load-certificate cert.pem \
-               --label "Mykey"
+    $ p11tool --login --write "pkcs11:URL" --load-privkey key.pem \
+              --label "Mykey"
+    $ p11tool --login --write "pkcs11:URL" --load-certificate cert.pem \
+              --label "Mykey"
 Note that some tokens require the same label to be used for the
 certificate and its corresponding private key.
 
 To generate an RSA private key inside the token use:
-     $ p11tool --login --generate-rsa --bits 1024 --label "MyNewKey" \
-               --outfile MyNewKey.pub "pkcs11:TOKEN-URL"
+    $ p11tool --login --generate-rsa --bits 1024 --label "MyNewKey" \
+              --outfile MyNewKey.pub "pkcs11:TOKEN-URL"
 The bits parameter in the above example is explicitly set because some
-tokens only support a limited number of bits.  The output file is the
-corresponding public key.  This key can be used to general a certificate
+tokens only support a limited number of bits. The output file is the
+corresponding public key. This key can be used to general a certificate
 request with certtool.
-     certtool --generate-request --load-privkey "pkcs11:KEY-URL" \
-        --load-pubkey MyNewKey.pub --outfile request.pem
+    certtool --generate-request --load-privkey "pkcs11:KEY-URL" \
+       --load-pubkey MyNewKey.pub --outfile request.pem
 
 
 File: gnutls.info,  Node: Trusted Platform Module,  Prev: Smart cards and HSMs,  Up: Hardware security modules and abstract key types
@@ -5644,21 +5775,21 @@ File: gnutls.info,  Node: Trusted Platform Module,  Prev: Smart cards and HSMs,
 =================================
 
 In this section we present the Trusted Platform Module (TPM) support in
-GnuTLS.  Note that this functionality is disabled by default because the
-'trousers' libraries GnuTLS depends on for that functionality are under
+GnuTLS. Note that this functionality is disabled by default because the
+`trousers' libraries GnuTLS depends on for that functionality are under
 the Common Public License which is not compatible with the GPL license.
 
 There was a big hype when the TPM chip was introduced into computers.
 Briefly it is a co-processor in your PC that allows it to perform
-calculations independently of the main processor.  This has good and bad
-side-effects.  In this section we focus on the good ones, which are the
+calculations independently of the main processor. This has good and bad
+side-effects. In this section we focus on the good ones, which are the
 fact that you can use it to perform cryptographic operations the
-similarly to a PKCS #11 smart card.  It allows for storing and using RSA
-keys but with slight differences from a PKCS #11 module that require
-different handling.  The basic operations supported, and used by GnuTLS,
-are key generation and signing.
+similarly to a PKCS #11 smart card.  It allows for storing and using
+RSA keys but with slight differences from a PKCS #11 module that
+require different handling.  The basic operations supported, and used
+by GnuTLS, are key generation and signing.
 
-In GnuTLS the TPM functionality is available in 'gnutls/tpm.h'.
+In GnuTLS the TPM functionality is available in `gnutls/tpm.h'.
 
 * Menu:
 
@@ -5674,29 +5805,29 @@ File: gnutls.info,  Node: Keys in TPM,  Next: Key generation,  Up: Trusted Platf
 -----------------
 
 The RSA keys in the TPM module may either be stored in a flash memory
-within TPM or stored in a file in disk.  In the former case the key can
+within TPM or stored in a file in disk. In the former case the key can
 provide operations as with PKCS #11 and is identified by a URL. The URL
 is described in [_TPMURI_] and are of the following form.
 tpmkey:uuid=42309df8-d101-11e1-a89a-97bb33c23ad1;storage=user
 
 It consists from a unique identifier of the key as well as the part of
-the flash memory the key is stored at.  The two options for the storage
-field are 'user' and 'system'.  The user keys are typically only
-available to the generating user and the system keys to all users.  The
+the flash memory the key is stored at. The two options for the storage
+field are `user' and `system'. The user keys are typically only
+available to the generating user and the system keys to all users. The
 stored in TPM keys are called registered keys.
 
 The keys that are stored in the disk are exported from the TPM but in an
-encrypted form.  To access them two passwords are required.  The first
-is the TPM Storage Root Key (SRK), and the other is a key-specific
-password.  Also those keys are identified by a URL of the form:
+encrypted form. To access them two passwords are required. The first is
+the TPM Storage Root Key (SRK), and the other is a key-specific
+password. Also those keys are identified by a URL of the form:
 tpmkey:file=/path/to/file
 
 When objects require a PIN to be accessed the same callbacks as with
 PKCS #11 objects are expected (see *note Accessing objects that require
-a PIN::).  Note that the PIN function may be called multiple times to
-unlock the SRK and the specific key in use.  The label in the key
-function will then be set to 'SRK' when unlocking the SRK key, or to
-'TPM' when unlocking any other key.
+a PIN::). Note that the PIN function may be called multiple times to
+unlock the SRK and the specific key in use. The label in the key
+function will then be set to `SRK' when unlocking the SRK key, or to
+`TPM' when unlocking any other key.
 
 
 File: gnutls.info,  Node: Key generation,  Next: Using keys,  Prev: Keys in TPM,  Up: Trusted Platform Module
@@ -5707,8 +5838,8 @@ File: gnutls.info,  Node: Key generation,  Next: Using keys,  Prev: Keys in TPM,
 All keys used by the TPM must be generated by the TPM. This can be done
 using *note gnutls_tpm_privkey_generate::.
 
- -- Function: int gnutls_tpm_privkey_generate (gnutls_pk_algorithm_t PK,
-          unsigned int BITS, const char* SRK_PASSWORD, const char*
+ -- Function: int gnutls_tpm_privkey_generate (gnutls_pk_algorithm_t
+          PK, unsigned int BITS, const char* SRK_PASSWORD, const char*
           KEY_PASSWORD, gnutls_tpmkey_fmt_t FORMAT,
           gnutls_x509_crt_fmt_t PUB_FORMAT, gnutls_datum_t* PRIVKEY,
           gnutls_datum_t* PUBKEY, unsigned int FLAGS)
@@ -5730,25 +5861,27 @@ using *note gnutls_tpm_privkey_generate::.
 
      FLAGS: should be a list of GNUTLS_TPM_* flags
 
-     This function will generate a private key in the TPM chip.  The
+     This function will generate a private key in the TPM chip. The
      private key will be generated within the chip and will be exported
-     in a wrapped with TPM's master key form.  Furthermore the wrapped
-     key can be protected with the provided 'password' .
+     in a wrapped with TPM's master key form. Furthermore the wrapped
+     key can be protected with the provided  `password' .
 
-     Note that bits in TPM is quantized value.  If the input value is
+     Note that bits in TPM is quantized value. If the input value is
      not one of the allowed values, then it will be quantized to one of
      512, 1024, 2048, 4096, 8192 and 16384.
 
      Allowed flags are:
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
 
-'INT *note gnutls_tpm_get_registered:: (gnutls_tpm_key_list_t * LIST)'
-'VOID *note gnutls_tpm_key_list_deinit:: (gnutls_tpm_key_list_t LIST)'
-'INT *note gnutls_tpm_key_list_get_url:: (gnutls_tpm_key_list_t LIST, unsigned int IDX, char** URL, unsigned int FLAGS)'
+`INT *note gnutls_tpm_get_registered:: (gnutls_tpm_key_list_t * LIST)'
+
+`VOID *note gnutls_tpm_key_list_deinit:: (gnutls_tpm_key_list_t LIST)'
+
+`INT *note gnutls_tpm_key_list_get_url:: (gnutls_tpm_key_list_t LIST, unsigned int IDX, char** URL, unsigned int FLAGS)'
 
  -- Function: int gnutls_tpm_privkey_delete (const char* URL, const
           char* SRK_PASSWORD)
@@ -5758,7 +5891,7 @@ using *note gnutls_tpm_privkey_generate::.
 
      This function will unregister the private key from the TPM chip.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -5773,11 +5906,12 @@ Importing keys
 ..............
 
 The TPM keys can be used directly by the abstract key types and do not
-require any special structures.  Moreover functions like *note
+require any special structures. Moreover functions like *note
 gnutls_certificate_set_x509_key_file2:: can access TPM URLs.
 
-'INT *note gnutls_privkey_import_tpm_raw:: (gnutls_privkey_t PKEY, const gnutls_datum_t * FDATA, gnutls_tpmkey_fmt_t FORMAT, const char * SRK_PASSWORD, const char * KEY_PASSWORD, unsigned int FLAGS)'
-'INT *note gnutls_pubkey_import_tpm_raw:: (gnutls_pubkey_t PKEY, const gnutls_datum_t * FDATA, gnutls_tpmkey_fmt_t FORMAT, const char * SRK_PASSWORD, unsigned int FLAGS)'
+`INT *note gnutls_privkey_import_tpm_raw:: (gnutls_privkey_t PKEY, const gnutls_datum_t * FDATA, gnutls_tpmkey_fmt_t FORMAT, const char * SRK_PASSWORD, const char * KEY_PASSWORD, unsigned int FLAGS)'
+
+`INT *note gnutls_pubkey_import_tpm_raw:: (gnutls_pubkey_t PKEY, const gnutls_datum_t * FDATA, gnutls_tpmkey_fmt_t FORMAT, const char * SRK_PASSWORD, unsigned int FLAGS)'
 
  -- Function: int gnutls_privkey_import_tpm_url (gnutls_privkey_t PKEY,
           const char* URL, const char * SRK_PASSWORD, const char *
@@ -5793,16 +5927,16 @@ gnutls_certificate_set_x509_key_file2:: can access TPM URLs.
      FLAGS: One of the GNUTLS_PRIVKEY_* flags
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     Note that unless 'GNUTLS_PRIVKEY_DISABLE_CALLBACKS' is specified,
+     Note that unless `GNUTLS_PRIVKEY_DISABLE_CALLBACKS' is specified,
      if incorrect (or NULL) passwords are given the PKCS11 callback
-     functions will be used to obtain the correct passwords.  Otherwise
-     if the SRK password is wrong 'GNUTLS_E_TPM_SRK_PASSWORD_ERROR' is
+     functions will be used to obtain the correct passwords. Otherwise
+     if the SRK password is wrong `GNUTLS_E_TPM_SRK_PASSWORD_ERROR'  is
      returned and if the key password is wrong or not provided then
-     'GNUTLS_E_TPM_KEY_PASSWORD_ERROR' is returned.
+     `GNUTLS_E_TPM_KEY_PASSWORD_ERROR' is returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -5819,15 +5953,15 @@ gnutls_certificate_set_x509_key_file2:: can access TPM URLs.
      FLAGS: should be zero
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     Note that unless 'GNUTLS_PUBKEY_DISABLE_CALLBACKS' is specified, if
-     incorrect (or NULL) passwords are given the PKCS11 callback
-     functions will be used to obtain the correct passwords.  Otherwise
-     if the SRK password is wrong 'GNUTLS_E_TPM_SRK_PASSWORD_ERROR' is
+     Note that unless `GNUTLS_PUBKEY_DISABLE_CALLBACKS' is specified,
+     if incorrect (or NULL) passwords are given the PKCS11 callback
+     functions will be used to obtain the correct passwords. Otherwise
+     if the SRK password is wrong `GNUTLS_E_TPM_SRK_PASSWORD_ERROR'  is
      returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -5835,15 +5969,17 @@ gnutls_certificate_set_x509_key_file2:: can access TPM URLs.
 Listing and deleting keys
 .........................
 
-The registered keys (that are stored in the TPM) can be listed using one
-of the following functions.  Those keys are unfortunately only
+The registered keys (that are stored in the TPM) can be listed using
+one of the following functions. Those keys are unfortunately only
 identified by their UUID and have no label or other human friendly
 identifier.  Keys can be deleted from permament storage using *note
 gnutls_tpm_privkey_delete::.
 
-'INT *note gnutls_tpm_get_registered:: (gnutls_tpm_key_list_t * LIST)'
-'VOID *note gnutls_tpm_key_list_deinit:: (gnutls_tpm_key_list_t LIST)'
-'INT *note gnutls_tpm_key_list_get_url:: (gnutls_tpm_key_list_t LIST, unsigned int IDX, char** URL, unsigned int FLAGS)'
+`INT *note gnutls_tpm_get_registered:: (gnutls_tpm_key_list_t * LIST)'
+
+`VOID *note gnutls_tpm_key_list_deinit:: (gnutls_tpm_key_list_t LIST)'
+
+`INT *note gnutls_tpm_key_list_get_url:: (gnutls_tpm_key_list_t LIST, unsigned int IDX, char** URL, unsigned int FLAGS)'
 
  -- Function: int gnutls_tpm_privkey_delete (const char* URL, const
           char* SRK_PASSWORD)
@@ -5853,7 +5989,7 @@ gnutls_tpm_privkey_delete::.
 
      This function will unregister the private key from the TPM chip.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -5866,90 +6002,91 @@ File: gnutls.info,  Node: tpmtool Invocation,  Prev: Using keys,  Up: Trusted Pl
 
 Program that allows handling cryptographic data from the TPM chip.
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'tpmtool' program.  This software is
-released under the GNU General Public License, version 3 or later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `tpmtool' program.  This
+software is released under the GNU General Public License, version 3 or
+later.
 
-tpmtool help/usage ('--help')
+tpmtool help/usage (`--help')
 .............................
 
 This is the automatically generated usage text for tpmtool.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
-
-     tpmtool - GnuTLS TPM tool - Ver. @VERSION@
-     USAGE:  tpmtool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
-
-        -d, --debug=num            Enable debugging.
-                                     - It must be in the range:
-                                       0 to 9999
-            --infile=file          Input file
-                                     - file must pre-exist
-            --outfile=str          Output file
-            --generate-rsa         Generate an RSA private-public key pair
-            --register             Any generated key will be registered in the TPM
-                                     - requires these options:
-                                     generate-rsa
-            --signing              Any generated key will be a signing key
-                                     - requires these options:
-                                     generate-rsa
-                                     -- and prohibits these options:
-                                     legacy
-            --legacy               Any generated key will be a legacy key
-                                     - requires these options:
-                                     generate-rsa
-                                     -- and prohibits these options:
-                                     signing
-            --user                 Any registered key will be a user key
-                                     - requires these options:
-                                     register
-                                     -- and prohibits these options:
-                                     system
-            --system               Any registred key will be a system key
-                                     - requires these options:
-                                     register
-                                     -- and prohibits these options:
-                                     user
-            --pubkey=str           Prints the public key of the provided key
-            --list                 Lists all stored keys in the TPM
-            --delete=str           Delete the key identified by the given URL (UUID).
-            --sec-param=str        Specify the security level [low, legacy, normal, high, ultra].
-            --bits=num             Specify the number of bits for key generate
-            --inder                Use the DER format for keys.
-                                     - disabled as --no-inder
-            --outder               Use DER format for output keys
-                                     - disabled as --no-outder
-        -v, --version[=arg]        Output version information and exit
-        -h, --help                 Display extended usage information and exit
-        -!, --more-help            Extended usage information passed thru pager
-
-     Options are specified by doubled hyphens and their name or by a single
-     hyphen and the flag character.
-
-
-
-     Program that allows handling cryptographic data from the TPM chip.
-
-     please send bug reports to:  bug-gnutls@gnu.org
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
+
+tpmtool - GnuTLS TPM tool - Ver. 3.1.13
+USAGE:  tpmtool [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
+
+   -d, --debug=num            Enable debugging.
+                                - It must be in the range:
+                                  0 to 9999
+       --infile=file          Input file
+                                - file must pre-exist
+       --outfile=str          Output file
+       --generate-rsa         Generate an RSA private-public key pair
+       --register             Any generated key will be registered in the TPM
+                                - requires these options:
+                                generate-rsa
+       --signing              Any generated key will be a signing key
+                                - requires these options:
+                                generate-rsa
+                                -- and prohibits these options:
+                                legacy
+       --legacy               Any generated key will be a legacy key
+                                - requires these options:
+                                generate-rsa
+                                -- and prohibits these options:
+                                signing
+       --user                 Any registered key will be a user key
+                                - requires these options:
+                                register
+                                -- and prohibits these options:
+                                system
+       --system               Any registred key will be a system key
+                                - requires these options:
+                                register
+                                -- and prohibits these options:
+                                user
+       --pubkey=str           Prints the public key of the provided key
+       --list                 Lists all stored keys in the TPM
+       --delete=str           Delete the key identified by the given URL (UUID).
+       --sec-param=str        Specify the security level [low, legacy, normal, high, ultra].
+       --bits=num             Specify the number of bits for key generate
+       --inder                Use the DER format for keys.
+                                - disabled as --no-inder
+       --outder               Use DER format for output keys
+                                - disabled as --no-outder
+   -v, --version[=arg]        Output version information and exit
+   -h, --help                 Display extended usage information and exit
+   -!, --more-help            Extended usage information passed thru pager
+
+Options are specified by doubled hyphens and their name or by a single
+hyphen and the flag character.
+
+
+
+Program that allows handling cryptographic data from the TPM chip.
+
+please send bug reports to:  bug-gnutls@gnu.org
 
 debug option (-d)
 .................
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 generate-rsa option
 ...................
 
-This is the "generate an rsa private-public key pair" option.  Generates
-an RSA private-public key pair in the TPM chip.  The key may be stored
-in filesystem and protected by a PIN, or stored (registered) in the TPM
-chip flash.
+This is the "generate an rsa private-public key pair" option.
+Generates an RSA private-public key pair in the TPM chip.  The key may
+be stored in filesystem and protected by a PIN, or stored (registered)
+in the TPM chip flash.
 
 user option
 ...........
@@ -5958,6 +6095,7 @@ This is the "any registered key will be a user key" option.
 
 This option has some usage constraints.  It:
    * must appear in combination with the following options: register.
+
    * must not appear in combination with any of the following options:
      system.
 
@@ -5970,6 +6108,7 @@ This is the "any registred key will be a system key" option.
 
 This option has some usage constraints.  It:
    * must appear in combination with the following options: register.
+
    * must not appear in combination with any of the following options:
      user.
 
@@ -5979,31 +6118,32 @@ sec-param option
 ................
 
 This is the "specify the security level [low, legacy, normal, high,
-ultra]."  option.  This option takes an argument string 'Security
-parameter'.  This is alternative to the bits option.  Note however that
-the values allowed by the TPM chip are quantized and given values may be
-rounded up.
+ultra]." option.  This option takes an argument string `Security
+parameter'.  This is alternative to the bits option. Note however that
+the values allowed by the TPM chip are quantized and given values may
+be rounded up.
 
 inder option
 ............
 
-This is the "use the der format for keys."  option.  The input files
+This is the "use the der format for keys." option.  The input files
 will be assumed to be in the portable DER format of TPM. The default
 format is a custom format used by various TPM tools
 
 outder option
 .............
 
-This is the "use der format for output keys" option.  The output will be
-in the TPM portable DER format.
+This is the "use der format for output keys" option.  The output will
+be in the TPM portable DER format.
 
 tpmtool exit status
 ...................
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 tpmtool See Also
@@ -6015,20 +6155,20 @@ tpmtool Examples
 ................
 
 To generate a key that is to be stored in filesystem use:
-     $ tpmtool --generate-rsa --bits 2048 --outfile tpmkey.pem
+    $ tpmtool --generate-rsa --bits 2048 --outfile tpmkey.pem
 
 To generate a key that is to be stored in TPM's flash use:
-     $ tpmtool --generate-rsa --bits 2048 --register --user
+    $ tpmtool --generate-rsa --bits 2048 --register --user
 
 To get the public key of a TPM key use:
-     $ tpmtool --pubkey tpmkey:uuid=58ad734b-bde6-45c7-89d8-756a55ad1891;storage=user \
-               --outfile pubkey.pem
+    $ tpmtool --pubkey tpmkey:uuid=58ad734b-bde6-45c7-89d8-756a55ad1891;storage=user \
+              --outfile pubkey.pem
 
 or if the key is stored in the filesystem:
-     $ tpmtool --pubkey tpmkey:file=tmpkey.pem --outfile pubkey.pem
+    $ tpmtool --pubkey tpmkey:file=tmpkey.pem --outfile pubkey.pem
 
 To list all keys stored in TPM use:
-     $ tpmtool --list
+    $ tpmtool --list
 
 
 File: gnutls.info,  Node: How to use GnuTLS in applications,  Next: GnuTLS application examples,  Prev: Hardware security modules and abstract key types,  Up: Top
@@ -6058,9 +6198,9 @@ File: gnutls.info,  Node: Introduction to the library,  Next: Preparation,  Up:
 ================
 
 This chapter tries to explain the basic functionality of the current
-GnuTLS library.  Note that there may be additional functionality not
-discussed here but included in the library.  Checking the header files
-in '/usr/include/gnutls/' and the manpages is recommended.
+GnuTLS library. Note that there may be additional functionality not
+discussed here but included in the library. Checking the header files
+in `/usr/include/gnutls/' and the manpages is recommended.
 
 * Menu:
 
@@ -6078,45 +6218,45 @@ File: gnutls.info,  Node: General idea,  Next: Error handling,  Up: Introduction
 ------------------
 
 A brief description of how GnuTLS sessions operate is shown at *note
-Figure 6.1: fig:gnutls-design.  This section will become more clear when
-it is completely read.  As shown in the figure, there is a read-only
-global state that is initialized once by the global initialization
-function.  This global structure, among others, contains the memory
-allocation functions used, structures needed for the ASN.1 parser and
-depending on the system's CPU, pointers to hardware accelerated
-encryption functions.  This structure is never modified by any GnuTLS
-function, except for the deinitialization function which frees all
-allocated memory and must be called after the program has permanently
-finished using GnuTLS.
+fig:gnutls-design::. This section will become more clear when it is
+completely read.  As shown in the figure, there is a read-only global
+state that is initialized once by the global initialization function.
+This global structure, among others, contains the memory allocation
+functions used, structures needed for the ASN.1 parser and depending on
+the system's CPU, pointers to hardware accelerated encryption
+functions.  This structure is never modified by any GnuTLS function,
+except for the deinitialization function which frees all allocated
+memory and must be called after the program has permanently finished
+using GnuTLS.
 
  [image src="gnutls-internals.png" ]
 
 Figure 6.1: High level design of GnuTLS.
 
 The credentials structures are used by the authentication methods, such
-as certificate authentication.  They store certificates, privates keys,
+as certificate authentication. They store certificates, privates keys,
 and other information that is needed to prove the identity to the peer,
-and/or verify the indentity of the peer.  The information stored in the
+and/or verify the indentity of the peer. The information stored in the
 credentials structures is initialized once and then can be shared by
 many TLS sessions.
 
 A GnuTLS session contains all the required information to handle one
-secure connection.  The session communicates with the peers using the
+secure connection. The session communicates with the peers using the
 provided functions of the transport layer.  Every session has a unique
 session ID shared with the peer.
 
 Since TLS sessions can be resumed, servers need a database back-end to
 hold the session's parameters.  Every GnuTLS session after a successful
 handshake calls the appropriate back-end function (see *note resume::)
-to store the newly negotiated session.  The session database is examined
-by the server just after having received the client hello(1), and if the
-session ID sent by the client, matches a stored session, the stored
+to store the newly negotiated session. The session database is examined
+by the server just after having received the client hello(1), and if
+the session ID sent by the client, matches a stored session, the stored
 session will be retrieved, and the new session will be a resumed one,
 and will share the same session ID with the previous one.
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) The first message in a TLS handshake
+(1) The first message in a TLS handshake
 
 
 File: gnutls.info,  Node: Error handling,  Next: Common types,  Prev: General idea,  Up: Introduction to the library
@@ -6127,24 +6267,24 @@ File: gnutls.info,  Node: Error handling,  Next: Common types,  Prev: General id
 In GnuTLS most functions return an integer type as a result.  In almost
 all cases a zero or a positive number means success, and a negative
 number indicates failure, or a situation that some action has to be
-taken.  Thus negative error codes may be fatal or not.
+taken. Thus negative error codes may be fatal or not.
 
 Fatal errors terminate the connection immediately and further sends and
 receives will be disallowed.  Such an example is
-'GNUTLS_E_DECRYPTION_FAILED'.  Non-fatal errors may warn about
+`GNUTLS_E_DECRYPTION_FAILED'. Non-fatal errors may warn about
 something, i.e., a warning alert was received, or indicate the some
-action has to be taken.  This is the case with the error code
-'GNUTLS_E_REHANDSHAKE' returned by *note gnutls_record_recv::.  This
-error code indicates that the server requests a re-handshake.  The
+action has to be taken. This is the case with the error code
+`GNUTLS_E_REHANDSHAKE' returned by *note gnutls_record_recv::.  This
+error code indicates that the server requests a re-handshake. The
 client may ignore this request, or may reply with an alert.  You can
 test if an error code is a fatal one by using the *note
 gnutls_error_is_fatal::.  All errors can be converted to a descriptive
 string using *note gnutls_strerror::.
 
-If any non fatal errors, that require an action, are to be returned by a
-function, these error codes will be documented in the function's
-reference.  For example the error codes
-'GNUTLS_E_WARNING_ALERT_RECEIVED' and 'GNUTLS_E_FATAL_ALERT_RECEIVED'
+If any non fatal errors, that require an action, are to be returned by
+a function, these error codes will be documented in the function's
+reference. For example the error codes
+`GNUTLS_E_WARNING_ALERT_RECEIVED' and `GNUTLS_E_FATAL_ALERT_RECEIVED'
 that may returned when receiving data, should be handled by notifying
 the user of the alert (as explained in *note Handling alerts::).  See
 *note Error codes::, for a description of the available error codes.
@@ -6156,11 +6296,11 @@ File: gnutls.info,  Node: Common types,  Next: Debugging and auditing,  Prev: Er
 ------------------
 
 All strings that are to provided as input to GnuTLS functions should be
-in UTF-8 unless otherwise specified.  Output strings are also in UTF-8
+in UTF-8 unless otherwise specified. Output strings are also in UTF-8
 format unless otherwise specified.
 
 When data of a fixed size are provided to GnuTLS functions then the
-helper structure 'gnutls_datum_t' is often used.  Its definition is
+helper structure `gnutls_datum_t' is often used. Its definition is
 shown below.
   typedef struct
   {
@@ -6169,7 +6309,7 @@ shown below.
   } gnutls_datum_t;
 
 Other functions that require data for scattered read use a structure
-similar to 'struct iovec' typically used by 'readv'.  It is shown below.
+similar to `struct iovec' typically used by `readv'. It is shown below.
   typedef struct
   {
     void *iov_base;             /* Starting address */
@@ -6183,19 +6323,20 @@ File: gnutls.info,  Node: Debugging and auditing,  Next: Thread safety,  Prev: C
 ----------------------------
 
 In many cases things may not go as expected and further information, to
-assist debugging, from GnuTLS is desired.  Those are the cases where the
-*note gnutls_global_set_log_level:: and *note
-gnutls_global_set_log_function:: are to be used.  Those will print
+assist debugging, from GnuTLS is desired.  Those are the cases where
+the *note gnutls_global_set_log_level:: and *note
+gnutls_global_set_log_function:: are to be used. Those will print
 verbose information on the GnuTLS functions internal flow.
 
-'VOID *note gnutls_global_set_log_level:: (int LEVEL)'
-'VOID *note gnutls_global_set_log_function:: (gnutls_log_func LOG_FUNC)'
+`VOID *note gnutls_global_set_log_level:: (int LEVEL)'
+
+`VOID *note gnutls_global_set_log_function:: (gnutls_log_func LOG_FUNC)'
 
 When debugging is not required, important issues, such as detected
-attacks on the protocol still need to be logged.  This is provided by
+attacks on the protocol still need to be logged. This is provided by
 the logging function set by *note
-gnutls_global_set_audit_log_function::.  The provided function will
-receive an message and the corresponding TLS session.  The session
+gnutls_global_set_audit_log_function::. The provided function will
+receive an message and the corresponding TLS session. The session
 information might be used to derive IP addresses or other information
 about the peer involved.
 
@@ -6205,11 +6346,11 @@ about the peer involved.
 
      This is the function where you set the logging function gnutls is
      going to use.  This is different from
-     'gnutls_global_set_log_function()' because it will report the
-     session of the event if any.  Note that that session might be null
+     `gnutls_global_set_log_function()' because it will report the
+     session of the event if any. Note that that session might be null
      if there is no corresponding TLS session.
 
-     'gnutls_audit_log_func' is of the form, void
+     `gnutls_audit_log_func' is of the form, void
      (*gnutls_audit_log_func)( gnutls_session_t, const char*);
 
      *Since:* 3.0
@@ -6220,36 +6361,36 @@ File: gnutls.info,  Node: Thread safety,  Next: Callback functions,  Prev: Debug
 6.1.5 Thread safety
 -------------------
 
-The GnuTLS library is thread safe by design, meaning that objects of the
-library such as TLS sessions, can be safely divided across threads as
-long as a single thread accesses a single object.  This is sufficient to
-support a server which handles several sessions per thread.  If,
+The GnuTLS library is thread safe by design, meaning that objects of
+the library such as TLS sessions, can be safely divided across threads
+as long as a single thread accesses a single object. This is sufficient
+to support a server which handles several sessions per thread.  If,
 however, an object needs to be shared across threads then access must be
-protected with a mutex.  Read-only access to objects, for example the
+protected with a mutex. Read-only access to objects, for example the
 credentials holding structures, is also thread-safe.
 
 The random generator of the cryptographic back-end, is not thread safe
 and requires mutex locks which are setup by GnuTLS.  Applications can
 either call *note gnutls_global_init:: which will initialize the default
-operating system provided locks (i.e.  'pthreads' on GNU/Linux and
-'CriticalSection' on Windows), or manually specify the locking system
+operating system provided locks (i.e. `pthreads' on GNU/Linux and
+`CriticalSection' on Windows), or manually specify the locking system
 using the function *note gnutls_global_set_mutex:: before calling *note
 gnutls_global_init::.  Setting mutexes manually is recommended only for
-applications that have full control of the underlying libraries.  If
-this is not the case, the use of the operating system defaults is
-recommended.  An example of non-native thread usage is shown below.
-
-     #include <gnutls/gnutls.h>
-
-     int main()
-     {
-        /* When the system mutexes are not to be used
-         * gnutls_global_set_mutex() must be called explicitly
-         */
-        gnutls_global_set_mutex (mutex_init, mutex_deinit,
-                                 mutex_lock, mutex_unlock);
-        gnutls_global_init();
-     }
+applications that have full control of the underlying libraries. If this
+is not the case, the use of the operating system defaults is
+recommended. An example of non-native thread usage is shown below.
+
+    #include <gnutls/gnutls.h>
+
+    int main()
+    {
+       /* When the system mutexes are not to be used
+        * gnutls_global_set_mutex() must be called explicitly
+        */
+       gnutls_global_set_mutex (mutex_init, mutex_deinit,
+                                mutex_lock, mutex_unlock);
+       gnutls_global_init();
+    }
 
  -- Function: void gnutls_global_set_mutex (mutex_init_func INIT,
           mutex_deinit_func DEINIT, mutex_lock_func LOCK,
@@ -6263,13 +6404,13 @@ recommended.  An example of non-native thread usage is shown below.
      UNLOCK: mutex unlocking function
 
      With this function you are allowed to override the default mutex
-     locks used in some parts of gnutls and dependent libraries.  This
+     locks used in some parts of gnutls and dependent libraries. This
      function should be used if you have complete control of your
      program and libraries.  Do not call this function from a library.
      Instead only initialize gnutls and the default OS mutex locks will
      be used.
 
-     This function must be called before 'gnutls_global_init()' .
+     This function must be called before `gnutls_global_init()' .
 
      *Since:* 2.12.0
 
@@ -6280,20 +6421,21 @@ File: gnutls.info,  Node: Callback functions,  Prev: Thread safety,  Up: Introdu
 ------------------------
 
 There are several cases where GnuTLS may need out of band input from
-your program.  This is now implemented using some callback functions,
+your program. This is now implemented using some callback functions,
 which your program is expected to register.
 
 An example of this type of functions are the push and pull callbacks
-which are used to specify the functions that will retrieve and send data
-to the transport layer.
+which are used to specify the functions that will retrieve and send
+data to the transport layer.
 
-'VOID *note gnutls_transport_set_push_function:: (gnutls_session_t SESSION, gnutls_push_func PUSH_FUNC)'
-'VOID *note gnutls_transport_set_pull_function:: (gnutls_session_t SESSION, gnutls_pull_func PULL_FUNC)'
+`VOID *note gnutls_transport_set_push_function:: (gnutls_session_t SESSION, gnutls_push_func PUSH_FUNC)'
+
+`VOID *note gnutls_transport_set_pull_function:: (gnutls_session_t SESSION, gnutls_pull_func PULL_FUNC)'
 
 Other callback functions may require more complicated input and data to
-be allocated.  Such an example is *note
+be allocated. Such an example is *note
 gnutls_srp_set_server_credentials_function::.  All callbacks should
-allocate and free memory using 'gnutls_malloc' and 'gnutls_free'.
+allocate and free memory using `gnutls_malloc' and `gnutls_free'.
 
 
 File: gnutls.info,  Node: Preparation,  Next: Session initialization,  Prev: Introduction to the library,  Up: How to use GnuTLS in applications
@@ -6301,8 +6443,8 @@ File: gnutls.info,  Node: Preparation,  Next: Session initialization,  Prev: Int
 6.2 Preparation
 ===============
 
-To use GnuTLS, you have to perform some changes to your sources and your
-build system.  The necessary changes are explained in the following
+To use GnuTLS, you have to perform some changes to your sources and
+your build system. The necessary changes are explained in the following
 subsections.
 
 * Menu:
@@ -6319,7 +6461,7 @@ File: gnutls.info,  Node: Headers,  Next: Initialization,  Up: Preparation
 -------------
 
 All the data types and functions of the GnuTLS library are defined in
-the header file 'gnutls/gnutls.h'.  This must be included in all
+the header file `gnutls/gnutls.h'.  This must be included in all
 programs that make use of the GnuTLS library.
 
 
@@ -6336,7 +6478,7 @@ by calling *note gnutls_global_deinit::.
 
 In order to take advantage of the internationalization features in
 GnuTLS, such as translated error messages, the application must set the
-current locale using 'setlocale' before initializing GnuTLS.
+current locale using `setlocale' before initializing GnuTLS.
 
 
 File: gnutls.info,  Node: Version check,  Next: Building the source,  Prev: Initialization,  Up: Preparation
@@ -6344,7 +6486,7 @@ File: gnutls.info,  Node: Version check,  Next: Building the source,  Prev: Init
 6.2.3 Version check
 -------------------
 
-It is often desirable to check that the version of 'gnutls' used is
+It is often desirable to check that the version of `gnutls' used is
 indeed one which fits all requirements.  Even with binary compatibility
 new features may have been introduced but due to problem with the
 dynamic linker an old version is actually used.  So you may want to
@@ -6357,49 +6499,49 @@ File: gnutls.info,  Node: Building the source,  Prev: Version check,  Up: Prepar
 6.2.4 Building the source
 -------------------------
 
-If you want to compile a source file including the 'gnutls/gnutls.h'
+If you want to compile a source file including the `gnutls/gnutls.h'
 header file, you must make sure that the compiler can find it in the
 directory hierarchy.  This is accomplished by adding the path to the
 directory in which the header file is located to the compilers include
-file search path (via the '-I' option).
+file search path (via the `-I' option).
 
 However, the path to the include file is determined at the time the
 source is configured.  To solve this problem, the library uses the
-external package 'pkg-config' that knows the path to the include file
+external package `pkg-config' that knows the path to the include file
 and other configuration options.  The options that need to be added to
-the compiler invocation at compile time are output by the '--cflags'
-option to 'pkg-config gnutls'.  The following example shows how it can
+the compiler invocation at compile time are output by the `--cflags'
+option to `pkg-config gnutls'.  The following example shows how it can
 be used at the command line:
 
-     gcc -c foo.c `pkg-config gnutls --cflags`
+    gcc -c foo.c `pkg-config gnutls --cflags`
 
-Adding the output of 'pkg-config gnutls --cflags' to the compilers
+Adding the output of `pkg-config gnutls --cflags' to the compilers
 command line will ensure that the compiler can find the
-'gnutls/gnutls.h' header file.
+`gnutls/gnutls.h' header file.
 
 A similar problem occurs when linking the program with the library.
 Again, the compiler has to find the library files.  For this to work,
-the path to the library files has to be added to the library search path
-(via the '-L' option).  For this, the option '--libs' to 'pkg-config
-gnutls' can be used.  For convenience, this option also outputs all
-other options that are required to link the program with the library
-(for instance, the '-ltasn1' option).  The example shows how to link
-'foo.o' with the library to a program 'foo'.
+the path to the library files has to be added to the library search
+path (via the `-L' option).  For this, the option `--libs' to
+`pkg-config gnutls' can be used.  For convenience, this option also
+outputs all other options that are required to link the program with
+the library (for instance, the `-ltasn1' option).  The example shows
+how to link `foo.o' with the library to a program `foo'.
 
-     gcc -o foo foo.o `pkg-config gnutls --libs`
+    gcc -o foo foo.o `pkg-config gnutls --libs`
 
 Of course you can also combine both examples to a single command by
-specifying both options to 'pkg-config':
+specifying both options to `pkg-config':
 
-     gcc -o foo foo.c `pkg-config gnutls --cflags --libs`
+    gcc -o foo foo.c `pkg-config gnutls --cflags --libs`
 
 When a program uses the GNU autoconf system, then the following line or
 similar can be used to detect the presence of GnuTLS.
 
-     PKG_CHECK_MODULES([LIBGNUTLS], [gnutls >= 3.0.0])
+    PKG_CHECK_MODULES([LIBGNUTLS], [gnutls >= 3.0.0])
 
-     AC_SUBST([LIBGNUTLS_CFLAGS])
-     AC_SUBST([LIBGNUTLS_LIBS])
+    AC_SUBST([LIBGNUTLS_CFLAGS])
+    AC_SUBST([LIBGNUTLS_LIBS])
 
 
 File: gnutls.info,  Node: Session initialization,  Next: Associating the credentials,  Prev: Preparation,  Up: How to use GnuTLS in applications
@@ -6417,31 +6559,31 @@ underlying protocol type, i.e., datagram (UDP) or reliable (TCP).
 
  -- Function: int gnutls_init (gnutls_session_t * SESSION, unsigned int
           FLAGS)
-     SESSION: is a pointer to a 'gnutls_session_t' structure.
+     SESSION: is a pointer to a `gnutls_session_t'  structure.
 
      FLAGS: indicate if this session is to be used for server or client.
 
-     This function initializes the current session to null.  Every
+     This function initializes the current session to null. Every
      session must be initialized before use, so internal structures can
-     be allocated.  This function allocates structures which can only be
-     free'd by calling 'gnutls_deinit()' .  Returns 'GNUTLS_E_SUCCESS'
-     (0) on success.
+     be allocated.  This function allocates structures which can only
+     be free'd by calling `gnutls_deinit()' .  Returns
+     `GNUTLS_E_SUCCESS'  (0) on success.
 
-     'flags' can be one of 'GNUTLS_CLIENT' and 'GNUTLS_SERVER' .  For a
-     DTLS entity, the flags 'GNUTLS_DATAGRAM' and 'GNUTLS_NONBLOCK' are
-     also available.  The latter flag will enable a non-blocking
+     `flags' can be one of `GNUTLS_CLIENT'  and `GNUTLS_SERVER' . For a
+     DTLS entity, the flags `GNUTLS_DATAGRAM'  and  `GNUTLS_NONBLOCK'
+     are also available. The latter flag will enable a non-blocking
      operation of the DTLS timers.
 
-     Note that since version 3.1.2 this function enables some common TLS
-     extensions such as session tickets and OCSP certificate status
-     request in client side by default.  To prevent that use the
-     'GNUTLS_NO_EXTENSIONS' flag.
+     Note that since version 3.1.2 this function enables some common
+     TLS extensions such as session tickets and OCSP certificate status
+     request in client side by default. To prevent that use the
+     `GNUTLS_NO_EXTENSIONS' flag.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
-After the session initialization details on the allowed ciphersuites and
-protocol versions should be set using the priority functions such as
-*note gnutls_priority_set_direct::.  We elaborate on them in *note
+After the session initialization details on the allowed ciphersuites
+and protocol versions should be set using the priority functions such
+as *note gnutls_priority_set_direct::. We elaborate on them in *note
 Priority Strings::.  The credentials used for the key exchange method,
 such as certificates or usernames and passwords should also be
 associated with the session current session using *note
@@ -6449,34 +6591,34 @@ gnutls_credentials_set::.
 
  -- Function: int gnutls_credentials_set (gnutls_session_t SESSION,
           gnutls_credentials_type_t TYPE, void * CRED)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      TYPE: is the type of the credentials
 
      CRED: is a pointer to a structure.
 
      Sets the needed credentials for the specified type.  Eg username,
-     password - or public and private keys etc.  The 'cred' parameter is
-     a structure that depends on the specified type and on the current
-     session (client or server).
+     password - or public and private keys etc.  The  `cred' parameter
+     is a structure that depends on the specified type and on the
+     current session (client or server).
 
      In order to minimize memory usage, and share credentials between
      several threads gnutls keeps a pointer to cred, and not the whole
      cred structure.  Thus you will have to keep the structure allocated
-     until you call 'gnutls_deinit()' .
+     until you call `gnutls_deinit()' .
 
-     For 'GNUTLS_CRD_ANON' , 'cred' should be
-     'gnutls_anon_client_credentials_t' in case of a client.  In case of
-     a server it should be 'gnutls_anon_server_credentials_t' .
+     For `GNUTLS_CRD_ANON' ,  `cred' should be
+     `gnutls_anon_client_credentials_t'  in case of a client.  In case
+     of a server it should be `gnutls_anon_server_credentials_t' .
 
-     For 'GNUTLS_CRD_SRP' , 'cred' should be
-     'gnutls_srp_client_credentials_t' in case of a client, and
-     'gnutls_srp_server_credentials_t' , in case of a server.
+     For `GNUTLS_CRD_SRP' ,  `cred' should be
+     `gnutls_srp_client_credentials_t' in case of a client, and
+     `gnutls_srp_server_credentials_t' , in case of a server.
 
-     For 'GNUTLS_CRD_CERTIFICATE' , 'cred' should be
-     'gnutls_certificate_credentials_t' .
+     For `GNUTLS_CRD_CERTIFICATE' ,  `cred' should be
+     `gnutls_certificate_credentials_t' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 
@@ -6492,33 +6634,30 @@ File: gnutls.info,  Node: Associating the credentials,  Next: Setting up the tra
 * PSK credentials::
 * Anonymous credentials::
 
-Each authentication method is associated with a key exchange method, and
-a credentials type.  The contents of the credentials is
-method-dependent, e.g.  certificates for certificate authentication and
+Each authentication method is associated with a key exchange method,
+and a credentials type.  The contents of the credentials is
+method-dependent, e.g. certificates for certificate authentication and
 should be initialized and associated with a session (see *note
 gnutls_credentials_set::).  A mapping of the key exchange methods with
-the credential types is shown in *note Table 6.1: tab:key-exchange-cred.
+the credential types is shown in *note tab:key-exchange-cred::.
 
 Authentication     Key exchange       Client         Server
 method                                credentials    credentials
-                                                     
---------------------------------------------------------------------
-Certificate        'KX_RSA',          'CRD_CERTIFICATE''CRD_CERTIFICATE'
-                   'KX_DHE_RSA',                     
-                   'KX_DHE_DSS',
-                   'KX_ECDHE_RSA',
-                   'KX_ECDHE_ECDSA',
-                   'KX_RSA_EXPORT'
-Password and       'KX_SRP_RSA',      'CRD_SRP'      'CRD_CERTIFICATE',
-certificate        'KX_SRP_DSS'                      'CRD_SRP'
-                                                     
-Password           'KX_SRP'           'CRD_SRP'      'CRD_SRP'
-                                                     
-Anonymous          'KX_ANON_DH',      'CRD_ANON'     'CRD_ANON'
-                   'KX_ANON_ECDH'                    
-Pre-shared key     'KX_PSK',          'CRD_PSK'      'CRD_PSK'
-                   'KX_DHE_PSK',                     
-                   'KX_ECDHE_PSK'
+-------------------------------------------------------------------- 
+Certificate        `KX_RSA',          `CRD_CERTIFICATE'`CRD_CERTIFICATE'
+                   `KX_DHE_RSA',                     
+                   `KX_DHE_DSS',                     
+                   `KX_ECDHE_RSA',                   
+                   `KX_ECDHE_ECDSA',                 
+                   `KX_RSA_EXPORT'                   
+Password and       `KX_SRP_RSA',      `CRD_SRP'      `CRD_CERTIFICATE',
+certificate        `KX_SRP_DSS'                      `CRD_SRP'
+Password           `KX_SRP'           `CRD_SRP'      `CRD_SRP'
+Anonymous          `KX_ANON_DH',      `CRD_ANON'     `CRD_ANON'
+                   `KX_ANON_ECDH'                    
+Pre-shared key     `KX_PSK',          `CRD_PSK'      `CRD_PSK'
+                   `KX_DHE_PSK',                     
+                   `KX_ECDHE_PSK'                    
 
 Table 6.1: Key exchange algorithms and the corresponding credential
 types.
@@ -6533,68 +6672,74 @@ Server certificate authentication
 .................................
 
 When using certificates the server is required to have at least one
-certificate and private key pair.  Clients may not hold such a pair, but
-a server could require it.  In this section we discuss general issues
-applying to both client and server certificates.  The next section will
+certificate and private key pair. Clients may not hold such a pair, but
+a server could require it. In this section we discuss general issues
+applying to both client and server certificates. The next section will
 elaborate on issues arising from client authentication only.
 
-'INT *note gnutls_certificate_allocate_credentials:: (gnutls_certificate_credentials_t * RES)'
-'VOID *note gnutls_certificate_free_credentials:: (gnutls_certificate_credentials_t SC)'
+`INT *note gnutls_certificate_allocate_credentials:: (gnutls_certificate_credentials_t *                                          RES)'
+
+`VOID *note gnutls_certificate_free_credentials:: (gnutls_certificate_credentials_t SC)'
 
 After the credentials structures are initialized, the certificate and
-key pair must be loaded.  This occurs before any TLS session is
+key pair must be loaded. This occurs before any TLS session is
 initialized, and the same structures are reused for multiple sessions.
 Depending on the certificate type different loading functions are
 available, as shown below.  For X.509 certificates, the functions will
 accept and use a certificate chain that leads to a trusted authority.
-The certificate chain must be ordered in such way that every certificate
-certifies the one before it.  The trusted authority's certificate need
-not to be included since the peer should possess it already.
+The certificate chain must be ordered in such way that every
+certificate certifies the one before it. The trusted authority's
+certificate need not to be included since the peer should possess it
+already.
+
+`INT *note gnutls_certificate_set_x509_key_mem2:: (gnutls_certificate_credentials_t RES, const gnutls_datum_t * CERT, const gnutls_datum_t * KEY, gnutls_x509_crt_fmt_t TYPE, const char* PASS, unsigned int FLAGS)'
 
-'INT *note gnutls_certificate_set_x509_key_mem2:: (gnutls_certificate_credentials_t RES, const gnutls_datum_t * CERT, const gnutls_datum_t * KEY, gnutls_x509_crt_fmt_t TYPE, const char* PASS, unsigned int FLAGS)'
-'INT *note gnutls_certificate_set_x509_key:: (gnutls_certificate_credentials_t RES, gnutls_x509_crt_t * CERT_LIST, int CERT_LIST_SIZE, gnutls_x509_privkey_t KEY)'
-'INT *note gnutls_certificate_set_x509_key_file2:: (gnutls_certificate_credentials_t RES, const char * CERTFILE, const char * KEYFILE, gnutls_x509_crt_fmt_t TYPE, const char* PASS, unsigned int FLAGS)'
+`INT *note gnutls_certificate_set_x509_key:: (gnutls_certificate_credentials_t RES, gnutls_x509_crt_t * CERT_LIST, int CERT_LIST_SIZE, gnutls_x509_privkey_t KEY)'
 
-'INT *note gnutls_certificate_set_openpgp_key_mem:: (gnutls_certificate_credentials_t RES, const gnutls_datum_t * CERT, const gnutls_datum_t * KEY, gnutls_openpgp_crt_fmt_t FORMAT)'
-'INT *note gnutls_certificate_set_openpgp_key:: (gnutls_certificate_credentials_t RES, gnutls_openpgp_crt_t CRT, gnutls_openpgp_privkey_t PKEY)'
-'INT *note gnutls_certificate_set_openpgp_key_file:: (gnutls_certificate_credentials_t RES, const char * CERTFILE, const char * KEYFILE, gnutls_openpgp_crt_fmt_t FORMAT)'
+`INT *note gnutls_certificate_set_x509_key_file2:: (gnutls_certificate_credentials_t RES, const char * CERTFILE, const char * KEYFILE, gnutls_x509_crt_fmt_t TYPE, const char* PASS, unsigned int FLAGS)'
+
+`INT *note gnutls_certificate_set_openpgp_key_mem:: (gnutls_certificate_credentials_t RES, const gnutls_datum_t * CERT, const gnutls_datum_t * KEY, gnutls_openpgp_crt_fmt_t FORMAT)'
+
+`INT *note gnutls_certificate_set_openpgp_key:: (gnutls_certificate_credentials_t RES, gnutls_openpgp_crt_t CRT, gnutls_openpgp_privkey_t PKEY)'
+
+`INT *note gnutls_certificate_set_openpgp_key_file:: (gnutls_certificate_credentials_t RES, const char * CERTFILE, const char * KEYFILE, gnutls_openpgp_crt_fmt_t FORMAT)'
 
 Note however, that since functions like *note
 gnutls_certificate_set_x509_key_file2:: may accept URLs that specify
 objects stored in token, another important function is *note
-gnutls_certificate_set_pin_function::.  That allows setting a callback
-function to retrieve a PIN if the input keys are protected by PIN by the
-token.
+gnutls_certificate_set_pin_function::. That allows setting a callback
+function to retrieve a PIN if the input keys are protected by PIN by
+the token.
 
  -- Function: void gnutls_certificate_set_pin_function
           (gnutls_certificate_credentials_t CRED, gnutls_pin_callback_t
           FN, void * USERDATA)
-     CRED: is a 'gnutls_certificate_credentials_t' structure.
+     CRED: is a `gnutls_certificate_credentials_t'  structure.
 
      FN: A PIN callback
 
      USERDATA: Data to be passed in the callback
 
-     This function will set a callback function to be used when required
-     to access a protected object.  This function overrides any other
-     global PIN functions.
+     This function will set a callback function to be used when
+     required to access a protected object. This function overrides any
+     other global PIN functions.
 
      Note that this function must be called right after initialization
      to have effect.
 
      *Since:* 3.1.0
 
-If the imported keys and certificates need to be accessed before any TLS
-session is established, it is convenient to use *note
+If the imported keys and certificates need to be accessed before any
+TLS session is established, it is convenient to use *note
 gnutls_certificate_set_key:: in combination with *note
 gnutls_pcert_import_x509_raw:: and *note
 gnutls_privkey_import_x509_raw::.
 
  -- Function: int gnutls_certificate_set_key
-          (gnutls_certificate_credentials_t RES, const char** NAMES, int
-          NAMES_SIZE, gnutls_pcert_st * PCERT_LIST, int PCERT_LIST_SIZE,
-          gnutls_privkey_t KEY)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+          (gnutls_certificate_credentials_t RES, const char** NAMES,
+          int NAMES_SIZE, gnutls_pcert_st * PCERT_LIST, int
+          PCERT_LIST_SIZE, gnutls_privkey_t KEY)
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
      NAMES: is an array of DNS name of the certificate (NULL if none)
 
@@ -6605,43 +6750,45 @@ gnutls_privkey_import_x509_raw::.
 
      PCERT_LIST_SIZE: holds the size of the certificate list
 
-     KEY: is a 'gnutls_privkey_t' key
+     KEY: is a `gnutls_privkey_t'  key
 
      This function sets a certificate/private key pair in the
      gnutls_certificate_credentials_t structure.  This function may be
      called more than once, in case multiple keys/certificates exist for
      the server.  For clients that wants to send more than its own end
      entity certificate (e.g., also an intermediate CA cert) then put
-     the certificate chain in 'pcert_list' .  The 'pcert_list' and 'key'
-     will become part of the credentials structure and must not be
-     deallocated.  They will be automatically deallocated when 'res' is
-     deinitialized.
+     the certificate chain in  `pcert_list' . The  `pcert_list' and
+     `key' will become part of the credentials structure and must not
+     be deallocated. They will be automatically deallocated when  `res'
+     is deinitialized.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
      *Since:* 3.0
 
-If multiple certificates are used with the functions above each client's
-request will be served with the certificate that matches the requested
-name (see *note Server name indication::).
+If multiple certificates are used with the functions above each
+client's request will be served with the certificate that matches the
+requested name (see *note Server name indication::).
 
 As an alternative to loading from files or buffers, a callback may be
-used for the server or the client to specify the certificate and the key
-at the handshake time.  In that case a certificate should be selected
-according the peer's signature algorithm preferences.  To get those
-preferences use *note gnutls_sign_algorithm_get_requested::.  Both
+used for the server or the client to specify the certificate and the
+key at the handshake time.  In that case a certificate should be
+selected according the peer's signature algorithm preferences. To get
+those preferences use *note gnutls_sign_algorithm_get_requested::. Both
 functions are shown below.
 
-'VOID *note gnutls_certificate_set_retrieve_function:: (gnutls_certificate_credentials_t CRED, gnutls_certificate_retrieve_function * FUNC)'
-'VOID *note gnutls_certificate_set_retrieve_function2:: (gnutls_certificate_credentials_t CRED, gnutls_certificate_retrieve_function2 * FUNC)'
-'INT *note gnutls_sign_algorithm_get_requested:: (gnutls_session_t SESSION, size_t INDX, gnutls_sign_algorithm_t * ALGO)'
+`VOID *note gnutls_certificate_set_retrieve_function:: (gnutls_certificate_credentials_t CRED, gnutls_certificate_retrieve_function * FUNC)'
+
+`VOID *note gnutls_certificate_set_retrieve_function2:: (gnutls_certificate_credentials_t CRED, gnutls_certificate_retrieve_function2 * FUNC)'
+
+`INT *note gnutls_sign_algorithm_get_requested:: (gnutls_session_t SESSION, size_t INDX, gnutls_sign_algorithm_t * ALGO)'
 
 The functions above do not handle the requested server name
 automatically.  A server would need to check the name requested by the
 client using *note gnutls_server_name_get::, and serve the appropriate
-certificate.  Note that some of these functions require the
-'gnutls_pcert_st' structure to be filled in.  Helper functions to make
+certificate. Note that some of these functions require the
+`gnutls_pcert_st' structure to be filled in. Helper functions to make
 the required structures are listed below.
 
 typedef struct gnutls_pcert_st
@@ -6651,59 +6798,63 @@ typedef struct gnutls_pcert_st
   gnutls_certificate_type_t type;
 } gnutls_pcert_st;
 
-'INT *note gnutls_pcert_import_x509:: (gnutls_pcert_st* PCERT, gnutls_x509_crt_t CRT, unsigned int FLAGS)'
-'INT *note gnutls_pcert_import_openpgp:: (gnutls_pcert_st* PCERT, gnutls_openpgp_crt_t CRT, unsigned int FLAGS)'
-'INT *note gnutls_pcert_import_x509_raw:: (gnutls_pcert_st * PCERT, const gnutls_datum_t* CERT, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)'
-'INT *note gnutls_pcert_import_openpgp_raw:: (gnutls_pcert_st * PCERT, const gnutls_datum_t* CERT, gnutls_openpgp_crt_fmt_t FORMAT, gnutls_openpgp_keyid_t KEYID, unsigned int FLAGS)'
-'VOID *note gnutls_pcert_deinit:: (gnutls_pcert_st * PCERT)'
-
-In a handshake, the negotiated cipher suite depends on the certificate's
-parameters, so some key exchange methods might not be available with all
-certificates.  GnuTLS will disable ciphersuites that are not compatible
-with the key, or the enabled authentication methods.  For example keys
-marked as sign-only, will not be able to access the plain RSA
-ciphersuites, that require decryption.  It is not recommended to use RSA
-keys for both signing and encryption.  If possible use a different key
-for the 'DHE-RSA' which uses signing and 'RSA' that requires decryption.
-All the key exchange methods shown in *note Table 4.1: tab:key-exchange.
-are available in certificate authentication.
+`INT *note gnutls_pcert_import_x509:: (gnutls_pcert_st* PCERT, gnutls_x509_crt_t CRT, unsigned int FLAGS)'
+
+`INT *note gnutls_pcert_import_openpgp:: (gnutls_pcert_st* PCERT, gnutls_openpgp_crt_t CRT, unsigned int FLAGS)'
+
+`INT *note gnutls_pcert_import_x509_raw:: (gnutls_pcert_st * PCERT, const gnutls_datum_t* CERT, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)'
+
+`INT *note gnutls_pcert_import_openpgp_raw:: (gnutls_pcert_st * PCERT, const gnutls_datum_t* CERT, gnutls_openpgp_crt_fmt_t FORMAT, gnutls_openpgp_keyid_t KEYID, unsigned int FLAGS)'
+
+`VOID *note gnutls_pcert_deinit:: (gnutls_pcert_st * PCERT)'
+
+In a handshake, the negotiated cipher suite depends on the
+certificate's parameters, so some key exchange methods might not be
+available with all certificates. GnuTLS will disable ciphersuites that
+are not compatible with the key, or the enabled authentication methods.
+For example keys marked as sign-only, will not be able to access the
+plain RSA ciphersuites, that require decryption. It is not recommended
+to use RSA keys for both signing and encryption. If possible use a
+different key for the `DHE-RSA' which uses signing and `RSA' that
+requires decryption.  All the key exchange methods shown in *note Table
+4.1: tab:key-exchange. are available in certificate authentication.
 
 Client certificate authentication
 .................................
 
 If a certificate is to be requested from the client during the
-handshake, the server will send a certificate request message.  This
+handshake, the server will send a certificate request message. This
 behavior is controlled *note gnutls_certificate_server_set_request::.
 The request contains a list of the acceptable by the server certificate
-signers.  This list is constructed using the trusted certificate
+signers. This list is constructed using the trusted certificate
 authorities of the server.  In cases where the server supports a large
-number of certificate authorities it makes sense not to advertise all of
-the names to save bandwidth.  That can be controlled using the function
-*note gnutls_certificate_send_x509_rdn_sequence::.  This however will
-have the side-effect of not restricting the client to certificates
-signed by server's acceptable signers.
+number of certificate authorities it makes sense not to advertise all
+of the names to save bandwidth. That can be controlled using the
+function *note gnutls_certificate_send_x509_rdn_sequence::.  This
+however will have the side-effect of not restricting the client to
+certificates signed by server's acceptable signers.
 
  -- Function: void gnutls_certificate_server_set_request
           (gnutls_session_t SESSION, gnutls_certificate_request_t REQ)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      REQ: is one of GNUTLS_CERT_REQUEST, GNUTLS_CERT_REQUIRE
 
      This function specifies if we (in case of a server) are going to
-     send a certificate request message to the client.  If 'req' is
+     send a certificate request message to the client. If  `req' is
      GNUTLS_CERT_REQUIRE then the server will return an error if the
-     peer does not provide a certificate.  If you do not call this
+     peer does not provide a certificate. If you do not call this
      function then the client will not be asked to send a certificate.
 
  -- Function: void gnutls_certificate_send_x509_rdn_sequence
           (gnutls_session_t SESSION, int STATUS)
-     SESSION: is a pointer to a 'gnutls_session_t' structure.
+     SESSION: is a pointer to a `gnutls_session_t'  structure.
 
      STATUS: is 0 or 1
 
      If status is non zero, this function will order gnutls not to send
-     the rdnSequence in the certificate request message.  That is the
-     server will not advertise its trusted CAs to the peer.  If status
+     the rdnSequence in the certificate request message. That is the
+     server will not advertise its trusted CAs to the peer. If status
      is zero then the default behaviour will take effect, which is to
      advertise the server's trusted CAs.
 
@@ -6717,20 +6868,22 @@ Certificate verification is possible by loading the trusted authorities
 into the credentials structure by using the following functions,
 applicable to X.509 and OpenPGP certificates.
 
-'INT *note gnutls_certificate_set_x509_system_trust:: (gnutls_certificate_credentials_t CRED)'
-'INT *note gnutls_certificate_set_x509_trust_file:: (gnutls_certificate_credentials_t CRED, const char * CAFILE, gnutls_x509_crt_fmt_t TYPE)'
-'INT *note gnutls_certificate_set_openpgp_keyring_file:: (gnutls_certificate_credentials_t C, const char * FILE, gnutls_openpgp_crt_fmt_t FORMAT)'
+`INT *note gnutls_certificate_set_x509_system_trust:: (gnutls_certificate_credentials_t CRED)'
+
+`INT *note gnutls_certificate_set_x509_trust_file:: (gnutls_certificate_credentials_t CRED, const char * CAFILE, gnutls_x509_crt_fmt_t TYPE)'
+
+`INT *note gnutls_certificate_set_openpgp_keyring_file:: (gnutls_certificate_credentials_t C, const char * FILE, gnutls_openpgp_crt_fmt_t FORMAT)'
 
 The peer's certificate is not automatically verified and one must call
-*note gnutls_certificate_verify_peers3:: after a successful handshake to
-verify the certificate's signature and the owner of the certificate.
+*note gnutls_certificate_verify_peers3:: after a successful handshake
+to verify the certificate's signature and the owner of the certificate.
 The verification status returned can be printed using *note
 gnutls_certificate_verification_status_print::.
 
 Alternatively the verification can occur during the handshake by using
 *note gnutls_certificate_set_verify_function::.
 
-The functions above provide a brief verification output.  If a detailed
+The functions above provide a brief verification output. If a detailed
 output is required one should call *note gnutls_certificate_get_peers::
 to obtain the raw certificate of the peer and verify it using the
 functions discussed in *note X.509 certificates::.
@@ -6739,30 +6892,30 @@ functions discussed in *note X.509 certificates::.
           SESSION, const char* HOSTNAME, unsigned int * STATUS)
      SESSION: is a gnutls session
 
-     HOSTNAME: is the expected name of the peer; may be 'NULL'
+     HOSTNAME: is the expected name of the peer; may be `NULL'
 
      STATUS: is the output of the verification
 
      This function will verify the peer's certificate and store the
-     status in the 'status' variable as a bitwise or'd
+     status in the  `status' variable as a bitwise or'd
      gnutls_certificate_status_t values or zero if the certificate is
-     trusted.  Note that value in 'status' is set only when the return
+     trusted. Note that value in  `status' is set only when the return
      value of this function is success (i.e, failure to trust a
      certificate does not imply a negative return value).
 
-     If the 'hostname' provided is non-NULL then this function will
-     compare the hostname in the certificate against the given.  If they
-     do not match the 'GNUTLS_CERT_UNEXPECTED_OWNER' status flag will be
-     set.
+     If the  `hostname' provided is non-NULL then this function will
+     compare the hostname in the certificate against the given. If they
+     do not match the `GNUTLS_CERT_UNEXPECTED_OWNER'  status flag will
+     be set.
 
-     If available the OCSP Certificate Status extension will be utilized
-     by this function.
+     If available the OCSP Certificate Status extension will be
+     utilized by this function.
 
      To avoid denial of service attacks some default upper limits
-     regarding the certificate key size and chain size are set.  To
-     override them use 'gnutls_certificate_set_verify_limits()' .
+     regarding the certificate key size and chain size are set. To
+     override them use `gnutls_certificate_set_verify_limits()' .
 
-     *Returns:* a negative error code on error and 'GNUTLS_E_SUCCESS'
+     *Returns:* a negative error code on error and `GNUTLS_E_SUCCESS'
      (0) on success.
 
      *Since:* 3.1.4
@@ -6770,7 +6923,7 @@ functions discussed in *note X.509 certificates::.
  -- Function: void gnutls_certificate_set_verify_function
           (gnutls_certificate_credentials_t CRED,
           gnutls_certificate_verify_function * FUNC)
-     CRED: is a 'gnutls_certificate_credentials_t' structure.
+     CRED: is a `gnutls_certificate_credentials_t'  structure.
 
      FUNC: is the callback function
 
@@ -6784,8 +6937,8 @@ functions discussed in *note X.509 certificates::.
      If the callback function is provided then gnutls will call it, in
      the handshake, just after the certificate message has been
      received.  To verify or obtain the certificate the
-     'gnutls_certificate_verify_peers2()' ,
-     'gnutls_certificate_type_get()' , 'gnutls_certificate_get_peers()'
+     `gnutls_certificate_verify_peers2()' ,
+     `gnutls_certificate_type_get()' , `gnutls_certificate_get_peers()'
      functions can be used.
 
      The callback function should return 0 for the handshake to continue
@@ -6806,16 +6959,20 @@ gnutls_srp_set_client_credentials_function:: may be used instead, to
 specify a callback function that should return the SRP username and
 password.  The callback is called once during the TLS handshake.
 
-'INT *note gnutls_srp_allocate_server_credentials:: (gnutls_srp_server_credentials_t * SC)'
-'INT *note gnutls_srp_allocate_client_credentials:: (gnutls_srp_client_credentials_t * SC)'
-'VOID *note gnutls_srp_free_server_credentials:: (gnutls_srp_server_credentials_t SC)'
-'VOID *note gnutls_srp_free_client_credentials:: (gnutls_srp_client_credentials_t SC)'
-'INT *note gnutls_srp_set_client_credentials:: (gnutls_srp_client_credentials_t RES, const char * USERNAME, const char * PASSWORD)'
+`INT *note gnutls_srp_allocate_server_credentials:: (gnutls_srp_server_credentials_t * SC)'
+
+`INT *note gnutls_srp_allocate_client_credentials:: (gnutls_srp_client_credentials_t * SC)'
+
+`VOID *note gnutls_srp_free_server_credentials:: (gnutls_srp_server_credentials_t SC)'
+
+`VOID *note gnutls_srp_free_client_credentials:: (gnutls_srp_client_credentials_t SC)'
+
+`INT *note gnutls_srp_set_client_credentials:: (gnutls_srp_client_credentials_t RES, const char * USERNAME, const char * PASSWORD)'
 
  -- Function: void gnutls_srp_set_client_credentials_function
           (gnutls_srp_client_credentials_t CRED,
           gnutls_srp_client_credentials_function * FUNC)
-     CRED: is a 'gnutls_srp_server_credentials_t' structure.
+     CRED: is a `gnutls_srp_server_credentials_t'  structure.
 
      FUNC: is the callback function
 
@@ -6825,8 +6982,8 @@ password.  The callback is called once during the TLS handshake.
 
      int (*callback)(gnutls_session_t, char** username, char**password);
 
-     The 'username' and 'password' must be allocated using
-     'gnutls_malloc()' .  'username' and 'password' should be ASCII
+     The  `username' and  `password' must be allocated using
+     `gnutls_malloc()' .   `username' and  `password' should be ASCII
      strings or UTF-8 strings prepared using the "SASLprep" profile of
      "stringprep".
 
@@ -6840,33 +6997,33 @@ password.  The callback is called once during the TLS handshake.
      error.
 
 In server side the default behavior of GnuTLS is to read the usernames
-and SRP verifiers from password files.  These password file format is
-compatible the with the _Stanford srp libraries_ format.  If a different
-password file format is to be used, then *note
-gnutls_srp_set_server_credentials_function:: should be called, to set an
-appropriate callback.
+and SRP verifiers from password files. These password file format is
+compatible the with the _Stanford srp libraries_ format.  If a
+different password file format is to be used, then *note
+gnutls_srp_set_server_credentials_function:: should be called, to set
+an appropriate callback.
 
  -- Function: int gnutls_srp_set_server_credentials_file
           (gnutls_srp_server_credentials_t RES, const char *
           PASSWORD_FILE, const char * PASSWORD_CONF_FILE)
-     RES: is a 'gnutls_srp_server_credentials_t' structure.
+     RES: is a `gnutls_srp_server_credentials_t'  structure.
 
      PASSWORD_FILE: is the SRP password file (tpasswd)
 
      PASSWORD_CONF_FILE: is the SRP password conf file (tpasswd.conf)
 
      This function sets the password files, in a
-     'gnutls_srp_server_credentials_t' structure.  Those password files
+     `gnutls_srp_server_credentials_t'  structure.  Those password files
      hold usernames and verifiers and will be used for SRP
      authentication.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
  -- Function: void gnutls_srp_set_server_credentials_function
           (gnutls_srp_server_credentials_t CRED,
           gnutls_srp_server_credentials_function * FUNC)
-     CRED: is a 'gnutls_srp_server_credentials_t' structure.
+     CRED: is a `gnutls_srp_server_credentials_t'  structure.
 
      FUNC: is the callback function
 
@@ -6877,9 +7034,9 @@ appropriate callback.
      gnutls_datum_t* salt, gnutls_datum_t *verifier, gnutls_datum_t* g,
      gnutls_datum_t* n);
 
-     'username' contains the actual username.  The 'salt' , 'verifier' ,
-     'generator' and 'prime' must be filled in using the
-     'gnutls_malloc()' .  For convenience 'prime' and 'generator' may
+     `username' contains the actual username.  The  `salt' ,
+     `verifier' ,  `generator' and  `prime' must be filled in using the
+     `gnutls_malloc()' . For convenience  `prime' and  `generator' may
      also be one of the static parameters defined in gnutls.h.
 
      In case the callback returned a negative number then gnutls will
@@ -6887,12 +7044,12 @@ appropriate callback.
 
      In order to prevent attackers from guessing valid usernames, if a
      user does not exist, g and n values should be filled in using a
-     random user's parameters.  In that case the callback must return
+     random user's parameters. In that case the callback must return
      the special value (1).
 
      The callback function will only be called once per handshake.  The
-     callback function should return 0 on success, while -1 indicates an
-     error.
+     callback function should return 0 on success, while -1 indicates
+     an error.
 
 
 File: gnutls.info,  Node: PSK credentials,  Next: Anonymous credentials,  Prev: SRP credentials,  Up: Associating the credentials
@@ -6903,23 +7060,26 @@ File: gnutls.info,  Node: PSK credentials,  Next: Anonymous credentials,  Prev:
 The initialization functions in PSK credentials differ between client
 and server.
 
-'INT *note gnutls_psk_allocate_server_credentials:: (gnutls_psk_server_credentials_t * SC)'
-'INT *note gnutls_psk_allocate_client_credentials:: (gnutls_psk_client_credentials_t * SC)'
-'VOID *note gnutls_psk_free_server_credentials:: (gnutls_psk_server_credentials_t SC)'
-'VOID *note gnutls_psk_free_client_credentials:: (gnutls_psk_client_credentials_t SC)'
+`INT *note gnutls_psk_allocate_server_credentials:: (gnutls_psk_server_credentials_t * SC)'
+
+`INT *note gnutls_psk_allocate_client_credentials:: (gnutls_psk_client_credentials_t * SC)'
+
+`VOID *note gnutls_psk_free_server_credentials:: (gnutls_psk_server_credentials_t SC)'
+
+`VOID *note gnutls_psk_free_client_credentials:: (gnutls_psk_client_credentials_t SC)'
 
 Clients supporting PSK should supply the username and key before a TLS
 session is established.  Alternatively *note
 gnutls_psk_set_client_credentials_function:: can be used to specify a
-callback function.  This has the advantage that the callback will be
+callback function. This has the advantage that the callback will be
 called only if PSK has been negotiated.
 
-'INT *note gnutls_psk_set_client_credentials:: (gnutls_psk_client_credentials_t RES, const char * USERNAME, const gnutls_datum_t * KEY, gnutls_psk_key_flags FLAGS)'
+`INT *note gnutls_psk_set_client_credentials:: (gnutls_psk_client_credentials_t RES, const char * USERNAME, const gnutls_datum_t * KEY, gnutls_psk_key_flags FLAGS)'
 
  -- Function: void gnutls_psk_set_client_credentials_function
           (gnutls_psk_client_credentials_t CRED,
           gnutls_psk_client_credentials_function * FUNC)
-     CRED: is a 'gnutls_psk_server_credentials_t' structure.
+     CRED: is a `gnutls_psk_server_credentials_t'  structure.
 
      FUNC: is the callback function
 
@@ -6928,8 +7088,8 @@ called only if PSK has been negotiated.
      callback's function form is: int (*callback)(gnutls_session_t,
      char** username, gnutls_datum_t* key);
 
-     The 'username' and 'key' ->data must be allocated using
-     'gnutls_malloc()' .  'username' should be ASCII strings or UTF-8
+     The  `username' and  `key' ->data must be allocated using
+     `gnutls_malloc()' .   `username' should be ASCII strings or UTF-8
      strings prepared using the "SASLprep" profile of "stringprep".
 
      The callback function will be called once per handshake.
@@ -6938,37 +7098,39 @@ called only if PSK has been negotiated.
      error.
 
 In server side the default behavior of GnuTLS is to read the usernames
-and PSK keys from a password file.  The password file should contain
-usernames and keys in hexadecimal format.  The name of the password file
+and PSK keys from a password file. The password file should contain
+usernames and keys in hexadecimal format. The name of the password file
 can be stored to the credentials structure by calling *note
 gnutls_psk_set_server_credentials_file::.  If a different password file
 format is to be used, then a callback should be set instead by *note
 gnutls_psk_set_server_credentials_function::.
 
 The server can help the client chose a suitable username and password,
-by sending a hint.  Note that there is no common profile for the PSK
+by sending a hint. Note that there is no common profile for the PSK
 hint and applications are discouraged to use it.  A server, may specify
-the hint by calling *note gnutls_psk_set_server_credentials_hint::.  The
-client can retrieve the hint, for example in the callback function,
+the hint by calling *note gnutls_psk_set_server_credentials_hint::.
+The client can retrieve the hint, for example in the callback function,
 using *note gnutls_psk_client_get_hint::.
 
  -- Function: int gnutls_psk_set_server_credentials_file
           (gnutls_psk_server_credentials_t RES, const char *
           PASSWORD_FILE)
-     RES: is a 'gnutls_psk_server_credentials_t' structure.
+     RES: is a `gnutls_psk_server_credentials_t'  structure.
 
      PASSWORD_FILE: is the PSK password file (passwd.psk)
 
      This function sets the password file, in a
-     'gnutls_psk_server_credentials_t' structure.  This password file
+     `gnutls_psk_server_credentials_t'  structure.  This password file
      holds usernames and keys and will be used for PSK authentication.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
-'VOID *note gnutls_psk_set_server_credentials_function:: (gnutls_psk_server_credentials_t CRED, gnutls_psk_server_credentials_function * FUNC)'
-'INT *note gnutls_psk_set_server_credentials_hint:: (gnutls_psk_server_credentials_t RES, const char * HINT)'
-'CONST CHAR * *note gnutls_psk_client_get_hint:: (gnutls_session_t SESSION)'
+`VOID *note gnutls_psk_set_server_credentials_function:: (gnutls_psk_server_credentials_t                                             CRED, gnutls_psk_server_credentials_function                                             * FUNC)'
+
+`INT *note gnutls_psk_set_server_credentials_hint:: (gnutls_psk_server_credentials_t RES, const char * HINT)'
+
+`CONST CHAR * *note gnutls_psk_client_get_hint:: (gnutls_session_t SESSION)'
 
 
 File: gnutls.info,  Node: Anonymous credentials,  Prev: PSK credentials,  Up: Associating the credentials
@@ -6978,14 +7140,17 @@ File: gnutls.info,  Node: Anonymous credentials,  Prev: PSK credentials,  Up: As
 
 The key exchange methods for anonymous authentication might require
 Diffie-Hellman parameters to be generated by the server and associated
-with an anonymous credentials structure.  Check *note Parameter
-generation:: for more information.  The initialization functions for the
-credentials are shown below.
+with an anonymous credentials structure. Check *note Parameter
+generation:: for more information.  The initialization functions for
+the credentials are shown below.
+
+`INT *note gnutls_anon_allocate_server_credentials:: (gnutls_anon_server_credentials_t *                                          SC)'
 
-'INT *note gnutls_anon_allocate_server_credentials:: (gnutls_anon_server_credentials_t * SC)'
-'INT *note gnutls_anon_allocate_client_credentials:: (gnutls_anon_client_credentials_t * SC)'
-'VOID *note gnutls_anon_free_server_credentials:: (gnutls_anon_server_credentials_t SC)'
-'VOID *note gnutls_anon_free_client_credentials:: (gnutls_anon_client_credentials_t SC)'
+`INT *note gnutls_anon_allocate_client_credentials:: (gnutls_anon_client_credentials_t *                                          SC)'
+
+`VOID *note gnutls_anon_free_server_credentials:: (gnutls_anon_server_credentials_t SC)'
+
+`VOID *note gnutls_anon_free_client_credentials:: (gnutls_anon_client_credentials_t SC)'
 
 
 File: gnutls.info,  Node: Setting up the transport layer,  Next: TLS handshake,  Prev: Associating the credentials,  Up: How to use GnuTLS in applications
@@ -6993,28 +7158,30 @@ File: gnutls.info,  Node: Setting up the transport layer,  Next: TLS handshake,
 6.5 Setting up the transport layer
 ==================================
 
-The next step is to setup the underlying transport layer details.  The
+The next step is to setup the underlying transport layer details. The
 Berkeley sockets are implicitly used by GnuTLS, thus a call to *note
 gnutls_transport_set_int:: would be sufficient to specify the socket
 descriptor.
 
-'VOID *note gnutls_transport_set_int:: (gnutls_session_t SESSION, int I)'
-'VOID *note gnutls_transport_set_int2:: (gnutls_session_t SESSION, int RECV_INT, int SEND_INT)'
+`VOID *note gnutls_transport_set_int:: (gnutls_session_t SESSION, int I)'
+
+`VOID *note gnutls_transport_set_int2:: (gnutls_session_t SESSION, int RECV_INT, int SEND_INT)'
 
 If however another transport layer than TCP is selected, then a pointer
 should be used instead to express the parameter to be passed to custom
-functions.  In that case the following functions should be used instead.
+functions. In that case the following functions should be used instead.
+
+`VOID *note gnutls_transport_set_ptr:: (gnutls_session_t SESSION, gnutls_transport_ptr_t PTR)'
 
-'VOID *note gnutls_transport_set_ptr:: (gnutls_session_t SESSION, gnutls_transport_ptr_t PTR)'
-'VOID *note gnutls_transport_set_ptr2:: (gnutls_session_t SESSION, gnutls_transport_ptr_t RECV_PTR, gnutls_transport_ptr_t SEND_PTR)'
+`VOID *note gnutls_transport_set_ptr2:: (gnutls_session_t SESSION, gnutls_transport_ptr_t RECV_PTR, gnutls_transport_ptr_t SEND_PTR)'
 
 Moreover all of the following push and pull callbacks should be set.
 
  -- Function: void gnutls_transport_set_push_function (gnutls_session_t
           SESSION, gnutls_push_func PUSH_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     PUSH_FUNC: a callback function similar to 'write()'
+     PUSH_FUNC: a callback function similar to `write()'
 
      This is the function where you set a push function for gnutls to
      use in order to send data.  If you are going to use berkeley style
@@ -7024,30 +7191,30 @@ Moreover all of the following push and pull callbacks should be set.
      return a positive number indicating the bytes sent, and -1 on
      error.
 
-     'push_func' is of the form, ssize_t
+     `push_func' is of the form, ssize_t
      (*gnutls_push_func)(gnutls_transport_ptr_t, const void*, size_t);
 
  -- Function: void gnutls_transport_set_vec_push_function
           (gnutls_session_t SESSION, gnutls_vec_push_func VEC_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     VEC_FUNC: a callback function similar to 'writev()'
+     VEC_FUNC: a callback function similar to `writev()'
 
-     Using this function you can override the default writev(2) function
-     for gnutls to send data.  Setting this callback instead of
-     'gnutls_transport_set_push_function()' is recommended since it
+     Using this function you can override the default writev(2)
+     function for gnutls to send data. Setting this callback instead of
+     `gnutls_transport_set_push_function()'  is recommended since it
      introduces less overhead in the TLS handshake process.
 
-     'vec_func' is of the form, ssize_t (*gnutls_vec_push_func)
+     `vec_func' is of the form, ssize_t (*gnutls_vec_push_func)
      (gnutls_transport_ptr_t, const giovec_t * iov, int iovcnt);
 
      *Since:* 2.12.0
 
  -- Function: void gnutls_transport_set_pull_function (gnutls_session_t
           SESSION, gnutls_pull_func PULL_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     PULL_FUNC: a callback function similar to 'read()'
+     PULL_FUNC: a callback function similar to `read()'
 
      This is the function where you set a function for gnutls to receive
      data.  Normally, if you use berkeley style sockets, do not need to
@@ -7055,93 +7222,95 @@ Moreover all of the following push and pull callbacks should be set.
      The callback should return 0 on connection termination, a positive
      number indicating the number of bytes received, and -1 on error.
 
-     'gnutls_pull_func' is of the form, ssize_t
+     `gnutls_pull_func' is of the form, ssize_t
      (*gnutls_pull_func)(gnutls_transport_ptr_t, void*, size_t);
 
  -- Function: void gnutls_transport_set_pull_timeout_function
           (gnutls_session_t SESSION, gnutls_pull_timeout_func FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      FUNC: a callback function
 
      This is the function where you set a function for gnutls to know
-     whether data are ready to be received.  It should wait for data a
-     given time frame in milliseconds.  The callback should return 0 on
+     whether data are ready to be received. It should wait for data a
+     given time frame in milliseconds. The callback should return 0 on
      timeout, a positive number if data can be received, and -1 on
-     error.  You'll need to override this function if 'select()' is not
-     suitable for the provided transport calls.
+     error.  You'll need to override this function if `select()'  is
+     not suitable for the provided transport calls.
 
-     As with 'select()' , if the timeout value is zero the callback
+     As with `select()' , if the timeout value is zero the callback
      should return zero if no data are immediately available.
 
-     'gnutls_pull_timeout_func' is of the form, int
+     `gnutls_pull_timeout_func' is of the form, int
      (*gnutls_pull_timeout_func)(gnutls_transport_ptr_t, unsigned int
      ms);
 
      *Since:* 3.0
 
 The functions above accept a callback function which should return the
-number of bytes written, or -1 on error and should set 'errno'
-appropriately.  In some environments, setting 'errno' is unreliable.
+number of bytes written, or -1 on error and should set `errno'
+appropriately.  In some environments, setting `errno' is unreliable.
 For example Windows have several errno variables in different CRTs, or
 in other systems it may be a non thread-local variable.  If this is a
 concern to you, call *note gnutls_transport_set_errno:: with the
-intended errno value instead of setting 'errno' directly.
+intended errno value instead of setting `errno' directly.
 
- -- Function: void gnutls_transport_set_errno (gnutls_session_t SESSION,
-          int ERR)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: void gnutls_transport_set_errno (gnutls_session_t
+          SESSION, int ERR)
+     SESSION: is a `gnutls_session_t'  structure.
 
      ERR: error value to store in session-specific errno variable.
 
-     Store 'err' in the session-specific errno variable.  Useful values
-     for 'err' is EAGAIN and EINTR, other values are treated will be
+     Store  `err' in the session-specific errno variable.  Useful values
+     for  `err' is EAGAIN and EINTR, other values are treated will be
      treated as real errors in the push/pull function.
 
      This function is useful in replacement push and pull functions set
-     by 'gnutls_transport_set_push_function()' and
-     'gnutls_transport_set_pull_function()' under Windows, where the
-     replacements may not have access to the same 'errno' variable that
-     is used by GnuTLS (e.g., the application is linked to msvcr71.dll
-     and gnutls is linked to msvcrt.dll).
+     by `gnutls_transport_set_push_function()'  and
+     `gnutls_transport_set_pull_function()'  under Windows, where the
+     replacements may not have access to the same  `errno' variable
+     that is used by GnuTLS (e.g., the application is linked to
+     msvcr71.dll and gnutls is linked to msvcrt.dll).
 
 GnuTLS currently only interprets the EINTR, EAGAIN and EMSGSIZE errno
 values and returns the corresponding GnuTLS error codes:
-   * 'GNUTLS_E_INTERRUPTED'
-   * 'GNUTLS_E_AGAIN'
-   * 'GNUTLS_E_LARGE_PACKET'
-The EINTR and EAGAIN values are returned by interrupted system calls, or
-when non blocking IO is used.  All GnuTLS functions can be resumed
-(called again), if any of the above error codes is returned.  The
+   * `GNUTLS_E_INTERRUPTED'
+
+   * `GNUTLS_E_AGAIN'
+
+   * `GNUTLS_E_LARGE_PACKET'
+The EINTR and EAGAIN values are returned by interrupted system calls,
+or when non blocking IO is used.  All GnuTLS functions can be resumed
+(called again), if any of the above error codes is returned. The
 EMSGSIZE value is returned when attempting to send a large datagram.
 
 In the case of DTLS it is also desirable to override the generic
 transport functions with functions that emulate the operation of
-'recvfrom' and 'sendto'.  In addition DTLS requires timers during the
+`recvfrom' and `sendto'. In addition DTLS requires timers during the
 receive of a handshake message, set using the *note
-gnutls_transport_set_pull_timeout_function:: function.  To check the
+gnutls_transport_set_pull_timeout_function:: function. To check the
 retransmission timers the function *note gnutls_dtls_get_timeout:: is
 provided, which returns the time remaining until the next
-retransmission, or better the time until *note gnutls_handshake:: should
-be called again.
+retransmission, or better the time until *note gnutls_handshake::
+should be called again.
 
  -- Function: void gnutls_transport_set_pull_timeout_function
           (gnutls_session_t SESSION, gnutls_pull_timeout_func FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      FUNC: a callback function
 
      This is the function where you set a function for gnutls to know
-     whether data are ready to be received.  It should wait for data a
-     given time frame in milliseconds.  The callback should return 0 on
+     whether data are ready to be received. It should wait for data a
+     given time frame in milliseconds. The callback should return 0 on
      timeout, a positive number if data can be received, and -1 on
-     error.  You'll need to override this function if 'select()' is not
-     suitable for the provided transport calls.
+     error.  You'll need to override this function if `select()'  is
+     not suitable for the provided transport calls.
 
-     As with 'select()' , if the timeout value is zero the callback
+     As with `select()' , if the timeout value is zero the callback
      should return zero if no data are immediately available.
 
-     'gnutls_pull_timeout_func' is of the form, int
+     `gnutls_pull_timeout_func' is of the form, int
      (*gnutls_pull_timeout_func)(gnutls_transport_ptr_t, unsigned int
      ms);
 
@@ -7149,12 +7318,12 @@ be called again.
 
  -- Function: unsigned int gnutls_dtls_get_timeout (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function will return the milliseconds remaining for a
-     retransmission of the previously sent handshake message.  This
+     retransmission of the previously sent handshake message. This
      function is useful when DTLS is used in non-blocking mode, to
-     estimate when to call 'gnutls_handshake()' if no packets have been
+     estimate when to call `gnutls_handshake()' if no packets have been
      received.
 
      *Returns:* the remaining time in milliseconds.
@@ -7178,26 +7347,26 @@ environment.  The blocking, due to network interaction, calls such as
 *note gnutls_handshake::, *note gnutls_record_recv::, can be set to
 non-blocking by setting the underlying sockets to non-blocking.  If
 other push and pull functions are setup, then they should behave the
-same way as 'recv' and 'send' when used in a non-blocking way, i.e., set
-errno to 'EAGAIN'.  Since, during a TLS protocol session GnuTLS does not
-block except for network interaction, the non blocking 'EAGAIN' errno
-will be propagated and GnuTLS functions will return the 'GNUTLS_E_AGAIN'
-error code.  Such calls can be resumed the same way as a system call
-would.  The only exception is *note gnutls_record_send::, which if
-interrupted subsequent calls need not to include the data to be sent
-(can be called with NULL argument).
-
-The 'select' system call can also be used in combination with the GnuTLS
-functions.  'select' allows monitoring of sockets and notifies on them
-being ready for reading or writing data.  Note however that this system
-call cannot notify on data present in GnuTLS read buffers, it is only
-applicable to the kernel sockets API. Thus if you are using it for
+same way as `recv' and `send' when used in a non-blocking way, i.e.,
+set errno to `EAGAIN'. Since, during a TLS protocol session GnuTLS does
+not block except for network interaction, the non blocking `EAGAIN'
+errno will be propagated and GnuTLS functions will return the
+`GNUTLS_E_AGAIN' error code. Such calls can be resumed the same way as
+a system call would.  The only exception is *note gnutls_record_send::,
+which if interrupted subsequent calls need not to include the data to be
+sent (can be called with NULL argument).
+
+The `select' system call can also be used in combination with the
+GnuTLS functions. `select' allows monitoring of sockets and notifies on
+them being ready for reading or writing data. Note however that this
+system call cannot notify on data present in GnuTLS read buffers, it is
+only applicable to the kernel sockets API. Thus if you are using it for
 reading from a GnuTLS session, make sure that any cached data are read
-completely.  That can be achieved by checking there are no data waiting
+completely. That can be achieved by checking there are no data waiting
 to be read (using *note gnutls_record_check_pending::), either before
-the 'select' system call, or after a call to *note gnutls_record_recv::.
-GnuTLS does not keep a write buffer, thus when writing no additional
-actions are required.
+the `select' system call, or after a call to *note
+gnutls_record_recv::. GnuTLS does not keep a write buffer, thus when
+writing no additional actions are required.
 
 Although in the TLS protocol implementation each call to receive or send
 function implies to restoring the same function that was interrupted, in
@@ -7207,17 +7376,17 @@ and thus *note gnutls_record_get_direction:: must be called to decide
 which direction to check prior to restoring a function call.
 
  -- Function: int gnutls_record_get_direction (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function provides information about the internals of the
      record protocol and is only useful if a prior gnutls function call
-     (e.g.  'gnutls_handshake()' ) was interrupted for some reason, that
-     is, if a function returned 'GNUTLS_E_INTERRUPTED' or
-     'GNUTLS_E_AGAIN' .  In such a case, you might want to call
-     'select()' or 'poll()' before calling the interrupted gnutls
+     (e.g.  `gnutls_handshake()' ) was interrupted for some reason, that
+     is, if a function returned `GNUTLS_E_INTERRUPTED'  or
+     `GNUTLS_E_AGAIN' .  In such a case, you might want to call
+     `select()' or `poll()'  before calling the interrupted gnutls
      function again.  To tell you whether a file descriptor should be
      selected for either reading or writing,
-     'gnutls_record_get_direction()' returns 0 if the interrupted
+     `gnutls_record_get_direction()'  returns 0 if the interrupted
      function was trying to read data, and 1 if it was trying to write
      data.
 
@@ -7225,5 +7394,52 @@ which direction to check prior to restoring a function call.
 
 Moreover, to prevent blocking from DTLS' retransmission timers to block
 a handshake, the *note gnutls_init:: function should be called with the
-'GNUTLS_NONBLOCK' flag set (see *note Session initialization::).
+`GNUTLS_NONBLOCK' flag set (see *note Session initialization::).
+
+
+File: gnutls.info,  Node: DTLS sessions,  Prev: Asynchronous operation,  Up: Setting up the transport layer
+
+6.5.2 DTLS sessions
+-------------------
+
+Because datagram TLS can operate over connections where the peer of a
+server cannot be reliably verified, functionality is available to
+prevent denial of service attacks. GnuTLS requires a server to generate
+a secret key that is used to sign a cookie(1).  That cookie is sent to
+the client using *note gnutls_dtls_cookie_send::, and the client must
+reply using the correct cookie. The server side should verify the
+initial message sent by client using *note gnutls_dtls_cookie_verify::.
+If successful the session should be initialized and associated with the
+cookie using *note gnutls_dtls_prestate_set::, before proceeding to the
+handshake.
+
+`INT *note gnutls_key_generate:: (gnutls_datum_t * KEY, unsigned int KEY_SIZE)'
+
+`INT *note gnutls_dtls_cookie_send:: (gnutls_datum_t* KEY, void* CLIENT_DATA, size_t CLIENT_DATA_SIZE, gnutls_dtls_prestate_st* PRESTATE, gnutls_transport_ptr_t PTR, gnutls_push_func PUSH_FUNC)'
+
+`INT *note gnutls_dtls_cookie_verify:: (gnutls_datum_t* KEY, void* CLIENT_DATA, size_t CLIENT_DATA_SIZE, void* _MSG, size_t MSG_SIZE, gnutls_dtls_prestate_st* PRESTATE)'
+
+`VOID *note gnutls_dtls_prestate_set:: (gnutls_session_t SESSION, gnutls_dtls_prestate_st* PRESTATE)'
+
+Note that the above apply to server side only and they are not
+mandatory to be used. Not using them, however, allows denial of service
+attacks.  The client side cookie handling is part of *note
+gnutls_handshake::.
+
+Datagrams are typically restricted by a maximum transfer unit (MTU).
+For that both client and server side should set the correct maximum
+transfer unit for the layer underneath GnuTLS. This will allow proper
+fragmentation of DTLS messages and prevent messages from being silently
+discarded by the transport layer. The "correct" maximum transfer unit
+can be obtained through a path MTU discovery mechanism [_RFC4821_].
+
+`VOID *note gnutls_dtls_set_mtu:: (gnutls_session_t SESSION, unsigned int MTU)'
+
+`UNSIGNED INT *note gnutls_dtls_get_mtu:: (gnutls_session_t SESSION)'
+
+`UNSIGNED INT *note gnutls_dtls_get_data_mtu:: (gnutls_session_t SESSION)'
+
+---------- Footnotes ----------
+
+(1) A key of 128 bits or 16 bytes should be sufficient for this purpose.
 
diff --git a/doc/gnutls.info-2 b/doc/gnutls.info-2
index fb62d63..963d747 100644
--- a/doc/gnutls.info-2
+++ b/doc/gnutls.info-2
@@ -1,4 +1,4 @@
-This is gnutls.info, produced by makeinfo version 5.1 from gnutls.texi.
+This is gnutls.info, produced by makeinfo version 4.13 from gnutls.texi.
 
 This manual is last updated 2 April 2013 for version 3.1.13 of GnuTLS.
 
@@ -11,6 +11,7 @@ Copyright (C) 2001-2013 Free Software Foundation, Inc.\\ Copyright (C)
      Foundation; with no Invariant Sections, no Front-Cover Texts, and
      no Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
+
 INFO-DIR-SECTION Software libraries
 START-INFO-DIR-ENTRY
 * GnuTLS: (gnutls).		GNU Transport Layer Security Library.
@@ -27,107 +28,66 @@ START-INFO-DIR-ENTRY
 END-INFO-DIR-ENTRY
 
 
-File: gnutls.info,  Node: DTLS sessions,  Prev: Asynchronous operation,  Up: Setting up the transport layer
-
-6.5.2 DTLS sessions
--------------------
-
-Because datagram TLS can operate over connections where the peer of a
-server cannot be reliably verified, functionality is available to
-prevent denial of service attacks.  GnuTLS requires a server to generate
-a secret key that is used to sign a cookie(1).  That cookie is sent to
-the client using *note gnutls_dtls_cookie_send::, and the client must
-reply using the correct cookie.  The server side should verify the
-initial message sent by client using *note gnutls_dtls_cookie_verify::.
-If successful the session should be initialized and associated with the
-cookie using *note gnutls_dtls_prestate_set::, before proceeding to the
-handshake.
-
-'INT *note gnutls_key_generate:: (gnutls_datum_t * KEY, unsigned int KEY_SIZE)'
-'INT *note gnutls_dtls_cookie_send:: (gnutls_datum_t* KEY, void* CLIENT_DATA, size_t CLIENT_DATA_SIZE, gnutls_dtls_prestate_st* PRESTATE, gnutls_transport_ptr_t PTR, gnutls_push_func PUSH_FUNC)'
-'INT *note gnutls_dtls_cookie_verify:: (gnutls_datum_t* KEY, void* CLIENT_DATA, size_t CLIENT_DATA_SIZE, void* _MSG, size_t MSG_SIZE, gnutls_dtls_prestate_st* PRESTATE)'
-'VOID *note gnutls_dtls_prestate_set:: (gnutls_session_t SESSION, gnutls_dtls_prestate_st* PRESTATE)'
-
-Note that the above apply to server side only and they are not mandatory
-to be used.  Not using them, however, allows denial of service attacks.
-The client side cookie handling is part of *note gnutls_handshake::.
-
-Datagrams are typically restricted by a maximum transfer unit (MTU). For
-that both client and server side should set the correct maximum transfer
-unit for the layer underneath GnuTLS.  This will allow proper
-fragmentation of DTLS messages and prevent messages from being silently
-discarded by the transport layer.  The "correct" maximum transfer unit
-can be obtained through a path MTU discovery mechanism [_RFC4821_].
-
-'VOID *note gnutls_dtls_set_mtu:: (gnutls_session_t SESSION, unsigned int MTU)'
-'UNSIGNED INT *note gnutls_dtls_get_mtu:: (gnutls_session_t SESSION)'
-'UNSIGNED INT *note gnutls_dtls_get_data_mtu:: (gnutls_session_t SESSION)'
-
-   ---------- Footnotes ----------
-
-   (1) A key of 128 bits or 16 bytes should be sufficient for this
-purpose.
-
-
 File: gnutls.info,  Node: TLS handshake,  Next: Data transfer and termination,  Prev: Setting up the transport layer,  Up: How to use GnuTLS in applications
 
 6.6 TLS handshake
 =================
 
 Once a session has been initialized and a network connection has been
-set up, TLS and DTLS protocols perform a handshake.  The handshake is
+set up, TLS and DTLS protocols perform a handshake. The handshake is
 the actual key exchange.
 
  -- Function: int gnutls_handshake (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function does the handshake of the TLS/SSL protocol, and
      initializes the TLS connection.
 
      This function will fail if any problem is encountered, and will
-     return a negative error code.  In case of a client, if the client
-     has asked to resume a session, but the server couldn't, then a full
-     handshake will be performed.
+     return a negative error code. In case of a client, if the client
+     has asked to resume a session, but the server couldn't, then a
+     full handshake will be performed.
 
-     The non-fatal errors such as 'GNUTLS_E_AGAIN' and
-     'GNUTLS_E_INTERRUPTED' interrupt the handshake procedure, which
+     The non-fatal errors such as `GNUTLS_E_AGAIN'  and
+     `GNUTLS_E_INTERRUPTED'  interrupt the handshake procedure, which
      should be resumed later.  Call this function again, until it
-     returns 0; cf.  'gnutls_record_get_direction()' and
-     'gnutls_error_is_fatal()' .
+     returns 0; cf.  `gnutls_record_get_direction()'  and
+     `gnutls_error_is_fatal()' .
 
      If this function is called by a server after a rehandshake request
-     then 'GNUTLS_E_GOT_APPLICATION_DATA' or
-     'GNUTLS_E_WARNING_ALERT_RECEIVED' may be returned.  Note that these
-     are non fatal errors, only in the specific case of a rehandshake.
-     Their meaning is that the client rejected the rehandshake request
-     or in the case of 'GNUTLS_E_GOT_APPLICATION_DATA' it might also
-     mean that some data were pending.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     then `GNUTLS_E_GOT_APPLICATION_DATA'  or
+     `GNUTLS_E_WARNING_ALERT_RECEIVED'  may be returned.  Note that
+     these are non fatal errors, only in the specific case of a
+     rehandshake.  Their meaning is that the client rejected the
+     rehandshake request or in the case of
+     `GNUTLS_E_GOT_APPLICATION_DATA'  it might also mean that some data
+     were pending.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
  -- Function: void gnutls_handshake_set_timeout (gnutls_session_t
           SESSION, unsigned int MS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      MS: is a timeout value in milliseconds
 
      This function sets the timeout for the handshake process to the
-     provided value.  Use an 'ms' value of zero to disable timeout.
+     provided value. Use an  `ms' value of zero to disable timeout.
 
      Note that in order for the timeout to be enforced
-     'gnutls_transport_set_pull_timeout_function()' must be set (it is
+     `gnutls_transport_set_pull_timeout_function()'  must be set (it is
      set by default in most systems).
 
 The handshake process doesn't ensure the verification of the peer's
-identity.  When certificates are in use, this can be done, either after
+identity. When certificates are in use, this can be done, either after
 the handshake is complete, or during the handshake if *note
-gnutls_certificate_set_verify_function:: has been used.  In both cases
+gnutls_certificate_set_verify_function:: has been used. In both cases
 the *note gnutls_certificate_verify_peers2:: function can be used to
 verify the peer's certificate (see *note Certificate authentication::
 for more information).
 
-'INT *note gnutls_certificate_verify_peers2:: (gnutls_session_t SESSION, unsigned int * STATUS)'
+`INT *note gnutls_certificate_verify_peers2:: (gnutls_session_t SESSION, unsigned int * STATUS)'
 
 
 File: gnutls.info,  Node: Data transfer and termination,  Next: Buffered data transfer,  Prev: TLS handshake,  Up: How to use GnuTLS in applications
@@ -136,159 +96,161 @@ File: gnutls.info,  Node: Data transfer and termination,  Next: Buffered data tr
 =================================
 
 Once the handshake is complete and peer's identity has been verified
-data can be exchanged.  The available functions resemble the POSIX
-'recv' and 'send' functions.  It is suggested to use *note
+data can be exchanged. The available functions resemble the POSIX
+`recv' and `send' functions. It is suggested to use *note
 gnutls_error_is_fatal:: to check whether the error codes returned by
 these functions are fatal for the protocol or can be ignored.
 
  -- Function: ssize_t gnutls_record_send (gnutls_session_t SESSION,
           const void * DATA, size_t DATA_SIZE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA: contains the data to send
 
      DATA_SIZE: is the length of the data
 
-     This function has the similar semantics with 'send()' .  The only
+     This function has the similar semantics with `send()' .  The only
      difference is that it accepts a GnuTLS session, and uses different
-     error codes.  Note that if the send buffer is full, 'send()' will
-     block this function.  See the 'send()' documentation for full
+     error codes.  Note that if the send buffer is full, `send()'  will
+     block this function.  See the `send()'  documentation for full
      information.  You can replace the default push function by using
-     'gnutls_transport_set_ptr2()' with a call to 'send()' with a
+     `gnutls_transport_set_ptr2()'  with a call to `send()'  with a
      MSG_DONTWAIT flag if blocking is a problem.  If the EINTR is
-     returned by the internal push function (the default is 'send()' )
-     then 'GNUTLS_E_INTERRUPTED' will be returned.  If
-     'GNUTLS_E_INTERRUPTED' or 'GNUTLS_E_AGAIN' is returned, you must
+     returned by the internal push function (the default is `send()' )
+     then `GNUTLS_E_INTERRUPTED'  will be returned. If
+     `GNUTLS_E_INTERRUPTED'  or `GNUTLS_E_AGAIN'  is returned, you must
      call this function again, with the same parameters; alternatively
-     you could provide a 'NULL' pointer for data, and 0 for size.  cf.
-     'gnutls_record_get_direction()' .  The errno value EMSGSIZE maps to
-     'GNUTLS_E_LARGE_PACKET' .
+     you could provide a `NULL'  pointer for data, and 0 for size. cf.
+     `gnutls_record_get_direction()' . The errno value EMSGSIZE maps to
+     `GNUTLS_E_LARGE_PACKET' .
 
      *Returns:* The number of bytes sent, or a negative error code.  The
-     number of bytes sent might be less than 'data_size' .  The maximum
+     number of bytes sent might be less than  `data_size' .  The maximum
      number of bytes this function can send in a single call depends on
      the negotiated maximum record size.
 
- -- Function: ssize_t gnutls_record_recv (gnutls_session_t SESSION, void
-          * DATA, size_t DATA_SIZE)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: ssize_t gnutls_record_recv (gnutls_session_t SESSION,
+          void * DATA, size_t DATA_SIZE)
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA: the buffer that the data will be read into
 
      DATA_SIZE: the number of requested bytes
 
-     This function has the similar semantics with 'recv()' .  The only
+     This function has the similar semantics with `recv()' .  The only
      difference is that it accepts a GnuTLS session, and uses different
      error codes.  In the special case that a server requests a
      renegotiation, the client may receive an error code of
-     'GNUTLS_E_REHANDSHAKE' .  This message may be simply ignored,
-     replied with an alert 'GNUTLS_A_NO_RENEGOTIATION' , or replied with
-     a new handshake, depending on the client's will.  If 'EINTR' is
-     returned by the internal push function (the default is 'recv()' )
-     then 'GNUTLS_E_INTERRUPTED' will be returned.  If
-     'GNUTLS_E_INTERRUPTED' or 'GNUTLS_E_AGAIN' is returned, you must
+     `GNUTLS_E_REHANDSHAKE' .  This message may be simply ignored,
+     replied with an alert `GNUTLS_A_NO_RENEGOTIATION' , or replied
+     with a new handshake, depending on the client's will.  If `EINTR'
+     is returned by the internal push function (the default is `recv()'
+     ) then `GNUTLS_E_INTERRUPTED'  will be returned.  If
+     `GNUTLS_E_INTERRUPTED'  or `GNUTLS_E_AGAIN'  is returned, you must
      call this function again to get the data.  See also
-     'gnutls_record_get_direction()' .  A server may also receive
-     'GNUTLS_E_REHANDSHAKE' when a client has initiated a handshake.  In
-     that case the server can only initiate a handshake or terminate the
-     connection.
+     `gnutls_record_get_direction()' .  A server may also receive
+     `GNUTLS_E_REHANDSHAKE'  when a client has initiated a handshake.
+     In that case the server can only initiate a handshake or terminate
+     the connection.
 
      *Returns:* The number of bytes received and zero on EOF (for stream
      connections).  A negative error code is returned in case of an
      error.  The number of bytes received might be less than the
-     requested 'data_size' .
+     requested  `data_size' .
 
  -- Function: int gnutls_error_is_fatal (int ERROR)
      ERROR: is a GnuTLS error code, a negative error code
 
      If a GnuTLS function returns a negative error code you may feed
      that value to this function to see if the error condition is fatal.
-     Note that you may also want to check the error code manually, since
-     some non-fatal errors to the protocol (such as a warning alert or a
-     rehandshake request) may be fatal for your program.
+     Note that you may also want to check the error code manually,
+     since some non-fatal errors to the protocol (such as a warning
+     alert or a rehandshake request) may be fatal for your program.
 
      This function is only useful if you are dealing with errors from
      the record layer or the handshake layer.
 
-     *Returns:* 1 if the error code is fatal, for positive 'error'
-     values, 0 is returned.  For unknown 'error' values, -1 is returned.
+     *Returns:* 1 if the error code is fatal, for positive  `error'
+     values, 0 is returned.  For unknown  `error' values, -1 is
+     returned.
 
 Although, in the TLS protocol the receive function can be called at any
-time, when DTLS is used the GnuTLS receive functions must be called once
-a message is available for reading, even if no data are expected.  This
-is because in DTLS various (internal) actions may be required due to
-retransmission timers.  Moreover, an extended receive function is shown
-below, which allows the extraction of the message's sequence number.
-Due to the unreliable nature of the protocol, this field allows
+time, when DTLS is used the GnuTLS receive functions must be called
+once a message is available for reading, even if no data are expected.
+This is because in DTLS various (internal) actions may be required due
+to retransmission timers. Moreover, an extended receive function is
+shown below, which allows the extraction of the message's sequence
+number. Due to the unreliable nature of the protocol, this field allows
 distinguishing out-of-order messages.
 
  -- Function: ssize_t gnutls_record_recv_seq (gnutls_session_t SESSION,
           void * DATA, size_t DATA_SIZE, unsigned char * SEQ)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA: the buffer that the data will be read into
 
      DATA_SIZE: the number of requested bytes
 
-     SEQ: is the packet's 64-bit sequence number.  Should have space for
+     SEQ: is the packet's 64-bit sequence number. Should have space for
      8 bytes.
 
-     This function is the same as 'gnutls_record_recv()' , except that
+     This function is the same as `gnutls_record_recv()' , except that
      it returns in addition to data, the sequence number of the data.
      This is useful in DTLS where record packets might be received
-     out-of-order.  The returned 8-byte sequence number is an integer in
+     out-of-order. The returned 8-byte sequence number is an integer in
      big-endian format and should be treated as a unique message
      identification.
 
-     *Returns:* The number of bytes received and zero on EOF. A negative
-     error code is returned in case of an error.  The number of bytes
-     received might be less than 'data_size' .
+     *Returns:* The number of bytes received and zero on EOF.  A
+     negative error code is returned in case of an error.  The number
+     of bytes received might be less than  `data_size' .
 
      *Since:* 3.0
 
 The *note gnutls_record_check_pending:: helper function is available to
 allow checking whether data are available to be read in a GnuTLS session
-buffers.  Note that this function complements but does not replace
-'select', i.e., *note gnutls_record_check_pending:: reports no data to
-be read, 'select' should be called to check for data in the network
+buffers. Note that this function complements but does not replace
+`select', i.e., *note gnutls_record_check_pending:: reports no data to
+be read, `select' should be called to check for data in the network
 buffers.
 
  -- Function: size_t gnutls_record_check_pending (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function checks if there are unread data in the gnutls
-     buffers.  If the return value is non-zero the next call to
-     'gnutls_record_recv()' is guarranteed not to block.
+     buffers. If the return value is non-zero the next call to
+     `gnutls_record_recv()' is guarranteed not to block.
 
      *Returns:* Returns the size of the data or zero.
-'INT *note gnutls_record_get_direction:: (gnutls_session_t SESSION)'
 
-Once a TLS or DTLS session is no longer needed, it is recommended to use
-*note gnutls_bye:: to terminate the session.  That way the peer is
+`INT *note gnutls_record_get_direction:: (gnutls_session_t SESSION)'
+
+Once a TLS or DTLS session is no longer needed, it is recommended to
+use *note gnutls_bye:: to terminate the session. That way the peer is
 notified securely about the intention of termination, which allows
 distinguishing it from a malicious connection termination.  A session
 can be deinitialized with the *note gnutls_deinit:: function.
 
  -- Function: int gnutls_bye (gnutls_session_t SESSION,
           gnutls_close_request_t HOW)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      HOW: is an integer
 
-     Terminates the current TLS/SSL connection.  The connection should
-     have been initiated using 'gnutls_handshake()' .  'how' should be
-     one of 'GNUTLS_SHUT_RDWR' , 'GNUTLS_SHUT_WR' .
+     Terminates the current TLS/SSL connection. The connection should
+     have been initiated using `gnutls_handshake()' .   `how' should be
+     one of `GNUTLS_SHUT_RDWR' , `GNUTLS_SHUT_WR' .
 
-     In case of 'GNUTLS_SHUT_RDWR' the TLS session gets terminated and
-     further receives and sends will be disallowed.  If the return value
-     is zero you may continue using the underlying transport layer.
-     'GNUTLS_SHUT_RDWR' sends an alert containing a close request and
-     waits for the peer to reply with the same message.
+     In case of `GNUTLS_SHUT_RDWR'  the TLS session gets terminated and
+     further receives and sends will be disallowed.  If the return
+     value is zero you may continue using the underlying transport
+     layer. `GNUTLS_SHUT_RDWR'  sends an alert containing a close
+     request and waits for the peer to reply with the same message.
 
-     In case of 'GNUTLS_SHUT_WR' the TLS session gets terminated and
-     further sends will be disallowed.  In order to reuse the connection
-     you should wait for an EOF from the peer.  'GNUTLS_SHUT_WR' sends
+     In case of `GNUTLS_SHUT_WR'  the TLS session gets terminated and
+     further sends will be disallowed. In order to reuse the connection
+     you should wait for an EOF from the peer.  `GNUTLS_SHUT_WR'  sends
      an alert containing a close request.
 
      Note that not all implementations will properly terminate a TLS
@@ -297,16 +259,16 @@ can be deinitialized with the *note gnutls_deinit:: function.
      distinguishing between a malicious party prematurely terminating
      the connection and normal termination.
 
-     This function may also return 'GNUTLS_E_AGAIN' or
-     'GNUTLS_E_INTERRUPTED' ; cf.  'gnutls_record_get_direction()' .
+     This function may also return `GNUTLS_E_AGAIN'  or
+     `GNUTLS_E_INTERRUPTED' ; cf.  `gnutls_record_get_direction()' .
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code, see
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code, see
      function documentation for entire semantics.
 
  -- Function: void gnutls_deinit (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     This function clears all buffers associated with the 'session' .
+     This function clears all buffers associated with the  `session' .
      This function will also remove session data from the session
      database if the session was terminated abnormally.
 
@@ -318,30 +280,30 @@ File: gnutls.info,  Node: Buffered data transfer,  Next: Handling alerts,  Prev:
 
 Although *note gnutls_record_send:: is sufficient to transmit data to
 the peer, when many small chunks of data are to be transmitted it is
-inefficient and wastes bandwidth due to the TLS record overhead.  In
+inefficient and wastes bandwidth due to the TLS record overhead. In
 that case it is preferrable to combine the small chunks before
-transmission.  The following functions provide that functionality.
+transmission. The following functions provide that functionality.
 
  -- Function: void gnutls_record_cork (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     If called 'gnutls_record_send()' will no longer send partial
-     records.  All queued records will be sent when 'gnutls_uncork()' is
-     called, or when the maximum record size is reached.
+     If called `gnutls_record_send()'  will no longer send partial
+     records.  All queued records will be sent when `gnutls_uncork()'
+     is called, or when the maximum record size is reached.
 
      *Since:* 3.1.9
 
  -- Function: int gnutls_record_uncork (gnutls_session_t SESSION,
           unsigned int FLAGS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     FLAGS: Could be zero or 'GNUTLS_RECORD_WAIT'
+     FLAGS: Could be zero or `GNUTLS_RECORD_WAIT'
 
-     This resets the effect of 'gnutls_cork()' , and flushes any pending
-     data.  If the 'GNUTLS_RECORD_WAIT' flag is specified then this
+     This resets the effect of `gnutls_cork()' , and flushes any pending
+     data. If the `GNUTLS_RECORD_WAIT'  flag is specified then this
      function will block until the data is sent or a fatal error occurs
-     (i.e., the function will retry on 'GNUTLS_E_AGAIN' and
-     'GNUTLS_E_INTERRUPTED' ).
+     (i.e., the function will retry on `GNUTLS_E_AGAIN'  and
+     `GNUTLS_E_INTERRUPTED' ).
 
      *Returns:* On success the number of transmitted data is returned,
      or otherwise a negative error code.
@@ -355,10 +317,10 @@ File: gnutls.info,  Node: Handling alerts,  Next: Priority Strings,  Prev: Buffe
 ===================
 
 During a TLS connection alert messages may be exchanged by the two
-peers.  Those messages may be fatal, meaning the connection must be
-terminated afterwards, or warning when something needs to be reported to
-the peer, but without interrupting the session.  The error codes
-'GNUTLS_E_WARNING_ALERT_RECEIVED' or 'GNUTLS_E_FATAL_ALERT_RECEIVED'
+peers. Those messages may be fatal, meaning the connection must be
+terminated afterwards, or warning when something needs to be reported
+to the peer, but without interrupting the session.  The error codes
+`GNUTLS_E_WARNING_ALERT_RECEIVED' or `GNUTLS_E_FATAL_ALERT_RECEIVED'
 signal those alerts when received, and may be returned by all GnuTLS
 functions that receive data from the peer, being *note
 gnutls_handshake:: and *note gnutls_record_recv::.
@@ -368,15 +330,15 @@ logged or reported to the peer using the functions below.
 
  -- Function: gnutls_alert_description_t gnutls_alert_get
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function will return the last alert number received.  This
-     function should be called when 'GNUTLS_E_WARNING_ALERT_RECEIVED' or
-     'GNUTLS_E_FATAL_ALERT_RECEIVED' errors are returned by a gnutls
+     function should be called when `GNUTLS_E_WARNING_ALERT_RECEIVED'
+     or `GNUTLS_E_FATAL_ALERT_RECEIVED'  errors are returned by a gnutls
      function.  The peer may send alerts if he encounters an error.  If
      no alert has been received the returned value is undefined.
 
-     *Returns:* the last alert received, a 'gnutls_alert_description_t'
+     *Returns:* the last alert received, a `gnutls_alert_description_t'
      value.
 
  -- Function: const char * gnutls_alert_get_name
@@ -384,34 +346,34 @@ logged or reported to the peer using the functions below.
      ALERT: is an alert number.
 
      This function will return a string that describes the given alert
-     number, or 'NULL' .  See 'gnutls_alert_get()' .
+     number, or `NULL' .  See `gnutls_alert_get()' .
 
-     *Returns:* string corresponding to 'gnutls_alert_description_t'
+     *Returns:* string corresponding to `gnutls_alert_description_t'
      value.
 
-The peer may also be warned or notified of a fatal issue by using one of
-the functions below.  All the available alerts are listed in *note The
-Alert Protocol::.
+The peer may also be warned or notified of a fatal issue by using one
+of the functions below. All the available alerts are listed in *note
+The Alert Protocol::.
 
  -- Function: int gnutls_alert_send (gnutls_session_t SESSION,
           gnutls_alert_level_t LEVEL, gnutls_alert_description_t DESC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      LEVEL: is the level of the alert
 
      DESC: is the alert description
 
-     This function will send an alert to the peer in order to inform him
-     of something important (eg.  his Certificate could not be
+     This function will send an alert to the peer in order to inform
+     him of something important (eg. his Certificate could not be
      verified).  If the alert level is Fatal then the peer is expected
      to close the connection, otherwise he may ignore the alert and
      continue.
 
      The error code of the underlying record send function will be
-     returned, so you may also receive 'GNUTLS_E_INTERRUPTED' or
-     'GNUTLS_E_AGAIN' as well.
+     returned, so you may also receive `GNUTLS_E_INTERRUPTED'  or
+     `GNUTLS_E_AGAIN'  as well.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
  -- Function: int gnutls_error_to_alert (int ERR, int * LEVEL)
@@ -421,9 +383,9 @@ Alert Protocol::.
 
      Get an alert depending on the error code returned by a gnutls
      function.  All alerts sent by this function should be considered
-     fatal.  The only exception is when 'err' is 'GNUTLS_E_REHANDSHAKE'
-     , where a warning alert should be sent to the peer indicating that
-     no renegotiation will be performed.
+     fatal.  The only exception is when  `err' is
+     `GNUTLS_E_REHANDSHAKE' , where a warning alert should be sent to
+     the peer indicating that no renegotiation will be performed.
 
      If there is no mapping to a valid alert the alert to indicate
      internal error is returned.
@@ -439,51 +401,42 @@ File: gnutls.info,  Node: Priority Strings,  Next: Selecting cryptographic key s
 In order to specify cipher suite preferences on a TLS session there are
 priority functions that accept a string specifying the enabled for the
 handshake algorithms.  That string may contain a single initial keyword
-such as in *note Table 6.2: tab:prio-keywords. and may be followed by
-additional algorithm or special keywords.
+such as in *note tab:prio-keywords:: and may be followed by additional
+algorithm or special keywords.
+
+`INT *note gnutls_priority_set_direct:: (gnutls_session_t SESSION, const char * PRIORITIES, const char ** ERR_POS)'
 
-'INT *note gnutls_priority_set_direct:: (gnutls_session_t SESSION, const char * PRIORITIES, const char ** ERR_POS)'
-'INT *note gnutls_priority_set:: (gnutls_session_t SESSION, gnutls_priority_t PRIORITY)'
+`INT *note gnutls_priority_set:: (gnutls_session_t SESSION, gnutls_priority_t PRIORITY)'
 
 Keyword        Description
-------------------------------------------------------------------
-PERFORMANCE    All the known to be secure ciphersuites are
-               enabled, limited to 128 bit ciphers and sorted
-               by terms of speed performance.  The message
-               authenticity security level is of 64 bits or
-               more.
-               
-NORMAL         Means all the known to be secure ciphersuites.
+------------------------------------------------------------------ 
+PERFORMANCE     All the known to be secure ciphersuites are
+               enabled, limited to 128 bit ciphers and sorted by
+               terms of speed performance. The message
+               authenticity security level is of 64 bits or more.
+NORMAL          Means all the known to be secure ciphersuites.
                The ciphers are sorted by security margin,
                although the 256-bit ciphers are included as a
-               fallback only.  The message authenticity
-               security level is of 64 bits or more.
-               
-SECURE128      Means all known to be secure ciphersuites that
+               fallback only.  The message authenticity security
+               level is of 64 bits or more.
+SECURE128       Means all known to be secure ciphersuites that
                offer a security level 128-bit or more and a
-               message authenticity security level of 80 bits
+               message authenticity security level of 80 bits or
+               more.
+SECURE192       Means all the known to be secure ciphersuites
+               that offer a security level 192-bit or more and a
+               message authenticity security level of 128 bits
                or more.
-               
-SECURE192      Means all the known to be secure ciphersuites
-               that offer a security level 192-bit or more and
-               a message authenticity security level of 128
-               bits or more.
-               
-SECURE256      Currently alias for SECURE192.
-               
-SUITEB128      Means all the NSA Suite B cryptography (RFC5430)
+SECURE256       Currently alias for SECURE192.
+SUITEB128       Means all the NSA Suite B cryptography (RFC5430)
                ciphersuites with an 128 bit security level.
-               
-SUITEB192      Means all the NSA Suite B cryptography (RFC5430)
+SUITEB192       Means all the NSA Suite B cryptography (RFC5430)
                ciphersuites with an 192 bit security level.
-               
-EXPORT         Means all ciphersuites are enabled, including
-               the low-security 40 bit ciphers.
-               
-NONE           Means nothing is enabled.  This disables even
-               protocols and compression methods.  It should be
+EXPORT          Means all ciphersuites are enabled, including the
+               low-security 40 bit ciphers.
+NONE            Means nothing is enabled.  This disables even
+               protocols and compression methods. It should be
                followed by the algorithms to be enabled.
-               
 
 Table 6.2: Supported initial keywords.
 
@@ -495,67 +448,61 @@ precedence of the other protocols.  In all cases all the supported key
 exchange algorithms are enabled(1).
 
 Note that the SECURE levels distinguish between overall security level
-and message authenticity security level.  That is because the message
+and message authenticity security level. That is because the message
 authenticity security level requires the adversary to break the
 algorithms at real-time during the protocol run, whilst the overall
-security level refers to off-line adversaries (e.g.  adversaries
+security level refers to off-line adversaries (e.g. adversaries
 breaking the ciphertext years after it was captured).
 
 The NONE keyword, if used, must followed by keywords specifying the
-algorithms and protocols to be enabled.  The other initial keywords do
-not require, but may be followed by such keywords.  All level keywords
+algorithms and protocols to be enabled. The other initial keywords do
+not require, but may be followed by such keywords. All level keywords
 can be combined, and for example a level of "SECURE256:+SECURE128" is
 allowed.
 
 The order with which every algorithm or protocol is specified is
-significant.  Algorithms specified before others will take precedence.
-The supported algorithms and protocols are shown in *note Table 6.3:
-tab:prio-algorithms.  To avoid collisions in order to specify a
+significant. Algorithms specified before others will take precedence.
+The supported algorithms and protocols are shown in *note
+tab:prio-algorithms::.  To avoid collisions in order to specify a
 compression algorithm in the priority string you have to prefix it with
 "COMP-", protocol versions with "VERS-", signature algorithms with
-"SIGN-" and certificate types with "CTYPE-".  All other algorithms don't
-need a prefix.  Each specified keyword can be prefixed with any of the
-following characters.
+"SIGN-" and certificate types with "CTYPE-".  All other algorithms
+don't need a prefix. Each specified keyword can be prefixed with any of
+the following characters.
 
 '!' or '-'
      appended with an algorithm will remove this algorithm.
+
 "+"
      appended with an algorithm will add this algorithm.
 
 Type           Keywords
-------------------------------------------------------------------
-Ciphers        AES-128-CBC, AES-256-CBC, AES-128-GCM,
+------------------------------------------------------------------ 
+Ciphers         AES-128-CBC, AES-256-CBC, AES-128-GCM,
                CAMELLIA-128-CBC, CAMELLIA-256-CBC, ARCFOUR-128,
-               3DES-CBC ARCFOUR-40.  Catch all name is
-               CIPHER-ALL which will add all the algorithms
-               from NORMAL priority.
-               
-Key exchange   RSA, DHE-RSA, DHE-DSS, SRP, SRP-RSA, SRP-DSS,
+               3DES-CBC ARCFOUR-40. Catch all name is CIPHER-ALL
+               which will add all the algorithms from NORMAL
+               priority.
+Key exchange    RSA, DHE-RSA, DHE-DSS, SRP, SRP-RSA, SRP-DSS,
                PSK, DHE-PSK, ECDHE-RSA, ANON-ECDH, ANON-DH,
                RSA-EXPORT. The Catch all name is KX-ALL which
-               will add all the algorithms from NORMAL
-               priority.
-               
-MAC            MD5, SHA1, SHA256, AEAD (used with GCM ciphers
-               only).  All algorithms from NORMAL priority can
-               be accessed with MAC-ALL.
-               
-Compression    COMP-NULL, COMP-DEFLATE. Catch all is COMP-ALL.
+               will add all the algorithms from NORMAL priority.
+MAC             MD5, SHA1, SHA256, AEAD (used with GCM ciphers
+               only). All algorithms from NORMAL priority can be
+               accessed with MAC-ALL.
+Compression     COMP-NULL, COMP-DEFLATE. Catch all is COMP-ALL.
 algorithms     
-TLS versions   VERS-SSL3.0, VERS-TLS1.0, VERS-TLS1.1,
+TLS versions    VERS-SSL3.0, VERS-TLS1.0, VERS-TLS1.1,
                VERS-TLS1.2, VERS-DTLS1.0.  Catch all is
                VERS-TLS-ALL and VERS-DTLS-ALL.
-               
-Signature      SIGN-RSA-SHA1, SIGN-RSA-SHA224, SIGN-RSA-SHA256,
+Signature       SIGN-RSA-SHA1, SIGN-RSA-SHA224, SIGN-RSA-SHA256,
 algorithms     SIGN-RSA-SHA384, SIGN-RSA-SHA512, SIGN-DSA-SHA1,
                SIGN-DSA-SHA224, SIGN-DSA-SHA256, SIGN-RSA-MD5.
-               Catch all is SIGN-ALL. This is only valid for
-               TLS 1.2 and later.
-               
-Elliptic       CURVE-SECP192R1, CURVE-SECP224R1,
+               Catch all is SIGN-ALL. This is only valid for TLS
+               1.2 and later.
+Elliptic        CURVE-SECP192R1, CURVE-SECP224R1,
 curves         CURVE-SECP256R1, CURVE-SECP384R1,
-               CURVE-SECP521R1.  Catch all is CURVE-ALL.
-               
+               CURVE-SECP521R1. Catch all is CURVE-ALL.
 
 Table 6.3: The supported algorithm keywords in priority strings.
 
@@ -565,69 +512,58 @@ Diffie-Hellman key exchange requires parameters to be generated and
 associated with a credentials structure by the server (see *note
 Parameter generation::).
 
-The available special keywords are shown in *note Table 6.4:
-tab:prio-special1. and *note Table 6.5: tab:prio-special2.
+The available special keywords are shown in *note tab:prio-special1::
+and *note tab:prio-special2::.
 
 Keyword                          Description
-                                 
-------------------------------------------------------------------
-%COMPAT                          will enable compatibility
-                                 mode.  It might mean that
-                                 violations of the protocols
-                                 are allowed as long as maximum
+------------------------------------------------------------------ 
+%COMPAT                           will enable compatibility
+                                 mode. It might mean that
+                                 violations of the protocols are
+                                 allowed as long as maximum
                                  compatibility with problematic
                                  clients and servers is
-                                 achieved.  More specifically
-                                 this string would disable TLS
-                                 record random padding and
-                                 tolerate packets over the
-                                 maximum allowed TLS record.
-                                 
-%NO_EXTENSIONS                   will prevent the sending of
+                                 achieved. More specifically this
+                                 string would disable TLS record
+                                 random padding and tolerate
+                                 packets over the maximum
+                                 allowed TLS record.
+%NO_EXTENSIONS                    will prevent the sending of
                                  any TLS extensions in client
-                                 side.  Note that TLS 1.2
-                                 requires extensions to be
-                                 used, as well as safe
-                                 renegotiation thus this option
-                                 must be used with care.
-                                 
-%SERVER_PRECEDENCE               The ciphersuite will be
+                                 side. Note that TLS 1.2
+                                 requires extensions to be used,
+                                 as well as safe renegotiation
+                                 thus this option must be used
+                                 with care.
+%SERVER_PRECEDENCE                The ciphersuite will be
                                  selected according to server
-                                 priorities and not the
-                                 client's.
-                                 
-%SSL3_RECORD_VERSION             will use SSL3.0 record version
+                                 priorities and not the client's.
+%SSL3_RECORD_VERSION              will use SSL3.0 record version
                                  in client hello.  This is the
                                  default.
-                                 
-%LATEST_RECORD_VERSION           will use the latest TLS
+%LATEST_RECORD_VERSION            will use the latest TLS
                                  version record version in
                                  client hello.
-                                 
 
 Table 6.4: Special priority string keywords.
 
 Keyword                          Description
-                                 
-------------------------------------------------------------------
-%STATELESS_COMPRESSION           will disable keeping state
+------------------------------------------------------------------ 
+%STATELESS_COMPRESSION            will disable keeping state
                                  across records when
-                                 compressing.  This may help to
+                                 compressing. This may help to
                                  mitigate attacks when
                                  compression is used but an
-                                 attacker is in control of
-                                 input data.  This has to be
-                                 used only when the data that
-                                 are possibly controlled by an
-                                 attacker are placed in
-                                 separate records.
-                                 
-%DISABLE_SAFE_RENEGOTIATION      will completely disable safe
+                                 attacker is in control of input
+                                 data. This has to be used only
+                                 when the data that are possibly
+                                 controlled by an attacker are
+                                 placed in separate records.
+%DISABLE_SAFE_RENEGOTIATION       will completely disable safe
                                  renegotiation completely.  Do
                                  not use unless you know what
                                  you are doing.
-                                 
-%UNSAFE_RENEGOTIATION            will allow handshakes and
+%UNSAFE_RENEGOTIATION             will allow handshakes and
                                  re-handshakes without the safe
                                  renegotiation extension.  Note
                                  that for clients this mode is
@@ -639,68 +575,61 @@ Keyword                          Description
                                  unless you know what you are
                                  doing and want maximum
                                  compatibility.
-                                 
-%PARTIAL_RENEGOTIATION           will allow initial handshakes
+%PARTIAL_RENEGOTIATION            will allow initial handshakes
                                  to proceed, but not
-                                 re-handshakes.  This leaves
-                                 the client vulnerable to
-                                 attack, and servers will be
-                                 compatible with non-upgraded
-                                 clients for initial
-                                 handshakes.  This is currently
-                                 the default for clients and
-                                 servers, for compatibility
-                                 reasons.
-                                 
-%SAFE_RENEGOTIATION              will enforce safe
+                                 re-handshakes.  This leaves the
+                                 client vulnerable to attack,
+                                 and servers will be compatible
+                                 with non-upgraded clients for
+                                 initial handshakes.  This is
+                                 currently the default for
+                                 clients and servers, for
+                                 compatibility reasons.
+%SAFE_RENEGOTIATION               will enforce safe
                                  renegotiation.  Clients and
                                  servers will refuse to talk to
                                  an insecure peer.  Currently
                                  this causes interoperability
                                  problems, but is required for
                                  full protection.
-                                 
-%VERIFY_ALLOW_SIGN_RSA_MD5       will allow RSA-MD5 signatures
+%VERIFY_ALLOW_SIGN_RSA_MD5        will allow RSA-MD5 signatures
                                  in certificate chains.
-                                 
-%VERIFY_DISABLE_CRL_CHECKS       will disable CRL or OCSP
+%VERIFY_DISABLE_CRL_CHECKS        will disable CRL or OCSP
                                  checks in the verification of
                                  the certificate chain.
-                                 
-%VERIFY_ALLOW_X509_V1_CA_CRT     will allow V1 CAs in chains.
-                                 
+%VERIFY_ALLOW_X509_V1_CA_CRT      will allow V1 CAs in chains.
 
 Table 6.5: More priority string keywords.
 
 Finally the ciphersuites enabled by any priority string can be listed
-using the 'gnutls-cli' application (see *note gnutls-cli Invocation::),
+using the `gnutls-cli' application (see *note gnutls-cli Invocation::),
 or by using the priority functions as in *note Listing the ciphersuites
 in a priority string::.
 
 Example priority strings are:
-     The default priority without the HMAC-MD5:
-         "NORMAL:-MD5"
+    The default priority without the HMAC-MD5:
+        "NORMAL:-MD5"
 
-     Specifying RSA with AES-128-CBC:
-         "NONE:+VERS-TLS-ALL:+MAC-ALL:+RSA:+AES-128-CBC:+SIGN-ALL:+COMP-NULL"
+    Specifying RSA with AES-128-CBC:
+        "NONE:+VERS-TLS-ALL:+MAC-ALL:+RSA:+AES-128-CBC:+SIGN-ALL:+COMP-NULL"
 
-     Specifying the defaults except ARCFOUR-128:
-         "NORMAL:-ARCFOUR-128"
+    Specifying the defaults except ARCFOUR-128:
+        "NORMAL:-ARCFOUR-128"
 
-     Enabling the 128-bit secure ciphers, while disabling SSL 3.0 and enabling compression:
-         "SECURE128:-VERS-SSL3.0:+COMP-DEFLATE"
+    Enabling the 128-bit secure ciphers, while disabling SSL 3.0 and enabling compression:
+        "SECURE128:-VERS-SSL3.0:+COMP-DEFLATE"
 
-     Enabling the 128-bit and 192-bit secure ciphers, while disabling all TLS versions
-     except TLS 1.2:
-         "SECURE128:+SECURE192:-VERS-TLS-ALL:+VERS-TLS1.2"
+    Enabling the 128-bit and 192-bit secure ciphers, while disabling all TLS versions
+    except TLS 1.2:
+        "SECURE128:+SECURE192:-VERS-TLS-ALL:+VERS-TLS1.2"
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) Except for the RSA-EXPORT which is only enabled in EXPORT level.
+(1) Except for the RSA-EXPORT which is only enabled in EXPORT level.
 
-   (2) It depends on the group used.  Primes with lesser bits are always
-faster, but also easier to break.  See *note Selecting cryptographic key
-sizes:: for the acceptable security levels.
+(2) It depends on the group used.  Primes with lesser bits are always
+faster, but also easier to break.  See *note Selecting cryptographic
+key sizes:: for the acceptable security levels.
 
 
 File: gnutls.info,  Node: Selecting cryptographic key sizes,  Next: Advanced topics,  Prev: Priority Strings,  Up: How to use GnuTLS in applications
@@ -709,62 +638,54 @@ File: gnutls.info,  Node: Selecting cryptographic key sizes,  Next: Advanced top
 ======================================
 
 Because many algorithms are involved in TLS, it is not easy to set a
-consistent security level.  For this reason in *note Table 6.6:
-tab:key-sizes. we present some correspondence between key sizes of
-symmetric algorithms and public key algorithms based on [_ECRYPT_].
-Those can be used to generate certificates with appropriate key sizes as
-well as select parameters for Diffie-Hellman and SRP authentication.
+consistent security level.  For this reason in *note tab:key-sizes:: we
+present some correspondence between key sizes of symmetric algorithms
+and public key algorithms based on [_ECRYPT_].  Those can be used to
+generate certificates with appropriate key sizes as well as select
+parameters for Diffie-Hellman and SRP authentication.
 
 SecurityRSA, DH   ECC     Security       Description
 bits    and SRP   key     parameter      
-        parameter size
-        size
------------------------------------------------------------------
-<72     <1008     <160    'INSECURE'     Considered to be
+        parameter size                   
+        size                             
+----------------------------------------------------------------- 
+<72     <1008     <160    `INSECURE'     Considered to be
                                          insecure
-                                         
-72      1008      160     'WEAK'         Short term protection
+72      1008      160     `WEAK'         Short term protection
                                          against small
                                          organizations
-                                         
-80      1248      160     'LOW'          Very short term
+80      1248      160     `LOW'          Very short term
                                          protection against
                                          agencies
-                                         
-96      1776      192     'LEGACY'       Legacy standard level
-                                         
-112     2432      224     'NORMAL'       Medium-term
-                                         protection
-                                         
-128     3248      256     'HIGH'         Long term protection
-                                         
-256     15424     512     'ULTRA'        Foreseeable future
-                                         
+96      1776      192     `LEGACY'       Legacy standard level
+112     2432      224     `NORMAL'       Medium-term protection
+128     3248      256     `HIGH'         Long term protection
+256     15424     512     `ULTRA'        Foreseeable future
 
 Table 6.6: Key sizes and security parameters.
 
-The first column provides a security parameter in a number of bits.
-This gives an indication of the number of combinations to be tried by an
-adversary to brute force a key.  For example to test all possible keys
-in a 112 bit security parameter 2^{112} combinations have to be tried.
-For today's technology this is infeasible.  The next two columns
-correlate the security parameter with actual bit sizes of parameters for
-DH, RSA, SRP and ECC algorithms.  A mapping to 'gnutls_sec_param_t'
+The first column  provides a security parameter in a number of bits.
+This gives an indication of the number of combinations to be tried by
+an adversary to brute force a key. For example to test all possible
+keys in a 112 bit security parameter 2^112 combinations have to be
+tried. For today's technology this is infeasible.  The next two columns
+correlate the security parameter with actual bit sizes of parameters
+for DH, RSA, SRP and ECC algorithms.  A mapping to `gnutls_sec_param_t'
 value is given for each security parameter, on the next column, and
 finally a brief description of the level.
 
 Note, however, that the values suggested here are nothing more than an
-educated guess that is valid today.  There are no guarantees that an
+educated guess that is valid today. There are no guarantees that an
 algorithm will remain unbreakable or that these values will remain
-constant in time.  There could be scientific breakthroughs that cannot
+constant in time. There could be scientific breakthroughs that cannot
 be predicted or total failure of the current public key systems by
-quantum computers.  On the other hand though the cryptosystems used in
+quantum computers. On the other hand though the cryptosystems used in
 TLS are selected in a conservative way and such catastrophic
 breakthroughs or failures are believed to be unlikely.  The NIST
 publication SP 800-57 [_NISTSP80057_] contains a similar table.
 
-When using GnuTLS and a decision on bit sizes for a public key algorithm
-is required, use of the following functions is recommended:
+When using GnuTLS and a decision on bit sizes for a public key
+algorithm is required, use of the following functions is recommended:
 
  -- Function: unsigned int gnutls_sec_param_to_pk_bits
           (gnutls_pk_algorithm_t ALGO, gnutls_sec_param_t PARAM)
@@ -774,7 +695,7 @@ is required, use of the following functions is recommended:
 
      When generating private and public key pairs a difficult question
      is which size of "bits" the modulus will be in RSA and the group
-     size in DSA. The easy answer is 1024, which is also wrong.  This
+     size in DSA. The easy answer is 1024, which is also wrong. This
      function will convert a human understandable security parameter to
      an appropriate size for the specific algorithm.
 
@@ -788,24 +709,25 @@ is required, use of the following functions is recommended:
 
      BITS: is the number of bits
 
-     This is the inverse of 'gnutls_sec_param_to_pk_bits()' .  Given an
+     This is the inverse of `gnutls_sec_param_to_pk_bits()' . Given an
      algorithm and the number of bits, it will return the security
-     parameter.  This is a rough indication.
+     parameter. This is a rough indication.
 
      *Returns:* The security parameter.
 
      *Since:* 2.12.0
 
 Those functions will convert a human understandable security parameter
-of 'gnutls_sec_param_t' type, to a number of bits suitable for a public
+of `gnutls_sec_param_t' type, to a number of bits suitable for a public
 key algorithm.
 
-'CONST CHAR * *note gnutls_sec_param_get_name:: (gnutls_sec_param_t PARAM)'
+`CONST CHAR * *note gnutls_sec_param_get_name:: (gnutls_sec_param_t PARAM)'
 
 The following functions will set the minimum acceptable group size for
 Diffie-Hellman and SRP authentication.
-'VOID *note gnutls_dh_set_prime_bits:: (gnutls_session_t SESSION, unsigned int BITS)'
-'VOID *note gnutls_srp_set_prime_bits:: (gnutls_session_t SESSION, unsigned int BITS)'
+`VOID *note gnutls_dh_set_prime_bits:: (gnutls_session_t SESSION, unsigned int BITS)'
+
+`VOID *note gnutls_srp_set_prime_bits:: (gnutls_session_t SESSION, unsigned int BITS)'
 
 
 File: gnutls.info,  Node: Advanced topics,  Prev: Selecting cryptographic key sizes,  Up: How to use GnuTLS in applications
@@ -834,24 +756,26 @@ Client side
 
 To reduce time and roundtrips spent in a handshake the client can
 request session resumption from a server that previously shared a
-session with.  For that the client has to retrieve and store the session
-parameters.  Before establishing a new session to the same server the
+session with. For that the client has to retrieve and store the session
+parameters. Before establishing a new session to the same server the
 parameters must be re-associated with the GnuTLS session using *note
 gnutls_session_set_data::.
 
-'INT *note gnutls_session_get_data2:: (gnutls_session_t SESSION, gnutls_datum_t * DATA)'
-'INT *note gnutls_session_get_id2:: (gnutls_session_t SESSION, gnutls_datum_t * SESSION_ID)'
-'INT *note gnutls_session_set_data:: (gnutls_session_t SESSION, const void * SESSION_DATA, size_t SESSION_DATA_SIZE)'
+`INT *note gnutls_session_get_data2:: (gnutls_session_t SESSION, gnutls_datum_t * DATA)'
+
+`INT *note gnutls_session_get_id2:: (gnutls_session_t SESSION, gnutls_datum_t * SESSION_ID)'
+
+`INT *note gnutls_session_set_data:: (gnutls_session_t SESSION, const void * SESSION_DATA, size_t SESSION_DATA_SIZE)'
 
-Keep in mind that sessions will be expired after some time, depending on
-the server, and a server may choose not to resume a session even when
-requested to.  The expiration is to prevent temporal session keys from
-becoming long-term keys.  Also note that as a client you must enable,
-using the priority functions, at least the algorithms used in the last
-session.
+Keep in mind that sessions will be expired after some time, depending
+on the server, and a server may choose not to resume a session even
+when requested to.  The expiration is to prevent temporal session keys
+from becoming long-term keys. Also note that as a client you must
+enable, using the priority functions, at least the algorithms used in
+the last session.
 
  -- Function: int gnutls_session_is_resumed (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Check whether session is resumed or not.
 
@@ -863,20 +787,24 @@ Server side
 
 In order to support resumption a server can store the session security
 parameters in a local database or by using session tickets (see *note
-Session tickets::) to delegate storage to the client.  Because session
-tickets might not be supported by all clients, servers could combine the
-two methods.
+Session tickets::) to delegate storage to the client. Because session
+tickets might not be supported by all clients, servers could combine
+the two methods.
 
 A storing server needs to specify callback functions to store, retrieve
-and delete session data.  These can be registered with the functions
-below.  The stored sessions in the database can be checked using *note
+and delete session data. These can be registered with the functions
+below. The stored sessions in the database can be checked using *note
 gnutls_db_check_entry:: for expiration.
 
-'VOID *note gnutls_db_set_retrieve_function:: (gnutls_session_t SESSION, gnutls_db_retr_func RETR_FUNC)'
-'VOID *note gnutls_db_set_store_function:: (gnutls_session_t SESSION, gnutls_db_store_func STORE_FUNC)'
-'VOID *note gnutls_db_set_ptr:: (gnutls_session_t SESSION, void * PTR)'
-'VOID *note gnutls_db_set_remove_function:: (gnutls_session_t SESSION, gnutls_db_remove_func REM_FUNC)'
-'INT *note gnutls_db_check_entry:: (gnutls_session_t SESSION, gnutls_datum_t SESSION_ENTRY)'
+`VOID *note gnutls_db_set_retrieve_function:: (gnutls_session_t SESSION, gnutls_db_retr_func RETR_FUNC)'
+
+`VOID *note gnutls_db_set_store_function:: (gnutls_session_t SESSION, gnutls_db_store_func STORE_FUNC)'
+
+`VOID *note gnutls_db_set_ptr:: (gnutls_session_t SESSION, void * PTR)'
+
+`VOID *note gnutls_db_set_remove_function:: (gnutls_session_t SESSION, gnutls_db_remove_func REM_FUNC)'
+
+`INT *note gnutls_db_check_entry:: (gnutls_session_t SESSION, gnutls_datum_t SESSION_ENTRY)'
 
 A server utilizing tickets should generate ticket encryption and
 authentication keys using *note gnutls_session_ticket_key_generate::.
@@ -885,35 +813,35 @@ gnutls_session_ticket_enable_server::.
 
  -- Function: int gnutls_session_ticket_enable_server (gnutls_session_t
           SESSION, const gnutls_datum_t * KEY)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      KEY: key to encrypt session parameters.
 
      Request that the server should attempt session resumption using
-     SessionTicket.  'key' must be initialized with
-     'gnutls_session_ticket_key_generate()' .
+     SessionTicket.   `key' must be initialized with
+     `gnutls_session_ticket_key_generate()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
      *Since:* 2.10.0
 
  -- Function: int gnutls_session_ticket_key_generate (gnutls_datum_t *
           KEY)
-     KEY: is a pointer to a 'gnutls_datum_t' which will contain a newly
+     KEY: is a pointer to a `gnutls_datum_t'  which will contain a newly
      created key.
 
      Generate a random key to encrypt security parameters within
      SessionTicket.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
      *Since:* 2.10.0
 
  -- Function: int gnutls_session_resumption_requested (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Check whether the client has asked for session resumption.  This
      function is valid only on server side.
@@ -933,8 +861,8 @@ File: gnutls.info,  Node: Certificate verification,  Next: Parameter generation,
 
 In this section the functionality for additional certificate
 verification methods is listed.  These methods are intended to be used
-in addition to normal PKI verification, in order to reduce the risk of a
-compromised CA being undetected.
+in addition to normal PKI verification, in order to reduce the risk of
+a compromised CA being undetected.
 
 6.12.2.1 Trust on first use
 ...........................
@@ -954,7 +882,7 @@ public keys are listed below.
 
      HOST: The peer's name
 
-     SERVICE: non-NULL if this key is specific to a service (e.g.  http)
+     SERVICE: non-NULL if this key is specific to a service (e.g. http)
 
      CERT_TYPE: The type of the certificate
 
@@ -963,31 +891,31 @@ public keys are listed below.
      FLAGS: should be 0.
 
      This function will try to verify the provided certificate using a
-     list of stored public keys.  The 'service' field if non-NULL should
-     be a port number.
+     list of stored public keys.  The  `service' field if non-NULL
+     should be a port number.
 
-     The 'retrieve' variable if non-null specifies a custom backend for
-     the retrieval of entries.  If it is NULL then the default file
-     backend will be used.  In POSIX-like systems the file backend uses
+     The  `retrieve' variable if non-null specifies a custom backend for
+     the retrieval of entries. If it is NULL then the default file
+     backend will be used. In POSIX-like systems the file backend uses
      the $HOME/.gnutls/known_hosts file.
 
      Note that if the custom storage backend is provided the retrieval
-     function should return 'GNUTLS_E_CERTIFICATE_KEY_MISMATCH' if the
+     function should return `GNUTLS_E_CERTIFICATE_KEY_MISMATCH' if the
      host/service pair is found but key doesn't match,
-     'GNUTLS_E_NO_CERTIFICATE_FOUND' if no such host/service with the
-     given key is found, and 0 if it was found.  The storage function
+     `GNUTLS_E_NO_CERTIFICATE_FOUND'  if no such host/service with the
+     given key is found, and 0 if it was found. The storage function
      should return 0 on success.
 
      *Returns:* If no associated public key is found then
-     'GNUTLS_E_NO_CERTIFICATE_FOUND' will be returned.  If a key is
-     found but does not match 'GNUTLS_E_CERTIFICATE_KEY_MISMATCH' is
-     returned.  On success, 'GNUTLS_E_SUCCESS' (0) is returned, or a
+     `GNUTLS_E_NO_CERTIFICATE_FOUND'  will be returned. If a key is
+     found but does not match `GNUTLS_E_CERTIFICATE_KEY_MISMATCH' is
+     returned. On success, `GNUTLS_E_SUCCESS'  (0) is returned, or a
      negative error value on other errors.
 
      *Since:* 3.0
 
- -- Function: int gnutls_store_pubkey (const char* DB_NAME, gnutls_tdb_t
-          TDB, const char* HOST, const char* SERVICE,
+ -- Function: int gnutls_store_pubkey (const char* DB_NAME,
+          gnutls_tdb_t TDB, const char* HOST, const char* SERVICE,
           gnutls_certificate_type_t CERT_TYPE, const gnutls_datum_t *
           CERT, time_t EXPIRATION, unsigned int FLAGS)
      DB_NAME: A file specifying the stored keys (use NULL for the
@@ -997,7 +925,7 @@ public keys are listed below.
 
      HOST: The peer's name
 
-     SERVICE: non-NULL if this key is specific to a service (e.g.  http)
+     SERVICE: non-NULL if this key is specific to a service (e.g. http)
 
      CERT_TYPE: The type of the certificate
 
@@ -1008,21 +936,22 @@ public keys are listed below.
      FLAGS: should be 0.
 
      This function will store the provided certificate to the list of
-     stored public keys.  The key will be considered valid until the
+     stored public keys. The key will be considered valid until the
      provided expiration time.
 
-     The 'store' variable if non-null specifies a custom backend for the
-     storage of entries.  If it is NULL then the default file backend
-     will be used.
+     The  `store' variable if non-null specifies a custom backend for
+     the storage of entries. If it is NULL then the default file
+     backend will be used.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
 
-In addition to the above the *note gnutls_store_commitment:: can be used
-to implement a key-pinning architecture as in [_KEYPIN_]. This provides
-a way for web server to commit on a public key that is not yet active.
+In addition to the above the *note gnutls_store_commitment:: can be
+used to implement a key-pinning architecture as in [_KEYPIN_].  This
+provides a way for web server to commit on a public key that is not yet
+active.
 
  -- Function: int gnutls_store_commitment (const char* DB_NAME,
           gnutls_tdb_t TDB, const char* HOST, const char* SERVICE,
@@ -1035,7 +964,7 @@ a way for web server to commit on a public key that is not yet active.
 
      HOST: The peer's name
 
-     SERVICE: non-NULL if this key is specific to a service (e.g.  http)
+     SERVICE: non-NULL if this key is specific to a service (e.g. http)
 
      HASH_ALGO: The hash algorithm type
 
@@ -1046,55 +975,60 @@ a way for web server to commit on a public key that is not yet active.
      FLAGS: should be 0.
 
      This function will store the provided hash commitment to the list
-     of stored public keys.  The key with the given hash will be
+     of stored public keys. The key with the given hash will be
      considered valid until the provided expiration time.
 
-     The 'store' variable if non-null specifies a custom backend for the
-     storage of entries.  If it is NULL then the default file backend
-     will be used.
+     The  `store' variable if non-null specifies a custom backend for
+     the storage of entries. If it is NULL then the default file
+     backend will be used.
 
      Note that this function is not thread safe with the default
      backend.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
 
-The storage and verification functions may be used with the default text
-file based back-end, or another back-end may be specified.  That should
-contain storage and retrieval functions and specified as below.
+The storage and verification functions may be used with the default
+text file based back-end, or another back-end may be specified. That
+should contain storage and retrieval functions and specified as below.
+
+`INT *note gnutls_tdb_init:: (gnutls_tdb_t* TDB)'
+
+`VOID *note gnutls_tdb_deinit:: (gnutls_tdb_t TDB)'
+
+`VOID *note gnutls_tdb_set_verify_func:: (gnutls_tdb_t TDB, gnutls_tdb_verify_func VERIFY)'
 
-'INT *note gnutls_tdb_init:: (gnutls_tdb_t* TDB)'
-'VOID *note gnutls_tdb_deinit:: (gnutls_tdb_t TDB)'
-'VOID *note gnutls_tdb_set_verify_func:: (gnutls_tdb_t TDB, gnutls_tdb_verify_func VERIFY)'
-'VOID *note gnutls_tdb_set_store_func:: (gnutls_tdb_t TDB, gnutls_tdb_store_func STORE)'
-'VOID *note gnutls_tdb_set_store_commitment_func:: (gnutls_tdb_t TDB, gnutls_tdb_store_commitment_func CSTORE)'
+`VOID *note gnutls_tdb_set_store_func:: (gnutls_tdb_t TDB, gnutls_tdb_store_func STORE)'
+
+`VOID *note gnutls_tdb_set_store_commitment_func:: (gnutls_tdb_t TDB, gnutls_tdb_store_commitment_func CSTORE)'
 
 6.12.2.2 DANE verification
 ..........................
 
-Since the DANE library is not included in GnuTLS it requires programs to
-be linked against it.  This can be achieved with the following commands.
+Since the DANE library is not included in GnuTLS it requires programs
+to be linked against it. This can be achieved with the following
+commands.
 
-     gcc -o foo foo.c `pkg-config gnutls-dane --cflags --libs`
+    gcc -o foo foo.c `pkg-config gnutls-dane --cflags --libs`
 
 When a program uses the GNU autoconf system, then the following line or
 similar can be used to detect the presence of the library.
 
-     PKG_CHECK_MODULES([LIBDANE], [gnutls-dane >= 3.0.0])
+    PKG_CHECK_MODULES([LIBDANE], [gnutls-dane >= 3.0.0])
 
-     AC_SUBST([LIBDANE_CFLAGS])
-     AC_SUBST([LIBDANE_LIBS])
+    AC_SUBST([LIBDANE_CFLAGS])
+    AC_SUBST([LIBDANE_LIBS])
 
 The high level functionality provided by the DANE library is shown
 below.
 
  -- Function: int dane_verify_crt (dane_state_t S, const gnutls_datum_t
           * CHAIN, unsigned CHAIN_SIZE, gnutls_certificate_type_t
-          CHAIN_TYPE, const char * HOSTNAME, const char* PROTO, unsigned
-          int PORT, unsigned int SFLAGS, unsigned int VFLAGS, unsigned
-          int * VERIFY)
+          CHAIN_TYPE, const char * HOSTNAME, const char* PROTO,
+          unsigned int PORT, unsigned int SFLAGS, unsigned int VFLAGS,
+          unsigned int * VERIFY)
      S: A DANE state structure (may be NULL)
 
      CHAIN: A certificate chain
@@ -1105,52 +1039,55 @@ below.
 
      HOSTNAME: The hostname associated with the chain
 
-     PROTO: The protocol of the service connecting (e.g.  tcp)
+     PROTO: The protocol of the service connecting (e.g. tcp)
 
-     PORT: The port of the service connecting (e.g.  443)
+     PORT: The port of the service connecting (e.g. 443)
 
-     SFLAGS: Flags for the the initialization of 's' (if NULL)
+     SFLAGS: Flags for the the initialization of  `s' (if NULL)
 
-     VFLAGS: Verification flags; an OR'ed list of 'dane_verify_flags_t'
+     VFLAGS: Verification flags; an OR'ed list of `dane_verify_flags_t'
      .
 
-     VERIFY: An OR'ed list of 'dane_verify_status_t' .
+     VERIFY: An OR'ed list of `dane_verify_status_t' .
 
      This function will verify the given certificate chain against the
-     CA constrains and/or the certificate available via DANE. If no
+     CA constrains and/or the certificate available via DANE.  If no
      information via DANE can be obtained the flag
-     'DANE_VERIFY_NO_DANE_INFO' is set.  If a DNSSEC signature is not
+     `DANE_VERIFY_NO_DANE_INFO' is set. If a DNSSEC signature is not
      available for the DANE record then the verify flag
-     'DANE_VERIFY_NO_DNSSEC_DATA' is set.
+     `DANE_VERIFY_NO_DNSSEC_DATA'  is set.
 
      Note that the CA constraint only applies for the directly
      certifying CA and does not account for long CA chains.
 
      Due to the many possible options of DANE, there is no single threat
-     model countered.  When notifying the user about DANE verification
+     model countered. When notifying the user about DANE verification
      results it may be better to mention: DANE verification did not
      reject the certificate, rather than mentioning a successful DANE
      verication.
 
-     If the 'q' parameter is provided it will be used for caching
+     If the  `q' parameter is provided it will be used for caching
      entries.
 
-     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
-     a negative error value.
+     *Returns:* On success, `DANE_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+`INT *note dane_verify_session_crt:: (dane_state_t S, gnutls_session_t SESSION, const char * HOSTNAME, const char* PROTO, unsigned int PORT, unsigned int SFLAGS, unsigned int VFLAGS, unsigned int * VERIFY)'
 
-'INT *note dane_verify_session_crt:: (dane_state_t S, gnutls_session_t SESSION, const char * HOSTNAME, const char* PROTO, unsigned int PORT, unsigned int SFLAGS, unsigned int VFLAGS, unsigned int * VERIFY)'
-'CONST CHAR * *note dane_strerror:: (int ERROR)'
+`CONST CHAR * *note dane_strerror:: (int ERROR)'
 
-Note that the 'dane_state_t' structure that is accepted by both
-verification functions is optional.  It is required when many queries
+Note that the `dane_state_t' structure that is accepted by both
+verification functions is optional. It is required when many queries
 are performed to facilitate caching.  The following flags are returned
 by the verify functions to indicate the status of the verification.
 
-'DANE_VERIFY_CA_CONSTRAINTS_VIOLATED'
+`DANE_VERIFY_CA_CONSTRAINTS_VIOLATED'
      The CA constrains was violated.
-'DANE_VERIFY_CERT_DIFFERS'
+
+`DANE_VERIFY_CERT_DIFFERS'
      The certificate obtained via DNS differs.
-'DANE_VERIFY_NO_DANE_INFO'
+
+`DANE_VERIFY_NO_DANE_INFO'
      No DANE data were found in the DNS record.
 
 Figure 6.2: The DANE verification status flags.
@@ -1165,46 +1102,52 @@ File: gnutls.info,  Node: Parameter generation,  Next: Keying Material Exporters
 ---------------------------
 
 Several TLS ciphersuites require additional parameters that need to be
-generated or provided by the application.  The Diffie-Hellman based
+generated or provided by the application. The Diffie-Hellman based
 ciphersuites (ANON-DH or DHE), require the group parameters to be
-provided.  Those can either be be generated on the fly using *note
+provided. Those can either be be generated on the fly using *note
 gnutls_dh_params_generate2:: or imported from pregenerated data using
 *note gnutls_dh_params_import_pkcs3::.  The parameters can be used in a
-TLS session by calling *note gnutls_certificate_set_dh_params:: or *note
-gnutls_anon_set_server_dh_params:: for anonymous sessions.
+TLS session by calling *note gnutls_certificate_set_dh_params:: or
+*note gnutls_anon_set_server_dh_params:: for anonymous sessions.
+
+`INT *note gnutls_dh_params_generate2:: (gnutls_dh_params_t PARAMS, unsigned int BITS)'
+
+`INT *note gnutls_dh_params_import_pkcs3:: (gnutls_dh_params_t PARAMS, const gnutls_datum_t * PKCS3_PARAMS, gnutls_x509_crt_fmt_t FORMAT)'
 
-'INT *note gnutls_dh_params_generate2:: (gnutls_dh_params_t PARAMS, unsigned int BITS)'
-'INT *note gnutls_dh_params_import_pkcs3:: (gnutls_dh_params_t PARAMS, const gnutls_datum_t * PKCS3_PARAMS, gnutls_x509_crt_fmt_t FORMAT)'
-'VOID *note gnutls_certificate_set_dh_params:: (gnutls_certificate_credentials_t RES, gnutls_dh_params_t DH_PARAMS)'
-'VOID *note gnutls_anon_set_server_dh_params:: (gnutls_anon_server_credentials_t RES, gnutls_dh_params_t DH_PARAMS)'
+`VOID *note gnutls_certificate_set_dh_params:: (gnutls_certificate_credentials_t RES, gnutls_dh_params_t DH_PARAMS)'
+
+`VOID *note gnutls_anon_set_server_dh_params:: (gnutls_anon_server_credentials_t RES, gnutls_dh_params_t DH_PARAMS)'
 
 Due to the time-consuming calculations required for the generation of
 Diffie-Hellman parameters we suggest against performing generation of
-them within an application.  The 'certtool' tool can be used to generate
+them within an application. The `certtool' tool can be used to generate
 or export known safe values that can be stored in code or in a
-configuration file to provide the ability to replace.  We also recommend
+configuration file to provide the ability to replace. We also recommend
 the usage of *note gnutls_sec_param_to_pk_bits:: (see *note Selecting
 cryptographic key sizes::) to determine the bit size of the generated
 parameters.
 
 Note that the information stored in the generated PKCS #3 structure
-changed with GnuTLS 3.0.9.  Since that version the 'privateValueLength'
+changed with GnuTLS 3.0.9. Since that version the `privateValueLength'
 member of the structure is set, allowing the server utilizing the
-parameters to use keys of the size of the security parameter.  This
+parameters to use keys of the size of the security parameter. This
 provides better performance in key exchange.
 
 The ciphersuites that involve the RSA-EXPORT key exchange require
-additional parameters.  Those ciphersuites are rarely used today because
+additional parameters. Those ciphersuites are rarely used today because
 they are by design insecure, thus if you have no requirement for them,
-the rest of this section can be skipped.  The RSA-EXPORT key exchange
-requires 512-bit RSA keys to be generated.  It is recommended those
-parameters to be refreshed (regenerated) in short intervals.  The
+the rest of this section can be skipped. The RSA-EXPORT key exchange
+requires 512-bit RSA keys to be generated. It is recommended those
+parameters to be refreshed (regenerated) in short intervals. The
 following functions can be used for these parameters.
 
-'INT *note gnutls_rsa_params_generate2:: (gnutls_rsa_params_t PARAMS, unsigned int BITS)'
-'VOID *note gnutls_certificate_set_rsa_export_params:: (gnutls_certificate_credentials_t RES, gnutls_rsa_params_t RSA_PARAMS)'
-'INT *note gnutls_rsa_params_import_pkcs1:: (gnutls_rsa_params_t PARAMS, const gnutls_datum_t * PKCS1_PARAMS, gnutls_x509_crt_fmt_t FORMAT)'
-'INT *note gnutls_rsa_params_export_pkcs1:: (gnutls_rsa_params_t PARAMS, gnutls_x509_crt_fmt_t FORMAT, unsigned char * PARAMS_DATA, size_t * PARAMS_DATA_SIZE)'
+`INT *note gnutls_rsa_params_generate2:: (gnutls_rsa_params_t PARAMS, unsigned int BITS)'
+
+`VOID *note gnutls_certificate_set_rsa_export_params:: (gnutls_certificate_credentials_t                                           RES, gnutls_rsa_params_t RSA_PARAMS)'
+
+`INT *note gnutls_rsa_params_import_pkcs1:: (gnutls_rsa_params_t PARAMS, const gnutls_datum_t * PKCS1_PARAMS, gnutls_x509_crt_fmt_t FORMAT)'
+
+`INT *note gnutls_rsa_params_export_pkcs1:: (gnutls_rsa_params_t PARAMS, gnutls_x509_crt_fmt_t FORMAT, unsigned char * PARAMS_DATA, size_t * PARAMS_DATA_SIZE)'
 
 To allow renewal of the parameters within an application without
 accessing the credentials, which are a shared structure, an alternative
@@ -1219,8 +1162,8 @@ interface is available using a callback function.
 
      This function will set a callback in order for the server to get
      the Diffie-Hellman or RSA parameters for certificate
-     authentication.  The callback should return 'GNUTLS_E_SUCCESS' (0)
-     on success.
+     authentication.  The callback should return `GNUTLS_E_SUCCESS'
+     (0) on success.
 
 
 File: gnutls.info,  Node: Keying Material Exporters,  Next: Channel Bindings,  Prev: Parameter generation,  Up: Advanced topics
@@ -1230,19 +1173,19 @@ File: gnutls.info,  Node: Keying Material Exporters,  Next: Channel Bindings,  P
 
 The TLS PRF can be used by other protocols to derive keys based on the
 TLS master secret.  The API to use is *note gnutls_prf::.  The function
-needs to be provided with the label in the parameter 'label', and the
-extra data to mix in the 'extra' parameter.  Depending on whether you
+needs to be provided with the label in the parameter `label', and the
+extra data to mix in the `extra' parameter.  Depending on whether you
 want to mix in the client or server random data first, you can set the
-'server_random_first' parameter.
+`server_random_first' parameter.
 
 For example, after establishing a TLS session using *note
 gnutls_handshake::, you can invoke the TLS PRF with this call:
 
-     #define MYLABEL "EXPORTER-FOO"
-     #define MYCONTEXT "some context data"
-     char out[32];
-     rc = gnutls_prf (session, strlen (MYLABEL), MYLABEL, 0,
-                      strlen (MYCONTEXT), MYCONTEXT, 32, out);
+    #define MYLABEL "EXPORTER-FOO"
+    #define MYCONTEXT "some context data"
+    char out[32];
+    rc = gnutls_prf (session, strlen (MYLABEL), MYLABEL, 0,
+                     strlen (MYCONTEXT), MYCONTEXT, 32, out);
 
 If you don't want to mix in the client/server random, there is a
 low-level TLS PRF interface called *note gnutls_prf_raw::.
@@ -1262,31 +1205,31 @@ background and discussion see [_RFC5056_].
 
 In GnuTLS you can extract a channel binding using the *note
 gnutls_session_channel_binding:: function.  Currently only the type
-'GNUTLS_CB_TLS_UNIQUE' is supported, which corresponds to the
-'tls-unique' channel binding for TLS defined in [_RFC5929_].
+`GNUTLS_CB_TLS_UNIQUE' is supported, which corresponds to the
+`tls-unique' channel binding for TLS defined in [_RFC5929_].
 
 The following example describes how to print the channel binding data.
 Note that it must be run after a successful TLS handshake.
 
-     {
-       gnutls_datum_t cb;
-       int rc;
-
-       rc = gnutls_session_channel_binding (session,
-                                            GNUTLS_CB_TLS_UNIQUE,
-                                            &cb);
-       if (rc)
-         fprintf (stderr, "Channel binding error: %s\n",
-                  gnutls_strerror (rc));
-       else
-         {
-           size_t i;
-           printf ("- Channel binding 'tls-unique': ");
-           for (i = 0; i < cb.size; i++)
-             printf ("%02x", cb.data[i]);
-           printf ("\n");
-         }
-     }
+    {
+      gnutls_datum_t cb;
+      int rc;
+
+      rc = gnutls_session_channel_binding (session,
+                                           GNUTLS_CB_TLS_UNIQUE,
+                                           &cb);
+      if (rc)
+        fprintf (stderr, "Channel binding error: %s\n",
+                 gnutls_strerror (rc));
+      else
+        {
+          size_t i;
+          printf ("- Channel binding 'tls-unique': ");
+          for (i = 0; i < cb.size; i++)
+            printf ("%02x", cb.data[i]);
+          printf ("\n");
+        }
+    }
 
 
 File: gnutls.info,  Node: Interoperability,  Next: Compatibility with the OpenSSL library,  Prev: Channel Bindings,  Up: Advanced topics
@@ -1295,17 +1238,17 @@ File: gnutls.info,  Node: Interoperability,  Next: Compatibility with the OpenSS
 -----------------------
 
 The TLS protocols support many ciphersuites, extensions and version
-numbers.  As a result, few implementations are not able to properly
-interoperate once faced with extensions or version protocols they do not
-support and understand.  The TLS protocol allows for a graceful
+numbers. As a result, few implementations are not able to properly
+interoperate once faced with extensions or version protocols they do
+not support and understand. The TLS protocol allows for a graceful
 downgrade to the commonly supported options, but practice shows it is
 not always implemented correctly.
 
 Because there is no way to achieve maximum interoperability with broken
 peers without sacrificing security, GnuTLS ignores such peers by
 default.  This might not be acceptable in cases where maximum
-compatibility is required.  Thus we allow enabling compatibility with
-broken peers using priority strings (see *note Priority Strings::).  A
+compatibility is required. Thus we allow enabling compatibility with
+broken peers using priority strings (see *note Priority Strings::). A
 conservative priority string that would disable certain TLS protocol
 options that are known to cause compatibility problems, is shown below.
 NORMAL:%COMPAT
@@ -1313,11 +1256,11 @@ NORMAL:%COMPAT
 For broken peers that do not tolerate TLS version numbers over TLS 1.0
 another priority string is:
 NORMAL:-VERS-TLS-ALL:+VERS-TLS1.0:+VERS-SSL3.0:%COMPAT
-This priority string will in addition to above, only enable SSL 3.0 and
-TLS 1.0 as protocols.  Note however that there are known attacks against
-those protocol versions, especially over the CBC-mode ciphersuites.  To
-mitigate them another priority string that only allows the stream cipher
-ARCFOUR is below.
+ This priority string will in addition to above, only enable SSL 3.0 and
+TLS 1.0 as protocols. Note however that there are known attacks against
+those protocol versions, especially over the CBC-mode ciphersuites. To
+mitigate them another priority string that only allows the stream
+cipher ARCFOUR is below.
 NORMAL:-VERS-TLS-ALL:+VERS-TLS1.0:+VERS-SSL3.0:-CIPHER-ALL:+ARCFOUR-128:%COMPAT
 
 
@@ -1327,17 +1270,18 @@ File: gnutls.info,  Node: Compatibility with the OpenSSL library,  Prev: Interop
 ---------------------------------------------
 
 To ease GnuTLS' integration with existing applications, a compatibility
-layer with the OpenSSL library is included in the 'gnutls-openssl'
-library.  This compatibility layer is not complete and it is not
+layer with the OpenSSL library is included in the `gnutls-openssl'
+library. This compatibility layer is not complete and it is not
 intended to completely re-implement the OpenSSL API with GnuTLS.  It
 only provides limited source-level compatibility.
 
 The prototypes for the compatibility functions are in the
-'gnutls/openssl.h' header file.  The limitations imposed by the
+`gnutls/openssl.h' header file. The limitations imposed by the
 compatibility layer include:
 
    * Error handling is not thread safe.
 
+
 
 File: gnutls.info,  Node: GnuTLS application examples,  Next: Using GnuTLS as a cryptographic library,  Prev: How to use GnuTLS in applications,  Up: Top
 
@@ -1389,7 +1333,7 @@ File: gnutls.info,  Node: Simple client example with X.509 certificate support,
 ----------------------------------------------------------
 
 Let's assume now that we want to create a TCP client which communicates
-with servers that use X.509 or OpenPGP certificate authentication.  The
+with servers that use X.509 or OpenPGP certificate authentication. The
 following client is a very simple TLS client, which uses the high level
 verification functions for certificates, but does not support session
 resumption.
@@ -1586,7 +1530,6 @@ _verify_certificate_callback (gnutls_session_t session)
   return 0;
 }
 
-
 
 File: gnutls.info,  Node: Simple client example with SSH-style certificate verification,  Next: Simple client example with anonymous authentication,  Prev: Simple client example with X.509 certificate support,  Up: Client examples
 
@@ -1595,7 +1538,7 @@ File: gnutls.info,  Node: Simple client example with SSH-style certificate verif
 
 This is an alternative verification function that will use the X.509
 certificate authorities for verification, but also assume an trust on
-first use (SSH-like) authentication system.  That is the user is
+first use (SSH-like) authentication system. That is the user is
 prompted on unknown public keys and known public keys are considered
 trusted.
 
@@ -1711,7 +1654,6 @@ _ssh_verify_certificate_callback (gnutls_session_t session)
   return 0;
 }
 
-
 
 File: gnutls.info,  Node: Simple client example with anonymous authentication,  Next: Simple Datagram TLS client example,  Prev: Simple client example with SSH-style certificate verification,  Up: Client examples
 
@@ -1856,7 +1798,7 @@ File: gnutls.info,  Node: Simple Datagram TLS client example,  Next: Obtaining s
 7.1.4 Simple datagram TLS client example
 ----------------------------------------
 
-This is a client that uses UDP to connect to a server.  This is the DTLS
+This is a client that uses UDP to connect to a server. This is the DTLS
 equivalent to the TLS example with X.509 certificates.
 
 /* This example code is placed in the public domain. */
@@ -2007,11 +1949,11 @@ File: gnutls.info,  Node: Obtaining session information,  Next: Using a callback
 7.1.5 Obtaining session information
 -----------------------------------
 
-Most of the times it is desirable to know the security properties of the
-current established session.  This includes the underlying ciphers and
-the protocols involved.  That is the purpose of the following function.
-Note that this function will print meaningful values only if called
-after a successful *note gnutls_handshake::.
+Most of the times it is desirable to know the security properties of
+the current established session.  This includes the underlying ciphers
+and the protocols involved.  That is the purpose of the following
+function.  Note that this function will print meaningful values only if
+called after a successful *note gnutls_handshake::.
 
 /* This example code is placed in the public domain. */
 
@@ -2750,8 +2692,8 @@ File: gnutls.info,  Node: Client with Resume capability example,  Next: Simple c
 7.1.9 Client with resume capability example
 -------------------------------------------
 
-This is a modification of the simple client example.  Here we
-demonstrate the use of session resumption.  The client tries to connect
+This is a modification of the simple client example. Here we
+demonstrate the use of session resumption. The client tries to connect
 once using TLS, close the connection and then try to establish a new
 connection using the previously negotiated data.
 
@@ -2917,8 +2859,8 @@ File: gnutls.info,  Node: Simple client example with SRP authentication,  Next:
 7.1.10 Simple client example with SRP authentication
 ----------------------------------------------------
 
-The following client is a very simple SRP TLS client which connects to a
-server and authenticates using a _username_ and a _password_.  The
+The following client is a very simple SRP TLS client which connects to
+a server and authenticates using a _username_ and a _password_. The
 server may authenticate itself using a certificate, and in that case it
 has to be verified.
 
@@ -3525,9 +3467,9 @@ File: gnutls.info,  Node: Echo server with OpenPGP authentication,  Next: Echo s
 ---------------------------------------------
 
 The following example is an echo server which supports OpenPGP key
-authentication.  You can easily combine this functionality --that is
-have a server that supports both X.509 and OpenPGP certificates-- but we
-separated them to keep these examples as simple as possible.
+authentication. You can easily combine this functionality --that is
+have a server that supports both X.509 and OpenPGP certificates-- but
+we separated them to keep these examples as simple as possible.
 
 /* This example code is placed in the public domain. */
 
@@ -3713,8 +3655,8 @@ File: gnutls.info,  Node: Echo server with SRP authentication,  Next: Echo serve
 7.2.3 Echo server with SRP authentication
 -----------------------------------------
 
-This is a server which supports SRP authentication.  It is also possible
-to combine this functionality with a certificate server.  Here it is
+This is a server which supports SRP authentication. It is also possible
+to combine this functionality with a certificate server. Here it is
 separate for simplicity.
 
 /* This example code is placed in the public domain. */
@@ -3893,8 +3835,8 @@ File: gnutls.info,  Node: Echo server with anonymous authentication,  Next: DTLS
 7.2.4 Echo server with anonymous authentication
 -----------------------------------------------
 
-This example server supports anonymous authentication, and could be used
-to serve the example client for anonymous authentication.
+This example server supports anonymous authentication, and could be
+used to serve the example client for anonymous authentication.
 
 /* This example code is placed in the public domain. */
 
@@ -5247,10 +5189,11 @@ File: gnutls.info,  Node: XSSL examples,  Prev: Miscellaneous examples,  Up: Gnu
 7.5 XSSL examples
 =================
 
-XSSL is an experimental API available in the 'gnutls-xssl' library and
-in 'gnutls/xssl.h' header.  It is intended to be a very simple to use
+XSSL is an experimental API available in the `gnutls-xssl' library and
+in `gnutls/xssl.h' header. It is intended to be a very simple to use
 API avoid the GnuTLS API. The API however has the following limitations
    * It is applicable to blocking sockets only.
+
    * The server verification is based on its DNS name.
 
 * Menu:
@@ -5348,8 +5291,6 @@ int main (void)
   gnutls_global_deinit ();
 }
 
-
-
 
 File: gnutls.info,  Node: Example client with X.509 certificate authentication and TOFU,  Prev: Example client with X.509 certificate authentication,  Up: XSSL examples
 
@@ -5462,7 +5403,7 @@ File: gnutls.info,  Node: Using GnuTLS as a cryptographic library,  Next: Other
 *****************************************
 
 GnuTLS is not a low-level cryptographic library, i.e., it does not
-provide access to basic cryptographic primitives.  However it abstracts
+provide access to basic cryptographic primitives. However it abstracts
 the internal cryptographic back-end (see *note Cryptographic Backend::),
 providing symmetric crypto, hash and HMAC algorithms, as well access to
 the random number generation.
@@ -5481,21 +5422,26 @@ File: gnutls.info,  Node: Symmetric algorithms,  Next: Public key algorithms,  U
 ========================
 
 The available functions to access symmetric crypto algorithms operations
-are shown below.  The supported algorithms are the algorithms required
+are shown below. The supported algorithms are the algorithms required
 by the TLS protocol.  They are listed in *note Table 3.1: tab:ciphers.
 
-'INT *note gnutls_cipher_init:: (gnutls_cipher_hd_t * HANDLE, gnutls_cipher_algorithm_t CIPHER, const gnutls_datum_t * KEY, const gnutls_datum_t * IV)'
-'INT *note gnutls_cipher_encrypt2:: (gnutls_cipher_hd_t HANDLE, const void * TEXT, size_t TEXTLEN, void * CIPHERTEXT, size_t CIPHERTEXTLEN)'
-'INT *note gnutls_cipher_decrypt2:: (gnutls_cipher_hd_t HANDLE, const void * CIPHERTEXT, size_t CIPHERTEXTLEN, void * TEXT, size_t TEXTLEN)'
-'VOID *note gnutls_cipher_set_iv:: (gnutls_cipher_hd_t HANDLE, void * IV, size_t IVLEN)'
-'VOID *note gnutls_cipher_deinit:: (gnutls_cipher_hd_t HANDLE)'
+`INT *note gnutls_cipher_init:: (gnutls_cipher_hd_t * HANDLE, gnutls_cipher_algorithm_t CIPHER, const gnutls_datum_t * KEY, const gnutls_datum_t * IV)'
+
+`INT *note gnutls_cipher_encrypt2:: (gnutls_cipher_hd_t HANDLE, const void * TEXT, size_t TEXTLEN, void * CIPHERTEXT, size_t CIPHERTEXTLEN)'
+
+`INT *note gnutls_cipher_decrypt2:: (gnutls_cipher_hd_t HANDLE, const void * CIPHERTEXT, size_t CIPHERTEXTLEN, void * TEXT, size_t TEXTLEN)'
+
+`VOID *note gnutls_cipher_set_iv:: (gnutls_cipher_hd_t HANDLE, void * IV, size_t IVLEN)'
 
-In order to support authenticated encryption with associated data (AEAD)
-algorithms the following functions are provided to set the associated
-data and retrieve the authentication tag.
+`VOID *note gnutls_cipher_deinit:: (gnutls_cipher_hd_t HANDLE)'
 
-'INT *note gnutls_cipher_add_auth:: (gnutls_cipher_hd_t HANDLE, const void * TEXT, size_t TEXT_SIZE)'
-'INT *note gnutls_cipher_tag:: (gnutls_cipher_hd_t HANDLE, void * TAG, size_t TAG_SIZE)'
+In order to support authenticated encryption with associated data
+(AEAD) algorithms the following functions are provided to set the
+associated data and retrieve the authentication tag.
+
+`INT *note gnutls_cipher_add_auth:: (gnutls_cipher_hd_t HANDLE, const void * TEXT, size_t TEXT_SIZE)'
+
+`INT *note gnutls_cipher_tag:: (gnutls_cipher_hd_t HANDLE, void * TAG, size_t TAG_SIZE)'
 
 
 File: gnutls.info,  Node: Public key algorithms,  Next: Hash and HMAC functions,  Prev: Symmetric algorithms,  Up: Using GnuTLS as a cryptographic library
@@ -5504,9 +5450,9 @@ File: gnutls.info,  Node: Public key algorithms,  Next: Hash and HMAC functions,
 =========================
 
 Public key cryptography algorithms such as RSA, DSA and ECDSA, can be
-accessed using the abstract key API in *note Abstract key types::.  This
-is a high level API with the advantage of transparently handling keys in
-memory and keys present in smart cards.
+accessed using the abstract key API in *note Abstract key types::. This
+is a high level API with the advantage of transparently handling keys
+in memory and keys present in smart cards.
 
 
 File: gnutls.info,  Node: Hash and HMAC functions,  Next: Random number generation,  Prev: Public key algorithms,  Up: Using GnuTLS as a cryptographic library
@@ -5515,27 +5461,38 @@ File: gnutls.info,  Node: Hash and HMAC functions,  Next: Random number generati
 ===========================
 
 The available operations to access hash functions and hash-MAC (HMAC)
-algorithms are shown below.  HMAC algorithms provided keyed hash
-functionality.  They supported HMAC algorithms are listed in *note Table
+algorithms are shown below. HMAC algorithms provided keyed hash
+functionality. They supported HMAC algorithms are listed in *note Table
 3.2: tab:macs.
 
-'INT *note gnutls_hmac_init:: (gnutls_hmac_hd_t * DIG, gnutls_mac_algorithm_t ALGORITHM, const void * KEY, size_t KEYLEN)'
-'INT *note gnutls_hmac:: (gnutls_hmac_hd_t HANDLE, const void * TEXT, size_t TEXTLEN)'
-'VOID *note gnutls_hmac_output:: (gnutls_hmac_hd_t HANDLE, void * DIGEST)'
-'VOID *note gnutls_hmac_deinit:: (gnutls_hmac_hd_t HANDLE, void * DIGEST)'
-'INT *note gnutls_hmac_get_len:: (gnutls_mac_algorithm_t ALGORITHM)'
-'INT *note gnutls_hmac_fast:: (gnutls_mac_algorithm_t ALGORITHM, const void * KEY, size_t KEYLEN, const void * TEXT, size_t TEXTLEN, void * DIGEST)'
+`INT *note gnutls_hmac_init:: (gnutls_hmac_hd_t * DIG, gnutls_mac_algorithm_t ALGORITHM, const void * KEY, size_t KEYLEN)'
+
+`INT *note gnutls_hmac:: (gnutls_hmac_hd_t HANDLE, const void * TEXT, size_t TEXTLEN)'
+
+`VOID *note gnutls_hmac_output:: (gnutls_hmac_hd_t HANDLE, void * DIGEST)'
 
-The available functions to access hash functions are shown below.  The
+`VOID *note gnutls_hmac_deinit:: (gnutls_hmac_hd_t HANDLE, void * DIGEST)'
+
+`INT *note gnutls_hmac_get_len:: (gnutls_mac_algorithm_t ALGORITHM)'
+
+`INT *note gnutls_hmac_fast:: (gnutls_mac_algorithm_t ALGORITHM, const void * KEY, size_t KEYLEN, const void * TEXT, size_t TEXTLEN, void * DIGEST)'
+
+The available functions to access hash functions are shown below. The
 supported hash functions are the same as the HMAC algorithms.
 
-'INT *note gnutls_hash_init:: (gnutls_hash_hd_t * DIG, gnutls_digest_algorithm_t ALGORITHM)'
-'INT *note gnutls_hash:: (gnutls_hash_hd_t HANDLE, const void * TEXT, size_t TEXTLEN)'
-'VOID *note gnutls_hash_output:: (gnutls_hash_hd_t HANDLE, void * DIGEST)'
-'VOID *note gnutls_hash_deinit:: (gnutls_hash_hd_t HANDLE, void * DIGEST)'
-'INT *note gnutls_hash_get_len:: (gnutls_digest_algorithm_t ALGORITHM)'
-'INT *note gnutls_hash_fast:: (gnutls_digest_algorithm_t ALGORITHM, const void * TEXT, size_t TEXTLEN, void * DIGEST)'
-'INT *note gnutls_fingerprint:: (gnutls_digest_algorithm_t ALGO, const gnutls_datum_t * DATA, void * RESULT, size_t * RESULT_SIZE)'
+`INT *note gnutls_hash_init:: (gnutls_hash_hd_t * DIG, gnutls_digest_algorithm_t ALGORITHM)'
+
+`INT *note gnutls_hash:: (gnutls_hash_hd_t HANDLE, const void * TEXT, size_t TEXTLEN)'
+
+`VOID *note gnutls_hash_output:: (gnutls_hash_hd_t HANDLE, void * DIGEST)'
+
+`VOID *note gnutls_hash_deinit:: (gnutls_hash_hd_t HANDLE, void * DIGEST)'
+
+`INT *note gnutls_hash_get_len:: (gnutls_digest_algorithm_t ALGORITHM)'
+
+`INT *note gnutls_hash_fast:: (gnutls_digest_algorithm_t ALGORITHM, const void * TEXT, size_t TEXTLEN, void * DIGEST)'
+
+`INT *note gnutls_fingerprint:: (gnutls_digest_algorithm_t ALGO, const gnutls_datum_t * DATA, void * RESULT, size_t * RESULT_SIZE)'
 
 
 File: gnutls.info,  Node: Random number generation,  Prev: Hash and HMAC functions,  Up: Using GnuTLS as a cryptographic library
@@ -5544,16 +5501,18 @@ File: gnutls.info,  Node: Random number generation,  Prev: Hash and HMAC functio
 ============================
 
 Access to the random number generator is provided using the *note
-gnutls_rnd:: function.  It allows obtaining random data of various
+gnutls_rnd:: function. It allows obtaining random data of various
 levels.
 
-'GNUTLS_RND_NONCE'
+`GNUTLS_RND_NONCE'
      Non-predictable random number.  Fatal in parts of session if
      broken, i.e., vulnerable to statistical analysis.
-'GNUTLS_RND_RANDOM'
+
+`GNUTLS_RND_RANDOM'
      Pseudo-random cryptographic random number.  Fatal in session if
      broken.
-'GNUTLS_RND_KEY'
+
+`GNUTLS_RND_KEY'
      Fatal in many sessions if broken.
 
 Figure 8.1: The random number levels.
@@ -5596,109 +5555,110 @@ File: gnutls.info,  Node: gnutls-cli Invocation,  Next: gnutls-serv Invocation,
 =======================
 
 Simple client program to set up a TLS connection to some other computer.
-It sets up a TLS connection and forwards data from the standard input to
-the secured socket and vice versa.
+It sets up a TLS connection and forwards data from the standard input
+to the secured socket and vice versa.
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'gnutls-cli' program.  This software
-is released under the GNU General Public License, version 3 or later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `gnutls-cli' program.
+This software is released under the GNU General Public License, version
+3 or later.
 
-gnutls-cli help/usage ('--help')
+gnutls-cli help/usage (`--help')
 --------------------------------
 
 This is the automatically generated usage text for gnutls-cli.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
-
-     gnutls-cli - GnuTLS client - Ver. @VERSION@
-     USAGE:  lt-gnutls-cli [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [hostname]
-
-        -d, --debug=num            Enable debugging.
-                                     - It must be in the range:
-                                       0 to 9999
-        -V, --verbose              More verbose output
-                                     - may appear multiple times
-            --tofu                 Enable trust on first use authentication
-                                     - disabled as --no-tofu
-            --dane                 Enable DANE certificate verification (DNSSEC)
-                                     - disabled as --no-dane
-            --local-dns            Use the local DNS server for DNSSEC resolving.
-                                     - disabled as --no-local-dns
-            --ca-verification      Disable CA certificate verification
-                                     - disabled as --no-ca-verification
-                                     - enabled by default
-            --ocsp                 Enable OCSP certificate verification
-                                     - disabled as --no-ocsp
-        -r, --resume               Establish a session and resume
-        -b, --heartbeat            Activate heartbeat support
-        -e, --rehandshake          Establish a session and rehandshake
-            --noticket             Don't accept session tickets
-        -s, --starttls             Connect, establish a plain session and start TLS.
-        -u, --udp                  Use DTLS (datagram TLS) over UDP
-            --mtu=num              Set MTU for datagram TLS
-                                     - It must be in the range:
-                                       0 to 17000
-            --srtp-profiles=str    Offer SRTP profiles
-            --crlf                 Send CR LF instead of LF
-            --x509fmtder           Use DER format for certificates to read from
-        -f, --fingerprint          Send the openpgp fingerprint, instead of the key
-            --disable-extensions   Disable all the TLS extensions
-            --print-cert           Print peer's certificate in PEM format
-            --recordsize=num       The maximum record size to advertize
-                                     - It must be in the range:
-                                       0 to 4096
-            --dh-bits=num          The minimum number of bits allowed for DH
-            --priority=str         Priorities string
-            --x509cafile=str       Certificate file or PKCS #11 URL to use
-            --x509crlfile=file     CRL file to use
-                                     - file must pre-exist
-            --pgpkeyfile=file      PGP Key file to use
-                                     - file must pre-exist
-            --pgpkeyring=file      PGP Key ring file to use
-                                     - file must pre-exist
-            --pgpcertfile=file     PGP Public Key (certificate) file to use
-                                     - file must pre-exist
-            --x509keyfile=str      X.509 key file or PKCS #11 URL to use
-            --x509certfile=str     X.509 Certificate file or PKCS #11 URL to use
-            --pgpsubkey=str        PGP subkey to use (hex or auto)
-            --srpusername=str      SRP username to use
-            --srppasswd=str        SRP password to use
-            --pskusername=str      PSK username to use
-            --pskkey=str           PSK key (in hex) to use
-        -p, --port=str             The port or service to connect to
-            --insecure             Don't abort program if server certificate can't be validated
-            --ranges               Use length-hiding padding to prevent traffic analysis
-            --benchmark-ciphers    Benchmark individual ciphers
-            --benchmark-soft-ciphers  Benchmark individual software ciphers (no hw acceleration)
-            --benchmark-tls-kx     Benchmark TLS key exchange methods
-            --benchmark-tls-ciphers  Benchmark TLS ciphers
-        -l, --list                 Print a list of the supported algorithms and modes
-            --disable-sni          Do not send a Server Name Indication (SNI)
-        -v, --version[=arg]        Output version information and exit
-        -h, --help                 Display extended usage information and exit
-        -!, --more-help            Extended usage information passed thru pager
-
-     Options are specified by doubled hyphens and their name or by a single
-     hyphen and the flag character.
-     Operands and options may be intermixed.  They will be reordered.
-
-
-
-     Simple client program to set up a TLS connection to some other computer.  It
-     sets up a TLS connection and forwards data from the standard input to the
-     secured socket and vice versa.
-
-     please send bug reports to:  bug-gnutls@gnu.org
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
+
+gnutls-cli - GnuTLS client - Ver. 3.1.13
+USAGE:  lt-gnutls-cli [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [hostname]
+
+   -d, --debug=num            Enable debugging.
+                                - It must be in the range:
+                                  0 to 9999
+   -V, --verbose              More verbose output
+                                - may appear multiple times
+       --tofu                 Enable trust on first use authentication
+                                - disabled as --no-tofu
+       --dane                 Enable DANE certificate verification (DNSSEC)
+                                - disabled as --no-dane
+       --local-dns            Use the local DNS server for DNSSEC resolving.
+                                - disabled as --no-local-dns
+       --ca-verification      Disable CA certificate verification
+                                - disabled as --no-ca-verification
+                                - enabled by default
+       --ocsp                 Enable OCSP certificate verification
+                                - disabled as --no-ocsp
+   -r, --resume               Establish a session and resume
+   -b, --heartbeat            Activate heartbeat support
+   -e, --rehandshake          Establish a session and rehandshake
+       --noticket             Don't accept session tickets
+   -s, --starttls             Connect, establish a plain session and start TLS.
+   -u, --udp                  Use DTLS (datagram TLS) over UDP
+       --mtu=num              Set MTU for datagram TLS
+                                - It must be in the range:
+                                  0 to 17000
+       --srtp-profiles=str    Offer SRTP profiles
+       --crlf                 Send CR LF instead of LF
+       --x509fmtder           Use DER format for certificates to read from
+   -f, --fingerprint          Send the openpgp fingerprint, instead of the key
+       --disable-extensions   Disable all the TLS extensions
+       --print-cert           Print peer's certificate in PEM format
+       --recordsize=num       The maximum record size to advertize
+                                - It must be in the range:
+                                  0 to 4096
+       --dh-bits=num          The minimum number of bits allowed for DH
+       --priority=str         Priorities string
+       --x509cafile=str       Certificate file or PKCS #11 URL to use
+       --x509crlfile=file     CRL file to use
+                                - file must pre-exist
+       --pgpkeyfile=file      PGP Key file to use
+                                - file must pre-exist
+       --pgpkeyring=file      PGP Key ring file to use
+                                - file must pre-exist
+       --pgpcertfile=file     PGP Public Key (certificate) file to use
+                                - file must pre-exist
+       --x509keyfile=str      X.509 key file or PKCS #11 URL to use
+       --x509certfile=str     X.509 Certificate file or PKCS #11 URL to use
+       --pgpsubkey=str        PGP subkey to use (hex or auto)
+       --srpusername=str      SRP username to use
+       --srppasswd=str        SRP password to use
+       --pskusername=str      PSK username to use
+       --pskkey=str           PSK key (in hex) to use
+   -p, --port=str             The port or service to connect to
+       --insecure             Don't abort program if server certificate can't be validated
+       --ranges               Use length-hiding padding to prevent traffic analysis
+       --benchmark-ciphers    Benchmark individual ciphers
+       --benchmark-soft-ciphers  Benchmark individual software ciphers (no hw acceleration)
+       --benchmark-tls-kx     Benchmark TLS key exchange methods
+       --benchmark-tls-ciphers  Benchmark TLS ciphers
+   -l, --list                 Print a list of the supported algorithms and modes
+       --disable-sni          Do not send a Server Name Indication (SNI)
+   -v, --version[=arg]        Output version information and exit
+   -h, --help                 Display extended usage information and exit
+   -!, --more-help            Extended usage information passed thru pager
+
+Options are specified by doubled hyphens and their name or by a single
+hyphen and the flag character.
+Operands and options may be intermixed.  They will be reordered.
+
+
+
+Simple client program to set up a TLS connection to some other computer.  It
+sets up a TLS connection and forwards data from the standard input to the
+secured socket and vice versa.
+
+please send bug reports to:  bug-gnutls@gnu.org
 
 debug option (-d)
 -----------------
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 tofu option
@@ -5720,8 +5680,8 @@ information available via DNSSEC.
 local-dns option
 ----------------
 
-This is the "use the local dns server for dnssec resolving."  option.
-This option will use the local DNS server for DNSSEC. This is disabled
+This is the "use the local dns server for dnssec resolving." option.
+This option will use the local DNS server for DNSSEC.  This is disabled
 by default due to many servers not allowing DNSSEC.
 
 ca-verification option
@@ -5732,7 +5692,7 @@ This is the "disable ca certificate verification" option.
 This option has some usage constraints.  It:
    * is enabled by default.
 
-This option will disable CA certificate verification.  It is to be used
+This option will disable CA certificate verification. It is to be used
 with the -dane or -tofu options.
 
 ocsp option
@@ -5744,8 +5704,8 @@ will enable verification of the peer's certificate using ocsp
 resume option (-r)
 ------------------
 
-This is the "establish a session and resume" option.  Connect, establish
-a session, reconnect and resume.
+This is the "establish a session and resume" option.  Connect,
+establish a session, reconnect and resume.
 
 rehandshake option (-e)
 -----------------------
@@ -5756,33 +5716,32 @@ establish a session and rehandshake immediately.
 starttls option (-s)
 --------------------
 
-This is the "connect, establish a plain session and start tls."  option.
+This is the "connect, establish a plain session and start tls." option.
 The TLS session will be initiated when EOF or a SIGALRM is received.
 
 disable-extensions option
 -------------------------
 
 This is the "disable all the tls extensions" option.  This option
-disables all TLS extensions.  Deprecated option.  Use the priority
-string.
+disables all TLS extensions. Deprecated option. Use the priority string.
 
 dh-bits option
 --------------
 
 This is the "the minimum number of bits allowed for dh" option.  This
-option takes an argument number.  This option sets the minimum number of
-bits allowed for a Diffie-Hellman key exchange.  You may want to lower
-the default value if the peer sends a weak prime and you get an
+option takes an argument number.  This option sets the minimum number
+of bits allowed for a Diffie-Hellman key exchange. You may want to
+lower the default value if the peer sends a weak prime and you get an
 connection error with unacceptable prime.
 
 priority option
 ---------------
 
 This is the "priorities string" option.  This option takes an argument
-string.  TLS algorithms and protocols to enable.  You can use predefined
+string.  TLS algorithms and protocols to enable. You can use predefined
 sets of ciphersuites such as PERFORMANCE, NORMAL, SECURE128, SECURE256.
 
-Check the GnuTLS manual on section "Priority strings" for more
+Check  the  GnuTLS  manual  on  section  "Priority strings" for more
 information on allowed keywords
 
 ranges option
@@ -5796,16 +5755,17 @@ list option (-l)
 ----------------
 
 This is the "print a list of the supported algorithms and modes" option.
-Print a list of the supported algorithms and modes.  If a priority
+Print a list of the supported algorithms and modes. If a priority
 string is given then only the enabled ciphersuites are shown.
 
 gnutls-cli exit status
 ----------------------
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 gnutls-cli See Also
@@ -5822,20 +5782,20 @@ Connecting using PSK authentication
 To connect to a server using PSK authentication, you need to enable the
 choice of PSK by using a cipher priority parameter such as in the
 example below.
-     $ ./gnutls-cli -p 5556 localhost --pskusername psk_identity \
-         --pskkey 88f3824b3e5659f52d00e959bacab954b6540344 \
-         --priority NORMAL:-KX-ALL:+ECDHE-PSK:+DHE-PSK:+PSK
-     Resolving 'localhost'...
-     Connecting to '127.0.0.1:5556'...
-     - PSK authentication.
-     - Version: TLS1.1
-     - Key Exchange: PSK
-     - Cipher: AES-128-CBC
-     - MAC: SHA1
-     - Compression: NULL
-     - Handshake was completed
-
-     - Simple Client Mode:
+    $ ./gnutls-cli -p 5556 localhost --pskusername psk_identity \
+        --pskkey 88f3824b3e5659f52d00e959bacab954b6540344 \
+        --priority NORMAL:-KX-ALL:+ECDHE-PSK:+DHE-PSK:+PSK
+    Resolving 'localhost'...
+    Connecting to '127.0.0.1:5556'...
+    - PSK authentication.
+    - Version: TLS1.1
+    - Key Exchange: PSK
+    - Cipher: AES-128-CBC
+    - MAC: SHA1
+    - Compression: NULL
+    - Handshake was completed
+
+    - Simple Client Mode:
 By keeping the -pskusername parameter and removing the -pskkey
 parameter, it will query only for the password during the handshake.
 
@@ -5843,20 +5803,20 @@ Listing ciphersuites in a priority string
 -----------------------------------------
 
 To list the ciphersuites in a priority string:
-     $ ./gnutls-cli --priority SECURE192 -l
-     Cipher suites for SECURE192
-     TLS_ECDHE_ECDSA_AES_256_CBC_SHA384         0xc0, 0x24	TLS1.2
-     TLS_ECDHE_ECDSA_AES_256_GCM_SHA384         0xc0, 0x2e	TLS1.2
-     TLS_ECDHE_RSA_AES_256_GCM_SHA384           0xc0, 0x30	TLS1.2
-     TLS_DHE_RSA_AES_256_CBC_SHA256             0x00, 0x6b	TLS1.2
-     TLS_DHE_DSS_AES_256_CBC_SHA256             0x00, 0x6a	TLS1.2
-     TLS_RSA_AES_256_CBC_SHA256                 0x00, 0x3d	TLS1.2
-
-     Certificate types: CTYPE-X.509
-     Protocols: VERS-TLS1.2, VERS-TLS1.1, VERS-TLS1.0, VERS-SSL3.0, VERS-DTLS1.0
-     Compression: COMP-NULL
-     Elliptic curves: CURVE-SECP384R1, CURVE-SECP521R1
-     PK-signatures: SIGN-RSA-SHA384, SIGN-ECDSA-SHA384, SIGN-RSA-SHA512, SIGN-ECDSA-SHA512
+    $ ./gnutls-cli --priority SECURE192 -l
+    Cipher suites for SECURE192
+    TLS_ECDHE_ECDSA_AES_256_CBC_SHA384         0xc0, 0x24	TLS1.2
+    TLS_ECDHE_ECDSA_AES_256_GCM_SHA384         0xc0, 0x2e	TLS1.2
+    TLS_ECDHE_RSA_AES_256_GCM_SHA384           0xc0, 0x30	TLS1.2
+    TLS_DHE_RSA_AES_256_CBC_SHA256             0x00, 0x6b	TLS1.2
+    TLS_DHE_DSS_AES_256_CBC_SHA256             0x00, 0x6a	TLS1.2
+    TLS_RSA_AES_256_CBC_SHA256                 0x00, 0x3d	TLS1.2
+
+    Certificate types: CTYPE-X.509
+    Protocols: VERS-TLS1.2, VERS-TLS1.1, VERS-TLS1.0, VERS-SSL3.0, VERS-DTLS1.0
+    Compression: COMP-NULL
+    Elliptic curves: CURVE-SECP384R1, CURVE-SECP521R1
+    PK-signatures: SIGN-RSA-SHA384, SIGN-ECDSA-SHA384, SIGN-RSA-SHA512, SIGN-ECDSA-SHA512
 
 
 File: gnutls.info,  Node: gnutls-serv Invocation,  Next: gnutls-cli-debug Invocation,  Prev: gnutls-cli Invocation,  Up: Other included programs
@@ -5866,91 +5826,91 @@ File: gnutls.info,  Node: gnutls-serv Invocation,  Next: gnutls-cli-debug Invoca
 
 Server program that listens to incoming TLS connections.
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'gnutls-serv' program.  This
-software is released under the GNU General Public License, version 3 or
-later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `gnutls-serv' program.
+This software is released under the GNU General Public License, version
+3 or later.
 
-gnutls-serv help/usage ('--help')
+gnutls-serv help/usage (`--help')
 ---------------------------------
 
 This is the automatically generated usage text for gnutls-serv.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
-
-     gnutls-serv - GnuTLS server - Ver. @VERSION@
-     USAGE:  lt-gnutls-serv [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
-
-        -d, --debug=num            Enable debugging.
-                                     - It must be in the range:
-                                       0 to 9999
-            --noticket             Don't accept session tickets
-        -g, --generate             Generate Diffie-Hellman and RSA-export parameters
-        -q, --quiet                Suppress some messages
-            --nodb                 Do not use a resumption database
-            --http                 Act as an HTTP server
-            --echo                 Act as an Echo server
-        -u, --udp                  Use DTLS (datagram TLS) over UDP
-            --mtu=num              Set MTU for datagram TLS
-                                     - It must be in the range:
-                                       0 to 17000
-            --srtp-profiles=str    Offer SRTP profiles
-        -a, --disable-client-cert  Do not request a client certificate
-        -r, --require-client-cert  Require a client certificate
-        -b, --heartbeat            Activate heartbeat support
-            --x509fmtder           Use DER format for certificates to read from
-            --priority=str         Priorities string
-            --dhparams=file        DH params file to use
-                                     - file must pre-exist
-            --x509cafile=str       Certificate file or PKCS #11 URL to use
-            --x509crlfile=file     CRL file to use
-                                     - file must pre-exist
-            --pgpkeyfile=file      PGP Key file to use
-                                     - file must pre-exist
-            --pgpkeyring=file      PGP Key ring file to use
-                                     - file must pre-exist
-            --pgpcertfile=file     PGP Public Key (certificate) file to use
-                                     - file must pre-exist
-            --x509keyfile=str      X.509 key file or PKCS #11 URL to use
-            --x509certfile=str     X.509 Certificate file or PKCS #11 URL to use
-            --x509dsakeyfile=str   Alternative X.509 key file or PKCS #11 URL to use
-            --x509dsacertfile=str  Alternative X.509 Certificate file or PKCS #11 URL to use
-            --x509ecckeyfile=str   Alternative X.509 key file or PKCS #11 URL to use
-            --x509ecccertfile=str  Alternative X.509 Certificate file or PKCS #11 URL to use
-            --pgpsubkey=str        PGP subkey to use (hex or auto)
-            --srppasswd=file       SRP password file to use
-                                     - file must pre-exist
-            --srppasswdconf=file   SRP password configuration file to use
-                                     - file must pre-exist
-            --pskpasswd=file       PSK password file to use
-                                     - file must pre-exist
-            --pskhint=str          PSK identity hint to use
-            --ocsp-response=file   The OCSP response to send to client
-                                     - file must pre-exist
-        -p, --port=num             The port to connect to
-        -l, --list                 Print a list of the supported algorithms and modes
-        -v, --version[=arg]        Output version information and exit
-        -h, --help                 Display extended usage information and exit
-        -!, --more-help            Extended usage information passed thru pager
-
-     Options are specified by doubled hyphens and their name or by a single
-     hyphen and the flag character.
-
-
-
-     Server program that listens to incoming TLS connections.
-
-     please send bug reports to:  bug-gnutls@gnu.org
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
+
+gnutls-serv - GnuTLS server - Ver. 3.1.13
+USAGE:  lt-gnutls-serv [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
+
+   -d, --debug=num            Enable debugging.
+                                - It must be in the range:
+                                  0 to 9999
+       --noticket             Don't accept session tickets
+   -g, --generate             Generate Diffie-Hellman and RSA-export parameters
+   -q, --quiet                Suppress some messages
+       --nodb                 Do not use a resumption database
+       --http                 Act as an HTTP server
+       --echo                 Act as an Echo server
+   -u, --udp                  Use DTLS (datagram TLS) over UDP
+       --mtu=num              Set MTU for datagram TLS
+                                - It must be in the range:
+                                  0 to 17000
+       --srtp-profiles=str    Offer SRTP profiles
+   -a, --disable-client-cert  Do not request a client certificate
+   -r, --require-client-cert  Require a client certificate
+   -b, --heartbeat            Activate heartbeat support
+       --x509fmtder           Use DER format for certificates to read from
+       --priority=str         Priorities string
+       --dhparams=file        DH params file to use
+                                - file must pre-exist
+       --x509cafile=str       Certificate file or PKCS #11 URL to use
+       --x509crlfile=file     CRL file to use
+                                - file must pre-exist
+       --pgpkeyfile=file      PGP Key file to use
+                                - file must pre-exist
+       --pgpkeyring=file      PGP Key ring file to use
+                                - file must pre-exist
+       --pgpcertfile=file     PGP Public Key (certificate) file to use
+                                - file must pre-exist
+       --x509keyfile=str      X.509 key file or PKCS #11 URL to use
+       --x509certfile=str     X.509 Certificate file or PKCS #11 URL to use
+       --x509dsakeyfile=str   Alternative X.509 key file or PKCS #11 URL to use
+       --x509dsacertfile=str  Alternative X.509 Certificate file or PKCS #11 URL to use
+       --x509ecckeyfile=str   Alternative X.509 key file or PKCS #11 URL to use
+       --x509ecccertfile=str  Alternative X.509 Certificate file or PKCS #11 URL to use
+       --pgpsubkey=str        PGP subkey to use (hex or auto)
+       --srppasswd=file       SRP password file to use
+                                - file must pre-exist
+       --srppasswdconf=file   SRP password configuration file to use
+                                - file must pre-exist
+       --pskpasswd=file       PSK password file to use
+                                - file must pre-exist
+       --pskhint=str          PSK identity hint to use
+       --ocsp-response=file   The OCSP response to send to client
+                                - file must pre-exist
+   -p, --port=num             The port to connect to
+   -l, --list                 Print a list of the supported algorithms and modes
+   -v, --version[=arg]        Output version information and exit
+   -h, --help                 Display extended usage information and exit
+   -!, --more-help            Extended usage information passed thru pager
+
+Options are specified by doubled hyphens and their name or by a single
+hyphen and the flag character.
+
+
+
+Server program that listens to incoming TLS connections.
+
+please send bug reports to:  bug-gnutls@gnu.org
 
 debug option (-d)
 -----------------
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 heartbeat option (-b)
@@ -5963,10 +5923,10 @@ priority option
 ---------------
 
 This is the "priorities string" option.  This option takes an argument
-string.  TLS algorithms and protocols to enable.  You can use predefined
+string.  TLS algorithms and protocols to enable. You can use predefined
 sets of ciphersuites such as PERFORMANCE, NORMAL, SECURE128, SECURE256.
 
-Check the GnuTLS manual on section "Priority strings" for more
+Check  the  GnuTLS  manual  on  section  "Priority strings" for more
 information on allowed keywords
 
 ocsp-response option
@@ -5980,16 +5940,17 @@ list option (-l)
 ----------------
 
 This is the "print a list of the supported algorithms and modes" option.
-Print a list of the supported algorithms and modes.  If a priority
+Print a list of the supported algorithms and modes. If a priority
 string is given then only the enabled ciphersuites are shown.
 
 gnutls-serv exit status
 -----------------------
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 gnutls-serv See Also
@@ -6000,142 +5961,142 @@ gnutls-cli-debug(1), gnutls-cli(1)
 gnutls-serv Examples
 --------------------
 
-Running your own TLS server based on GnuTLS can be useful when debugging
-clients and/or GnuTLS itself.  This section describes how to use
-'gnutls-serv' as a simple HTTPS server.
+Running your own TLS server based on GnuTLS can be useful when
+debugging clients and/or GnuTLS itself.  This section describes how to
+use `gnutls-serv' as a simple HTTPS server.
 
 The most basic server can be started as:
 
-     gnutls-serv --http
+    gnutls-serv --http
 
 It will only support anonymous ciphersuites, which many TLS clients
 refuse to use.
 
 The next step is to add support for X.509.  First we generate a CA:
 
-     $ certtool --generate-privkey > x509-ca-key.pem
-     $ echo 'cn = GnuTLS test CA' > ca.tmpl
-     $ echo 'ca' >> ca.tmpl
-     $ echo 'cert_signing_key' >> ca.tmpl
-     $ certtool --generate-self-signed --load-privkey x509-ca-key.pem \
-       --template ca.tmpl --outfile x509-ca.pem
-     ...
+    $ certtool --generate-privkey > x509-ca-key.pem
+    $ echo 'cn = GnuTLS test CA' > ca.tmpl
+    $ echo 'ca' >> ca.tmpl
+    $ echo 'cert_signing_key' >> ca.tmpl
+    $ certtool --generate-self-signed --load-privkey x509-ca-key.pem \
+      --template ca.tmpl --outfile x509-ca.pem
+    ...
 
 Then generate a server certificate.  Remember to change the dns_name
-value to the name of your server host, or skip that command to avoid the
-field.
-
-     $ certtool --generate-privkey > x509-server-key.pem
-     $ echo 'organization = GnuTLS test server' > server.tmpl
-     $ echo 'cn = test.gnutls.org' >> server.tmpl
-     $ echo 'tls_www_server' >> server.tmpl
-     $ echo 'encryption_key' >> server.tmpl
-     $ echo 'signing_key' >> server.tmpl
-     $ echo 'dns_name = test.gnutls.org' >> server.tmpl
-     $ certtool --generate-certificate --load-privkey x509-server-key.pem \
-       --load-ca-certificate x509-ca.pem --load-ca-privkey x509-ca-key.pem \
-       --template server.tmpl --outfile x509-server.pem
-     ...
+value to the name of your server host, or skip that command to avoid
+the field.
+
+    $ certtool --generate-privkey > x509-server-key.pem
+    $ echo 'organization = GnuTLS test server' > server.tmpl
+    $ echo 'cn = test.gnutls.org' >> server.tmpl
+    $ echo 'tls_www_server' >> server.tmpl
+    $ echo 'encryption_key' >> server.tmpl
+    $ echo 'signing_key' >> server.tmpl
+    $ echo 'dns_name = test.gnutls.org' >> server.tmpl
+    $ certtool --generate-certificate --load-privkey x509-server-key.pem \
+      --load-ca-certificate x509-ca.pem --load-ca-privkey x509-ca-key.pem \
+      --template server.tmpl --outfile x509-server.pem
+    ...
 
 For use in the client, you may want to generate a client certificate as
 well.
 
-     $ certtool --generate-privkey > x509-client-key.pem
-     $ echo 'cn = GnuTLS test client' > client.tmpl
-     $ echo 'tls_www_client' >> client.tmpl
-     $ echo 'encryption_key' >> client.tmpl
-     $ echo 'signing_key' >> client.tmpl
-     $ certtool --generate-certificate --load-privkey x509-client-key.pem \
-       --load-ca-certificate x509-ca.pem --load-ca-privkey x509-ca-key.pem \
-       --template client.tmpl --outfile x509-client.pem
-     ...
+    $ certtool --generate-privkey > x509-client-key.pem
+    $ echo 'cn = GnuTLS test client' > client.tmpl
+    $ echo 'tls_www_client' >> client.tmpl
+    $ echo 'encryption_key' >> client.tmpl
+    $ echo 'signing_key' >> client.tmpl
+    $ certtool --generate-certificate --load-privkey x509-client-key.pem \
+      --load-ca-certificate x509-ca.pem --load-ca-privkey x509-ca-key.pem \
+      --template client.tmpl --outfile x509-client.pem
+    ...
 
 To be able to import the client key/certificate into some applications,
 you will need to convert them into a PKCS#12 structure.  This also
 encrypts the security sensitive key with a password.
 
-     $ certtool --to-p12 --load-ca-certificate x509-ca.pem \
-       --load-privkey x509-client-key.pem --load-certificate x509-client.pem \
-       --outder --outfile x509-client.p12
+    $ certtool --to-p12 --load-ca-certificate x509-ca.pem \
+      --load-privkey x509-client-key.pem --load-certificate x509-client.pem \
+      --outder --outfile x509-client.p12
 
 For icing, we'll create a proxy certificate for the client too.
 
-     $ certtool --generate-privkey > x509-proxy-key.pem
-     $ echo 'cn = GnuTLS test client proxy' > proxy.tmpl
-     $ certtool --generate-proxy --load-privkey x509-proxy-key.pem \
-       --load-ca-certificate x509-client.pem --load-ca-privkey x509-client-key.pem \
-       --load-certificate x509-client.pem --template proxy.tmpl \
-       --outfile x509-proxy.pem
-     ...
+    $ certtool --generate-privkey > x509-proxy-key.pem
+    $ echo 'cn = GnuTLS test client proxy' > proxy.tmpl
+    $ certtool --generate-proxy --load-privkey x509-proxy-key.pem \
+      --load-ca-certificate x509-client.pem --load-ca-privkey x509-client-key.pem \
+      --load-certificate x509-client.pem --template proxy.tmpl \
+      --outfile x509-proxy.pem
+    ...
 
 Then start the server again:
 
-     $ gnutls-serv --http \
-                 --x509cafile x509-ca.pem \
-                 --x509keyfile x509-server-key.pem \
-                 --x509certfile x509-server.pem
+    $ gnutls-serv --http \
+                --x509cafile x509-ca.pem \
+                --x509keyfile x509-server-key.pem \
+                --x509certfile x509-server.pem
 
 Try connecting to the server using your web browser.  Note that the
 server listens to port 5556 by default.
 
-While you are at it, to allow connections using DSA, you can also create
-a DSA key and certificate for the server.  These credentials will be
-used in the final example below.
+While you are at it, to allow connections using DSA, you can also
+create a DSA key and certificate for the server.  These credentials
+will be used in the final example below.
 
-     $ certtool --generate-privkey --dsa > x509-server-key-dsa.pem
-     $ certtool --generate-certificate --load-privkey x509-server-key-dsa.pem \
-       --load-ca-certificate x509-ca.pem --load-ca-privkey x509-ca-key.pem \
-       --template server.tmpl --outfile x509-server-dsa.pem
-     ...
+    $ certtool --generate-privkey --dsa > x509-server-key-dsa.pem
+    $ certtool --generate-certificate --load-privkey x509-server-key-dsa.pem \
+      --load-ca-certificate x509-ca.pem --load-ca-privkey x509-ca-key.pem \
+      --template server.tmpl --outfile x509-server-dsa.pem
+    ...
 
 The next step is to create OpenPGP credentials for the server.
 
-     gpg --gen-key
-     ...enter whatever details you want, use 'test.gnutls.org' as name...
+    gpg --gen-key
+    ...enter whatever details you want, use 'test.gnutls.org' as name...
 
 Make a note of the OpenPGP key identifier of the newly generated key,
-here it was '5D1D14D8'.  You will need to export the key for GnuTLS to
+here it was `5D1D14D8'.  You will need to export the key for GnuTLS to
 be able to use it.
 
-     gpg -a --export 5D1D14D8 > openpgp-server.txt
-     gpg --export 5D1D14D8 > openpgp-server.bin
-     gpg --export-secret-keys 5D1D14D8 > openpgp-server-key.bin
-     gpg -a --export-secret-keys 5D1D14D8 > openpgp-server-key.txt
+    gpg -a --export 5D1D14D8 > openpgp-server.txt
+    gpg --export 5D1D14D8 > openpgp-server.bin
+    gpg --export-secret-keys 5D1D14D8 > openpgp-server-key.bin
+    gpg -a --export-secret-keys 5D1D14D8 > openpgp-server-key.txt
 
 Let's start the server with support for OpenPGP credentials:
 
-     gnutls-serv --http \
-                 --pgpkeyfile openpgp-server-key.txt \
-                 --pgpcertfile openpgp-server.txt
+    gnutls-serv --http \
+                --pgpkeyfile openpgp-server-key.txt \
+                --pgpcertfile openpgp-server.txt
 
-The next step is to add support for SRP authentication.  This requires
-an SRP password file created with 'srptool'.  To start the server with
+The next step is to add support for SRP authentication. This requires
+an SRP password file created with `srptool'.  To start the server with
 SRP support:
 
-     gnutls-serv --http \
-                 --srppasswdconf srp-tpasswd.conf \
-                 --srppasswd srp-passwd.txt
+    gnutls-serv --http \
+                --srppasswdconf srp-tpasswd.conf \
+                --srppasswd srp-passwd.txt
 
 Let's also start a server with support for PSK. This would require a
-password file created with 'psktool'.
-
-     gnutls-serv --http \
-                 --pskpasswd psk-passwd.txt
-
-Finally, we start the server with all the earlier parameters and you get
-this command:
-
-     gnutls-serv --http \
-                 --x509cafile x509-ca.pem \
-                 --x509keyfile x509-server-key.pem \
-                 --x509certfile x509-server.pem \
-                 --x509dsakeyfile x509-server-key-dsa.pem \
-                 --x509dsacertfile x509-server-dsa.pem \
-                 --pgpkeyfile openpgp-server-key.txt \
-                 --pgpcertfile openpgp-server.txt \
-                 --srppasswdconf srp-tpasswd.conf \
-                 --srppasswd srp-passwd.txt \
-                 --pskpasswd psk-passwd.txt
+password file created with `psktool'.
+
+    gnutls-serv --http \
+                --pskpasswd psk-passwd.txt
+
+Finally, we start the server with all the earlier parameters and you
+get this command:
+
+    gnutls-serv --http \
+                --x509cafile x509-ca.pem \
+                --x509keyfile x509-server-key.pem \
+                --x509certfile x509-server.pem \
+                --x509dsakeyfile x509-server-key-dsa.pem \
+                --x509dsacertfile x509-server-dsa.pem \
+                --pgpkeyfile openpgp-server-key.txt \
+                --pgpcertfile openpgp-server.txt \
+                --srppasswdconf srp-tpasswd.conf \
+                --srppasswd srp-passwd.txt \
+                --pskpasswd psk-passwd.txt
 
 
 File: gnutls.info,  Node: gnutls-cli-debug Invocation,  Prev: gnutls-serv Invocation,  Up: Other included programs
@@ -6143,47 +6104,48 @@ File: gnutls.info,  Node: gnutls-cli-debug Invocation,  Prev: gnutls-serv Invoca
 9.3 Invoking gnutls-cli-debug
 =============================
 
-TLS debug client.  It sets up multiple TLS connections to a server and
-queries its capabilities.  It was created to assist in debugging GnuTLS,
+TLS debug client. It sets up multiple TLS connections to a server and
+queries its capabilities. It was created to assist in debugging GnuTLS,
 but it might be useful to extract a TLS server's capabilities.  It
 connects to a TLS server, performs tests and print the server's
-capabilities.  If called with the '-v' parameter more checks will be
+capabilities. If called with the `-v' parameter more checks will be
 performed.  Can be used to check for servers with special needs or bugs.
 
-This section was generated by *AutoGen*, using the 'agtexi-cmd' template
-and the option descriptions for the 'gnutls-cli-debug' program.  This
-software is released under the GNU General Public License, version 3 or
-later.
+This section was generated by *AutoGen*, using the `agtexi-cmd'
+template and the option descriptions for the `gnutls-cli-debug' program.
+This software is released under the GNU General Public License, version
+3 or later.
 
-gnutls-cli-debug help/usage ('--help')
+gnutls-cli-debug help/usage (`--help')
 --------------------------------------
 
 This is the automatically generated usage text for gnutls-cli-debug.
 
-The text printed is the same whether selected with the 'help' option
-('--help') or the 'more-help' option ('--more-help').  'more-help' will
-print the usage text by passing it through a pager program.  'more-help'
-is disabled on platforms without a working 'fork(2)' function.  The
-'PAGER' environment variable is used to select the program, defaulting
-to 'more'.  Both will exit with a status code of 0.
+The text printed is the same whether selected with the `help' option
+(`--help') or the `more-help' option (`--more-help').  `more-help' will
+print the usage text by passing it through a pager program.
+`more-help' is disabled on platforms without a working `fork(2)'
+function.  The `PAGER' environment variable is used to select the
+program, defaulting to `more'.  Both will exit with a status code of 0.
 
-     ./.libs/libcmd-cli-debug.a(libcmd_cli_debug_la-cli-debug-args.o): In function `translate_option_strings':
-     /home/nmav/cvs/gnutls3.1/src/cli-debug-args.c:502: undefined reference to `option_usage_text'
-     collect2: error: ld returned 1 exit statusn
+./.libs/libcmd-cli-debug.a(libcmd_cli_debug_la-cli-debug-args.o): In function `translate_option_strings':
+/home/nmav/cvs/gnutls3.1/src/cli-debug-args.c:502: undefined reference to `option_usage_text'
+collect2: error: ld returned 1 exit statusn
 
 debug option (-d)
 -----------------
 
-This is the "enable debugging."  option.  This option takes an argument
+This is the "enable debugging." option.  This option takes an argument
 number.  Specifies the debug level.
 
 gnutls-cli-debug exit status
 ----------------------------
 
 One of the following exit values will be returned:
-'0 (EXIT_SUCCESS)'
+`0 (EXIT_SUCCESS)'
      Successful program execution.
-'1 (EXIT_FAILURE)'
+
+`1 (EXIT_FAILURE)'
      The operation failed or the command syntax was not valid.
 
 gnutls-cli-debug See Also
@@ -6194,51 +6156,51 @@ gnutls-cli(1), gnutls-serv(1)
 gnutls-cli-debug Examples
 -------------------------
 
-     $ ../src/gnutls-cli-debug localhost
-     Resolving 'localhost'...
-     Connecting to '127.0.0.1:443'...
-     Checking for SSL 3.0 support... yes
-     Checking whether %COMPAT is required... no
-     Checking for TLS 1.0 support... yes
-     Checking for TLS 1.1 support... no
-     Checking fallback from TLS 1.1 to... TLS 1.0
-     Checking for TLS 1.2 support... no
-     Checking whether we need to disable TLS 1.0... N/A
-     Checking for Safe renegotiation support... yes
-     Checking for Safe renegotiation support (SCSV)... yes
-     Checking for HTTPS server name... not checked
-     Checking for version rollback bug in RSA PMS... no
-     Checking for version rollback bug in Client Hello... no
-     Checking whether the server ignores the RSA PMS version... no
-     Checking whether the server can accept Hello Extensions... yes
-     Checking whether the server can accept small records (512 bytes)... yes
-     Checking whether the server can accept cipher suites not in SSL 3.0 spec... yes
-     Checking whether the server can accept a bogus TLS record version in the client hello... yes
-     Checking for certificate information... N/A
-     Checking for trusted CAs... N/A
-     Checking whether the server understands TLS closure alerts... partially
-     Checking whether the server supports session resumption... yes
-     Checking for export-grade ciphersuite support... no
-     Checking RSA-export ciphersuite info... N/A
-     Checking for anonymous authentication support... no
-     Checking anonymous Diffie-Hellman group info... N/A
-     Checking for ephemeral Diffie-Hellman support... no
-     Checking ephemeral Diffie-Hellman group info... N/A
-     Checking for ephemeral EC Diffie-Hellman support... yes
-     Checking ephemeral EC Diffie-Hellman group info...
-      Curve SECP256R1
-     Checking for AES-GCM cipher support... no
-     Checking for AES-CBC cipher support... yes
-     Checking for CAMELLIA cipher support... no
-     Checking for 3DES-CBC cipher support... yes
-     Checking for ARCFOUR 128 cipher support... yes
-     Checking for ARCFOUR 40 cipher support... no
-     Checking for MD5 MAC support... yes
-     Checking for SHA1 MAC support... yes
-     Checking for SHA256 MAC support... no
-     Checking for ZLIB compression support... no
-     Checking for max record size... no
-     Checking for OpenPGP authentication support... no
+    $ ../src/gnutls-cli-debug localhost
+    Resolving 'localhost'...
+    Connecting to '127.0.0.1:443'...
+    Checking for SSL 3.0 support... yes
+    Checking whether %COMPAT is required... no
+    Checking for TLS 1.0 support... yes
+    Checking for TLS 1.1 support... no
+    Checking fallback from TLS 1.1 to... TLS 1.0
+    Checking for TLS 1.2 support... no
+    Checking whether we need to disable TLS 1.0... N/A
+    Checking for Safe renegotiation support... yes
+    Checking for Safe renegotiation support (SCSV)... yes
+    Checking for HTTPS server name... not checked
+    Checking for version rollback bug in RSA PMS... no
+    Checking for version rollback bug in Client Hello... no
+    Checking whether the server ignores the RSA PMS version... no
+    Checking whether the server can accept Hello Extensions... yes
+    Checking whether the server can accept small records (512 bytes)... yes
+    Checking whether the server can accept cipher suites not in SSL 3.0 spec... yes
+    Checking whether the server can accept a bogus TLS record version in the client hello... yes
+    Checking for certificate information... N/A
+    Checking for trusted CAs... N/A
+    Checking whether the server understands TLS closure alerts... partially
+    Checking whether the server supports session resumption... yes
+    Checking for export-grade ciphersuite support... no
+    Checking RSA-export ciphersuite info... N/A
+    Checking for anonymous authentication support... no
+    Checking anonymous Diffie-Hellman group info... N/A
+    Checking for ephemeral Diffie-Hellman support... no
+    Checking ephemeral Diffie-Hellman group info... N/A
+    Checking for ephemeral EC Diffie-Hellman support... yes
+    Checking ephemeral EC Diffie-Hellman group info...
+     Curve SECP256R1
+    Checking for AES-GCM cipher support... no
+    Checking for AES-CBC cipher support... yes
+    Checking for CAMELLIA cipher support... no
+    Checking for 3DES-CBC cipher support... yes
+    Checking for ARCFOUR 128 cipher support... yes
+    Checking for ARCFOUR 40 cipher support... no
+    Checking for MD5 MAC support... yes
+    Checking for SHA1 MAC support... yes
+    Checking for SHA256 MAC support... no
+    Checking for ZLIB compression support... no
+    Checking for max record size... no
+    Checking for OpenPGP authentication support... no
 
 
 File: gnutls.info,  Node: Internal architecture of GnuTLS,  Next: Upgrading from previous versions,  Prev: Other included programs,  Up: Top
@@ -6264,8 +6226,8 @@ File: gnutls.info,  Node: The TLS Protocol,  Next: TLS Handshake Protocol,  Up:
 10.1 The TLS Protocol
 =====================
 
-The main use case for the TLS protocol is shown in *note Figure 10.1:
-fig:client-server.  A user of a library implementing the protocol
+The main use case for the TLS protocol is shown in *note
+fig:client-server::.  A user of a library implementing the protocol
 expects no less than this functionality, i.e., to be able to set
 parameters such as the accepted security level, perform a negotiation
 with the peer and be able to exchange data.
@@ -6282,19 +6244,19 @@ File: gnutls.info,  Node: TLS Handshake Protocol,  Next: TLS Authentication Meth
 
 The GnuTLS handshake protocol is implemented as a state machine that
 waits for input or returns immediately when the non-blocking transport
-layer functions are used.  The main idea is shown in *note Figure 10.2:
-fig:gnutls-handshake.
+layer functions are used. The main idea is shown in *note
+fig:gnutls-handshake::.
 
  [image src="gnutls-handshake-state.png" ]
 
 Figure 10.2: GnuTLS handshake state machine.
 
-Also the way the input is processed varies per ciphersuite.  Several
+Also the way the input is processed varies per ciphersuite. Several
 implementations of the internal handlers are available and *note
 gnutls_handshake:: only multiplexes the input to the appropriate
-handler.  For example a PSK ciphersuite has a different implementation
-of the 'process_client_key_exchange' than a certificate ciphersuite.  We
-illustrate the idea in *note Figure 10.3: fig:gnutls-handshake-sequence.
+handler. For example a PSK ciphersuite has a different implementation
+of the `process_client_key_exchange' than a certificate ciphersuite. We
+illustrate the idea in *note fig:gnutls-handshake-sequence::.
 
  [image src="gnutls-handshake-sequence.png" ]
 
@@ -6306,10 +6268,10 @@ File: gnutls.info,  Node: TLS Authentication Methods,  Next: TLS Extension Handl
 10.3 TLS Authentication Methods
 ===============================
 
-In GnuTLS authentication methods can be implemented quite easily.  Since
-the required changes to add a new authentication method affect only the
-handshake protocol, a simple interface is used.  An authentication
-method needs to implement the functions shown below.
+In GnuTLS authentication methods can be implemented quite easily.
+Since the required changes to add a new authentication method affect
+only the handshake protocol, a simple interface is used. An
+authentication method needs to implement the functions shown below.
 
 typedef struct
 {
@@ -6334,19 +6296,19 @@ typedef struct
 } mod_auth_st;
 
 Those functions are responsible for the interpretation of the handshake
-protocol messages.  It is common for such functions to read data from
-one or more 'credentials_t' structures(1) and write data, such as
-certificates, usernames etc.  to 'auth_info_t' structures.
+protocol messages. It is common for such functions to read data from
+one or more `credentials_t' structures(1) and write data, such as
+certificates, usernames etc. to `auth_info_t' structures.
 
 Simple examples of existing authentication methods can be seen in
-'auth/psk.c' for PSK ciphersuites and 'auth/srp.c' for SRP ciphersuites.
-After implementing these functions the structure holding its pointers
-has to be registered in 'gnutls_algorithms.c' in the
-'_gnutls_kx_algorithms' structure.
+`auth/psk.c' for PSK ciphersuites and `auth/srp.c' for SRP
+ciphersuites. After implementing these functions the structure holding
+its pointers has to be registered in `gnutls_algorithms.c' in the
+`_gnutls_kx_algorithms' structure.
 
-   ---------- Footnotes ----------
+---------- Footnotes ----------
 
-   (1) such as the 'gnutls_certificate_credentials_t' structures
+(1) such as the `gnutls_certificate_credentials_t' structures
 
 
 File: gnutls.info,  Node: TLS Extension Handling,  Next: Cryptographic Backend,  Prev: TLS Authentication Methods,  Up: Internal architecture of GnuTLS
@@ -6363,14 +6325,14 @@ typedef int (*gnutls_ext_send_func) (gnutls_session_t session,
                                      gnutls_buffer_st *extdata);
 
 Here there are two functions, one for receiving the extension data and
-one for sending.  These functions have to check internally whether they
+one for sending. These functions have to check internally whether they
 operate in client or server side.
 
-A simple example of an extension handler can be seen in 'ext/srp.c' in
-GnuTLS' source code.  After implementing these functions, together with
+A simple example of an extension handler can be seen in `ext/srp.c' in
+GnuTLS' source code. After implementing these functions, together with
 the extension number they handle, they have to be registered using
-'_gnutls_ext_register' in 'gnutls_extensions.c' typically within
-'_gnutls_ext_init'.
+`_gnutls_ext_register' in `gnutls_extensions.c' typically within
+`_gnutls_ext_init'.
 
 Adding a new TLS extension
 --------------------------
@@ -6378,174 +6340,175 @@ Adding a new TLS extension
 Adding support for a new TLS extension is done from time to time, and
 the process to do so is not difficult.  Here are the steps you need to
 follow if you wish to do this yourself.  For sake of discussion, let's
-consider adding support for the hypothetical TLS extension 'foobar'.
+consider adding support for the hypothetical TLS extension `foobar'.
 
-Add 'configure' option like '--enable-foobar' or '--disable-foobar'.
+Add `configure' option like `--enable-foobar' or `--disable-foobar'.
 ....................................................................
 
 This step is useful when the extension code is large and it might be
-desirable to disable the extension under some circumstances.  Otherwise
+desirable to disable the extension under some circumstances. Otherwise
 it can be safely skipped.
 
-Whether to chose enable or disable depends on whether you intend to make
-the extension be enabled by default.  Look at existing checks (i.e.,
-SRP, authz) for how to model the code.  For example:
-
-     AC_MSG_CHECKING([whether to disable foobar support])
-     AC_ARG_ENABLE(foobar,
-     	AS_HELP_STRING([--disable-foobar],
-     		[disable foobar support]),
-     	ac_enable_foobar=no)
-     if test x$ac_enable_foobar != xno; then
-      AC_MSG_RESULT(no)
-      AC_DEFINE(ENABLE_FOOBAR, 1, [enable foobar])
-     else
-      ac_full=0
-      AC_MSG_RESULT(yes)
-     fi
-     AM_CONDITIONAL(ENABLE_FOOBAR, test "$ac_enable_foobar" != "no")
-
-These lines should go in 'm4/hooks.m4'.
-
-Add IANA extension value to 'extensions_t' in 'gnutls_int.h'.
+Whether to chose enable or disable depends on whether you intend to
+make the extension be enabled by default.  Look at existing checks
+(i.e., SRP, authz) for how to model the code.  For example:
+
+    AC_MSG_CHECKING([whether to disable foobar support])
+    AC_ARG_ENABLE(foobar,
+    	AS_HELP_STRING([--disable-foobar],
+    		[disable foobar support]),
+    	ac_enable_foobar=no)
+    if test x$ac_enable_foobar != xno; then
+     AC_MSG_RESULT(no)
+     AC_DEFINE(ENABLE_FOOBAR, 1, [enable foobar])
+    else
+     ac_full=0
+     AC_MSG_RESULT(yes)
+    fi
+    AM_CONDITIONAL(ENABLE_FOOBAR, test "$ac_enable_foobar" != "no")
+
+These lines should go in `m4/hooks.m4'.
+
+Add IANA extension value to `extensions_t' in `gnutls_int.h'.
 .............................................................
 
-A good name for the value would be GNUTLS_EXTENSION_FOOBAR. Check with
-<http://www.iana.org/assignments/tls-extensiontype-values> for allocated
-values.  For experiments, you could pick a number but remember that some
-consider it a bad idea to deploy such modified version since it will
-lead to interoperability problems in the future when the IANA allocates
-that number to someone else, or when the foobar protocol is allocated
-another number.
+A good name for the value would be GNUTLS_EXTENSION_FOOBAR.  Check with
+`http://www.iana.org/assignments/tls-extensiontype-values' for
+allocated values.  For experiments, you could pick a number but
+remember that some consider it a bad idea to deploy such modified
+version since it will lead to interoperability problems in the future
+when the IANA allocates that number to someone else, or when the foobar
+protocol is allocated another number.
 
-Add an entry to '_gnutls_extensions' in 'gnutls_extensions.c'.
+Add an entry to `_gnutls_extensions' in `gnutls_extensions.c'.
 ..............................................................
 
 A typical entry would be:
 
-       int ret;
+      int ret;
 
-     #if ENABLE_FOOBAR
-       ret = _gnutls_ext_register (&foobar_ext);
-       if (ret != GNUTLS_E_SUCCESS)
-         return ret;
-     #endif
+    #if ENABLE_FOOBAR
+      ret = _gnutls_ext_register (&foobar_ext);
+      if (ret != GNUTLS_E_SUCCESS)
+        return ret;
+    #endif
 
-Most likely you'll need to add an '#include "ext/foobar.h"', that will
+Most likely you'll need to add an `#include "ext/foobar.h"', that will
 contain something like like:
-       extension_entry_st foobar_ext = {
-         .name = "FOOBAR",
-         .type = GNUTLS_EXTENSION_FOOBAR,
-         .parse_type = GNUTLS_EXT_TLS,
-         .recv_func = _foobar_recv_params,
-         .send_func = _foobar_send_params,
-         .pack_func = _foobar_pack,
-         .unpack_func = _foobar_unpack,
-         .deinit_func = NULL
-       }
+      extension_entry_st foobar_ext = {
+        .name = "FOOBAR",
+        .type = GNUTLS_EXTENSION_FOOBAR,
+        .parse_type = GNUTLS_EXT_TLS,
+        .recv_func = _foobar_recv_params,
+        .send_func = _foobar_send_params,
+        .pack_func = _foobar_pack,
+        .unpack_func = _foobar_unpack,
+        .deinit_func = NULL
+      }
 
 The GNUTLS_EXTENSION_FOOBAR is the integer value you added to
-'gnutls_int.h' earlier.  In this structure you specify the functions to
+`gnutls_int.h' earlier.  In this structure you specify the functions to
 read the extension from the hello message, the function to send the
 reply to, and two more functions to pack and unpack from stored session
-data (e.g.  when resumming a session).  The 'deinit' function will be
+data (e.g. when resumming a session). The `deinit' function will be
 called to deinitialize the extension's private parameters, if any.
 
-Note that the conditional 'ENABLE_FOOBAR' definition should only be used
-if step 1 with the 'configure' options has taken place.
+Note that the conditional `ENABLE_FOOBAR' definition should only be
+used if step 1 with the `configure' options has taken place.
 
 Add new files that implement the extension.
 ...........................................
 
 The functions you are responsible to add are those mentioned in the
-previous step.  They should be added in a file such as 'ext/foobar.c'
-and headers should be placed in 'ext/foobar.h'.  As a starter, you could
-add this:
-
-     int
-     _foobar_recv_params (gnutls_session_t session, const opaque * data,
-                          size_t data_size)
-     {
+previous step.  They should be added in a file such as `ext/foobar.c'
+and headers should be placed in `ext/foobar.h'.  As a starter, you
+could add this:
+
+    int
+    _foobar_recv_params (gnutls_session_t session, const opaque * data,
+                         size_t data_size)
+    {
+      return 0;
+    }
+
+    int
+    _foobar_send_params (gnutls_session_t session, gnutls_buffer_st* data)
+    {
+      return 0;
+    }
+
+    int
+    _foobar_pack (extension_priv_data_t epriv, gnutls_buffer_st * ps)
+    {
+       /* Append the extension's internal state to buffer */
        return 0;
-     }
+    }
 
-     int
-     _foobar_send_params (gnutls_session_t session, gnutls_buffer_st* data)
-     {
+    int
+    _foobar_unpack (gnutls_buffer_st * ps, extension_priv_data_t * epriv)
+    {
+       /* Read the internal state from buffer */
        return 0;
-     }
-
-     int
-     _foobar_pack (extension_priv_data_t epriv, gnutls_buffer_st * ps)
-     {
-        /* Append the extension's internal state to buffer */
-        return 0;
-     }
-
-     int
-     _foobar_unpack (gnutls_buffer_st * ps, extension_priv_data_t * epriv)
-     {
-        /* Read the internal state from buffer */
-        return 0;
-     }
-
-The '_foobar_recv_params' function is responsible for parsing incoming
+    }
+
+The `_foobar_recv_params' function is responsible for parsing incoming
 extension data (both in the client and server).
 
-The '_foobar_send_params' function is responsible for sending extension
+The `_foobar_send_params' function is responsible for sending extension
 data (both in the client and server).
 
 If you receive length fields that don't match, return
-'GNUTLS_E_UNEXPECTED_PACKET_LENGTH'.  If you receive invalid data,
-return 'GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER'.  You can use other error
+`GNUTLS_E_UNEXPECTED_PACKET_LENGTH'.  If you receive invalid data,
+return `GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER'.  You can use other error
 codes from the list in *note Error codes::.  Return 0 on success.
 
-An extension typically stores private information in the 'session' data
-for later usage.  That can be done using the functions
-'_gnutls_ext_set_session_data' and '_gnutls_ext_get_session_data'.  You
-can check simple examples at 'ext/max_record.c' and 'ext/server_name.c'
+An extension typically stores private information in the `session' data
+for later usage. That can be done using the functions
+`_gnutls_ext_set_session_data' and `_gnutls_ext_get_session_data'. You
+can check simple examples at `ext/max_record.c' and `ext/server_name.c'
 extensions.  That private information can be saved and restored across
 session resumption if the following functions are set:
 
-The '_foobar_pack' function is responsible for packing internal
+The `_foobar_pack' function is responsible for packing internal
 extension data to save them in the session resumption storage.
 
-The '_foobar_unpack' function is responsible for restoring session data
+The `_foobar_unpack' function is responsible for restoring session data
 from the session resumption storage.
 
-Recall that both the client and server, send and receive parameters, and
-your code most likely will need to do different things depending on
-which mode it is in.  It may be useful to make this distinction explicit
-in the code.  Thus, for example, a better template than above would be:
-
-     int
-     _gnutls_foobar_recv_params (gnutls_session_t session,
-                                 const opaque * data,
-                                 size_t data_size)
-     {
-       if (session->security_parameters.entity == GNUTLS_CLIENT)
-         return foobar_recv_client (session, data, data_size);
-       else
-         return foobar_recv_server (session, data, data_size);
-     }
-
-     int
-     _gnutls_foobar_send_params (gnutls_session_t session,
-                                 gnutls_buffer_st * data)
-     {
-       if (session->security_parameters.entity == GNUTLS_CLIENT)
-         return foobar_send_client (session, data);
-       else
-         return foobar_send_server (session, data);
-     }
-
-The functions used would be declared as 'static' functions, of the
+Recall that both the client and server, send and receive parameters,
+and your code most likely will need to do different things depending on
+which mode it is in.  It may be useful to make this distinction
+explicit in the code.  Thus, for example, a better template than above
+would be:
+
+    int
+    _gnutls_foobar_recv_params (gnutls_session_t session,
+                                const opaque * data,
+                                size_t data_size)
+    {
+      if (session->security_parameters.entity == GNUTLS_CLIENT)
+        return foobar_recv_client (session, data, data_size);
+      else
+        return foobar_recv_server (session, data, data_size);
+    }
+
+    int
+    _gnutls_foobar_send_params (gnutls_session_t session,
+                                gnutls_buffer_st * data)
+    {
+      if (session->security_parameters.entity == GNUTLS_CLIENT)
+        return foobar_send_client (session, data);
+      else
+        return foobar_send_server (session, data);
+    }
+
+The functions used would be declared as `static' functions, of the
 appropriate prototype, in the same file.  When adding the files, you'll
-need to add them to 'ext/Makefile.am' as well, for example:
+need to add them to `ext/Makefile.am' as well, for example:
 
-     if ENABLE_FOOBAR
-     libgnutls_ext_la_SOURCES += ext/foobar.c ext/foobar.h
-     endif
+    if ENABLE_FOOBAR
+    libgnutls_ext_la_SOURCES += ext/foobar.c ext/foobar.h
+    endif
 
 Add API functions to enable/disable the extension.
 ..................................................
@@ -6553,124 +6516,124 @@ Add API functions to enable/disable the extension.
 It might be desirable to allow users of the extension to request use of
 the extension, or set extension specific data.  This can be implemented
 by adding extension specific function calls that can be added to
-'includes/gnutls/gnutls.h', as long as the LGPLv2.1+ applies.  The
-implementation of the function should lie in the 'ext/foobar.c' file.
+`includes/gnutls/gnutls.h', as long as the LGPLv2.1+ applies.  The
+implementation of the function should lie in the `ext/foobar.c' file.
 
 To make the API available in the shared library you need to add the
-symbol in 'lib/libgnutls.map', so that the symbol is exported properly.
+symbol in `lib/libgnutls.map', so that the symbol is exported properly.
 
-When writing GTK-DOC style documentation for your new APIs, don't forget
-to add 'Since:' tags to indicate the GnuTLS version the API was
+When writing GTK-DOC style documentation for your new APIs, don't
+forget to add `Since:' tags to indicate the GnuTLS version the API was
 introduced in.
 
 Adding a new Supplemental Data Handshake Message
 ------------------------------------------------
 
 TLS handshake extensions allow to send so called supplemental data
-handshake messages [_RFC4680_].  This short section explains how to
+handshake messages [_RFC4680_]. This short section explains how to
 implement a supplemental data handshake message for a given TLS
 extension.
 
-First of all, modify your extension 'foobar' in the way, the that flags
-'session->security_parameters.do_send_supplemental' and
-'session->security_parameters.do_recv_supplemental' are set:
-
-     int
-     _gnutls_foobar_recv_params (gnutls_session_t session, const opaque * data,
-                                      size_t _data_size)
-     {
-        ...
-        session->security_parameters.do_recv_supplemental=1;
-        ...
-     }
-
-     int
-     _gnutls_foobar_send_params (gnutls_session_t session, gnutls_buffer_st *extdata)
-     {
-        ...
-        session->security_parameters.do_send_supplemental=1;
-        ...
-     }
-
-Furthermore add the functions '_foobar_supp_recv_params' and
-'_foobar_supp_send_params' to '_foobar.h' and '_foobar.c'.  The
+First of all, modify your extension `foobar' in the way, the that flags
+`session->security_parameters.do_send_supplemental' and
+`session->security_parameters.do_recv_supplemental' are set:
+
+    int
+    _gnutls_foobar_recv_params (gnutls_session_t session, const opaque * data,
+                                     size_t _data_size)
+    {
+       ...
+       session->security_parameters.do_recv_supplemental=1;
+       ...
+    }
+
+    int
+    _gnutls_foobar_send_params (gnutls_session_t session, gnutls_buffer_st *extdata)
+    {
+       ...
+       session->security_parameters.do_send_supplemental=1;
+       ...
+    }
+
+Furthermore add the functions `_foobar_supp_recv_params' and
+`_foobar_supp_send_params' to `_foobar.h' and `_foobar.c'. The
 following example code shows how to send a "Hello World" string in the
 supplemental data handshake message:
 
-     int
-     _foobar_supp_recv_params(gnutls_session_t session, const opaque *data, size_t _data_size)
-     {
-        uint8_t len = _data_size;
-        unsigned char *msg;
+    int
+    _foobar_supp_recv_params(gnutls_session_t session, const opaque *data, size_t _data_size)
+    {
+       uint8_t len = _data_size;
+       unsigned char *msg;
 
-        msg = gnutls_malloc(len);
-        if (msg == NULL) return GNUTLS_E_MEMORY_ERROR;
+       msg = gnutls_malloc(len);
+       if (msg == NULL) return GNUTLS_E_MEMORY_ERROR;
 
-        memcpy(msg, data, len);
-        msg[len]='\0';
+       memcpy(msg, data, len);
+       msg[len]='\0';
 
-        /* do something with msg */
-        gnutls_free(msg);
+       /* do something with msg */
+       gnutls_free(msg);
 
-        return len;
-     }
+       return len;
+    }
 
-     int
-     _foobar_supp_send_params(gnutls_session_t session, gnutls_buffer_st *buf)
-     {
-        unsigned char *msg = "hello world";
-        int len = strlen(msg);
+    int
+    _foobar_supp_send_params(gnutls_session_t session, gnutls_buffer_st *buf)
+    {
+       unsigned char *msg = "hello world";
+       int len = strlen(msg);
 
-        _gnutls_buffer_append_data_prefix(buf, 8, msg, len);
+       _gnutls_buffer_append_data_prefix(buf, 8, msg, len);
 
-        return len;
-     }
+       return len;
+    }
 
 Afterwards, add the new supplemental data handshake message to
-'lib/gnutls_supplemental.c' by adding a new entry to the
-'_gnutls_supplemental[]' structure:
+`lib/gnutls_supplemental.c' by adding a new entry to the
+`_gnutls_supplemental[]' structure:
 
-     gnutls_supplemental_entry _gnutls_supplemental[] =
-     {
-       {"foobar",
-        GNUTLS_SUPPLEMENTAL_FOOBAR_DATA,
-        _foobar_supp_recv_params,
-        _foobar_supp_send_params},
-       {0, 0, 0, 0}
-     };
+    gnutls_supplemental_entry _gnutls_supplemental[] =
+    {
+      {"foobar",
+       GNUTLS_SUPPLEMENTAL_FOOBAR_DATA,
+       _foobar_supp_recv_params,
+       _foobar_supp_send_params},
+      {0, 0, 0, 0}
+    };
 
-You have to include your 'foobar.h' header file as well:
+You have to include your `foobar.h' header file as well:
 
-     #include "foobar.h"
+    #include "foobar.h"
 
 Lastly, add the new supplemental data type to
-'lib/includes/gnutls/gnutls.h':
+`lib/includes/gnutls/gnutls.h':
 
-     typedef enum
-     {
-         GNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA = 0,
-         GNUTLS_SUPPLEMENTAL_FOOBAR_DATA = 1
-     } gnutls_supplemental_data_format_type_t;
+    typedef enum
+    {
+        GNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA = 0,
+        GNUTLS_SUPPLEMENTAL_FOOBAR_DATA = 1
+    } gnutls_supplemental_data_format_type_t;
 
 Heartbeat extension.
 ....................
 
 One such extension is HeartBeat protocol (RFC6520:
-<https://tools.ietf.org/html/rfc6520>) implementation.  To enable it use
+`https://tools.ietf.org/html/rfc6520') implementation. To enable it use
 option -heartbeat with example client and server supplied with gnutls:
 
-     ./doc/credentials/gnutls-http-serv --priority "NORMAL:-CIPHER-ALL:+NULL" -d 100 --heartbeat --echo
-     ./src/gnutls-cli --priority "NORMAL:-CIPHER-ALL:+NULL" -d 100 localhost -p 5556 --insecure --heartbeat
+    ./doc/credentials/gnutls-http-serv --priority "NORMAL:-CIPHER-ALL:+NULL" -d 100 --heartbeat --echo
+    ./src/gnutls-cli --priority "NORMAL:-CIPHER-ALL:+NULL" -d 100 localhost -p 5556 --insecure --heartbeat
 
 After that pasting
-     **HEARTBEAT**
-command into gnutls-cli will trigger corresponding command on the server
-and it will send HeartBeat Request with random length to client.
+    **HEARTBEAT**
+command into gnutls-cli will trigger corresponding command on the
+server and it will send HeartBeat Request with random length to client.
 
 Another way is to run capabilities check with:
 
-     ./doc/credentials/gnutls-http-serv -d 100 --heartbeat
-     ./src/gnutls-cli-debug localhost -p 5556
+    ./doc/credentials/gnutls-http-serv -d 100 --heartbeat
+    ./src/gnutls-cli-debug localhost -p 5556
 
 
 File: gnutls.info,  Node: Cryptographic Backend,  Prev: TLS Extension Handling,  Up: Internal architecture of GnuTLS
@@ -6679,14 +6642,13 @@ File: gnutls.info,  Node: Cryptographic Backend,  Prev: TLS Extension Handling,
 ==========================
 
 Today most new processors, either for embedded or desktop systems
-include either instructions intended to speed up cryptographic
-operations, or a co-processor with cryptographic capabilities.  Taking
+include either instructions  intended to speed up cryptographic
+operations, or a co-processor with cryptographic capabilities. Taking
 advantage of those is a challenging task for every cryptographic
-application or library.  Unfortunately the cryptographic library that
-GnuTLS is based on takes no advantage of these capabilities.  For this
-reason GnuTLS handles this internally by following a layered approach to
-accessing cryptographic operations as in *note Figure 10.4:
-fig:crypto-layers.
+application or library. Unfortunately the cryptographic library that
+GnuTLS is based on takes no advantage of these capabilities. For this
+reason GnuTLS handles this internally by following a layered approach
+to accessing cryptographic operations as in *note fig:crypto-layers::.
 
  [image src="gnutls-crypto-layers.png" ]
 
@@ -6694,11 +6656,11 @@ Figure 10.4: GnuTLS cryptographic back-end design.
 
 The TLS layer uses a cryptographic provider layer, that will in turn
 either use the default crypto provider - a software crypto library, or
-use an external crypto provider, if available in the local system.  The
-reason of handling the external cryptographic provider in GnuTLS and not
-delegating it to the cryptographic libraries, is that none of the
-supported cryptographic libraries support '/dev/crypto' or CPU-optimized
-cryptography in an efficient way.
+use an external crypto provider, if available in the local system. The
+reason of handling the external cryptographic provider in GnuTLS and
+not delegating it to the cryptographic libraries, is that none of the
+supported cryptographic libraries support `/dev/crypto' or
+CPU-optimized cryptography in an efficient way.
 
 Cryptographic library layer
 ---------------------------
@@ -6713,39 +6675,41 @@ External cryptography provider
 ------------------------------
 
 Systems that include a cryptographic co-processor, typically come with
-kernel drivers to utilize the operations from software.  For this reason
+kernel drivers to utilize the operations from software. For this reason
 GnuTLS provides a layer where each individual algorithm used can be
 replaced by another implementation, i.e., the one provided by the
-driver.  The FreeBSD, OpenBSD and Linux kernels(2) include already a
+driver. The FreeBSD, OpenBSD and Linux kernels(2) include already a
 number of hardware assisted implementations, and also provide an
-interface to access them, called '/dev/crypto'.  GnuTLS will take
-advantage of this interface if compiled with special options.  That is
-because in most systems where hardware-assisted cryptographic operations
-are not available, using this interface might actually harm performance.
+interface to access them, called `/dev/crypto'.  GnuTLS will take
+advantage of this interface if compiled with special options. That is
+because in most systems where hardware-assisted cryptographic
+operations are not available, using this interface might actually harm
+performance.
 
 In systems that include cryptographic instructions with the CPU's
 instructions set, using the kernel interface will introduce an unneeded
-layer.  For this reason GnuTLS includes such optimizations found in
+layer. For this reason GnuTLS includes such optimizations found in
 popular processors such as the AES-NI or VIA PADLOCK instruction sets.
 This is achieved using a mechanism that detects CPU capabilities and
 overrides parts of crypto back-end at runtime.  The next section
-discusses the registration of a detected algorithm optimization.  For
+discusses the registration of a detected algorithm optimization. For
 more information please consult the GnuTLS source code in
-'lib/accelerated/'.
+`lib/accelerated/'.
 
 Overriding specific algorithms
 ..............................
 
-When an optimized implementation of a single algorithm is available, say
-a hardware assisted version of AES-CBC then the following (internal)
-functions, from 'crypto-backend.h', can be used to register those
-algorithms.
+When an optimized implementation of a single algorithm is available,
+say a hardware assisted version of AES-CBC then the following
+(internal) functions, from `crypto-backend.h', can be used to register
+those algorithms.
 
-   * 'gnutls_crypto_single_cipher_register': To register a cipher
+   * `gnutls_crypto_single_cipher_register': To register a cipher
      algorithm.
 
-   * 'gnutls_crypto_single_digest_register': To register a hash (digest)
-     or MAC algorithm.
+   * `gnutls_crypto_single_digest_register': To register a hash
+     (digest) or MAC algorithm.
+
 
 Those registration functions will only replace the specified algorithm
 and leave the rest of subsystem intact.
@@ -6755,32 +6719,33 @@ Overriding the cryptographic library
 
 In some systems, that might contain a broad acceleration engine, it
 might be desirable to override big parts of the cryptographic back-end,
-or even all of them.  The following functions are provided for this
+or even all of them. The following functions are provided for this
 reason.
 
-   * 'gnutls_crypto_cipher_register': To override the cryptographic
+   * `gnutls_crypto_cipher_register': To override the cryptographic
      algorithms back-end.
 
-   * 'gnutls_crypto_digest_register': To override the digest algorithms
+   * `gnutls_crypto_digest_register': To override the digest algorithms
      back-end.
 
-   * 'gnutls_crypto_rnd_register': To override the random number
+   * `gnutls_crypto_rnd_register': To override the random number
      generator back-end.
 
-   * 'gnutls_crypto_bigint_register': To override the big number number
+   * `gnutls_crypto_bigint_register': To override the big number number
      operations back-end.
 
-   * 'gnutls_crypto_pk_register': To override the public key encryption
-     back-end.  This is tied to the big number operations so either none
+   * `gnutls_crypto_pk_register': To override the public key encryption
+     back-end. This is tied to the big number operations so either none
      or both of them should be overridden.
 
-   ---------- Footnotes ----------
 
-   (1) See
-<http://lists.gnu.org/archive/html/gnutls-devel/2011-02/msg00079.html>.
+---------- Footnotes ----------
 
-   (2) Check <http://home.gna.org/cryptodev-linux/> for the Linux kernel
-implementation of '/dev/crypto'.
+(1) See
+`http://lists.gnu.org/archive/html/gnutls-devel/2011-02/msg00079.html'.
+
+(2) Check `http://home.gna.org/cryptodev-linux/' for the Linux kernel
+implementation of `/dev/crypto'.
 
 
 File: gnutls.info,  Node: Upgrading from previous versions,  Next: Support,  Prev: Internal architecture of GnuTLS,  Up: Top
@@ -6789,7 +6754,7 @@ Appendix A Upgrading from previous versions
 *******************************************
 
 The GnuTLS library typically maintains binary and source code
-compatibility across versions.  The releases that have the major version
+compatibility across versions. The releases that have the major version
 increased break binary compatibility but source compatibility is
 provided.  This section lists exceptional cases where changes to
 existing code are required due to library changes.
@@ -6798,16 +6763,17 @@ Upgrading to 2.12.x from previous versions
 ==========================================
 
 GnuTLS 2.12.x is binary compatible with previous versions but changes
-the semantics of 'gnutls_transport_set_lowat', which might cause
-breakage in applications that relied on its default value be 1.  Two
+the semantics of `gnutls_transport_set_lowat', which might cause
+breakage in applications that relied on its default value be 1. Two
 fixes are proposed:
-   * Quick fix.  Explicitly call 'gnutls_transport_set_lowat (session,
+   * Quick fix. Explicitly call `gnutls_transport_set_lowat (session,
      1);' after *note gnutls_init::.
-   * Long term fix.  Because later versions of gnutls abolish the
-     functionality of using the system call 'select' to check for gnutls
-     pending data, the function *note gnutls_record_check_pending:: has
-     to be used to achieve the same functionality as described in *note
-     Asynchronous operation::.
+
+   * Long term fix. Because later versions of gnutls abolish the
+     functionality of using the system call `select' to check for
+     gnutls pending data, the function *note
+     gnutls_record_check_pending:: has to be used to achieve the same
+     functionality as described in *note Asynchronous operation::.
 
 Upgrading to 3.0.x from 2.12.x
 ==============================
@@ -6816,69 +6782,53 @@ GnuTLS 3.0.x is source compatible with previous versions except for the
 functions listed below.
 
 Old function           Replacement
-                       
--------------------------------------------------------------------
-'gnutls_transport_set_lowat'To replace its functionality the function
-                       *note gnutls_record_check_pending:: has
-                       to be used, as described in *note
+------------------------------------------------------------------- 
+`gnutls_transport_set_lowat' To replace its functionality the function
+                       *note gnutls_record_check_pending:: has to
+                       be used, as described in *note
                        Asynchronous operation::
-                       
-'gnutls_session_get_server_random',They are replaced by the safer function
-'gnutls_session_get_client_random'*note gnutls_session_get_random::
-                       
-'gnutls_session_get_master_secret'Replaced by the keying material exporters
+`gnutls_session_get_server_random',They are replaced by the safer function
+`gnutls_session_get_client_random'*note gnutls_session_get_random::
+`gnutls_session_get_master_secret'Replaced by the keying material exporters
                        discussed in *note Keying Material
                        Exporters::
-                       
-'gnutls_transport_set_global_errno'Replaced by using the system's errno
+`gnutls_transport_set_global_errno'Replaced by using the system's errno
                        fascility or *note
                        gnutls_transport_set_errno::.
-                       
-'gnutls_x509_privkey_verify_data'Replaced by *note
+`gnutls_x509_privkey_verify_data'Replaced by *note
                        gnutls_pubkey_verify_data::.
-                       
-'gnutls_certificate_verify_peers'Replaced by *note
+`gnutls_certificate_verify_peers'Replaced by *note
                        gnutls_certificate_verify_peers2::.
-                       
-'gnutls_psk_netconf_derive_key'Removed.  The key derivation function was
+`gnutls_psk_netconf_derive_key'Removed. The key derivation function was
                        never standardized.
-                       
-'gnutls_session_set_finished_function'Removed.
-                       
-'gnutls_ext_register'  Removed.  Extension registration API is
-                       now internal to allow easier changes in
-                       the API.
-                       
-'gnutls_certificate_get_x509_crls',Removed to allow updating the internal
-'gnutls_certificate_get_x509_cas'structures.  Replaced by *note
+`gnutls_session_set_finished_function'Removed.
+`gnutls_ext_register'  Removed. Extension registration API is now
+                       internal to allow easier changes in the
+                       API.
+`gnutls_certificate_get_x509_crls',Removed to allow updating the internal
+`gnutls_certificate_get_x509_cas'structures. Replaced by *note
                        gnutls_certificate_get_issuer::.
-                       
-'gnutls_certificate_get_openpgp_keyring'Removed.
-                       
-'gnutls_ia_*'          Removed.  The inner application
-                       extensions were completely removed (they
-                       failed to be standardized).
-                       
+`gnutls_certificate_get_openpgp_keyring'Removed.
+`gnutls_ia_*'          Removed. The inner application extensions
+                       were completely removed (they failed to be
+                       standardized).
 
 Upgrading to 3.1.x from 3.0.x
 =============================
 
-GnuTLS 3.1.x is source and binary compatible with GnuTLS 3.0.x releases.
-Few functions have been deprecated and are listed below.
+GnuTLS 3.1.x is source and binary compatible with GnuTLS 3.0.x
+releases. Few functions have been deprecated and are listed below.
 
 Old function           Replacement
-                       
--------------------------------------------------------------------
-'gnutls_pubkey_verify_hash'The function *note
+------------------------------------------------------------------- 
+`gnutls_pubkey_verify_hash'The function *note
                        gnutls_pubkey_verify_hash2:: is provided
                        and is functionally equivalent and safer
                        to use.
-                       
-'gnutls_pubkey_verify_data'The function *note
+`gnutls_pubkey_verify_data'The function *note
                        gnutls_pubkey_verify_data2:: is provided
                        and is functionally equivalent and safer
                        to use.
-                       
 
 
 File: gnutls.info,  Node: Support,  Next: Error codes,  Prev: Upgrading from previous versions,  Up: Top
@@ -6899,14 +6849,14 @@ File: gnutls.info,  Node: Getting help,  Next: Commercial Support,  Up: Support
 B.1 Getting Help
 ================
 
-A mailing list where users may help each other exists, and you can reach
-it by sending e-mail to <help-gnutls@gnu.org>.  Archives of the mailing
-list discussions, and an interface to manage subscriptions, is available
-through the World Wide Web at
-<http://lists.gnu.org/mailman/listinfo/help-gnutls>.
+A mailing list where users may help each other exists, and you can
+reach it by sending e-mail to <help-gnutls@gnu.org>.  Archives of the
+mailing list discussions, and an interface to manage subscriptions, is
+available through the World Wide Web at
+`http://lists.gnu.org/mailman/listinfo/help-gnutls'.
 
 A mailing list for developers are also available, see
-<http://www.gnu.org/software/gnutls/lists.html>.  Bug reports should be
+`http://www.gnu.org/software/gnutls/lists.html'.  Bug reports should be
 sent to <bug-gnutls@gnu.org>, see *note Bug Reports::.
 
 
@@ -6915,8 +6865,8 @@ File: gnutls.info,  Node: Commercial Support,  Next: Bug Reports,  Prev: Getting
 B.2 Commercial Support
 ======================
 
-Commercial support is available for users of GnuTLS. The kind of support
-that can be purchased may include:
+Commercial support is available for users of GnuTLS.  The kind of
+support that can be purchased may include:
 
    * Implement new features.  Such as a new TLS extension.
 
@@ -6927,6 +6877,7 @@ that can be purchased may include:
 
    * System design of components related to TLS.
 
+
 If you are interested, please write to:
 
 Simon Josefsson Datakonsult
@@ -6959,9 +6910,11 @@ report it.
      Make sure that the bug report includes all information you would
      need to fix this kind of bug for someone else.
 
-Please make an effort to produce a self-contained report, with something
-definite that can be tested or debugged.  Vague queries or piecemeal
-messages are difficult to act on and don't help the development effort.
+
+Please make an effort to produce a self-contained report, with
+something definite that can be tested or debugged.  Vague queries or
+piecemeal messages are difficult to act on and don't help the
+development effort.
 
 If your bug report is good, we will do our best to help you to get a
 corrected version of the software; if the bug report is poor, we won't
@@ -6973,7 +6926,7 @@ note.
 
 Send your bug report to:
 
-                         'bug-gnutls@gnu.org'
+                         `bug-gnutls@gnu.org'
 
 
 File: gnutls.info,  Node: Contributing,  Prev: Bug Reports,  Up: Support
@@ -6983,8 +6936,8 @@ B.4 Contributing
 
 If you want to submit a patch for inclusion - from solving a typo you
 discovered, up to adding support for a new feature - you should submit
-it as a bug report, using the process in *note Bug Reports::.  There are
-some things that you can do to increase the chances for it to be
+it as a bug report, using the process in *note Bug Reports::.  There
+are some things that you can do to increase the chances for it to be
 included in the official package.
 
 Unless your patch is very small (say, under 10 lines) we require that
@@ -7000,13 +6953,13 @@ style guides will help you:
    * Coding Style.  Follow the GNU Standards document.
 
      If you normally code using another coding standard, there is no
-     problem, but you should use 'indent' to reformat the code before
+     problem, but you should use `indent' to reformat the code before
      submitting your work.
 
-   * Use the unified diff format 'diff -u'.
+   * Use the unified diff format `diff -u'.
 
    * Return errors.  No reason whatsoever should abort the execution of
-     the library.  Even memory allocation errors, e.g.  when malloc
+     the library.  Even memory allocation errors, e.g. when malloc
      return NULL, should work although result in an error code.
 
    * Design with thread safety in mind.  Don't use global variables.
@@ -7024,6 +6977,7 @@ style guides will help you:
 
    * Supply a ChangeLog and NEWS entries, where appropriate.
 
+
 
 File: gnutls.info,  Node: Error codes,  Next: Supported ciphersuites,  Prev: Support,  Up: Top
 
@@ -7031,7 +6985,7 @@ Appendix C Error Codes and Descriptions
 ***************************************
 
 The error codes used throughout the library are described below.  The
-return code 'GNUTLS_E_SUCCESS' indicate successful operation, and is
+return code `GNUTLS_E_SUCCESS' indicate successful operation, and is
 guaranteed to have the value 0, so you can use it in logical
 expressions.
 
@@ -7052,15 +7006,15 @@ expressions.
 -10         GNUTLS_E_INVALID_SESSION      The specified session has
                                           been invalidated for some
                                           reason.
--12         GNUTLS_E_FATAL_ALERT_RECEIVED A TLS fatal alert has
-                                          been received.
+-12         GNUTLS_E_FATAL_ALERT_RECEIVED A TLS fatal alert has been
+                                          received.
 -15         GNUTLS_E_UNEXPECTED_PACKET    An unexpected TLS packet
                                           was received.
 -16         GNUTLS_E_WARNING_ALERT_RECEIVEDA TLS warning alert has
                                           been received.
 -18         GNUTLS_E_ERROR_IN_FINISHED_PACKETAn error was encountered
-                                          at the TLS Finished
-                                          packet calculation.
+                                          at the TLS Finished packet
+                                          calculation.
 -19         GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKETAn unexpected TLS
                                           handshake packet was
                                           received.
@@ -7081,8 +7035,7 @@ expressions.
                                           unavailable, try again.
 -29         GNUTLS_E_EXPIRED              The requested session has
                                           expired.
--30         GNUTLS_E_DB_ERROR             Error in Database
-                                          backend.
+-30         GNUTLS_E_DB_ERROR             Error in Database backend.
 -31         GNUTLS_E_SRP_PWD_ERROR        Error in password file.
 -32         GNUTLS_E_INSUFFICIENT_CREDENTIALSInsufficient credentials
                                           for that request.
@@ -7097,7 +7050,7 @@ expressions.
                                           handshake data.
 -39         GNUTLS_E_RECORD_LIMIT_REACHED The upper limit of record
                                           packet sequence numbers
-                                          has been reached.  Wow!
+                                          has been reached. Wow!
 -40         GNUTLS_E_ENCRYPTION_FAILED    Encryption has failed.
 -43         GNUTLS_E_CERTIFICATE_ERROR    Error in the certificate.
 -44         GNUTLS_E_PK_ENCRYPTION_FAILED Public key encryption has
@@ -7114,14 +7067,12 @@ expressions.
                                           detected.
 -49         GNUTLS_E_NO_CERTIFICATE_FOUND No certificate was found.
 -50         GNUTLS_E_INVALID_REQUEST      The request is invalid.
--51         GNUTLS_E_SHORT_MEMORY_BUFFER  The given memory buffer
-                                          is too short to hold
+-51         GNUTLS_E_SHORT_MEMORY_BUFFER  The given memory buffer is
+                                          too short to hold
                                           parameters.
 -52         GNUTLS_E_INTERRUPTED          Function was interrupted.
--53         GNUTLS_E_PUSH_ERROR           Error in the push
-                                          function.
--54         GNUTLS_E_PULL_ERROR           Error in the pull
-                                          function.
+-53         GNUTLS_E_PUSH_ERROR           Error in the push function.
+-54         GNUTLS_E_PULL_ERROR           Error in the pull function.
 -55         GNUTLS_E_RECEIVED_ILLEGAL_PARAMETERAn illegal parameter has
                                           been received.
 -56         GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLEThe requested data were
@@ -7149,52 +7100,45 @@ expressions.
                                           was not found
 -69         GNUTLS_E_ASN1_DER_ERROR       ASN1 parser: Error in DER
                                           parsing.
--70         GNUTLS_E_ASN1_VALUE_NOT_FOUND ASN1 parser: Value was
-                                          not found.
+-70         GNUTLS_E_ASN1_VALUE_NOT_FOUND ASN1 parser: Value was not
+                                          found.
 -71         GNUTLS_E_ASN1_GENERIC_ERROR   ASN1 parser: Generic
                                           parsing error.
 -72         GNUTLS_E_ASN1_VALUE_NOT_VALID ASN1 parser: Value is not
                                           valid.
--73         GNUTLS_E_ASN1_TAG_ERROR       ASN1 parser: Error in
-                                          TAG.
+-73         GNUTLS_E_ASN1_TAG_ERROR       ASN1 parser: Error in TAG.
 -74         GNUTLS_E_ASN1_TAG_IMPLICIT    ASN1 parser: error in
                                           implicit tag
--75         GNUTLS_E_ASN1_TYPE_ANY_ERROR  ASN1 parser: Error in
-                                          type 'ANY'.
--76         GNUTLS_E_ASN1_SYNTAX_ERROR    ASN1 parser: Syntax
-                                          error.
+-75         GNUTLS_E_ASN1_TYPE_ANY_ERROR  ASN1 parser: Error in type
+                                          'ANY'.
+-76         GNUTLS_E_ASN1_SYNTAX_ERROR    ASN1 parser: Syntax error.
 -77         GNUTLS_E_ASN1_DER_OVERFLOW    ASN1 parser: Overflow in
                                           DER parsing.
 -78         GNUTLS_E_TOO_MANY_EMPTY_PACKETSToo many empty record
-                                          packets have been
-                                          received.
+                                          packets have been received.
 -79         GNUTLS_E_OPENPGP_UID_REVOKED  The OpenPGP User ID is
                                           revoked.
 -80         GNUTLS_E_UNKNOWN_PK_ALGORITHM An unknown public key
-                                          algorithm was
-                                          encountered.
--81         GNUTLS_E_TOO_MANY_HANDSHAKE_PACKETSToo many handshake
-                                          packets have been
-                                          received.
+                                          algorithm was encountered.
+-81         GNUTLS_E_TOO_MANY_HANDSHAKE_PACKETSToo many handshake packets
+                                          have been received.
 -84         GNUTLS_E_NO_TEMPORARY_RSA_PARAMSNo temporary RSA
                                           parameters were found.
 -86         GNUTLS_E_NO_COMPRESSION_ALGORITHMSNo supported compression
-                                          algorithms have been
-                                          found.
--87         GNUTLS_E_NO_CIPHER_SUITES     No supported cipher
-                                          suites have been found.
--88         GNUTLS_E_OPENPGP_GETKEY_FAILEDCould not get OpenPGP
-                                          key.
+                                          algorithms have been found.
+-87         GNUTLS_E_NO_CIPHER_SUITES     No supported cipher suites
+                                          have been found.
+-88         GNUTLS_E_OPENPGP_GETKEY_FAILEDCould not get OpenPGP key.
 -89         GNUTLS_E_PK_SIG_VERIFY_FAILED Public key signature
                                           verification has failed.
 -90         GNUTLS_E_ILLEGAL_SRP_USERNAME The SRP username supplied
                                           is illegal.
 -91         GNUTLS_E_SRP_PWD_PARSING_ERRORParsing error in password
                                           file.
--93         GNUTLS_E_NO_TEMPORARY_DH_PARAMSNo temporary DH
-                                          parameters were found.
--94         GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTEDThe OpenPGP fingerprint
-                                          is not supported.
+-93         GNUTLS_E_NO_TEMPORARY_DH_PARAMSNo temporary DH parameters
+                                          were found.
+-94         GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTEDThe OpenPGP fingerprint is
+                                          not supported.
 -95         GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTEThe certificate has
                                           unsupported attributes.
 -96         GNUTLS_E_UNKNOWN_HASH_ALGORITHMThe hash algorithm is
@@ -7206,9 +7150,8 @@ expressions.
 -99         GNUTLS_E_INVALID_PASSWORD     The given password
                                           contains invalid
                                           characters.
--100        GNUTLS_E_MAC_VERIFY_FAILED    The Message
-                                          Authentication Code
-                                          verification failed.
+-100        GNUTLS_E_MAC_VERIFY_FAILED    The Message Authentication
+                                          Code verification failed.
 -101        GNUTLS_E_CONSTRAINT_ERROR     Some constraint limits
                                           were reached.
 -102        GNUTLS_E_WARNING_IA_IPHF_RECEIVEDReceived a TLS/IA
@@ -7218,12 +7161,11 @@ expressions.
                                           Phase Finished message
 -104        GNUTLS_E_IA_VERIFY_FAILED     Verifying TLS/IA phase
                                           checksum failed
--105        GNUTLS_E_UNKNOWN_ALGORITHM    The specified algorithm
-                                          or protocol is unknown.
--106        GNUTLS_E_UNSUPPORTED_SIGNATURE_ALGORITHMThe signature algorithm
-                                          is not supported.
--107        GNUTLS_E_SAFE_RENEGOTIATION_FAILEDSafe renegotiation
-                                          failed.
+-105        GNUTLS_E_UNKNOWN_ALGORITHM    The specified algorithm or
+                                          protocol is unknown.
+-106        GNUTLS_E_UNSUPPORTED_SIGNATURE_ALGORITHMThe signature algorithm is
+                                          not supported.
+-107        GNUTLS_E_SAFE_RENEGOTIATION_FAILEDSafe renegotiation failed.
 -108        GNUTLS_E_UNSAFE_RENEGOTIATION_DENIEDUnsafe renegotiation
                                           denied.
 -109        GNUTLS_E_UNKNOWN_SRP_USERNAME The SRP username supplied
@@ -7231,12 +7173,11 @@ expressions.
 -110        GNUTLS_E_PREMATURE_TERMINATIONThe TLS connection was
                                           non-properly terminated.
 -201        GNUTLS_E_BASE64_ENCODING_ERRORBase64 encoding error.
--202        GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARYThe crypto library
-                                          version is too old.
+-202        GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARYThe crypto library version
+                                          is too old.
 -203        GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARYThe tasn1 library version
                                           is too old.
--204        GNUTLS_E_OPENPGP_KEYRING_ERRORError loading the
-                                          keyring.
+-204        GNUTLS_E_OPENPGP_KEYRING_ERRORError loading the keyring.
 -205        GNUTLS_E_X509_UNSUPPORTED_OID The OID is not supported.
 -206        GNUTLS_E_RANDOM_FAILED        Failed to acquire random
                                           data.
@@ -7247,8 +7188,8 @@ expressions.
 -209        GNUTLS_E_CRYPTO_ALREADY_REGISTEREDThere is already a crypto
                                           algorithm with lower
                                           priority.
--210        GNUTLS_E_HANDSHAKE_TOO_LARGE  The handshake data size
-                                          is too large.
+-210        GNUTLS_E_HANDSHAKE_TOO_LARGE  The handshake data size is
+                                          too large.
 -211        GNUTLS_E_CRYPTODEV_IOCTL_ERRORError interfacing with
                                           /dev/crypto
 -212        GNUTLS_E_CRYPTODEV_DEVICE_ERRORError opening /dev/crypto
@@ -7271,8 +7212,7 @@ expressions.
 -303        GNUTLS_E_PKCS11_PIN_ERROR     Error in provided PIN.
 -305        GNUTLS_E_PKCS11_SLOT_ERROR    PKCS #11 error in slot
 -306        GNUTLS_E_LOCKING_ERROR        Thread locking error
--307        GNUTLS_E_PKCS11_ATTRIBUTE_ERRORPKCS #11 error in
-                                          attribute
+-307        GNUTLS_E_PKCS11_ATTRIBUTE_ERRORPKCS #11 error in attribute
 -308        GNUTLS_E_PKCS11_DEVICE_ERROR  PKCS #11 error in device
 -309        GNUTLS_E_PKCS11_DATA_ERROR    PKCS #11 error in data
 -310        GNUTLS_E_PKCS11_UNSUPPORTED_FEATURE_ERRORPKCS #11 unsupported
@@ -7281,17 +7221,14 @@ expressions.
 -312        GNUTLS_E_PKCS11_PIN_EXPIRED   PKCS #11 PIN expired
 -313        GNUTLS_E_PKCS11_PIN_LOCKED    PKCS #11 PIN locked
 -314        GNUTLS_E_PKCS11_SESSION_ERROR PKCS #11 error in session
--315        GNUTLS_E_PKCS11_SIGNATURE_ERRORPKCS #11 error in
-                                          signature
+-315        GNUTLS_E_PKCS11_SIGNATURE_ERRORPKCS #11 error in signature
 -316        GNUTLS_E_PKCS11_TOKEN_ERROR   PKCS #11 error in token
 -317        GNUTLS_E_PKCS11_USER_ERROR    PKCS #11 user error
 -318        GNUTLS_E_CRYPTO_INIT_FAILED   The initialization of
-                                          crypto backend has
-                                          failed.
+                                          crypto backend has failed.
 -319        GNUTLS_E_TIMEDOUT             The operation timed out
 -320        GNUTLS_E_USER_ERROR           The operation was
-                                          cancelled due to user
-                                          error
+                                          cancelled due to user error
 -321        GNUTLS_E_ECC_NO_SUPPORTED_CURVESNo supported ECC curves
                                           were found
 -322        GNUTLS_E_ECC_UNSUPPORTED_CURVEThe curve is unsupported
@@ -7310,9 +7247,9 @@ expressions.
 -328        GNUTLS_E_SESSION_EOF          Peer has terminated the
                                           connection
 -329        GNUTLS_E_TPM_ERROR            TPM error.
--330        GNUTLS_E_TPM_KEY_PASSWORD_ERRORError in provided
-                                          password for key to be
-                                          loaded in TPM.
+-330        GNUTLS_E_TPM_KEY_PASSWORD_ERRORError in provided password
+                                          for key to be loaded in
+                                          TPM.
 -331        GNUTLS_E_TPM_SRK_PASSWORD_ERRORError in provided SRK
                                           password for TPM.
 -332        GNUTLS_E_TPM_SESSION_ERROR    Cannot initialize a
@@ -7339,7 +7276,7 @@ Ciphersuites
 ============
 
 Ciphersuite name                            TLS ID         Since
---------------------------------------------------------------------------
+-------------------------------------------------------------------------- 
 TLS_RSA_NULL_MD5                            0x00 0x01      SSL3.0
 TLS_RSA_NULL_SHA1                           0x00 0x02      SSL3.0
 TLS_RSA_NULL_SHA256                         0x00 0x3B      TLS1.2
@@ -7435,106 +7372,165 @@ TLS_RSA_EXPORT_ARCFOUR_40_MD5               0x00 0x03      SSL3.0
 Certificate types
 =================
 
-'X.509'
-'OPENPGP'
+`X.509'
+
+`OPENPGP'
 
 Protocols
 =========
 
-'SSL3.0'
-'TLS1.0'
-'TLS1.1'
-'TLS1.2'
-'DTLS0.9'
-'DTLS1.0'
+`SSL3.0'
+
+`TLS1.0'
+
+`TLS1.1'
+
+`TLS1.2'
+
+`DTLS0.9'
+
+`DTLS1.0'
 
 Ciphers
 =======
 
-'AES-256-CBC'
-'AES-192-CBC'
-'AES-128-CBC'
-'AES-128-GCM'
-'AES-256-GCM'
-'ARCFOUR-128'
-'CAMELLIA-256-CBC'
-'CAMELLIA-192-CBC'
-'CAMELLIA-128-CBC'
-'3DES-CBC'
-'DES-CBC'
-'ARCFOUR-40'
-'RC2-40'
+`AES-256-CBC'
+
+`AES-192-CBC'
+
+`AES-128-CBC'
+
+`AES-128-GCM'
+
+`AES-256-GCM'
+
+`ARCFOUR-128'
+
+`CAMELLIA-256-CBC'
+
+`CAMELLIA-192-CBC'
+
+`CAMELLIA-128-CBC'
+
+`3DES-CBC'
+
+`DES-CBC'
+
+`ARCFOUR-40'
+
+`RC2-40'
 
 MAC algorithms
 ==============
 
-'SHA1'
-'MD5'
-'SHA256'
-'SHA384'
-'SHA512'
-'SHA224'
-'AEAD'
+`SHA1'
+
+`MD5'
+
+`SHA256'
+
+`SHA384'
+
+`SHA512'
+
+`SHA224'
+
+`AEAD'
 
 Key exchange methods
 ====================
 
-'ANON-DH'
-'ANON-ECDH'
-'RSA'
-'RSA-EXPORT'
-'DHE-RSA'
-'DHE-DSS'
-'ECDHE-RSA'
-'ECDHE-ECDSA'
-'SRP-DSS'
-'SRP-RSA'
-'SRP'
-'PSK'
-'DHE-PSK'
-'ECDHE-PSK'
+`ANON-DH'
+
+`ANON-ECDH'
+
+`RSA'
+
+`RSA-EXPORT'
+
+`DHE-RSA'
+
+`DHE-DSS'
+
+`ECDHE-RSA'
+
+`ECDHE-ECDSA'
+
+`SRP-DSS'
+
+`SRP-RSA'
+
+`SRP'
+
+`PSK'
+
+`DHE-PSK'
+
+`ECDHE-PSK'
 
 Public key algorithms
 =====================
 
-'RSA'
-'DSA'
-'EC'
+`RSA'
+
+`DSA'
+
+`EC'
 
 Public key signature algorithms
 ===============================
 
-'RSA-SHA1'
-'RSA-SHA224'
-'RSA-SHA256'
-'RSA-SHA384'
-'RSA-SHA512'
-'RSA-RMD160'
-'DSA-SHA1'
-'DSA-SHA224'
-'DSA-SHA256'
-'RSA-MD5'
-'RSA-MD2'
-'ECDSA-SHA1'
-'ECDSA-SHA224'
-'ECDSA-SHA256'
-'ECDSA-SHA384'
-'ECDSA-SHA512'
+`RSA-SHA1'
+
+`RSA-SHA224'
+
+`RSA-SHA256'
+
+`RSA-SHA384'
+
+`RSA-SHA512'
+
+`RSA-RMD160'
+
+`DSA-SHA1'
+
+`DSA-SHA224'
+
+`DSA-SHA256'
+
+`RSA-MD5'
+
+`RSA-MD2'
+
+`ECDSA-SHA1'
+
+`ECDSA-SHA224'
+
+`ECDSA-SHA256'
+
+`ECDSA-SHA384'
+
+`ECDSA-SHA512'
 
 Elliptic curves
 ===============
 
-'SECP192R1'
-'SECP224R1'
-'SECP256R1'
-'SECP384R1'
-'SECP521R1'
+`SECP192R1'
+
+`SECP224R1'
+
+`SECP256R1'
+
+`SECP384R1'
+
+`SECP521R1'
 
 Compression methods
 ===================
 
-'DEFLATE'
-'NULL'
+`DEFLATE'
+
+`NULL'
 
 
 File: gnutls.info,  Node: API reference,  Next: Copying Information,  Prev: Supported ciphersuites,  Up: Top
@@ -7564,22 +7560,22 @@ File: gnutls.info,  Node: Core TLS API,  Next: High level TLS API,  Up: API refe
 E.1 Core TLS API
 ================
 
-The prototypes for the following functions lie in 'gnutls/gnutls.h'.
+The prototypes for the following functions lie in `gnutls/gnutls.h'.
 
 gnutls_alert_get
 ----------------
 
  -- Function: gnutls_alert_description_t gnutls_alert_get
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function will return the last alert number received.  This
-     function should be called when 'GNUTLS_E_WARNING_ALERT_RECEIVED' or
-     'GNUTLS_E_FATAL_ALERT_RECEIVED' errors are returned by a gnutls
+     function should be called when `GNUTLS_E_WARNING_ALERT_RECEIVED'
+     or `GNUTLS_E_FATAL_ALERT_RECEIVED'  errors are returned by a gnutls
      function.  The peer may send alerts if he encounters an error.  If
      no alert has been received the returned value is undefined.
 
-     *Returns:* the last alert received, a 'gnutls_alert_description_t'
+     *Returns:* the last alert received, a `gnutls_alert_description_t'
      value.
 
 gnutls_alert_get_name
@@ -7590,9 +7586,9 @@ gnutls_alert_get_name
      ALERT: is an alert number.
 
      This function will return a string that describes the given alert
-     number, or 'NULL' .  See 'gnutls_alert_get()' .
+     number, or `NULL' .  See `gnutls_alert_get()' .
 
-     *Returns:* string corresponding to 'gnutls_alert_description_t'
+     *Returns:* string corresponding to `gnutls_alert_description_t'
      value.
 
 gnutls_alert_get_strname
@@ -7604,7 +7600,7 @@ gnutls_alert_get_strname
 
      This function will return a string of the name of the alert.
 
-     *Returns:* string corresponding to 'gnutls_alert_description_t'
+     *Returns:* string corresponding to `gnutls_alert_description_t'
      value.
 
      *Since:* 3.0
@@ -7614,23 +7610,23 @@ gnutls_alert_send
 
  -- Function: int gnutls_alert_send (gnutls_session_t SESSION,
           gnutls_alert_level_t LEVEL, gnutls_alert_description_t DESC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      LEVEL: is the level of the alert
 
      DESC: is the alert description
 
-     This function will send an alert to the peer in order to inform him
-     of something important (eg.  his Certificate could not be
+     This function will send an alert to the peer in order to inform
+     him of something important (eg. his Certificate could not be
      verified).  If the alert level is Fatal then the peer is expected
      to close the connection, otherwise he may ignore the alert and
      continue.
 
      The error code of the underlying record send function will be
-     returned, so you may also receive 'GNUTLS_E_INTERRUPTED' or
-     'GNUTLS_E_AGAIN' as well.
+     returned, so you may also receive `GNUTLS_E_INTERRUPTED'  or
+     `GNUTLS_E_AGAIN'  as well.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_alert_send_appropriate
@@ -7638,22 +7634,22 @@ gnutls_alert_send_appropriate
 
  -- Function: int gnutls_alert_send_appropriate (gnutls_session_t
           SESSION, int ERR)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      ERR: is an integer
 
      Sends an alert to the peer depending on the error code returned by
-     a gnutls function.  This function will call
-     'gnutls_error_to_alert()' to determine the appropriate alert to
+     a gnutls function. This function will call
+     `gnutls_error_to_alert()' to determine the appropriate alert to
      send.
 
-     This function may also return 'GNUTLS_E_AGAIN' , or
-     'GNUTLS_E_INTERRUPTED' .
+     This function may also return `GNUTLS_E_AGAIN' , or
+     `GNUTLS_E_INTERRUPTED' .
 
-     If the return value is 'GNUTLS_E_INVALID_REQUEST' , then no alert
+     If the return value is `GNUTLS_E_INVALID_REQUEST' , then no alert
      has been sent to the peer.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_anon_allocate_client_credentials
@@ -7661,31 +7657,33 @@ gnutls_anon_allocate_client_credentials
 
  -- Function: int gnutls_anon_allocate_client_credentials
           (gnutls_anon_client_credentials_t * SC)
-     SC: is a pointer to a 'gnutls_anon_client_credentials_t' structure.
+     SC: is a pointer to a `gnutls_anon_client_credentials_t'
+     structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to allocate it.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_anon_allocate_server_credentials
 ---------------------------------------
 
  -- Function: int gnutls_anon_allocate_server_credentials
           (gnutls_anon_server_credentials_t * SC)
-     SC: is a pointer to a 'gnutls_anon_server_credentials_t' structure.
+     SC: is a pointer to a `gnutls_anon_server_credentials_t'
+     structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to allocate it.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_anon_free_client_credentials
 -----------------------------------
 
  -- Function: void gnutls_anon_free_client_credentials
           (gnutls_anon_client_credentials_t SC)
-     SC: is a 'gnutls_anon_client_credentials_t' structure.
+     SC: is a `gnutls_anon_client_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to free (deallocate) it.
@@ -7695,7 +7693,7 @@ gnutls_anon_free_server_credentials
 
  -- Function: void gnutls_anon_free_server_credentials
           (gnutls_anon_server_credentials_t SC)
-     SC: is a 'gnutls_anon_server_credentials_t' structure.
+     SC: is a `gnutls_anon_server_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to free (deallocate) it.
@@ -7712,7 +7710,7 @@ gnutls_anon_set_params_function
 
      This function will set a callback in order for the server to get
      the Diffie-Hellman or RSA parameters for anonymous authentication.
-     The callback should return 'GNUTLS_E_SUCCESS' (0) on success.
+     The callback should return `GNUTLS_E_SUCCESS'  (0) on success.
 
 gnutls_anon_set_server_dh_params
 --------------------------------
@@ -7740,76 +7738,76 @@ gnutls_anon_set_server_params_function
 
      This function will set a callback in order for the server to get
      the Diffie-Hellman parameters for anonymous authentication.  The
-     callback should return 'GNUTLS_E_SUCCESS' (0) on success.
+     callback should return `GNUTLS_E_SUCCESS'  (0) on success.
 
 gnutls_auth_client_get_type
 ---------------------------
 
  -- Function: gnutls_credentials_type_t gnutls_auth_client_get_type
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Returns the type of credentials that were used for client
      authentication.  The returned information is to be used to
      distinguish the function used to access authentication data.
 
      *Returns:* The type of credentials for the client authentication
-     schema, a 'gnutls_credentials_type_t' type.
+     schema, a `gnutls_credentials_type_t'  type.
 
 gnutls_auth_get_type
 --------------------
 
  -- Function: gnutls_credentials_type_t gnutls_auth_get_type
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Returns type of credentials for the current authentication schema.
      The returned information is to be used to distinguish the function
      used to access authentication data.
 
-     Eg.  for CERTIFICATE ciphersuites (key exchange algorithms:
-     'GNUTLS_KX_RSA' , 'GNUTLS_KX_DHE_RSA' ), the same function are to
+     Eg. for CERTIFICATE ciphersuites (key exchange algorithms:
+     `GNUTLS_KX_RSA' , `GNUTLS_KX_DHE_RSA' ), the same function are to
      be used to access the authentication data.
 
      *Returns:* The type of credentials for the current authentication
-     schema, a 'gnutls_credentials_type_t' type.
+     schema, a `gnutls_credentials_type_t'  type.
 
 gnutls_auth_server_get_type
 ---------------------------
 
  -- Function: gnutls_credentials_type_t gnutls_auth_server_get_type
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Returns the type of credentials that were used for server
      authentication.  The returned information is to be used to
      distinguish the function used to access authentication data.
 
      *Returns:* The type of credentials for the server authentication
-     schema, a 'gnutls_credentials_type_t' type.
+     schema, a `gnutls_credentials_type_t'  type.
 
 gnutls_bye
 ----------
 
  -- Function: int gnutls_bye (gnutls_session_t SESSION,
           gnutls_close_request_t HOW)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      HOW: is an integer
 
-     Terminates the current TLS/SSL connection.  The connection should
-     have been initiated using 'gnutls_handshake()' .  'how' should be
-     one of 'GNUTLS_SHUT_RDWR' , 'GNUTLS_SHUT_WR' .
+     Terminates the current TLS/SSL connection. The connection should
+     have been initiated using `gnutls_handshake()' .   `how' should be
+     one of `GNUTLS_SHUT_RDWR' , `GNUTLS_SHUT_WR' .
 
-     In case of 'GNUTLS_SHUT_RDWR' the TLS session gets terminated and
-     further receives and sends will be disallowed.  If the return value
-     is zero you may continue using the underlying transport layer.
-     'GNUTLS_SHUT_RDWR' sends an alert containing a close request and
-     waits for the peer to reply with the same message.
+     In case of `GNUTLS_SHUT_RDWR'  the TLS session gets terminated and
+     further receives and sends will be disallowed.  If the return
+     value is zero you may continue using the underlying transport
+     layer. `GNUTLS_SHUT_RDWR'  sends an alert containing a close
+     request and waits for the peer to reply with the same message.
 
-     In case of 'GNUTLS_SHUT_WR' the TLS session gets terminated and
-     further sends will be disallowed.  In order to reuse the connection
-     you should wait for an EOF from the peer.  'GNUTLS_SHUT_WR' sends
+     In case of `GNUTLS_SHUT_WR'  the TLS session gets terminated and
+     further sends will be disallowed. In order to reuse the connection
+     you should wait for an EOF from the peer.  `GNUTLS_SHUT_WR'  sends
      an alert containing a close request.
 
      Note that not all implementations will properly terminate a TLS
@@ -7818,10 +7816,10 @@ gnutls_bye
      distinguishing between a malicious party prematurely terminating
      the connection and normal termination.
 
-     This function may also return 'GNUTLS_E_AGAIN' or
-     'GNUTLS_E_INTERRUPTED' ; cf.  'gnutls_record_get_direction()' .
+     This function may also return `GNUTLS_E_AGAIN'  or
+     `GNUTLS_E_INTERRUPTED' ; cf.  `gnutls_record_get_direction()' .
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code, see
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code, see
      function documentation for entire semantics.
 
 gnutls_certificate_activation_time_peers
@@ -7836,7 +7834,7 @@ gnutls_certificate_activation_time_peers
 
      *Returns:* (time_t)-1 on error.
 
-     *Deprecated:* 'gnutls_certificate_verify_peers2()' now verifies
+     *Deprecated:* `gnutls_certificate_verify_peers2()'  now verifies
      activation times.
 
 gnutls_certificate_allocate_credentials
@@ -7844,13 +7842,13 @@ gnutls_certificate_allocate_credentials
 
  -- Function: int gnutls_certificate_allocate_credentials
           (gnutls_certificate_credentials_t * RES)
-     RES: is a pointer to a 'gnutls_certificate_credentials_t'
+     RES: is a pointer to a `gnutls_certificate_credentials_t'
      structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to allocate it.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_certificate_client_get_request_status
 --------------------------------------------
@@ -7876,7 +7874,7 @@ gnutls_certificate_expiration_time_peers
 
      *Returns:* (time_t)-1 on error.
 
-     *Deprecated:* 'gnutls_certificate_verify_peers2()' now verifies
+     *Deprecated:* `gnutls_certificate_verify_peers2()'  now verifies
      expiration times.
 
 gnutls_certificate_free_ca_names
@@ -7884,14 +7882,14 @@ gnutls_certificate_free_ca_names
 
  -- Function: void gnutls_certificate_free_ca_names
           (gnutls_certificate_credentials_t SC)
-     SC: is a 'gnutls_certificate_credentials_t' structure.
+     SC: is a `gnutls_certificate_credentials_t'  structure.
 
-     This function will delete all the CA name in the given credentials.
-     Clients may call this to save some memory since in client side the
-     CA names are not used.  Servers might want to use this function if
-     a large list of trusted CAs is present and sending the names of it
-     would just consume bandwidth without providing information to
-     client.
+     This function will delete all the CA name in the given
+     credentials. Clients may call this to save some memory since in
+     client side the CA names are not used. Servers might want to use
+     this function if a large list of trusted CAs is present and
+     sending the names of it would just consume bandwidth without
+     providing information to client.
 
      CA names are used by servers to advertise the CAs they support to
      clients.
@@ -7901,11 +7899,11 @@ gnutls_certificate_free_cas
 
  -- Function: void gnutls_certificate_free_cas
           (gnutls_certificate_credentials_t SC)
-     SC: is a 'gnutls_certificate_credentials_t' structure.
+     SC: is a `gnutls_certificate_credentials_t'  structure.
 
      This function will delete all the CAs associated with the given
-     credentials.  Servers that do not use
-     'gnutls_certificate_verify_peers2()' may call this to save some
+     credentials. Servers that do not use
+     `gnutls_certificate_verify_peers2()'  may call this to save some
      memory.
 
 gnutls_certificate_free_credentials
@@ -7913,7 +7911,7 @@ gnutls_certificate_free_credentials
 
  -- Function: void gnutls_certificate_free_credentials
           (gnutls_certificate_credentials_t SC)
-     SC: is a 'gnutls_certificate_credentials_t' structure.
+     SC: is a `gnutls_certificate_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to free (deallocate) it.
@@ -7927,7 +7925,7 @@ gnutls_certificate_free_crls
 
  -- Function: void gnutls_certificate_free_crls
           (gnutls_certificate_credentials_t SC)
-     SC: is a 'gnutls_certificate_credentials_t' structure.
+     SC: is a `gnutls_certificate_credentials_t'  structure.
 
      This function will delete all the CRLs associated with the given
      credentials.
@@ -7937,10 +7935,10 @@ gnutls_certificate_free_keys
 
  -- Function: void gnutls_certificate_free_keys
           (gnutls_certificate_credentials_t SC)
-     SC: is a 'gnutls_certificate_credentials_t' structure.
+     SC: is a `gnutls_certificate_credentials_t'  structure.
 
      This function will delete all the keys and the certificates
-     associated with the given credentials.  This function must not be
+     associated with the given credentials. This function must not be
      called when a TLS negotiation that uses the credentials is in
      progress.
 
@@ -7950,18 +7948,17 @@ gnutls_certificate_get_issuer
  -- Function: int gnutls_certificate_get_issuer
           (gnutls_certificate_credentials_t SC, gnutls_x509_crt_t CERT,
           gnutls_x509_crt_t* ISSUER, unsigned int FLAGS)
-     SC: is a 'gnutls_certificate_credentials_t' structure.
+     SC: is a `gnutls_certificate_credentials_t'  structure.
 
      CERT: is the certificate to find issuer for
 
-     ISSUER: Will hold the issuer if any.  Should be treated as
-     constant.
+     ISSUER: Will hold the issuer if any. Should be treated as constant.
 
      FLAGS: Use zero.
 
      This function will return the issuer of a given certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -7975,11 +7972,11 @@ gnutls_certificate_get_ours
 
      Gets the certificate as sent to the peer in the last handshake.
      The certificate is in raw (DER) format.  No certificate list is
-     being returned.  Only the first certificate.
+     being returned. Only the first certificate.
 
-     *Returns:* a pointer to a 'gnutls_datum_t' containing our
-     certificate, or 'NULL' in case of an error or if no certificate was
-     used.
+     *Returns:* a pointer to a `gnutls_datum_t'  containing our
+     certificate, or `NULL'  in case of an error or if no certificate
+     was used.
 
 gnutls_certificate_get_peers
 ----------------------------
@@ -7999,8 +7996,8 @@ gnutls_certificate_get_peers
      In case of OpenPGP keys a single key will be returned in raw
      format.
 
-     *Returns:* a pointer to a 'gnutls_datum_t' containing our
-     certificates, or 'NULL' in case of an error or if no certificate
+     *Returns:* a pointer to a `gnutls_datum_t'  containing our
+     certificates, or `NULL'  in case of an error or if no certificate
      was used.
 
 gnutls_certificate_get_peers_subkey_id
@@ -8012,10 +8009,10 @@ gnutls_certificate_get_peers_subkey_id
 
      ID: will contain the ID
 
-     Get the peer's subkey ID when OpenPGP certificates are used.  The
-     returned 'id' should be treated as constant.
+     Get the peer's subkey ID when OpenPGP certificates are used. The
+     returned  `id' should be treated as constant.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
      *Since:* 3.1.3
@@ -8025,13 +8022,13 @@ gnutls_certificate_send_x509_rdn_sequence
 
  -- Function: void gnutls_certificate_send_x509_rdn_sequence
           (gnutls_session_t SESSION, int STATUS)
-     SESSION: is a pointer to a 'gnutls_session_t' structure.
+     SESSION: is a pointer to a `gnutls_session_t'  structure.
 
      STATUS: is 0 or 1
 
      If status is non zero, this function will order gnutls not to send
-     the rdnSequence in the certificate request message.  That is the
-     server will not advertise its trusted CAs to the peer.  If status
+     the rdnSequence in the certificate request message. That is the
+     server will not advertise its trusted CAs to the peer. If status
      is zero then the default behaviour will take effect, which is to
      advertise the server's trusted CAs.
 
@@ -8043,14 +8040,14 @@ gnutls_certificate_server_set_request
 
  -- Function: void gnutls_certificate_server_set_request
           (gnutls_session_t SESSION, gnutls_certificate_request_t REQ)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      REQ: is one of GNUTLS_CERT_REQUEST, GNUTLS_CERT_REQUIRE
 
      This function specifies if we (in case of a server) are going to
-     send a certificate request message to the client.  If 'req' is
+     send a certificate request message to the client. If  `req' is
      GNUTLS_CERT_REQUIRE then the server will return an error if the
-     peer does not provide a certificate.  If you do not call this
+     peer does not provide a certificate. If you do not call this
      function then the client will not be asked to send a certificate.
 
 gnutls_certificate_set_dh_params
@@ -8064,10 +8061,10 @@ gnutls_certificate_set_dh_params
      DH_PARAMS: is a structure that holds Diffie-Hellman parameters.
 
      This function will set the Diffie-Hellman parameters for a
-     certificate server to use.  These parameters will be used in
+     certificate server to use. These parameters will be used in
      Ephemeral Diffie-Hellman cipher suites.  Note that only a pointer
-     to the parameters are stored in the certificate handle, so you must
-     not deallocate the parameters before the certificate is
+     to the parameters are stored in the certificate handle, so you
+     must not deallocate the parameters before the certificate is
      deallocated.
 
 gnutls_certificate_set_ocsp_status_request_file
@@ -8083,13 +8080,13 @@ gnutls_certificate_set_ocsp_status_request_file
      FLAGS: should be zero
 
      This function sets the filename of an OCSP response, that will be
-     sent to the client if requests an OCSP certificate status.  This is
+     sent to the client if requests an OCSP certificate status. This is
      a convenience function which is inefficient on busy servers since
-     the file is opened on every access.  Use
-     'gnutls_certificate_set_ocsp_status_request_function()' to
+     the file is opened on every access. Use
+     `gnutls_certificate_set_ocsp_status_request_function()'  to
      fine-tune file accesses.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      *Since:* 3.1.3
@@ -8100,7 +8097,7 @@ gnutls_certificate_set_ocsp_status_request_function
  -- Function: void gnutls_certificate_set_ocsp_status_request_function
           (gnutls_certificate_credentials_t SC,
           gnutls_status_request_ocsp_func OCSP_FUNC, void * PTR)
-     SC: is a 'gnutls_certificate_credentials_t' structure.
+     SC: is a `gnutls_certificate_credentials_t'  structure.
 
      OCSP_FUNC: function pointer to OCSP status request callback.
 
@@ -8116,14 +8113,14 @@ gnutls_certificate_set_ocsp_status_request_function
 
      The callback will be invoked if the client requests an OCSP
      certificate status.  The callback may return
-     'GNUTLS_E_NO_CERTIFICATE_STATUS' , if there is no recent OCSP
-     response.  If the callback returns 'GNUTLS_E_SUCCESS' , the server
+     `GNUTLS_E_NO_CERTIFICATE_STATUS' , if there is no recent OCSP
+     response. If the callback returns `GNUTLS_E_SUCCESS' , the server
      will provide the client with the ocsp_response.
 
-     The response must be a value allocated using 'gnutls_malloc()' ,
+     The response must be a value allocated using `gnutls_malloc()' ,
      and will be deinitialized when needed.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      *Since:* 3.1.3
@@ -8140,8 +8137,8 @@ gnutls_certificate_set_params_function
 
      This function will set a callback in order for the server to get
      the Diffie-Hellman or RSA parameters for certificate
-     authentication.  The callback should return 'GNUTLS_E_SUCCESS' (0)
-     on success.
+     authentication.  The callback should return `GNUTLS_E_SUCCESS'
+     (0) on success.
 
 gnutls_certificate_set_pin_function
 -----------------------------------
@@ -8149,15 +8146,15 @@ gnutls_certificate_set_pin_function
  -- Function: void gnutls_certificate_set_pin_function
           (gnutls_certificate_credentials_t CRED, gnutls_pin_callback_t
           FN, void * USERDATA)
-     CRED: is a 'gnutls_certificate_credentials_t' structure.
+     CRED: is a `gnutls_certificate_credentials_t'  structure.
 
      FN: A PIN callback
 
      USERDATA: Data to be passed in the callback
 
-     This function will set a callback function to be used when required
-     to access a protected object.  This function overrides any other
-     global PIN functions.
+     This function will set a callback function to be used when
+     required to access a protected object. This function overrides any
+     other global PIN functions.
 
      Note that this function must be called right after initialization
      to have effect.
@@ -8170,13 +8167,13 @@ gnutls_certificate_set_retrieve_function
  -- Function: void gnutls_certificate_set_retrieve_function
           (gnutls_certificate_credentials_t CRED,
           gnutls_certificate_retrieve_function * FUNC)
-     CRED: is a 'gnutls_certificate_credentials_t' structure.
+     CRED: is a `gnutls_certificate_credentials_t'  structure.
 
      FUNC: is the callback function
 
      This function sets a callback to be called in order to retrieve the
-     certificate to be used in the handshake.  You are advised to use
-     'gnutls_certificate_set_retrieve_function2()' because it is much
+     certificate to be used in the handshake. You are advised to use
+     `gnutls_certificate_set_retrieve_function2()'  because it is much
      more efficient in the processing it requires from gnutls.
 
      The callback's function prototype is: int
@@ -8184,17 +8181,17 @@ gnutls_certificate_set_retrieve_function
      nreqs, const gnutls_pk_algorithm_t* pk_algos, int pk_algos_length,
      gnutls_retr2_st* st);
 
-     'req_ca_cert' is only used in X.509 certificates.  Contains a list
+     `req_ca_cert' is only used in X.509 certificates.  Contains a list
      with the CA names that the server considers trusted.  Normally we
      should send a certificate that is signed by one of these CAs.
-     These names are DER encoded.  To get a more meaningful value use
-     the function 'gnutls_x509_rdn_get()' .
+     These names are DER encoded. To get a more meaningful value use
+     the function `gnutls_x509_rdn_get()' .
 
-     'pk_algos' contains a list with server's acceptable signature
+     `pk_algos' contains a list with server's acceptable signature
      algorithms.  The certificate returned should support the server's
      given algorithms.
 
-     'st' should contain the certificates and private keys.
+     `st' should contain the certificates and private keys.
 
      If the callback function is provided then gnutls will call it, in
      the handshake, after the certificate request message has been
@@ -8203,8 +8200,8 @@ gnutls_certificate_set_retrieve_function
      In server side pk_algos and req_ca_dn are NULL.
 
      The callback function should set the certificate list to be sent,
-     and return 0 on success.  If no certificate was selected then the
-     number of certificates should be set to zero.  The value (-1)
+     and return 0 on success. If no certificate was selected then the
+     number of certificates should be set to zero. The value (-1)
      indicates error and the handshake will be terminated.
 
      *Since:* 3.0
@@ -8219,8 +8216,8 @@ gnutls_certificate_set_verify_flags
      FLAGS: are the flags
 
      This function will set the flags to be used for verification of
-     certificates and override any defaults.  The provided flags must be
-     an OR of the 'gnutls_certificate_verify_flags' enumerations.
+     certificates and override any defaults.  The provided flags must
+     be an OR of the `gnutls_certificate_verify_flags'  enumerations.
 
 gnutls_certificate_set_verify_function
 --------------------------------------
@@ -8228,7 +8225,7 @@ gnutls_certificate_set_verify_function
  -- Function: void gnutls_certificate_set_verify_function
           (gnutls_certificate_credentials_t CRED,
           gnutls_certificate_verify_function * FUNC)
-     CRED: is a 'gnutls_certificate_credentials_t' structure.
+     CRED: is a `gnutls_certificate_credentials_t'  structure.
 
      FUNC: is the callback function
 
@@ -8242,8 +8239,8 @@ gnutls_certificate_set_verify_function
      If the callback function is provided then gnutls will call it, in
      the handshake, just after the certificate message has been
      received.  To verify or obtain the certificate the
-     'gnutls_certificate_verify_peers2()' ,
-     'gnutls_certificate_type_get()' , 'gnutls_certificate_get_peers()'
+     `gnutls_certificate_verify_peers2()' ,
+     `gnutls_certificate_type_get()' , `gnutls_certificate_get_peers()'
      functions can be used.
 
      The callback function should return 0 for the handshake to continue
@@ -8266,7 +8263,7 @@ gnutls_certificate_set_verify_limits
      chain (default 5)
 
      This function will set some upper limits for the default
-     verification function, 'gnutls_certificate_verify_peers2()' , to
+     verification function, `gnutls_certificate_verify_peers2()' , to
      avoid denial of service attacks.  You can set them to zero to
      disable limits.
 
@@ -8276,9 +8273,9 @@ gnutls_certificate_set_x509_crl
  -- Function: int gnutls_certificate_set_x509_crl
           (gnutls_certificate_credentials_t RES, gnutls_x509_crl_t *
           CRL_LIST, int CRL_LIST_SIZE)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
-     CRL_LIST: is a list of trusted CRLs.  They should have been
+     CRL_LIST: is a list of trusted CRLs. They should have been
      verified before.
 
      CRL_LIST_SIZE: holds the size of the crl_list
@@ -8286,7 +8283,7 @@ gnutls_certificate_set_x509_crl
      This function adds the trusted CRLs in order to verify client or
      server certificates.  In case of a client this is not required to
      be called if the certificates are not verified using
-     'gnutls_certificate_verify_peers2()' .  This function may be called
+     `gnutls_certificate_verify_peers2()' .  This function may be called
      multiple times.
 
      *Returns:* number of CRLs processed, or a negative error code on
@@ -8300,18 +8297,18 @@ gnutls_certificate_set_x509_crl_file
  -- Function: int gnutls_certificate_set_x509_crl_file
           (gnutls_certificate_credentials_t RES, const char * CRLFILE,
           gnutls_x509_crt_fmt_t TYPE)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
-     CRLFILE: is a file containing the list of verified CRLs (DER or PEM
-     list)
+     CRLFILE: is a file containing the list of verified CRLs (DER or
+     PEM list)
 
      TYPE: is PEM or DER
 
      This function adds the trusted CRLs in order to verify client or
      server certificates.  In case of a client this is not required to
      be called if the certificates are not verified using
-     'gnutls_certificate_verify_peers2()' .  This function may be called
-     multiple times.
+     `gnutls_certificate_verify_peers2()' .  This function may be
+     called multiple times.
 
      *Returns:* number of CRLs processed or a negative error code on
      error.
@@ -8322,9 +8319,9 @@ gnutls_certificate_set_x509_crl_mem
  -- Function: int gnutls_certificate_set_x509_crl_mem
           (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
           CRL, gnutls_x509_crt_fmt_t TYPE)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
-     CRL: is a list of trusted CRLs.  They should have been verified
+     CRL: is a list of trusted CRLs. They should have been verified
      before.
 
      TYPE: is DER or PEM
@@ -8332,7 +8329,7 @@ gnutls_certificate_set_x509_crl_mem
      This function adds the trusted CRLs in order to verify client or
      server certificates.  In case of a client this is not required to
      be called if the certificates are not verified using
-     'gnutls_certificate_verify_peers2()' .  This function may be called
+     `gnutls_certificate_verify_peers2()' .  This function may be called
      multiple times.
 
      *Returns:* number of CRLs processed, or a negative error code on
@@ -8344,23 +8341,23 @@ gnutls_certificate_set_x509_key
  -- Function: int gnutls_certificate_set_x509_key
           (gnutls_certificate_credentials_t RES, gnutls_x509_crt_t *
           CERT_LIST, int CERT_LIST_SIZE, gnutls_x509_privkey_t KEY)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
      CERT_LIST: contains a certificate list (path) for the specified
      private key
 
      CERT_LIST_SIZE: holds the size of the certificate list
 
-     KEY: is a 'gnutls_x509_privkey_t' key
+     KEY: is a `gnutls_x509_privkey_t'  key
 
      This function sets a certificate/private key pair in the
      gnutls_certificate_credentials_t structure.  This function may be
      called more than once, in case multiple keys/certificates exist for
      the server.  For clients that wants to send more than their own end
      entity certificate (e.g., also an intermediate CA cert) then put
-     the certificate chain in 'cert_list' .
+     the certificate chain in  `cert_list' .
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
      *Since:* 2.4.0
@@ -8371,7 +8368,7 @@ gnutls_certificate_set_x509_key_file
  -- Function: int gnutls_certificate_set_x509_key_file
           (gnutls_certificate_credentials_t RES, const char * CERTFILE,
           const char * KEYFILE, gnutls_x509_crt_fmt_t TYPE)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
      CERTFILE: is a file that containing the certificate list (path) for
      the specified private key, in PKCS7 format, or a list of
@@ -8386,14 +8383,14 @@ gnutls_certificate_set_x509_key_file
      called more than once, in case multiple keys/certificates exist for
      the server.  For clients that need to send more than its own end
      entity certificate, e.g., also an intermediate CA cert, then the
-     'certfile' must contain the ordered certificate chain.
+     `certfile' must contain the ordered certificate chain.
 
-     This function can also accept URLs at 'keyfile' and 'certfile' .
+     This function can also accept URLs at  `keyfile' and  `certfile' .
      In that case it will import the private key and certificate
-     indicated by the URLs.  Note that the supported URLs are the ones
-     indicated by 'gnutls_url_is_supported()' .
+     indicated by the URLs. Note that the supported URLs are the ones
+     indicated by `gnutls_url_is_supported()' .
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
 gnutls_certificate_set_x509_key_file2
@@ -8403,7 +8400,7 @@ gnutls_certificate_set_x509_key_file2
           (gnutls_certificate_credentials_t RES, const char * CERTFILE,
           const char * KEYFILE, gnutls_x509_crt_fmt_t TYPE, const char*
           PASS, unsigned int FLAGS)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
      CERTFILE: is a file that containing the certificate list (path) for
      the specified private key, in PKCS7 format, or a list of
@@ -8422,14 +8419,14 @@ gnutls_certificate_set_x509_key_file2
      called more than once, in case multiple keys/certificates exist for
      the server.  For clients that need to send more than its own end
      entity certificate, e.g., also an intermediate CA cert, then the
-     'certfile' must contain the ordered certificate chain.
+     `certfile' must contain the ordered certificate chain.
 
-     This function can also accept URLs at 'keyfile' and 'certfile' .
+     This function can also accept URLs at  `keyfile' and  `certfile' .
      In that case it will import the private key and certificate
-     indicated by the URLs.  Note that the supported URLs are the ones
-     indicated by 'gnutls_url_is_supported()' .
+     indicated by the URLs. Note that the supported URLs are the ones
+     indicated by `gnutls_url_is_supported()' .
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
 gnutls_certificate_set_x509_key_mem
@@ -8438,32 +8435,32 @@ gnutls_certificate_set_x509_key_mem
  -- Function: int gnutls_certificate_set_x509_key_mem
           (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
           CERT, const gnutls_datum_t * KEY, gnutls_x509_crt_fmt_t TYPE)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
      CERT: contains a certificate list (path) for the specified private
      key
 
-     KEY: is the private key, or 'NULL'
+     KEY: is the private key, or `NULL'
 
      TYPE: is PEM or DER
 
      This function sets a certificate/private key pair in the
-     gnutls_certificate_credentials_t structure.  This function may be
-     called more than once, in case multiple keys/certificates exist for
-     the server.
+     gnutls_certificate_credentials_t structure. This function may be
+     called more than once, in case multiple keys/certificates exist
+     for the server.
 
      Note that the keyUsage (2.5.29.15) PKIX extension in X.509
-     certificates is supported.  This means that certificates intended
+     certificates is supported. This means that certificates intended
      for signing cannot be used for ciphersuites that require
      encryption.
 
      If the certificate and the private key are given in PEM encoding
      then the strings that hold their values must be null terminated.
 
-     The 'key' may be 'NULL' if you are using a sign callback, see
-     'gnutls_sign_callback_set()' .
+     The  `key' may be `NULL'  if you are using a sign callback, see
+     `gnutls_sign_callback_set()' .
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
 gnutls_certificate_set_x509_key_mem2
@@ -8473,12 +8470,12 @@ gnutls_certificate_set_x509_key_mem2
           (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
           CERT, const gnutls_datum_t * KEY, gnutls_x509_crt_fmt_t TYPE,
           const char* PASS, unsigned int FLAGS)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
      CERT: contains a certificate list (path) for the specified private
      key
 
-     KEY: is the private key, or 'NULL'
+     KEY: is the private key, or `NULL'
 
      TYPE: is PEM or DER
 
@@ -8487,22 +8484,22 @@ gnutls_certificate_set_x509_key_mem2
      FLAGS: an ORed sequence of gnutls_pkcs_encrypt_flags_t
 
      This function sets a certificate/private key pair in the
-     gnutls_certificate_credentials_t structure.  This function may be
-     called more than once, in case multiple keys/certificates exist for
-     the server.
+     gnutls_certificate_credentials_t structure. This function may be
+     called more than once, in case multiple keys/certificates exist
+     for the server.
 
      Note that the keyUsage (2.5.29.15) PKIX extension in X.509
-     certificates is supported.  This means that certificates intended
+     certificates is supported. This means that certificates intended
      for signing cannot be used for ciphersuites that require
      encryption.
 
      If the certificate and the private key are given in PEM encoding
      then the strings that hold their values must be null terminated.
 
-     The 'key' may be 'NULL' if you are using a sign callback, see
-     'gnutls_sign_callback_set()' .
+     The  `key' may be `NULL'  if you are using a sign callback, see
+     `gnutls_sign_callback_set()' .
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
 gnutls_certificate_set_x509_simple_pkcs12_file
@@ -8511,35 +8508,35 @@ gnutls_certificate_set_x509_simple_pkcs12_file
  -- Function: int gnutls_certificate_set_x509_simple_pkcs12_file
           (gnutls_certificate_credentials_t RES, const char *
           PKCS12FILE, gnutls_x509_crt_fmt_t TYPE, const char * PASSWORD)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
-     PKCS12FILE: filename of file containing PKCS'12' blob.
+     PKCS12FILE: filename of file containing PKCS`12'  blob.
 
-     TYPE: is PEM or DER of the 'pkcs12file' .
+     TYPE: is PEM or DER of the  `pkcs12file' .
 
-     PASSWORD: optional password used to decrypt PKCS'12' file, bags and
-     keys.
+     PASSWORD: optional password used to decrypt PKCS`12'  file, bags
+     and keys.
 
      This function sets a certificate/private key pair and/or a CRL in
      the gnutls_certificate_credentials_t structure.  This function may
      be called more than once (in case multiple keys/certificates exist
      for the server).
 
-     PKCS'12' files with a MAC, encrypted bags and PKCS '8' private keys
-     are supported.  However, only password based security, and the same
-     password for all operations, are supported.
+     PKCS`12'  files with a MAC, encrypted bags and PKCS `8' private
+     keys are supported. However, only password based security, and the
+     same password for all operations, are supported.
 
-     PKCS'12' file may contain many keys and/or certificates, and there
+     PKCS`12'  file may contain many keys and/or certificates, and there
      is no way to identify which key/certificate pair you want.  You
-     should make sure the PKCS'12' file only contain one key/certificate
-     pair and/or one CRL.
+     should make sure the PKCS`12'  file only contain one
+     key/certificate pair and/or one CRL.
 
      It is believed that the limitations of this function is acceptable
      for most usage, and that any more flexibility would introduce
      complexity that would make it harder to use this functionality at
      all.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
 gnutls_certificate_set_x509_simple_pkcs12_mem
@@ -8548,35 +8545,35 @@ gnutls_certificate_set_x509_simple_pkcs12_mem
  -- Function: int gnutls_certificate_set_x509_simple_pkcs12_mem
           (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
           P12BLOB, gnutls_x509_crt_fmt_t TYPE, const char * PASSWORD)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
-     P12BLOB: the PKCS'12' blob.
+     P12BLOB: the PKCS`12'  blob.
 
-     TYPE: is PEM or DER of the 'pkcs12file' .
+     TYPE: is PEM or DER of the  `pkcs12file' .
 
-     PASSWORD: optional password used to decrypt PKCS'12' file, bags and
-     keys.
+     PASSWORD: optional password used to decrypt PKCS`12'  file, bags
+     and keys.
 
      This function sets a certificate/private key pair and/or a CRL in
      the gnutls_certificate_credentials_t structure.  This function may
      be called more than once (in case multiple keys/certificates exist
      for the server).
 
-     Encrypted PKCS'12' bags and PKCS'8' private keys are supported.
+     Encrypted PKCS`12'  bags and PKCS`8'  private keys are supported.
      However, only password based security, and the same password for
      all operations, are supported.
 
-     PKCS'12' file may contain many keys and/or certificates, and there
+     PKCS`12'  file may contain many keys and/or certificates, and there
      is no way to identify which key/certificate pair you want.  You
-     should make sure the PKCS'12' file only contain one key/certificate
-     pair and/or one CRL.
+     should make sure the PKCS`12'  file only contain one
+     key/certificate pair and/or one CRL.
 
      It is believed that the limitations of this function is acceptable
      for most usage, and that any more flexibility would introduce
      complexity that would make it harder to use this functionality at
      all.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
      *Since:* 2.8.0
@@ -8586,16 +8583,16 @@ gnutls_certificate_set_x509_system_trust
 
  -- Function: int gnutls_certificate_set_x509_system_trust
           (gnutls_certificate_credentials_t CRED)
-     CRED: is a 'gnutls_certificate_credentials_t' structure.
+     CRED: is a `gnutls_certificate_credentials_t'  structure.
 
      This function adds the system's default trusted CAs in order to
      verify client or server certificates.
 
      In the case the system is currently unsupported
-     'GNUTLS_E_UNIMPLEMENTED_FEATURE' is returned.
+     `GNUTLS_E_UNIMPLEMENTED_FEATURE' is returned.
 
-     *Returns:* the number of certificates processed or a negative error
-     code on error.
+     *Returns:* the number of certificates processed or a negative
+     error code on error.
 
      *Since:* 3.0
 
@@ -8605,24 +8602,24 @@ gnutls_certificate_set_x509_trust
  -- Function: int gnutls_certificate_set_x509_trust
           (gnutls_certificate_credentials_t RES, gnutls_x509_crt_t *
           CA_LIST, int CA_LIST_SIZE)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
      CA_LIST: is a list of trusted CAs
 
      CA_LIST_SIZE: holds the size of the CA list
 
      This function adds the trusted CAs in order to verify client or
-     server certificates.  In case of a client this is not required to
+     server certificates. In case of a client this is not required to
      be called if the certificates are not verified using
-     'gnutls_certificate_verify_peers2()' .  This function may be called
-     multiple times.
+     `gnutls_certificate_verify_peers2()' .  This function may be
+     called multiple times.
 
      In case of a server the CAs set here will be sent to the client if
-     a certificate request is sent.  This can be disabled using
-     'gnutls_certificate_send_x509_rdn_sequence()' .
+     a certificate request is sent. This can be disabled using
+     `gnutls_certificate_send_x509_rdn_sequence()' .
 
-     *Returns:* the number of certificates processed or a negative error
-     code on error.
+     *Returns:* the number of certificates processed or a negative
+     error code on error.
 
      *Since:* 2.4.0
 
@@ -8632,7 +8629,7 @@ gnutls_certificate_set_x509_trust_file
  -- Function: int gnutls_certificate_set_x509_trust_file
           (gnutls_certificate_credentials_t CRED, const char * CAFILE,
           gnutls_x509_crt_fmt_t TYPE)
-     CRED: is a 'gnutls_certificate_credentials_t' structure.
+     CRED: is a `gnutls_certificate_credentials_t'  structure.
 
      CAFILE: is a file containing the list of trusted CAs (DER or PEM
      list)
@@ -8640,19 +8637,19 @@ gnutls_certificate_set_x509_trust_file
      TYPE: is PEM or DER
 
      This function adds the trusted CAs in order to verify client or
-     server certificates.  In case of a client this is not required to
+     server certificates. In case of a client this is not required to
      be called if the certificates are not verified using
-     'gnutls_certificate_verify_peers2()' .  This function may be called
+     `gnutls_certificate_verify_peers2()' .  This function may be called
      multiple times.
 
      In case of a server the names of the CAs set here will be sent to
-     the client if a certificate request is sent.  This can be disabled
-     using 'gnutls_certificate_send_x509_rdn_sequence()' .
+     the client if a certificate request is sent. This can be disabled
+     using `gnutls_certificate_send_x509_rdn_sequence()' .
 
-     This function can also accept URLs.  In that case it will import
-     all certificates that are marked as trusted.  Note that the
+     This function can also accept URLs. In that case it will import
+     all certificates that are marked as trusted. Note that the
      supported URLs are the ones indicated by
-     'gnutls_url_is_supported()' .
+     `gnutls_url_is_supported()' .
 
      *Returns:* number of certificates processed, or a negative error
      code on error.
@@ -8663,36 +8660,36 @@ gnutls_certificate_set_x509_trust_mem
  -- Function: int gnutls_certificate_set_x509_trust_mem
           (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
           CA, gnutls_x509_crt_fmt_t TYPE)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
      CA: is a list of trusted CAs or a DER certificate
 
      TYPE: is DER or PEM
 
      This function adds the trusted CAs in order to verify client or
-     server certificates.  In case of a client this is not required to
-     be called if the certificates are not verified using
-     'gnutls_certificate_verify_peers2()' .  This function may be called
+     server certificates. In case of a client this is not required to be
+     called if the certificates are not verified using
+     `gnutls_certificate_verify_peers2()' .  This function may be called
      multiple times.
 
      In case of a server the CAs set here will be sent to the client if
-     a certificate request is sent.  This can be disabled using
-     'gnutls_certificate_send_x509_rdn_sequence()' .
+     a certificate request is sent. This can be disabled using
+     `gnutls_certificate_send_x509_rdn_sequence()' .
 
-     *Returns:* the number of certificates processed or a negative error
-     code on error.
+     *Returns:* the number of certificates processed or a negative
+     error code on error.
 
 gnutls_certificate_type_get
 ---------------------------
 
  -- Function: gnutls_certificate_type_t gnutls_certificate_type_get
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      The certificate type is by default X.509, unless it is negotiated
      as a TLS extension.
 
-     *Returns:* the currently used 'gnutls_certificate_type_t'
+     *Returns:* the currently used `gnutls_certificate_type_t'
      certificate type.
 
 gnutls_certificate_type_get_id
@@ -8704,8 +8701,8 @@ gnutls_certificate_type_get_id
 
      The names are compared in a case insensitive way.
 
-     *Returns:* a 'gnutls_certificate_type_t' for the specified in a
-     string certificate type, or 'GNUTLS_CRT_UNKNOWN' on error.
+     *Returns:* a `gnutls_certificate_type_t'  for the specified in a
+     string certificate type, or `GNUTLS_CRT_UNKNOWN'  on error.
 
 gnutls_certificate_type_get_name
 --------------------------------
@@ -8714,28 +8711,27 @@ gnutls_certificate_type_get_name
           (gnutls_certificate_type_t TYPE)
      TYPE: is a certificate type
 
-     Convert a 'gnutls_certificate_type_t' type to a string.
+     Convert a `gnutls_certificate_type_t'  type to a string.
 
      *Returns:* a string that contains the name of the specified
-     certificate type, or 'NULL' in case of unknown types.
+     certificate type, or `NULL'  in case of unknown types.
 
 gnutls_certificate_type_list
 ----------------------------
 
  -- Function: const gnutls_certificate_type_t *
-          gnutls_certificate_type_list ( VOID)
-
+gnutls_certificate_type_list ( VOID)
      Get a list of certificate types.
 
-     *Returns:* a (0)-terminated list of 'gnutls_certificate_type_t'
+     *Returns:* a (0)-terminated list of `gnutls_certificate_type_t'
      integers indicating the available certificate types.
 
 gnutls_certificate_verification_status_print
 --------------------------------------------
 
- -- Function: int gnutls_certificate_verification_status_print (unsigned
-          int STATUS, gnutls_certificate_type_t TYPE, gnutls_datum_t *
-          OUT, unsigned int FLAGS)
+ -- Function: int gnutls_certificate_verification_status_print
+          (unsigned int STATUS, gnutls_certificate_type_t TYPE,
+          gnutls_datum_t * OUT, unsigned int FLAGS)
      STATUS: The status flags to be printed
 
      TYPE: The certificate type
@@ -8745,12 +8741,12 @@ gnutls_certificate_verification_status_print
      FLAGS: should be zero
 
      This function will pretty print the status of a verification
-     process - eg.  the one obtained by
-     'gnutls_certificate_verify_peers3()' .
+     process - eg. the one obtained by
+     `gnutls_certificate_verify_peers3()' .
 
-     The output 'out' needs to be deallocated using 'gnutls_free()' .
+     The output  `out' needs to be deallocated using `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.4
@@ -8765,25 +8761,25 @@ gnutls_certificate_verify_peers2
      STATUS: is the output of the verification
 
      This function will verify the peer's certificate and store the
-     status in the 'status' variable as a bitwise or'd
+     status in the  `status' variable as a bitwise or'd
      gnutls_certificate_status_t values or zero if the certificate is
-     trusted.  Note that value in 'status' is set only when the return
+     trusted. Note that value in  `status' is set only when the return
      value of this function is success (i.e, failure to trust a
      certificate does not imply a negative return value).
 
-     If available the OCSP Certificate Status extension will be utilized
-     by this function.
+     If available the OCSP Certificate Status extension will be
+     utilized by this function.
 
      To avoid denial of service attacks some default upper limits
-     regarding the certificate key size and chain size are set.  To
-     override them use 'gnutls_certificate_set_verify_limits()' .
+     regarding the certificate key size and chain size are set. To
+     override them use `gnutls_certificate_set_verify_limits()' .
 
      Note that you must also check the peer's name in order to check if
      the verified certificate belongs to the actual peer, see
-     'gnutls_x509_crt_check_hostname()' , or use
-     'gnutls_certificate_verify_peers3()' .
+     `gnutls_x509_crt_check_hostname()' , or use
+     `gnutls_certificate_verify_peers3()' .
 
-     *Returns:* a negative error code on error and 'GNUTLS_E_SUCCESS'
+     *Returns:* a negative error code on error and `GNUTLS_E_SUCCESS'
      (0) on success.
 
 gnutls_certificate_verify_peers3
@@ -8793,30 +8789,30 @@ gnutls_certificate_verify_peers3
           SESSION, const char* HOSTNAME, unsigned int * STATUS)
      SESSION: is a gnutls session
 
-     HOSTNAME: is the expected name of the peer; may be 'NULL'
+     HOSTNAME: is the expected name of the peer; may be `NULL'
 
      STATUS: is the output of the verification
 
      This function will verify the peer's certificate and store the
-     status in the 'status' variable as a bitwise or'd
+     status in the  `status' variable as a bitwise or'd
      gnutls_certificate_status_t values or zero if the certificate is
-     trusted.  Note that value in 'status' is set only when the return
+     trusted. Note that value in  `status' is set only when the return
      value of this function is success (i.e, failure to trust a
      certificate does not imply a negative return value).
 
-     If the 'hostname' provided is non-NULL then this function will
-     compare the hostname in the certificate against the given.  If they
-     do not match the 'GNUTLS_CERT_UNEXPECTED_OWNER' status flag will be
-     set.
+     If the  `hostname' provided is non-NULL then this function will
+     compare the hostname in the certificate against the given. If they
+     do not match the `GNUTLS_CERT_UNEXPECTED_OWNER'  status flag will
+     be set.
 
-     If available the OCSP Certificate Status extension will be utilized
-     by this function.
+     If available the OCSP Certificate Status extension will be
+     utilized by this function.
 
      To avoid denial of service attacks some default upper limits
-     regarding the certificate key size and chain size are set.  To
-     override them use 'gnutls_certificate_set_verify_limits()' .
+     regarding the certificate key size and chain size are set. To
+     override them use `gnutls_certificate_set_verify_limits()' .
 
-     *Returns:* a negative error code on error and 'GNUTLS_E_SUCCESS'
+     *Returns:* a negative error code on error and `GNUTLS_E_SUCCESS'
      (0) on success.
 
      *Since:* 3.1.4
@@ -8826,41 +8822,42 @@ gnutls_check_version
 
  -- Function: const char * gnutls_check_version (const char *
           REQ_VERSION)
-     REQ_VERSION: version string to compare with, or 'NULL' .
+     REQ_VERSION: version string to compare with, or `NULL' .
 
      Check GnuTLS Library version.
 
-     See 'GNUTLS_VERSION' for a suitable 'req_version' string.
+     See `GNUTLS_VERSION'  for a suitable  `req_version' string.
 
      *Returns:* Check that the version of the library is at minimum the
-     one given as a string in 'req_version' and return the actual
-     version string of the library; return 'NULL' if the condition is
-     not met.  If 'NULL' is passed to this function no check is done and
-     only the version string is returned.
+     one given as a string in  `req_version' and return the actual
+     version string of the library; return `NULL'  if the condition is
+     not met.  If `NULL'  is passed to this function no check is done
+     and only the version string is returned.
 
 gnutls_cipher_get
 -----------------
 
  -- Function: gnutls_cipher_algorithm_t gnutls_cipher_get
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Get currently used cipher.
 
-     *Returns:* the currently used cipher, a 'gnutls_cipher_algorithm_t'
+     *Returns:* the currently used cipher, a `gnutls_cipher_algorithm_t'
      type.
 
 gnutls_cipher_get_id
 --------------------
 
- -- Function: gnutls_cipher_algorithm_t gnutls_cipher_get_id (const char
-          * NAME)
+ -- Function: gnutls_cipher_algorithm_t gnutls_cipher_get_id (const
+          char * NAME)
      NAME: is a cipher algorithm name
 
      The names are compared in a case insensitive way.
 
-     *Returns:* return a 'gnutls_cipher_algorithm_t' value corresponding
-     to the specified cipher, or 'GNUTLS_CIPHER_UNKNOWN' on error.
+     *Returns:* return a `gnutls_cipher_algorithm_t'  value
+     corresponding to the specified cipher, or `GNUTLS_CIPHER_UNKNOWN'
+     on error.
 
 gnutls_cipher_get_key_size
 --------------------------
@@ -8881,33 +8878,33 @@ gnutls_cipher_get_name
           (gnutls_cipher_algorithm_t ALGORITHM)
      ALGORITHM: is an encryption algorithm
 
-     Convert a 'gnutls_cipher_algorithm_t' type to a string.
+     Convert a `gnutls_cipher_algorithm_t'  type to a string.
 
      *Returns:* a pointer to a string that contains the name of the
-     specified cipher, or 'NULL' .
+     specified cipher, or `NULL' .
 
 gnutls_cipher_list
 ------------------
 
  -- Function: const gnutls_cipher_algorithm_t * gnutls_cipher_list (
           VOID)
-
      Get a list of supported cipher algorithms.  Note that not
      necessarily all ciphers are supported as TLS cipher suites.  For
      example, DES is not supported as a cipher suite, but is supported
-     for other purposes (e.g., PKCS'8' or similar).
+     for other purposes (e.g., PKCS`8'  or similar).
 
      This function is not thread safe.
 
-     *Returns:* a (0)-terminated list of 'gnutls_cipher_algorithm_t'
+     *Returns:* a (0)-terminated list of `gnutls_cipher_algorithm_t'
      integers indicating the available ciphers.
 
 gnutls_cipher_suite_get_name
 ----------------------------
 
  -- Function: const char * gnutls_cipher_suite_get_name
-          (gnutls_kx_algorithm_t KX_ALGORITHM, gnutls_cipher_algorithm_t
-          CIPHER_ALGORITHM, gnutls_mac_algorithm_t MAC_ALGORITHM)
+          (gnutls_kx_algorithm_t KX_ALGORITHM,
+          gnutls_cipher_algorithm_t CIPHER_ALGORITHM,
+          gnutls_mac_algorithm_t MAC_ALGORITHM)
      KX_ALGORITHM: is a Key exchange algorithm
 
      CIPHER_ALGORITHM: is a cipher algorithm
@@ -8918,7 +8915,7 @@ gnutls_cipher_suite_get_name
      SSL depending of the protocol in use.
 
      *Returns:* a string that contains the name of a TLS cipher suite,
-     specified by the given algorithms, or 'NULL' .
+     specified by the given algorithms, or `NULL' .
 
 gnutls_cipher_suite_info
 ------------------------
@@ -8929,38 +8926,38 @@ gnutls_cipher_suite_info
           MAC, gnutls_protocol_t * MIN_VERSION)
      IDX: index of cipher suite to get information about, starts on 0.
 
-     CS_ID: output buffer with room for 2 bytes, indicating cipher suite
-     value
+     CS_ID: output buffer with room for 2 bytes, indicating cipher
+     suite value
 
-     KX: output variable indicating key exchange algorithm, or 'NULL' .
+     KX: output variable indicating key exchange algorithm, or `NULL' .
 
-     CIPHER: output variable indicating cipher, or 'NULL' .
+     CIPHER: output variable indicating cipher, or `NULL' .
 
-     MAC: output variable indicating MAC algorithm, or 'NULL' .
+     MAC: output variable indicating MAC algorithm, or `NULL' .
 
      MIN_VERSION: output variable indicating TLS protocol version, or
-     'NULL' .
+     `NULL' .
 
      Get information about supported cipher suites.  Use the function
      iteratively to get information about all supported cipher suites.
      Call with idx=0 to get information about first cipher suite, then
      idx=1 and so on until the function returns NULL.
 
-     *Returns:* the name of 'idx' cipher suite, and set the information
-     about the cipher suite in the output variables.  If 'idx' is out of
-     bounds, 'NULL' is returned.
+     *Returns:* the name of  `idx' cipher suite, and set the information
+     about the cipher suite in the output variables.  If  `idx' is out
+     of bounds, `NULL'  is returned.
 
 gnutls_compression_get
 ----------------------
 
  -- Function: gnutls_compression_method_t gnutls_compression_get
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Get currently used compression algorithm.
 
      *Returns:* the currently used compression method, a
-     'gnutls_compression_method_t' value.
+     `gnutls_compression_method_t'  value.
 
 gnutls_compression_get_id
 -------------------------
@@ -8972,7 +8969,7 @@ gnutls_compression_get_id
      The names are compared in a case insensitive way.
 
      *Returns:* an id of the specified in a string compression method,
-     or 'GNUTLS_COMP_UNKNOWN' on error.
+     or `GNUTLS_COMP_UNKNOWN'  on error.
 
 gnutls_compression_get_name
 ---------------------------
@@ -8981,27 +8978,26 @@ gnutls_compression_get_name
           (gnutls_compression_method_t ALGORITHM)
      ALGORITHM: is a Compression algorithm
 
-     Convert a 'gnutls_compression_method_t' value to a string.
+     Convert a `gnutls_compression_method_t'  value to a string.
 
      *Returns:* a pointer to a string that contains the name of the
-     specified compression algorithm, or 'NULL' .
+     specified compression algorithm, or `NULL' .
 
 gnutls_compression_list
 -----------------------
 
  -- Function: const gnutls_compression_method_t *
-          gnutls_compression_list ( VOID)
-
+gnutls_compression_list ( VOID)
      Get a list of compression methods.
 
-     *Returns:* a zero-terminated list of 'gnutls_compression_method_t'
+     *Returns:* a zero-terminated list of `gnutls_compression_method_t'
      integers indicating the available compression methods.
 
 gnutls_credentials_clear
 ------------------------
 
  -- Function: void gnutls_credentials_clear (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Clears all the credentials previously set in this session.
 
@@ -9010,34 +9006,34 @@ gnutls_credentials_set
 
  -- Function: int gnutls_credentials_set (gnutls_session_t SESSION,
           gnutls_credentials_type_t TYPE, void * CRED)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      TYPE: is the type of the credentials
 
      CRED: is a pointer to a structure.
 
      Sets the needed credentials for the specified type.  Eg username,
-     password - or public and private keys etc.  The 'cred' parameter is
-     a structure that depends on the specified type and on the current
-     session (client or server).
+     password - or public and private keys etc.  The  `cred' parameter
+     is a structure that depends on the specified type and on the
+     current session (client or server).
 
      In order to minimize memory usage, and share credentials between
      several threads gnutls keeps a pointer to cred, and not the whole
      cred structure.  Thus you will have to keep the structure allocated
-     until you call 'gnutls_deinit()' .
+     until you call `gnutls_deinit()' .
 
-     For 'GNUTLS_CRD_ANON' , 'cred' should be
-     'gnutls_anon_client_credentials_t' in case of a client.  In case of
-     a server it should be 'gnutls_anon_server_credentials_t' .
+     For `GNUTLS_CRD_ANON' ,  `cred' should be
+     `gnutls_anon_client_credentials_t'  in case of a client.  In case
+     of a server it should be `gnutls_anon_server_credentials_t' .
 
-     For 'GNUTLS_CRD_SRP' , 'cred' should be
-     'gnutls_srp_client_credentials_t' in case of a client, and
-     'gnutls_srp_server_credentials_t' , in case of a server.
+     For `GNUTLS_CRD_SRP' ,  `cred' should be
+     `gnutls_srp_client_credentials_t' in case of a client, and
+     `gnutls_srp_server_credentials_t' , in case of a server.
 
-     For 'GNUTLS_CRD_CERTIFICATE' , 'cred' should be
-     'gnutls_certificate_credentials_t' .
+     For `GNUTLS_CRD_CERTIFICATE' ,  `cred' should be
+     `gnutls_certificate_credentials_t' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_db_check_entry
@@ -9045,20 +9041,20 @@ gnutls_db_check_entry
 
  -- Function: int gnutls_db_check_entry (gnutls_session_t SESSION,
           gnutls_datum_t SESSION_ENTRY)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      SESSION_ENTRY: is the session data (not key)
 
      This function has no effect.
 
-     *Returns:* Returns 'GNUTLS_E_EXPIRED' , if the database entry has
+     *Returns:* Returns `GNUTLS_E_EXPIRED' , if the database entry has
      expired or 0 otherwise.
 
 gnutls_db_check_entry_time
 --------------------------
 
  -- Function: time_t gnutls_db_check_entry_time (gnutls_datum_t * ENTRY)
-     ENTRY: is a pointer to a 'gnutls_datum_t' structure.
+     ENTRY: is a pointer to a `gnutls_datum_t'  structure.
 
      This function returns the time that this entry was active.  It can
      be used for database entry expiration.
@@ -9069,7 +9065,7 @@ gnutls_db_get_ptr
 -----------------
 
  -- Function: void * gnutls_db_get_ptr (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Get db function pointer.
 
@@ -9080,14 +9076,14 @@ gnutls_db_remove_session
 ------------------------
 
  -- Function: void gnutls_db_remove_session (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     This function will remove the current session data from the session
-     database.  This will prevent future handshakes reusing these
-     session data.  This function should be called if a session was
-     terminated abnormally, and before 'gnutls_deinit()' is called.
+     This function will remove the current session data from the
+     session database.  This will prevent future handshakes reusing
+     these session data.  This function should be called if a session
+     was terminated abnormally, and before `gnutls_deinit()'  is called.
 
-     Normally 'gnutls_deinit()' will remove abnormally terminated
+     Normally `gnutls_deinit()'  will remove abnormally terminated
      sessions.
 
 gnutls_db_set_cache_expiration
@@ -9095,11 +9091,11 @@ gnutls_db_set_cache_expiration
 
  -- Function: void gnutls_db_set_cache_expiration (gnutls_session_t
           SESSION, int SECONDS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      SECONDS: is the number of seconds.
 
-     Set the expiration time for resumed sessions.  The default is 3600
+     Set the expiration time for resumed sessions. The default is 3600
      (one hour) at the time of this writing.
 
 gnutls_db_set_ptr
@@ -9107,7 +9103,7 @@ gnutls_db_set_ptr
 
  -- Function: void gnutls_db_set_ptr (gnutls_session_t SESSION, void *
           PTR)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      PTR: is the pointer
 
@@ -9119,22 +9115,22 @@ gnutls_db_set_remove_function
 
  -- Function: void gnutls_db_set_remove_function (gnutls_session_t
           SESSION, gnutls_db_remove_func REM_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      REM_FUNC: is the function.
 
-     Sets the function that will be used to remove data from the resumed
-     sessions database.  This function must return 0 on success.
+     Sets the function that will be used to remove data from the
+     resumed sessions database. This function must return 0 on success.
 
-     The first argument to 'rem_func' will be null unless
-     'gnutls_db_set_ptr()' has been called.
+     The first argument to  `rem_func' will be null unless
+     `gnutls_db_set_ptr()'  has been called.
 
 gnutls_db_set_retrieve_function
 -------------------------------
 
  -- Function: void gnutls_db_set_retrieve_function (gnutls_session_t
           SESSION, gnutls_db_retr_func RETR_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      RETR_FUNC: is the function.
 
@@ -9144,33 +9140,33 @@ gnutls_db_set_retrieve_function
      containing null and 0 on failure.
 
      The datum's data must be allocated using the function
-     'gnutls_malloc()' .
+     `gnutls_malloc()' .
 
-     The first argument to 'retr_func' will be null unless
-     'gnutls_db_set_ptr()' has been called.
+     The first argument to  `retr_func' will be null unless
+     `gnutls_db_set_ptr()'  has been called.
 
 gnutls_db_set_store_function
 ----------------------------
 
  -- Function: void gnutls_db_set_store_function (gnutls_session_t
           SESSION, gnutls_db_store_func STORE_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      STORE_FUNC: is the function
 
      Sets the function that will be used to store data in the resumed
-     sessions database.  This function must return 0 on success.
+     sessions database. This function must return 0 on success.
 
-     The first argument to 'store_func' will be null unless
-     'gnutls_db_set_ptr()' has been called.
+     The first argument to  `store_func' will be null unless
+     `gnutls_db_set_ptr()'  has been called.
 
 gnutls_deinit
 -------------
 
  -- Function: void gnutls_deinit (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     This function clears all buffers associated with the 'session' .
+     This function clears all buffers associated with the  `session' .
      This function will also remove session data from the session
      database if the session was terminated abnormally.
 
@@ -9189,9 +9185,9 @@ gnutls_dh_get_group
      Diffie-Hellman key exchange with the peer.  These are the prime and
      the generator used.  This function should be used for both
      anonymous and ephemeral Diffie-Hellman.  The output parameters must
-     be freed with 'gnutls_free()' .
+     be freed with `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_dh_get_peers_public_bits
@@ -9236,9 +9232,9 @@ gnutls_dh_get_pubkey
      This function will return the peer's public key used in the last
      Diffie-Hellman key exchange.  This function should be used for both
      anonymous and ephemeral Diffie-Hellman.  The output parameters must
-     be freed with 'gnutls_free()' .
+     be freed with `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_dh_get_secret_bits
@@ -9251,7 +9247,7 @@ gnutls_dh_get_secret_bits
      key exchange with the peer.  Should be used for both anonymous and
      ephemeral Diffie-Hellman.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_dh_params_cpy
@@ -9266,7 +9262,7 @@ gnutls_dh_params_cpy
      This function will copy the DH parameters structure from source to
      destination.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_dh_params_deinit
@@ -9285,19 +9281,19 @@ gnutls_dh_params_export2_pkcs3
           PARAMS, gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
      PARAMS: Holds the DH parameters
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUT: will contain a PKCS3 DHParams structure PEM or DER encoded
 
      This function will export the given dh parameters to a PKCS3
-     DHParams structure.  This is the format generated by "openssl
-     dhparam" tool.  The data in 'out' will be allocated using
-     'gnutls_malloc()' .
+     DHParams structure. This is the format generated by "openssl
+     dhparam" tool.  The data in  `out' will be allocated using
+     `gnutls_malloc()' .
 
-     If the structure is PEM encoded, it will have a header of "BEGIN DH
-     PARAMETERS".
+     If the structure is PEM encoded, it will have a header of "BEGIN
+     DH PARAMETERS".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      *Since:* 3.1.3
@@ -9310,7 +9306,7 @@ gnutls_dh_params_export_pkcs3
           PARAMS_DATA, size_t * PARAMS_DATA_SIZE)
      PARAMS: Holds the DH parameters
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      PARAMS_DATA: will contain a PKCS3 DHParams structure PEM or DER
      encoded
@@ -9319,14 +9315,14 @@ gnutls_dh_params_export_pkcs3
      replaced by the actual size of parameters)
 
      This function will export the given dh parameters to a PKCS3
-     DHParams structure.  This is the format generated by "openssl
+     DHParams structure. This is the format generated by "openssl
      dhparam" tool.  If the buffer provided is not long enough to hold
      the output, then GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.
 
-     If the structure is PEM encoded, it will have a header of "BEGIN DH
-     PARAMETERS".
+     If the structure is PEM encoded, it will have a header of "BEGIN
+     DH PARAMETERS".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_dh_params_export_raw
@@ -9345,33 +9341,33 @@ gnutls_dh_params_export_raw
 
      This function will export the pair of prime and generator for use
      in the Diffie-Hellman key exchange.  The new parameters will be
-     allocated using 'gnutls_malloc()' and will be stored in the
+     allocated using `gnutls_malloc()'  and will be stored in the
      appropriate datum.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_dh_params_generate2
 --------------------------
 
- -- Function: int gnutls_dh_params_generate2 (gnutls_dh_params_t PARAMS,
-          unsigned int BITS)
+ -- Function: int gnutls_dh_params_generate2 (gnutls_dh_params_t
+          PARAMS, unsigned int BITS)
      PARAMS: Is the structure that the DH parameters will be stored
 
      BITS: is the prime's number of bits
 
      This function will generate a new pair of prime and generator for
-     use in the Diffie-Hellman key exchange.  The new parameters will be
-     allocated using 'gnutls_malloc()' and will be stored in the
+     use in the Diffie-Hellman key exchange. The new parameters will be
+     allocated using `gnutls_malloc()'  and will be stored in the
      appropriate datum.  This function is normally slow.
 
      Do not set the number of bits directly, use
-     'gnutls_sec_param_to_pk_bits()' to get bits for 'GNUTLS_PK_DSA' .
-     Also note that the DH parameters are only useful to servers.  Since
-     clients use the parameters sent by the server, it's of no use to
-     call this in client side.
+     `gnutls_sec_param_to_pk_bits()'  to get bits for `GNUTLS_PK_DSA' .
+     Also note that the DH parameters are only useful to servers.
+     Since clients use the parameters sent by the server, it's of no
+     use to call this in client side.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_dh_params_import_pkcs3
@@ -9385,15 +9381,15 @@ gnutls_dh_params_import_pkcs3
      PKCS3_PARAMS: should contain a PKCS3 DHParams structure PEM or DER
      encoded
 
-     FORMAT: the format of params.  PEM or DER.
+     FORMAT: the format of params. PEM or DER.
 
      This function will extract the DHParams found in a PKCS3 formatted
-     structure.  This is the format generated by "openssl dhparam" tool.
+     structure. This is the format generated by "openssl dhparam" tool.
 
      If the structure is PEM encoded, it should have a header of "BEGIN
      DH PARAMETERS".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_dh_params_import_raw
@@ -9412,7 +9408,7 @@ gnutls_dh_params_import_raw
      in the Diffie-Hellman key exchange.  The new parameters should be
      stored in the appropriate gnutls_datum.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_dh_params_init
@@ -9423,7 +9419,7 @@ gnutls_dh_params_init
 
      This function will initialize the DH parameters structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_dh_set_prime_bits
@@ -9431,7 +9427,7 @@ gnutls_dh_set_prime_bits
 
  -- Function: void gnutls_dh_set_prime_bits (gnutls_session_t SESSION,
           unsigned int BITS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      BITS: is the number of bits
 
@@ -9442,43 +9438,44 @@ gnutls_dh_set_prime_bits
 
      In the client side it sets the minimum accepted number of bits.  If
      a server sends a prime with less bits than that
-     'GNUTLS_E_DH_PRIME_UNACCEPTABLE' will be returned by the handshake.
+     `GNUTLS_E_DH_PRIME_UNACCEPTABLE'  will be returned by the
+     handshake.
 
      Note that values lower than 512 bits may allow decryption of the
      exchanged data.
 
      The function has no effect in server side.
 
-     Note that since 3.1.7 this function is deprecated.  The minimum
+     Note that since 3.1.7 this function is deprecated. The minimum
      number of bits is set by the priority string level.  Also this
-     function must be called after 'gnutls_priority_set_direct()' or the
-     set value may be overridden by the selected priority options.
+     function must be called after `gnutls_priority_set_direct()' or
+     the set value may be overridden by the selected priority options.
 
 gnutls_ecc_curve_get
 --------------------
 
  -- Function: gnutls_ecc_curve_t gnutls_ecc_curve_get (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     Returns the currently used elliptic curve.  Only valid when using
+     Returns the currently used elliptic curve. Only valid when using
      an elliptic curve ciphersuite.
 
-     *Returns:* the currently used curve, a 'gnutls_ecc_curve_t' type.
+     *Returns:* the currently used curve, a `gnutls_ecc_curve_t' type.
 
      *Since:* 3.0
 
 gnutls_ecc_curve_get_name
 -------------------------
 
- -- Function: const char * gnutls_ecc_curve_get_name (gnutls_ecc_curve_t
-          CURVE)
+ -- Function: const char * gnutls_ecc_curve_get_name
+          (gnutls_ecc_curve_t CURVE)
      CURVE: is an ECC curve
 
-     Convert a 'gnutls_ecc_curve_t' value to a string.
+     Convert a `gnutls_ecc_curve_t'  value to a string.
 
      *Returns:* a string that contains the name of the specified curve
-     or 'NULL' .
+     or `NULL' .
 
      *Since:* 3.0
 
@@ -9498,12 +9495,11 @@ gnutls_ecc_curve_list
 ---------------------
 
  -- Function: const gnutls_ecc_curve_t * gnutls_ecc_curve_list ( VOID)
-
      Get the list of supported elliptic curves.
 
      This function is not thread safe.
 
-     *Returns:* Return a (0)-terminated list of 'gnutls_ecc_curve_t'
+     *Returns:* Return a (0)-terminated list of `gnutls_ecc_curve_t'
      integers indicating the available curves.
 
 gnutls_error_is_fatal
@@ -9514,15 +9510,16 @@ gnutls_error_is_fatal
 
      If a GnuTLS function returns a negative error code you may feed
      that value to this function to see if the error condition is fatal.
-     Note that you may also want to check the error code manually, since
-     some non-fatal errors to the protocol (such as a warning alert or a
-     rehandshake request) may be fatal for your program.
+     Note that you may also want to check the error code manually,
+     since some non-fatal errors to the protocol (such as a warning
+     alert or a rehandshake request) may be fatal for your program.
 
      This function is only useful if you are dealing with errors from
      the record layer or the handshake layer.
 
-     *Returns:* 1 if the error code is fatal, for positive 'error'
-     values, 0 is returned.  For unknown 'error' values, -1 is returned.
+     *Returns:* 1 if the error code is fatal, for positive  `error'
+     values, 0 is returned.  For unknown  `error' values, -1 is
+     returned.
 
 gnutls_error_to_alert
 ---------------------
@@ -9534,9 +9531,9 @@ gnutls_error_to_alert
 
      Get an alert depending on the error code returned by a gnutls
      function.  All alerts sent by this function should be considered
-     fatal.  The only exception is when 'err' is 'GNUTLS_E_REHANDSHAKE'
-     , where a warning alert should be sent to the peer indicating that
-     no renegotiation will be performed.
+     fatal.  The only exception is when  `err' is
+     `GNUTLS_E_REHANDSHAKE' , where a warning alert should be sent to
+     the peer indicating that no renegotiation will be performed.
 
      If there is no mapping to a valid alert the alert to indicate
      internal error is returned.
@@ -9555,7 +9552,7 @@ gnutls_fingerprint
 
      RESULT: is the place where the result will be copied (may be null).
 
-     RESULT_SIZE: should hold the size of the result.  The actual size
+     RESULT_SIZE: should hold the size of the result. The actual size
      of the returned result will also be copied there.
 
      This function will calculate a fingerprint (actually a hash), of
@@ -9567,48 +9564,46 @@ gnutls_fingerprint
      OpenPGP certificate is not just a hash and cannot be calculated
      with this function.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_global_deinit
 --------------------
 
  -- Function: void gnutls_global_deinit ( VOID)
-
      This function deinitializes the global data, that were initialized
-     using 'gnutls_global_init()' .
+     using `gnutls_global_init()' .
 
      Note!  This function is not thread safe.  See the discussion for
-     'gnutls_global_init()' for more information.
+     `gnutls_global_init()'  for more information.
 
 gnutls_global_init
 ------------------
 
  -- Function: int gnutls_global_init ( VOID)
-
-     This function initializes the global data to defaults.  In order to
-     free resources you may call 'gnutls_global_deinit()' when gnutls
-     usage is no longer needed.
+     This function initializes the global data to defaults.  In order
+     to free resources you may call `gnutls_global_deinit()' when
+     gnutls usage is no longer needed.
 
      Note that this function will also initialize the underlying crypto
      backend, if it has not been initialized before.
 
      This function increments a global counter, so that
-     'gnutls_global_deinit()' only releases resources when it has been
-     called as many times as 'gnutls_global_init()' .  This is useful
+     `gnutls_global_deinit()'  only releases resources when it has been
+     called as many times as `gnutls_global_init()' .  This is useful
      when GnuTLS is used by more than one library in an application.
      This function can be called many times, but will only do something
      the first time.
 
      Note!  This function is not thread safe.  If two threads call this
-     function simultaneously, they can cause a race between checking the
-     global counter and incrementing it, causing both threads to execute
-     the library initialization code.  That would lead to a memory leak.
-     To handle this, your application could invoke this function after
-     aquiring a thread mutex.  To ignore the potential memory leak is
-     also an option.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     function simultaneously, they can cause a race between checking
+     the global counter and incrementing it, causing both threads to
+     execute the library initialization code.  That would lead to a
+     memory leak.  To handle this, your application could invoke this
+     function after aquiring a thread mutex.  To ignore the potential
+     memory leak is also an option.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_global_set_audit_log_function
@@ -9620,11 +9615,11 @@ gnutls_global_set_audit_log_function
 
      This is the function where you set the logging function gnutls is
      going to use.  This is different from
-     'gnutls_global_set_log_function()' because it will report the
-     session of the event if any.  Note that that session might be null
+     `gnutls_global_set_log_function()' because it will report the
+     session of the event if any. Note that that session might be null
      if there is no corresponding TLS session.
 
-     'gnutls_audit_log_func' is of the form, void
+     `gnutls_audit_log_func' is of the form, void
      (*gnutls_audit_log_func)( gnutls_session_t, const char*);
 
      *Since:* 3.0
@@ -9641,7 +9636,7 @@ gnutls_global_set_log_function
      Normally you may not use this function since it is only used for
      debugging purposes.
 
-     'gnutls_log_func' is of the form, void (*gnutls_log_func)( int
+     `gnutls_log_func' is of the form, void (*gnutls_log_func)( int
      level, const char*);
 
 gnutls_global_set_log_level
@@ -9652,7 +9647,7 @@ gnutls_global_set_log_level
 
      This is the function that allows you to set the log level.  The
      level is an integer between 0 and 9.  Higher values mean more
-     verbosity.  The default value is 0.  Larger values should only be
+     verbosity. The default value is 0.  Larger values should only be
      used with care, since they may reveal sensitive information.
 
      Use a log level over 10 to enable all debugging options.
@@ -9665,28 +9660,28 @@ gnutls_global_set_mem_functions
           SECURE_ALLOC_FUNC, gnutls_is_secure_function IS_SECURE_FUNC,
           gnutls_realloc_function REALLOC_FUNC, gnutls_free_function
           FREE_FUNC)
-     ALLOC_FUNC: it's the default memory allocation function.  Like
-     'malloc()' .
+     ALLOC_FUNC: it's the default memory allocation function. Like
+     `malloc()' .
 
-     SECURE_ALLOC_FUNC: This is the memory allocation function that will
-     be used for sensitive data.
+     SECURE_ALLOC_FUNC: This is the memory allocation function that
+     will be used for sensitive data.
 
      IS_SECURE_FUNC: a function that returns 0 if the memory given is
-     not secure.  May be NULL.
+     not secure. May be NULL.
 
      REALLOC_FUNC: A realloc function
 
-     FREE_FUNC: The function that frees allocated data.  Must accept a
+     FREE_FUNC: The function that frees allocated data. Must accept a
      NULL pointer.
 
      This is the function where you set the memory allocation functions
-     gnutls is going to use.  By default the libc's allocation functions
-     ('malloc()' , 'free()' ), are used by gnutls, to allocate both
-     sensitive and not sensitive data.  This function is provided to set
-     the memory allocation functions to something other than the
+     gnutls is going to use. By default the libc's allocation functions
+     (`malloc()' , `free()' ), are used by gnutls, to allocate both
+     sensitive and not sensitive data.  This function is provided to
+     set the memory allocation functions to something other than the
      defaults
 
-     This function must be called before 'gnutls_global_init()' is
+     This function must be called before `gnutls_global_init()'  is
      called.  This function is not thread safe.
 
 gnutls_global_set_mutex
@@ -9704,13 +9699,13 @@ gnutls_global_set_mutex
      UNLOCK: mutex unlocking function
 
      With this function you are allowed to override the default mutex
-     locks used in some parts of gnutls and dependent libraries.  This
+     locks used in some parts of gnutls and dependent libraries. This
      function should be used if you have complete control of your
      program and libraries.  Do not call this function from a library.
      Instead only initialize gnutls and the default OS mutex locks will
      be used.
 
-     This function must be called before 'gnutls_global_init()' .
+     This function must be called before `gnutls_global_init()' .
 
      *Since:* 2.12.0
 
@@ -9719,7 +9714,7 @@ gnutls_global_set_time_function
 
  -- Function: void gnutls_global_set_time_function (gnutls_time_func
           TIME_FUNC)
-     TIME_FUNC: it's the system time function, a 'gnutls_time_func()'
+     TIME_FUNC: it's the system time function, a `gnutls_time_func()'
      callback.
 
      This is the function where you can override the default system time
@@ -9732,84 +9727,85 @@ gnutls_handshake
 ----------------
 
  -- Function: int gnutls_handshake (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function does the handshake of the TLS/SSL protocol, and
      initializes the TLS connection.
 
      This function will fail if any problem is encountered, and will
-     return a negative error code.  In case of a client, if the client
-     has asked to resume a session, but the server couldn't, then a full
-     handshake will be performed.
+     return a negative error code. In case of a client, if the client
+     has asked to resume a session, but the server couldn't, then a
+     full handshake will be performed.
 
-     The non-fatal errors such as 'GNUTLS_E_AGAIN' and
-     'GNUTLS_E_INTERRUPTED' interrupt the handshake procedure, which
+     The non-fatal errors such as `GNUTLS_E_AGAIN'  and
+     `GNUTLS_E_INTERRUPTED'  interrupt the handshake procedure, which
      should be resumed later.  Call this function again, until it
-     returns 0; cf.  'gnutls_record_get_direction()' and
-     'gnutls_error_is_fatal()' .
+     returns 0; cf.  `gnutls_record_get_direction()'  and
+     `gnutls_error_is_fatal()' .
 
      If this function is called by a server after a rehandshake request
-     then 'GNUTLS_E_GOT_APPLICATION_DATA' or
-     'GNUTLS_E_WARNING_ALERT_RECEIVED' may be returned.  Note that these
-     are non fatal errors, only in the specific case of a rehandshake.
-     Their meaning is that the client rejected the rehandshake request
-     or in the case of 'GNUTLS_E_GOT_APPLICATION_DATA' it might also
-     mean that some data were pending.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     then `GNUTLS_E_GOT_APPLICATION_DATA'  or
+     `GNUTLS_E_WARNING_ALERT_RECEIVED'  may be returned.  Note that
+     these are non fatal errors, only in the specific case of a
+     rehandshake.  Their meaning is that the client rejected the
+     rehandshake request or in the case of
+     `GNUTLS_E_GOT_APPLICATION_DATA'  it might also mean that some data
+     were pending.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
 gnutls_handshake_get_last_in
 ----------------------------
 
  -- Function: gnutls_handshake_description_t
-          gnutls_handshake_get_last_in (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+gnutls_handshake_get_last_in (gnutls_session_t SESSION)
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function is only useful to check where the last performed
      handshake failed.  If the previous handshake succeed or was not
      performed at all then no meaningful value will be returned.
 
-     Check 'gnutls_handshake_description_t' in gnutls.h for the
+     Check `gnutls_handshake_description_t'  in gnutls.h for the
      available handshake descriptions.
 
      *Returns:* the last handshake message type received, a
-     'gnutls_handshake_description_t' .
+     `gnutls_handshake_description_t' .
 
 gnutls_handshake_get_last_out
 -----------------------------
 
  -- Function: gnutls_handshake_description_t
-          gnutls_handshake_get_last_out (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+gnutls_handshake_get_last_out (gnutls_session_t SESSION)
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function is only useful to check where the last performed
      handshake failed.  If the previous handshake succeed or was not
      performed at all then no meaningful value will be returned.
 
-     Check 'gnutls_handshake_description_t' in gnutls.h for the
+     Check `gnutls_handshake_description_t'  in gnutls.h for the
      available handshake descriptions.
 
      *Returns:* the last handshake message type sent, a
-     'gnutls_handshake_description_t' .
+     `gnutls_handshake_description_t' .
 
 gnutls_handshake_set_max_packet_length
 --------------------------------------
 
  -- Function: void gnutls_handshake_set_max_packet_length
           (gnutls_session_t SESSION, size_t MAX)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      MAX: is the maximum number.
 
      This function will set the maximum size of all handshake messages.
      Handshakes over this size are rejected with
-     'GNUTLS_E_HANDSHAKE_TOO_LARGE' error code.  The default value is
+     `GNUTLS_E_HANDSHAKE_TOO_LARGE'  error code.  The default value is
      48kb which is typically large enough.  Set this to 0 if you do not
      want to set an upper limit.
 
-     The reason for restricting the handshake message sizes are to limit
-     Denial of Service attacks.
+     The reason for restricting the handshake message sizes are to
+     limit Denial of Service attacks.
 
 gnutls_handshake_set_post_client_hello_function
 -----------------------------------------------
@@ -9817,12 +9813,12 @@ gnutls_handshake_set_post_client_hello_function
  -- Function: void gnutls_handshake_set_post_client_hello_function
           (gnutls_session_t SESSION,
           gnutls_handshake_post_client_hello_func FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      FUNC: is the function to be called
 
      This function will set a callback to be called after the client
-     hello has been received (callback valid in server side only).  This
+     hello has been received (callback valid in server side only). This
      allows the server to adjust settings based on received extensions.
 
      Those settings could be ciphersuites, requesting certificate, or
@@ -9833,48 +9829,48 @@ gnutls_handshake_set_post_client_hello_function
      terminate the handshake.
 
      *Warning:* You should not use this function to terminate the
-     handshake based on client input unless you know what you are doing.
-     Before the handshake is finished there is no way to know if there
-     is a man-in-the-middle attack being performed.
+     handshake based on client input unless you know what you are
+     doing. Before the handshake is finished there is no way to know if
+     there is a man-in-the-middle attack being performed.
 
 gnutls_handshake_set_private_extensions
 ---------------------------------------
 
  -- Function: void gnutls_handshake_set_private_extensions
           (gnutls_session_t SESSION, int ALLOW)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      ALLOW: is an integer (0 or 1)
 
      This function will enable or disable the use of private cipher
-     suites (the ones that start with 0xFF). By default or if 'allow' is
-     0 then these cipher suites will not be advertized nor used.
+     suites (the ones that start with 0xFF).  By default or if  `allow'
+     is 0 then these cipher suites will not be advertized nor used.
 
-     Currently GnuTLS does not include such cipher-suites or compression
-     algorithms.
+     Currently GnuTLS does not include such cipher-suites or
+     compression algorithms.
 
-     Enabling the private ciphersuites when talking to other than gnutls
-     servers and clients may cause interoperability problems.
+     Enabling the private ciphersuites when talking to other than
+     gnutls servers and clients may cause interoperability problems.
 
 gnutls_handshake_set_random
 ---------------------------
 
- -- Function: int gnutls_handshake_set_random (gnutls_session_t SESSION,
-          const gnutls_datum_t* RANDOM)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: int gnutls_handshake_set_random (gnutls_session_t
+          SESSION, const gnutls_datum_t* RANDOM)
+     SESSION: is a `gnutls_session_t'  structure.
 
      RANDOM: a random value of 32-bytes
 
-     This function will explicitly set the server or client hello random
-     value in the subsequent TLS handshake.  The random value should be
-     a 32-byte value.
+     This function will explicitly set the server or client hello
+     random value in the subsequent TLS handshake. The random value
+     should be a 32-byte value.
 
      Note that this function should not normally be used as gnutls will
      select automatically a random value for the handshake.
 
      This function should not be used when resuming a session.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
      Since 3.1.9
 
@@ -9883,15 +9879,15 @@ gnutls_handshake_set_timeout
 
  -- Function: void gnutls_handshake_set_timeout (gnutls_session_t
           SESSION, unsigned int MS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      MS: is a timeout value in milliseconds
 
      This function sets the timeout for the handshake process to the
-     provided value.  Use an 'ms' value of zero to disable timeout.
+     provided value. Use an  `ms' value of zero to disable timeout.
 
      Note that in order for the timeout to be enforced
-     'gnutls_transport_set_pull_timeout_function()' must be set (it is
+     `gnutls_transport_set_pull_timeout_function()'  must be set (it is
      set by default in most systems).
 
 gnutls_heartbeat_allowed
@@ -9899,10 +9895,10 @@ gnutls_heartbeat_allowed
 
  -- Function: int gnutls_heartbeat_allowed (gnutls_session_t SESSION,
           unsigned int TYPE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     TYPE: one of 'GNUTLS_HB_LOCAL_ALLOWED_TO_SEND' and
-     'GNUTLS_HB_PEER_ALLOWED_TO_SEND'
+     TYPE: one of `GNUTLS_HB_LOCAL_ALLOWED_TO_SEND'  and
+     `GNUTLS_HB_PEER_ALLOWED_TO_SEND'
 
      This function will check whether heartbeats are allowed to be sent
      or received in this session.
@@ -9916,7 +9912,7 @@ gnutls_heartbeat_enable
 
  -- Function: void gnutls_heartbeat_enable (gnutls_session_t SESSION,
           unsigned int TYPE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      TYPE: one of the GNUTLS_HB_* flags
 
@@ -9929,12 +9925,12 @@ gnutls_heartbeat_get_timeout
 
  -- Function: unsigned int gnutls_heartbeat_get_timeout
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function will return the milliseconds remaining for a
-     retransmission of the previously sent ping message.  This function
+     retransmission of the previously sent ping message. This function
      is useful when ping is used in non-blocking mode, to estimate when
-     to call 'gnutls_heartbeat_ping()' if no packets have been received.
+     to call `gnutls_heartbeat_ping()' if no packets have been received.
 
      *Returns:* the remaining time in milliseconds.
 
@@ -9945,25 +9941,24 @@ gnutls_heartbeat_ping
 
  -- Function: int gnutls_heartbeat_ping (gnutls_session_t SESSION,
           size_t DATA_SIZE, unsigned int MAX_TRIES, unsigned int FLAGS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA_SIZE: is the length of the ping payload.
 
-     MAX_TRIES: if flags is 'GNUTLS_HEARTBEAT_WAIT' then this sets the
-     number of retransmissions.  Use zero for indefinite (until
-     timeout).
+     MAX_TRIES: if flags is `GNUTLS_HEARTBEAT_WAIT'  then this sets the
+     number of retransmissions. Use zero for indefinite (until timeout).
 
-     FLAGS: if 'GNUTLS_HEARTBEAT_WAIT' then wait for pong or timeout
+     FLAGS: if `GNUTLS_HEARTBEAT_WAIT'  then wait for pong or timeout
      instead of returning immediately.
 
-     This function sends a ping to the peer.  If the 'flags' is set to
-     'GNUTLS_HEARTBEAT_WAIT' then it waits for a reply from the peer.
+     This function sends a ping to the peer. If the  `flags' is set to
+     `GNUTLS_HEARTBEAT_WAIT'  then it waits for a reply from the peer.
 
      Note that it is highly recommended to use this function with the
-     flag 'GNUTLS_HEARTBEAT_WAIT' , or you need to handle
+     flag `GNUTLS_HEARTBEAT_WAIT' , or you need to handle
      retransmissions and timeouts manually.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
      *Since:* 3.1.2
@@ -9973,13 +9968,13 @@ gnutls_heartbeat_pong
 
  -- Function: int gnutls_heartbeat_pong (gnutls_session_t SESSION,
           unsigned int FLAGS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      FLAGS: should be zero
 
      This function replies to a ping by sending a pong to the peer.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
      *Since:* 3.1.2
@@ -9990,25 +9985,25 @@ gnutls_heartbeat_set_timeouts
  -- Function: void gnutls_heartbeat_set_timeouts (gnutls_session_t
           SESSION, unsigned int RETRANS_TIMEOUT, unsigned int
           TOTAL_TIMEOUT)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      RETRANS_TIMEOUT: The time at which a retransmission will occur in
      milliseconds
 
-     TOTAL_TIMEOUT: The time at which the connection will be aborted, in
-     milliseconds.
+     TOTAL_TIMEOUT: The time at which the connection will be aborted,
+     in milliseconds.
 
      This function will set the timeouts required for the DTLS handshake
-     protocol.  The retransmission timeout is the time after which a
+     protocol. The retransmission timeout is the time after which a
      message from the peer is not received, the previous messages will
-     be retransmitted.  The total timeout is the time after which the
-     handshake will be aborted with 'GNUTLS_E_TIMEDOUT' .
+     be retransmitted. The total timeout is the time after which the
+     handshake will be aborted with `GNUTLS_E_TIMEDOUT' .
 
      The DTLS protocol recommends the values of 1 sec and 60 seconds
      respectively.
 
      If the retransmission timeout is zero then the handshake will
-     operate in a non-blocking way, i.e., return 'GNUTLS_E_AGAIN' .
+     operate in a non-blocking way, i.e., return `GNUTLS_E_AGAIN' .
 
      *Since:* 3.1.2
 
@@ -10023,12 +10018,12 @@ gnutls_hex2bin
 
      BIN_DATA: output array with binary data
 
-     BIN_SIZE: when calling should hold maximum size of 'bin_data' , on
-     return will hold actual length of 'bin_data' .
+     BIN_SIZE: when calling should hold maximum size of  `bin_data' ,
+     on return will hold actual length of  `bin_data' .
 
      Convert a buffer with hex data to binary data.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
      *Since:* 2.4.0
@@ -10049,14 +10044,14 @@ gnutls_hex_decode
 
      Note that hex_data should be null terminated.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the buffer given is
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the buffer given is
      not long enough, or 0 on success.
 
 gnutls_hex_encode
 -----------------
 
- -- Function: int gnutls_hex_encode (const gnutls_datum_t * DATA, char *
-          RESULT, size_t * RESULT_SIZE)
+ -- Function: int gnutls_hex_encode (const gnutls_datum_t * DATA, char
+          * RESULT, size_t * RESULT_SIZE)
      DATA: contain the raw data
 
      RESULT: the place where hex data will be copied
@@ -10068,7 +10063,7 @@ gnutls_hex_encode
 
      Note that the size of the result includes the null terminator.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the buffer given is
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the buffer given is
      not long enough, or 0 on success.
 
 gnutls_init
@@ -10076,41 +10071,41 @@ gnutls_init
 
  -- Function: int gnutls_init (gnutls_session_t * SESSION, unsigned int
           FLAGS)
-     SESSION: is a pointer to a 'gnutls_session_t' structure.
+     SESSION: is a pointer to a `gnutls_session_t'  structure.
 
      FLAGS: indicate if this session is to be used for server or client.
 
-     This function initializes the current session to null.  Every
+     This function initializes the current session to null. Every
      session must be initialized before use, so internal structures can
-     be allocated.  This function allocates structures which can only be
-     free'd by calling 'gnutls_deinit()' .  Returns 'GNUTLS_E_SUCCESS'
-     (0) on success.
+     be allocated.  This function allocates structures which can only
+     be free'd by calling `gnutls_deinit()' .  Returns
+     `GNUTLS_E_SUCCESS'  (0) on success.
 
-     'flags' can be one of 'GNUTLS_CLIENT' and 'GNUTLS_SERVER' .  For a
-     DTLS entity, the flags 'GNUTLS_DATAGRAM' and 'GNUTLS_NONBLOCK' are
-     also available.  The latter flag will enable a non-blocking
+     `flags' can be one of `GNUTLS_CLIENT'  and `GNUTLS_SERVER' . For a
+     DTLS entity, the flags `GNUTLS_DATAGRAM'  and  `GNUTLS_NONBLOCK'
+     are also available. The latter flag will enable a non-blocking
      operation of the DTLS timers.
 
-     Note that since version 3.1.2 this function enables some common TLS
-     extensions such as session tickets and OCSP certificate status
-     request in client side by default.  To prevent that use the
-     'GNUTLS_NO_EXTENSIONS' flag.
+     Note that since version 3.1.2 this function enables some common
+     TLS extensions such as session tickets and OCSP certificate status
+     request in client side by default. To prevent that use the
+     `GNUTLS_NO_EXTENSIONS' flag.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_key_generate
 -------------------
 
  -- Function: int gnutls_key_generate (gnutls_datum_t * KEY, unsigned
           int KEY_SIZE)
-     KEY: is a pointer to a 'gnutls_datum_t' which will contain a newly
+     KEY: is a pointer to a `gnutls_datum_t'  which will contain a newly
      created key.
 
      KEY_SIZE: The number of bytes of the key.
 
-     Generates a random key of 'key_size' bytes.
+     Generates a random key of  `key_size' bytes.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
      *Since:* 3.0
@@ -10120,12 +10115,12 @@ gnutls_kx_get
 
  -- Function: gnutls_kx_algorithm_t gnutls_kx_get (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Get currently used key exchange algorithm.
 
      *Returns:* the key exchange algorithm used in the last handshake, a
-     'gnutls_kx_algorithm_t' value.
+     `gnutls_kx_algorithm_t'  value.
 
 gnutls_kx_get_id
 ----------------
@@ -10133,11 +10128,11 @@ gnutls_kx_get_id
  -- Function: gnutls_kx_algorithm_t gnutls_kx_get_id (const char * NAME)
      NAME: is a KX name
 
-     Convert a string to a 'gnutls_kx_algorithm_t' value.  The names are
-     compared in a case insensitive way.
+     Convert a string to a `gnutls_kx_algorithm_t'  value.  The names
+     are compared in a case insensitive way.
 
      *Returns:* an id of the specified KX algorithm, or
-     'GNUTLS_KX_UNKNOWN' on error.
+     `GNUTLS_KX_UNKNOWN' on error.
 
 gnutls_kx_get_name
 ------------------
@@ -10146,37 +10141,36 @@ gnutls_kx_get_name
           ALGORITHM)
      ALGORITHM: is a key exchange algorithm
 
-     Convert a 'gnutls_kx_algorithm_t' value to a string.
+     Convert a `gnutls_kx_algorithm_t'  value to a string.
 
      *Returns:* a pointer to a string that contains the name of the
-     specified key exchange algorithm, or 'NULL' .
+     specified key exchange algorithm, or `NULL' .
 
 gnutls_kx_list
 --------------
 
  -- Function: const gnutls_kx_algorithm_t * gnutls_kx_list ( VOID)
-
      Get a list of supported key exchange algorithms.
 
      This function is not thread safe.
 
-     *Returns:* a (0)-terminated list of 'gnutls_kx_algorithm_t'
+     *Returns:* a (0)-terminated list of `gnutls_kx_algorithm_t'
      integers indicating the available key exchange algorithms.
 
 gnutls_load_file
 ----------------
 
- -- Function: int gnutls_load_file (const char* FILENAME, gnutls_datum_t
-          * DATA)
+ -- Function: int gnutls_load_file (const char* FILENAME,
+          gnutls_datum_t * DATA)
      FILENAME: the name of the file to load
 
      DATA: Where the file will be stored
 
-     This function will load a file into a datum.  The data are zero
-     terminated but the terminating null is not included in length.  The
-     returned data are allocated using 'gnutls_malloc()' .
+     This function will load a file into a datum. The data are zero
+     terminated but the terminating null is not included in length.
+     The returned data are allocated using `gnutls_malloc()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
      Since 3.1.0
@@ -10186,12 +10180,12 @@ gnutls_mac_get
 
  -- Function: gnutls_mac_algorithm_t gnutls_mac_get (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Get currently used MAC algorithm.
 
      *Returns:* the currently used mac algorithm, a
-     'gnutls_mac_algorithm_t' value.
+     `gnutls_mac_algorithm_t'  value.
 
 gnutls_mac_get_id
 -----------------
@@ -10200,11 +10194,11 @@ gnutls_mac_get_id
           NAME)
      NAME: is a MAC algorithm name
 
-     Convert a string to a 'gnutls_mac_algorithm_t' value.  The names
+     Convert a string to a `gnutls_mac_algorithm_t'  value.  The names
      are compared in a case insensitive way.
 
-     *Returns:* a 'gnutls_mac_algorithm_t' id of the specified MAC
-     algorithm string, or 'GNUTLS_MAC_UNKNOWN' on failures.
+     *Returns:* a `gnutls_mac_algorithm_t'  id of the specified MAC
+     algorithm string, or `GNUTLS_MAC_UNKNOWN'  on failures.
 
 gnutls_mac_get_key_size
 -----------------------
@@ -10225,16 +10219,15 @@ gnutls_mac_get_name
           ALGORITHM)
      ALGORITHM: is a MAC algorithm
 
-     Convert a 'gnutls_mac_algorithm_t' value to a string.
+     Convert a `gnutls_mac_algorithm_t'  value to a string.
 
      *Returns:* a string that contains the name of the specified MAC
-     algorithm, or 'NULL' .
+     algorithm, or `NULL' .
 
 gnutls_mac_list
 ---------------
 
  -- Function: const gnutls_mac_algorithm_t * gnutls_mac_list ( VOID)
-
      Get a list of hash algorithms for use as MACs.  Note that not
      necessarily all MACs are supported in TLS cipher suites.  For
      example, MD2 is not supported as a cipher suite, but is supported
@@ -10242,7 +10235,7 @@ gnutls_mac_list
 
      This function is not thread safe.
 
-     *Returns:* Return a (0)-terminated list of 'gnutls_mac_algorithm_t'
+     *Returns:* Return a (0)-terminated list of `gnutls_mac_algorithm_t'
      integers indicating the available MACs.
 
 gnutls_ocsp_status_request_enable_client
@@ -10251,21 +10244,22 @@ gnutls_ocsp_status_request_enable_client
  -- Function: int gnutls_ocsp_status_request_enable_client
           (gnutls_session_t SESSION, gnutls_datum_t * RESPONDER_ID,
           size_t RESPONDER_ID_SIZE, gnutls_datum_t * EXTENSIONS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     RESPONDER_ID: array with 'gnutls_datum_t' with DER data of
+     RESPONDER_ID: array with `gnutls_datum_t'  with DER data of
      responder id
 
-     RESPONDER_ID_SIZE: number of members in 'responder_id' array
+     RESPONDER_ID_SIZE: number of members in  `responder_id' array
 
-     EXTENSIONS: a 'gnutls_datum_t' with DER encoded OCSP extensions
+     EXTENSIONS: a `gnutls_datum_t'  with DER encoded OCSP extensions
 
      This function is to be used by clients to request OCSP response
      from the server, using the "status_request" TLS extension.  Only
-     OCSP status type is supported.  A typical server has a single OCSP
-     response cached, so 'responder_id' and 'extensions' should be null.
+     OCSP status type is supported. A typical server has a single OCSP
+     response cached, so  `responder_id' and  `extensions' should be
+     null.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      *Since:* 3.1.3
@@ -10275,16 +10269,16 @@ gnutls_ocsp_status_request_get
 
  -- Function: int gnutls_ocsp_status_request_get (gnutls_session_t
           SESSION, gnutls_datum_t * RESPONSE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     RESPONSE: a 'gnutls_datum_t' with DER encoded OCSP response
+     RESPONSE: a `gnutls_datum_t'  with DER encoded OCSP response
 
      This function returns the OCSP status response received from the
-     TLS server.  The 'response' should be treated as constant.  If no
+     TLS server. The  `response' should be treated as constant. If no
      OCSP response is available then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      *Since:* 3.1.3
@@ -10300,9 +10294,9 @@ gnutls_ocsp_status_request_is_checked
 
      Check whether an OCSP status response was included in the handshake
      and whether it was checked and valid (not too old or superseded).
-     This is a helper function when needing to decide whether to perform
-     an OCSP validity check on the peer's certificate.  Must be called
-     after 'gnutls_certificate_verify_peers3()' is called.
+     This is a helper function when needing to decide whether to
+     perform an OCSP validity check on the peer's certificate. Must be
+     called after `gnutls_certificate_verify_peers3()'  is called.
 
      *Returns:* non zero it was valid, or a zero if it wasn't sent, or
      sent and was invalid.
@@ -10312,15 +10306,15 @@ gnutls_openpgp_send_cert
 
  -- Function: void gnutls_openpgp_send_cert (gnutls_session_t SESSION,
           gnutls_openpgp_crt_status_t STATUS)
-     SESSION: is a pointer to a 'gnutls_session_t' structure.
+     SESSION: is a pointer to a `gnutls_session_t'  structure.
 
      STATUS: is one of GNUTLS_OPENPGP_CERT, or
      GNUTLS_OPENPGP_CERT_FINGERPRINT
 
-     This function will order gnutls to send the key fingerprint instead
-     of the key in the initial handshake procedure.  This should be used
-     with care and only when there is indication or knowledge that the
-     server can obtain the client's key.
+     This function will order gnutls to send the key fingerprint
+     instead of the key in the initial handshake procedure. This should
+     be used with care and only when there is indication or knowledge
+     that the server can obtain the client's key.
 
 gnutls_pem_base64_decode
 ------------------------
@@ -10338,12 +10332,12 @@ gnutls_pem_base64_decode
      RESULT_SIZE: holds the size of the result
 
      This function will decode the given encoded data.  If the header
-     given is non null this function will search for "---BEGIN header"
+     given is non null this function will search for "----BEGIN header"
      and decode only this part.  Otherwise it will decode the first PEM
      packet found.
 
-     *Returns:* On success 'GNUTLS_E_SUCCESS' (0) is returned,
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned if the buffer given is
+     *Returns:* On success `GNUTLS_E_SUCCESS'  (0) is returned,
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  is returned if the buffer given is
      not long enough, or 0 on success.
 
 gnutls_pem_base64_decode_alloc
@@ -10351,21 +10345,21 @@ gnutls_pem_base64_decode_alloc
 
  -- Function: int gnutls_pem_base64_decode_alloc (const char * HEADER,
           const gnutls_datum_t * B64_DATA, gnutls_datum_t * RESULT)
-     HEADER: The PEM header (eg.  CERTIFICATE)
+     HEADER: The PEM header (eg. CERTIFICATE)
 
      B64_DATA: contains the encoded data
 
      RESULT: the place where decoded data lie
 
-     This function will decode the given encoded data.  The decoded data
+     This function will decode the given encoded data. The decoded data
      will be allocated, and stored into result.  If the header given is
-     non null this function will search for "---BEGIN header" and decode
-     only this part.  Otherwise it will decode the first PEM packet
-     found.
+     non null this function will search for "----BEGIN header" and
+     decode only this part. Otherwise it will decode the first PEM
+     packet found.
 
-     You should use 'gnutls_free()' to free the returned data.
+     You should use `gnutls_free()'  to free the returned data.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_pem_base64_encode
@@ -10382,13 +10376,13 @@ gnutls_pem_base64_encode
      RESULT_SIZE: holds the size of the result
 
      This function will convert the given data to printable data, using
-     the base64 encoding.  This is the encoding used in PEM messages.
+     the base64 encoding. This is the encoding used in PEM messages.
 
      The output string will be null terminated, although the size will
      not include the terminating null.
 
-     *Returns:* On success 'GNUTLS_E_SUCCESS' (0) is returned,
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned if the buffer given is
+     *Returns:* On success `GNUTLS_E_SUCCESS'  (0) is returned,
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  is returned if the buffer given is
      not long enough, or 0 on success.
 
 gnutls_pem_base64_encode_alloc
@@ -10407,9 +10401,9 @@ gnutls_pem_base64_encode_alloc
      This function will allocate the required memory to hold the encoded
      data.
 
-     You should use 'gnutls_free()' to free the returned data.
+     You should use `gnutls_free()'  to free the returned data.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_perror
@@ -10418,7 +10412,7 @@ gnutls_perror
  -- Function: void gnutls_perror (int ERROR)
      ERROR: is a GnuTLS error code, a negative error code
 
-     This function is like 'perror()' .  The only difference is that it
+     This function is like `perror()' . The only difference is that it
      accepts an error number returned by a gnutls function.
 
 gnutls_pk_algorithm_get_name
@@ -10428,10 +10422,10 @@ gnutls_pk_algorithm_get_name
           (gnutls_pk_algorithm_t ALGORITHM)
      ALGORITHM: is a pk algorithm
 
-     Convert a 'gnutls_pk_algorithm_t' value to a string.
+     Convert a `gnutls_pk_algorithm_t'  value to a string.
 
      *Returns:* a string that contains the name of the specified public
-     key algorithm, or 'NULL' .
+     key algorithm, or `NULL' .
 
 gnutls_pk_bits_to_sec_param
 ---------------------------
@@ -10442,9 +10436,9 @@ gnutls_pk_bits_to_sec_param
 
      BITS: is the number of bits
 
-     This is the inverse of 'gnutls_sec_param_to_pk_bits()' .  Given an
+     This is the inverse of `gnutls_sec_param_to_pk_bits()' . Given an
      algorithm and the number of bits, it will return the security
-     parameter.  This is a rough indication.
+     parameter. This is a rough indication.
 
      *Returns:* The security parameter.
 
@@ -10456,12 +10450,12 @@ gnutls_pk_get_id
  -- Function: gnutls_pk_algorithm_t gnutls_pk_get_id (const char * NAME)
      NAME: is a string containing a public key algorithm name.
 
-     Convert a string to a 'gnutls_pk_algorithm_t' value.  The names are
-     compared in a case insensitive way.  For example,
-     gnutls_pk_get_id("RSA") will return 'GNUTLS_PK_RSA' .
+     Convert a string to a `gnutls_pk_algorithm_t'  value.  The names
+     are compared in a case insensitive way.  For example,
+     gnutls_pk_get_id("RSA") will return `GNUTLS_PK_RSA' .
 
-     *Returns:* a 'gnutls_pk_algorithm_t' id of the specified public key
-     algorithm string, or 'GNUTLS_PK_UNKNOWN' on failures.
+     *Returns:* a `gnutls_pk_algorithm_t'  id of the specified public
+     key algorithm string, or `GNUTLS_PK_UNKNOWN'  on failures.
 
      *Since:* 2.6.0
 
@@ -10472,10 +10466,10 @@ gnutls_pk_get_name
           ALGORITHM)
      ALGORITHM: is a public key algorithm
 
-     Convert a 'gnutls_pk_algorithm_t' value to a string.
+     Convert a `gnutls_pk_algorithm_t'  value to a string.
 
      *Returns:* a pointer to a string that contains the name of the
-     specified public key algorithm, or 'NULL' .
+     specified public key algorithm, or `NULL' .
 
      *Since:* 2.6.0
 
@@ -10483,12 +10477,11 @@ gnutls_pk_list
 --------------
 
  -- Function: const gnutls_pk_algorithm_t * gnutls_pk_list ( VOID)
-
      Get a list of supported public key algorithms.
 
      This function is not thread safe.
 
-     *Returns:* a (0)-terminated list of 'gnutls_pk_algorithm_t'
+     *Returns:* a (0)-terminated list of `gnutls_pk_algorithm_t'
      integers indicating the available ciphers.
 
      *Since:* 2.6.0
@@ -10505,8 +10498,8 @@ gnutls_pk_to_sign
      This function maps public key and hash algorithms combinations to
      signature algorithms.
 
-     *Returns:* return a 'gnutls_sign_algorithm_t' value, or
-     'GNUTLS_SIGN_UNKNOWN' on error.
+     *Returns:* return a `gnutls_sign_algorithm_t'  value, or
+     `GNUTLS_SIGN_UNKNOWN'  on error.
 
 gnutls_prf
 ----------
@@ -10515,16 +10508,16 @@ gnutls_prf
           LABEL_SIZE, const char * LABEL, int SERVER_RANDOM_FIRST,
           size_t EXTRA_SIZE, const char * EXTRA, size_t OUTSIZE, char *
           OUT)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     LABEL_SIZE: length of the 'label' variable.
+     LABEL_SIZE: length of the  `label' variable.
 
      LABEL: label used in PRF computation, typically a short string.
 
      SERVER_RANDOM_FIRST: non-0 if server random field should be first
      in seed
 
-     EXTRA_SIZE: length of the 'extra' variable.
+     EXTRA_SIZE: length of the  `extra' variable.
 
      EXTRA: optional extra data to seed the PRF with.
 
@@ -10532,37 +10525,39 @@ gnutls_prf
 
      OUT: pre-allocated buffer to hold the generated data.
 
-     Apply the TLS Pseudo-Random-Function (PRF) on the master secret and
-     the provided data, seeded with the client and server random fields.
+     Apply the TLS Pseudo-Random-Function (PRF) on the master secret
+     and the provided data, seeded with the client and server random
+     fields.
 
-     The 'label' variable usually contains a string denoting the purpose
-     for the generated data.  The 'server_random_first' indicates
-     whether the client random field or the server random field should
-     be first in the seed.  Non-0 indicates that the server random field
-     is first, 0 that the client random field is first.
+     The  `label' variable usually contains a string denoting the
+     purpose for the generated data.  The  `server_random_first'
+     indicates whether the client random field or the server random
+     field should be first in the seed.  Non-0 indicates that the
+     server random field is first, 0 that the client random field is
+     first.
 
-     The 'extra' variable can be used to add more data to the seed,
+     The  `extra' variable can be used to add more data to the seed,
      after the random variables.  It can be used to make sure the
      generated output is strongly connected to some additional data
      (e.g., a string used in user authentication).
 
-     The output is placed in 'out' , which must be pre-allocated.
+     The output is placed in  `out' , which must be pre-allocated.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_prf_raw
 --------------
 
  -- Function: int gnutls_prf_raw (gnutls_session_t SESSION, size_t
-          LABEL_SIZE, const char * LABEL, size_t SEED_SIZE, const char *
-          SEED, size_t OUTSIZE, char * OUT)
-     SESSION: is a 'gnutls_session_t' structure.
+          LABEL_SIZE, const char * LABEL, size_t SEED_SIZE, const char
+          * SEED, size_t OUTSIZE, char * OUT)
+     SESSION: is a `gnutls_session_t'  structure.
 
-     LABEL_SIZE: length of the 'label' variable.
+     LABEL_SIZE: length of the  `label' variable.
 
      LABEL: label used in PRF computation, typically a short string.
 
-     SEED_SIZE: length of the 'seed' variable.
+     SEED_SIZE: length of the  `seed' variable.
 
      SEED: optional extra data to seed the PRF with.
 
@@ -10570,31 +10565,32 @@ gnutls_prf_raw
 
      OUT: pre-allocated buffer to hold the generated data.
 
-     Apply the TLS Pseudo-Random-Function (PRF) on the master secret and
-     the provided data.
+     Apply the TLS Pseudo-Random-Function (PRF) on the master secret
+     and the provided data.
 
-     The 'label' variable usually contains a string denoting the purpose
-     for the generated data.  The 'seed' usually contains data such as
-     the client and server random, perhaps together with some additional
-     data that is added to guarantee uniqueness of the output for a
-     particular purpose.
+     The  `label' variable usually contains a string denoting the
+     purpose for the generated data.  The  `seed' usually contains data
+     such as the client and server random, perhaps together with some
+     additional data that is added to guarantee uniqueness of the
+     output for a particular purpose.
 
      Because the output is not guaranteed to be unique for a particular
-     session unless 'seed' includes the client random and server random
+     session unless  `seed' includes the client random and server random
      fields (the PRF would output the same data on another connection
      resumed from the first one), it is not recommended to use this
-     function directly.  The 'gnutls_prf()' function seeds the PRF with
-     the client and server random fields directly, and is recommended if
-     you want to generate pseudo random data unique for each session.
+     function directly.  The `gnutls_prf()'  function seeds the PRF
+     with the client and server random fields directly, and is
+     recommended if you want to generate pseudo random data unique for
+     each session.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_priority_certificate_type_list
 -------------------------------------
 
  -- Function: int gnutls_priority_certificate_type_list
           (gnutls_priority_t PCACHE, const unsigned int** LIST)
-     PCACHE: is a 'gnutls_prioritity_t' structure.
+     PCACHE: is a `gnutls_prioritity_t'  structure.
 
      LIST: will point to an integer list
 
@@ -10610,7 +10606,7 @@ gnutls_priority_compression_list
 
  -- Function: int gnutls_priority_compression_list (gnutls_priority_t
           PCACHE, const unsigned int** LIST)
-     PCACHE: is a 'gnutls_prioritity_t' structure.
+     PCACHE: is a `gnutls_prioritity_t'  structure.
 
      LIST: will point to an integer list
 
@@ -10626,7 +10622,7 @@ gnutls_priority_deinit
 
  -- Function: void gnutls_priority_deinit (gnutls_priority_t
           PRIORITY_CACHE)
-     PRIORITY_CACHE: is a 'gnutls_prioritity_t' structure.
+     PRIORITY_CACHE: is a `gnutls_prioritity_t'  structure.
 
      Deinitializes the priority cache.
 
@@ -10635,7 +10631,7 @@ gnutls_priority_ecc_curve_list
 
  -- Function: int gnutls_priority_ecc_curve_list (gnutls_priority_t
           PCACHE, const unsigned int** LIST)
-     PCACHE: is a 'gnutls_prioritity_t' structure.
+     PCACHE: is a `gnutls_prioritity_t'  structure.
 
      LIST: will point to an integer list
 
@@ -10651,21 +10647,21 @@ gnutls_priority_get_cipher_suite_index
  -- Function: int gnutls_priority_get_cipher_suite_index
           (gnutls_priority_t PCACHE, unsigned int IDX, unsigned int *
           SIDX)
-     PCACHE: is a 'gnutls_prioritity_t' structure.
+     PCACHE: is a `gnutls_prioritity_t'  structure.
 
      IDX: is an index number.
 
      SIDX: internal index of cipher suite to get information about.
 
      Provides the internal ciphersuite index to be used with
-     'gnutls_cipher_suite_info()' .  The index 'idx' provided is an
-     index kept at the priorities structure.  It might be that a valid
+     `gnutls_cipher_suite_info()' . The index  `idx' provided is an
+     index kept at the priorities structure. It might be that a valid
      priorities index does not correspond to a ciphersuite and in that
-     case 'GNUTLS_E_UNKNOWN_CIPHER_SUITE' will be returned.  Once the
+     case `GNUTLS_E_UNKNOWN_CIPHER_SUITE'  will be returned.  Once the
      last available index is crossed then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be returned.
 
-     *Returns:* On success it returns 'GNUTLS_E_SUCCESS' (0), or a
+     *Returns:* On success it returns `GNUTLS_E_SUCCESS'  (0), or a
      negative error value otherwise.
 
 gnutls_priority_init
@@ -10674,7 +10670,7 @@ gnutls_priority_init
  -- Function: int gnutls_priority_init (gnutls_priority_t *
           PRIORITY_CACHE, const char * PRIORITIES, const char **
           ERR_POS)
-     PRIORITY_CACHE: is a 'gnutls_prioritity_t' structure.
+     PRIORITY_CACHE: is a `gnutls_prioritity_t'  structure.
 
      PRIORITIES: is a string describing priorities
 
@@ -10684,15 +10680,15 @@ gnutls_priority_init
      Sets priorities for the ciphers, key exchange methods, macs and
      compression methods.
 
-     The 'priorities' option allows you to specify a colon separated
-     list of the cipher priorities to enable.  Some keywords are defined
-     to provide quick access to common preferences.
+     The `priorities'  option allows you to specify a colon separated
+     list of the cipher priorities to enable.  Some keywords are
+     defined to provide quick access to common preferences.
 
      "PERFORMANCE" means all the "secure" ciphersuites are enabled,
      limited to 128 bit ciphers and sorted by terms of speed
      performance.
 
-     "NORMAL" means all "secure" ciphersuites.  The 256-bit ciphers are
+     "NORMAL" means all "secure" ciphersuites. The 256-bit ciphers are
      included as a fallback only.  The ciphers are sorted by security
      margin.
 
@@ -10714,7 +10710,7 @@ gnutls_priority_init
      "NONE" means nothing is enabled.  This disables even protocols and
      compression methods.
 
-     Special keywords are "!", "-" and "+".  "!"  or "-" appended with
+     Special keywords are "!", "-" and "+".  "!" or "-" appended with
      an algorithm will remove this algorithm.  "+" appended with an
      algorithm will add this algorithm.
 
@@ -10735,17 +10731,17 @@ gnutls_priority_init
 
      "SECURE256:+SECURE128",
 
-     Note that "NORMAL:'COMPAT' " is the most compatible mode.
+     Note that "NORMAL:`COMPAT' " is the most compatible mode.
 
-     *Returns:* On syntax error 'GNUTLS_E_INVALID_REQUEST' is returned,
-     'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* On syntax error `GNUTLS_E_INVALID_REQUEST'  is returned,
+     `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_priority_protocol_list
 -----------------------------
 
  -- Function: int gnutls_priority_protocol_list (gnutls_priority_t
           PCACHE, const unsigned int** LIST)
-     PCACHE: is a 'gnutls_prioritity_t' structure.
+     PCACHE: is a `gnutls_prioritity_t'  structure.
 
      LIST: will point to an integer list
 
@@ -10761,21 +10757,21 @@ gnutls_priority_set
 
  -- Function: int gnutls_priority_set (gnutls_session_t SESSION,
           gnutls_priority_t PRIORITY)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     PRIORITY: is a 'gnutls_priority_t' structure.
+     PRIORITY: is a `gnutls_priority_t'  structure.
 
      Sets the priorities to use on the ciphers, key exchange methods,
      macs and compression methods.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_priority_set_direct
 --------------------------
 
  -- Function: int gnutls_priority_set_direct (gnutls_session_t SESSION,
           const char * PRIORITIES, const char ** ERR_POS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      PRIORITIES: is a string describing priorities
 
@@ -10785,18 +10781,18 @@ gnutls_priority_set_direct
      Sets the priorities to use on the ciphers, key exchange methods,
      macs and compression methods.  This function avoids keeping a
      priority cache and is used to directly set string priorities to a
-     TLS session.  For documentation check the 'gnutls_priority_init()'
+     TLS session.  For documentation check the `gnutls_priority_init()'
      .
 
-     *Returns:* On syntax error 'GNUTLS_E_INVALID_REQUEST' is returned,
-     'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* On syntax error `GNUTLS_E_INVALID_REQUEST'  is returned,
+     `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_priority_sign_list
 -------------------------
 
  -- Function: int gnutls_priority_sign_list (gnutls_priority_t PCACHE,
           const unsigned int** LIST)
-     PCACHE: is a 'gnutls_prioritity_t' structure.
+     PCACHE: is a `gnutls_prioritity_t'  structure.
 
      LIST: will point to an integer list
 
@@ -10817,7 +10813,7 @@ gnutls_protocol_get_id
      The names are compared in a case insensitive way.
 
      *Returns:* an id of the specified protocol, or
-     'GNUTLS_VERSION_UNKNOWN' on error.
+     `GNUTLS_VERSION_UNKNOWN'  on error.
 
 gnutls_protocol_get_name
 ------------------------
@@ -10826,19 +10822,19 @@ gnutls_protocol_get_name
           VERSION)
      VERSION: is a (gnutls) version number
 
-     Convert a 'gnutls_protocol_t' value to a string.
+     Convert a `gnutls_protocol_t'  value to a string.
 
      *Returns:* a string that contains the name of the specified TLS
-     version (e.g., "TLS1.0"), or 'NULL' .
+     version (e.g., "TLS1.0"), or `NULL' .
 
 gnutls_protocol_get_version
 ---------------------------
 
  -- Function: gnutls_protocol_t gnutls_protocol_get_version
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     Get TLS version, a 'gnutls_protocol_t' value.
+     Get TLS version, a `gnutls_protocol_t'  value.
 
      *Returns:* The version of the currently used protocol.
 
@@ -10846,12 +10842,11 @@ gnutls_protocol_list
 --------------------
 
  -- Function: const gnutls_protocol_t * gnutls_protocol_list ( VOID)
-
-     Get a list of supported protocols, e.g.  SSL 3.0, TLS 1.0 etc.
+     Get a list of supported protocols, e.g. SSL 3.0, TLS 1.0 etc.
 
      This function is not thread safe.
 
-     *Returns:* a (0)-terminated list of 'gnutls_protocol_t' integers
+     *Returns:* a (0)-terminated list of `gnutls_protocol_t'  integers
      indicating the available protocols.
 
 gnutls_psk_allocate_client_credentials
@@ -10859,12 +10854,12 @@ gnutls_psk_allocate_client_credentials
 
  -- Function: int gnutls_psk_allocate_client_credentials
           (gnutls_psk_client_credentials_t * SC)
-     SC: is a pointer to a 'gnutls_psk_server_credentials_t' structure.
+     SC: is a pointer to a `gnutls_psk_server_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to allocate it.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_psk_allocate_server_credentials
@@ -10872,12 +10867,12 @@ gnutls_psk_allocate_server_credentials
 
  -- Function: int gnutls_psk_allocate_server_credentials
           (gnutls_psk_server_credentials_t * SC)
-     SC: is a pointer to a 'gnutls_psk_server_credentials_t' structure.
+     SC: is a pointer to a `gnutls_psk_server_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to allocate it.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_psk_client_get_hint
@@ -10891,7 +10886,7 @@ gnutls_psk_client_get_hint
      username to use.  This should only be called in case of PSK
      authentication and in case of a client.
 
-     *Returns:* the identity hint of the peer, or 'NULL' in case of an
+     *Returns:* the identity hint of the peer, or `NULL'  in case of an
      error.
 
      *Since:* 2.4.0
@@ -10901,7 +10896,7 @@ gnutls_psk_free_client_credentials
 
  -- Function: void gnutls_psk_free_client_credentials
           (gnutls_psk_client_credentials_t SC)
-     SC: is a 'gnutls_psk_client_credentials_t' structure.
+     SC: is a `gnutls_psk_client_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to free (deallocate) it.
@@ -10911,7 +10906,7 @@ gnutls_psk_free_server_credentials
 
  -- Function: void gnutls_psk_free_server_credentials
           (gnutls_psk_server_credentials_t SC)
-     SC: is a 'gnutls_psk_server_credentials_t' structure.
+     SC: is a `gnutls_psk_server_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to free (deallocate) it.
@@ -10926,7 +10921,8 @@ gnutls_psk_server_get_username
      This should only be called in case of PSK authentication and in
      case of a server.
 
-     *Returns:* the username of the peer, or 'NULL' in case of an error.
+     *Returns:* the username of the peer, or `NULL'  in case of an
+     error.
 
 gnutls_psk_set_client_credentials
 ---------------------------------
@@ -10934,23 +10930,23 @@ gnutls_psk_set_client_credentials
  -- Function: int gnutls_psk_set_client_credentials
           (gnutls_psk_client_credentials_t RES, const char * USERNAME,
           const gnutls_datum_t * KEY, gnutls_psk_key_flags FLAGS)
-     RES: is a 'gnutls_psk_client_credentials_t' structure.
+     RES: is a `gnutls_psk_client_credentials_t'  structure.
 
      USERNAME: is the user's zero-terminated userid
 
      KEY: is the user's key
 
-     FLAGS: indicate the format of the key, either 'GNUTLS_PSK_KEY_RAW'
-     or 'GNUTLS_PSK_KEY_HEX' .
+     FLAGS: indicate the format of the key, either `GNUTLS_PSK_KEY_RAW'
+     or `GNUTLS_PSK_KEY_HEX' .
 
      This function sets the username and password, in a
      gnutls_psk_client_credentials_t structure.  Those will be used in
-     PSK authentication.  'username' should be an ASCII string or UTF-8
+     PSK authentication.   `username' should be an ASCII string or UTF-8
      strings prepared using the "SASLprep" profile of "stringprep".  The
      key can be either in raw byte format or in Hex format (without the
      0x prefix).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_psk_set_client_credentials_function
@@ -10959,7 +10955,7 @@ gnutls_psk_set_client_credentials_function
  -- Function: void gnutls_psk_set_client_credentials_function
           (gnutls_psk_client_credentials_t CRED,
           gnutls_psk_client_credentials_function * FUNC)
-     CRED: is a 'gnutls_psk_server_credentials_t' structure.
+     CRED: is a `gnutls_psk_server_credentials_t'  structure.
 
      FUNC: is the callback function
 
@@ -10968,8 +10964,8 @@ gnutls_psk_set_client_credentials_function
      callback's function form is: int (*callback)(gnutls_session_t,
      char** username, gnutls_datum_t* key);
 
-     The 'username' and 'key' ->data must be allocated using
-     'gnutls_malloc()' .  'username' should be ASCII strings or UTF-8
+     The  `username' and  `key' ->data must be allocated using
+     `gnutls_malloc()' .   `username' should be ASCII strings or UTF-8
      strings prepared using the "SASLprep" profile of "stringprep".
 
      The callback function will be called once per handshake.
@@ -10981,15 +10977,15 @@ gnutls_psk_set_params_function
 ------------------------------
 
  -- Function: void gnutls_psk_set_params_function
-          (gnutls_psk_server_credentials_t RES, gnutls_params_function *
-          FUNC)
+          (gnutls_psk_server_credentials_t RES, gnutls_params_function
+          * FUNC)
      RES: is a gnutls_psk_server_credentials_t structure
 
      FUNC: is the function to be called
 
      This function will set a callback in order for the server to get
      the Diffie-Hellman or RSA parameters for PSK authentication.  The
-     callback should return 'GNUTLS_E_SUCCESS' (0) on success.
+     callback should return `GNUTLS_E_SUCCESS'  (0) on success.
 
 gnutls_psk_set_server_credentials_file
 --------------------------------------
@@ -10997,15 +10993,15 @@ gnutls_psk_set_server_credentials_file
  -- Function: int gnutls_psk_set_server_credentials_file
           (gnutls_psk_server_credentials_t RES, const char *
           PASSWORD_FILE)
-     RES: is a 'gnutls_psk_server_credentials_t' structure.
+     RES: is a `gnutls_psk_server_credentials_t'  structure.
 
      PASSWORD_FILE: is the PSK password file (passwd.psk)
 
      This function sets the password file, in a
-     'gnutls_psk_server_credentials_t' structure.  This password file
+     `gnutls_psk_server_credentials_t'  structure.  This password file
      holds usernames and keys and will be used for PSK authentication.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_psk_set_server_credentials_function
@@ -11014,40 +11010,40 @@ gnutls_psk_set_server_credentials_function
  -- Function: void gnutls_psk_set_server_credentials_function
           (gnutls_psk_server_credentials_t CRED,
           gnutls_psk_server_credentials_function * FUNC)
-     CRED: is a 'gnutls_psk_server_credentials_t' structure.
+     CRED: is a `gnutls_psk_server_credentials_t'  structure.
 
      FUNC: is the callback function
 
      This function can be used to set a callback to retrieve the user's
      PSK credentials.  The callback's function form is: int
-     (*callback)(gnutls_session_t, const char* username, gnutls_datum_t*
-     key);
+     (*callback)(gnutls_session_t, const char* username,
+     gnutls_datum_t* key);
 
-     'username' contains the actual username.  The 'key' must be filled
-     in using the 'gnutls_malloc()' .
+     `username' contains the actual username.  The  `key' must be
+     filled in using the `gnutls_malloc()' .
 
      In case the callback returned a negative number then gnutls will
      assume that the username does not exist.
 
      The callback function will only be called once per handshake.  The
-     callback function should return 0 on success, while -1 indicates an
-     error.
+     callback function should return 0 on success, while -1 indicates
+     an error.
 
 gnutls_psk_set_server_credentials_hint
 --------------------------------------
 
  -- Function: int gnutls_psk_set_server_credentials_hint
           (gnutls_psk_server_credentials_t RES, const char * HINT)
-     RES: is a 'gnutls_psk_server_credentials_t' structure.
+     RES: is a `gnutls_psk_server_credentials_t'  structure.
 
      HINT: is the PSK identity hint string
 
      This function sets the identity hint, in a
-     'gnutls_psk_server_credentials_t' structure.  This hint is sent to
+     `gnutls_psk_server_credentials_t'  structure.  This hint is sent to
      the client to help it chose a good PSK credential (i.e., username
      and password).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
      *Since:* 2.4.0
@@ -11063,22 +11059,22 @@ gnutls_psk_set_server_dh_params
      DH_PARAMS: is a structure that holds Diffie-Hellman parameters.
 
      This function will set the Diffie-Hellman parameters for an
-     anonymous server to use.  These parameters will be used in
+     anonymous server to use. These parameters will be used in
      Diffie-Hellman exchange with PSK cipher suites.
 
 gnutls_psk_set_server_params_function
 -------------------------------------
 
  -- Function: void gnutls_psk_set_server_params_function
-          (gnutls_psk_server_credentials_t RES, gnutls_params_function *
-          FUNC)
-     RES: is a 'gnutls_certificate_credentials_t' structure
+          (gnutls_psk_server_credentials_t RES, gnutls_params_function
+          * FUNC)
+     RES: is a `gnutls_certificate_credentials_t'  structure
 
      FUNC: is the function to be called
 
      This function will set a callback in order for the server to get
      the Diffie-Hellman parameters for PSK authentication.  The callback
-     should return 'GNUTLS_E_SUCCESS' (0) on success.
+     should return `GNUTLS_E_SUCCESS'  (0) on success.
 
 gnutls_random_art
 -----------------
@@ -11099,9 +11095,9 @@ gnutls_random_art
      ART: The returned random art
 
      This function will convert a given fingerprint to an "artistic"
-     image.  The returned image is allocated using 'gnutls_malloc()'
+     image. The returned image is allocated using `gnutls_malloc()'
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_range_split
@@ -11110,7 +11106,7 @@ gnutls_range_split
  -- Function: int gnutls_range_split (gnutls_session_t SESSION, const
           gnutls_range_st * ORIG, gnutls_range_st * NEXT,
           gnutls_range_st * REMAINDER)
-     SESSION: is a 'gnutls_session_t' structure
+     SESSION: is a `gnutls_session_t'  structure
 
      ORIG: is the original range provided by the user
 
@@ -11120,28 +11116,28 @@ gnutls_range_split
 
      This function should be used when it is required to hide the length
      of very long data that cannot be directly provided to
-     'gnutls_record_send_range()' .  In that case this function should
-     be called with the desired length hiding range in 'orig' .  The
-     returned 'next' value should then be used in the next call to
-     'gnutls_record_send_range()' with the partial data.  That process
-     should be repeated until 'remainder' is (0,0).
+     `gnutls_record_send_range()' .  In that case this function should
+     be called with the desired length hiding range in  `orig' . The
+     returned  `next' value should then be used in the next call to
+     `gnutls_record_send_range()'  with the partial data.  That process
+     should be repeated until  `remainder' is (0,0).
 
      *Returns:* 0 in case splitting succeeds, non zero in case of error.
-     Note that 'orig' is not changed, while the values of 'next' and
-     'remainder' are modified to store the resulting values.
+     Note that  `orig' is not changed, while the values of  `next' and
+     `remainder' are modified to store the resulting values.
 
 gnutls_record_can_use_length_hiding
 -----------------------------------
 
  -- Function: int gnutls_record_can_use_length_hiding (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      If the session supports length-hiding padding, you can invoke
-     'gnutls_range_send_message()' to send a message whose length is
-     hidden in the given range.  If the session does not support length
-     hiding padding, you can use the standard 'gnutls_record_send()'
-     function, or 'gnutls_range_send_message()' making sure that the
+     `gnutls_range_send_message()'  to send a message whose length is
+     hidden in the given range. If the session does not support length
+     hiding padding, you can use the standard `gnutls_record_send()'
+     function, or `gnutls_range_send_message()' making sure that the
      range is the same as the length of the message you are trying to
      send.
 
@@ -11153,11 +11149,11 @@ gnutls_record_check_pending
 
  -- Function: size_t gnutls_record_check_pending (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function checks if there are unread data in the gnutls
-     buffers.  If the return value is non-zero the next call to
-     'gnutls_record_recv()' is guarranteed not to block.
+     buffers. If the return value is non-zero the next call to
+     `gnutls_record_recv()' is guarranteed not to block.
 
      *Returns:* Returns the size of the data or zero.
 
@@ -11165,11 +11161,11 @@ gnutls_record_cork
 ------------------
 
  -- Function: void gnutls_record_cork (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     If called 'gnutls_record_send()' will no longer send partial
-     records.  All queued records will be sent when 'gnutls_uncork()' is
-     called, or when the maximum record size is reached.
+     If called `gnutls_record_send()'  will no longer send partial
+     records.  All queued records will be sent when `gnutls_uncork()'
+     is called, or when the maximum record size is reached.
 
      *Since:* 3.1.9
 
@@ -11178,31 +11174,31 @@ gnutls_record_disable_padding
 
  -- Function: void gnutls_record_disable_padding (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Used to disabled padding in TLS 1.0 and above.  Normally you do not
      need to use this function, but there are buggy clients that
      complain if a server pads the encrypted data.  This of course will
      disable protection against statistical attacks on the data.
 
-     This functions is defunt since 3.1.7.  Random padding is disabled
-     by default unless requested using 'gnutls_range_send_message()' .
+     This functions is defunt since 3.1.7. Random padding is disabled
+     by default unless requested using `gnutls_range_send_message()' .
 
 gnutls_record_get_direction
 ---------------------------
 
  -- Function: int gnutls_record_get_direction (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function provides information about the internals of the
      record protocol and is only useful if a prior gnutls function call
-     (e.g.  'gnutls_handshake()' ) was interrupted for some reason, that
-     is, if a function returned 'GNUTLS_E_INTERRUPTED' or
-     'GNUTLS_E_AGAIN' .  In such a case, you might want to call
-     'select()' or 'poll()' before calling the interrupted gnutls
+     (e.g.  `gnutls_handshake()' ) was interrupted for some reason, that
+     is, if a function returned `GNUTLS_E_INTERRUPTED'  or
+     `GNUTLS_E_AGAIN' .  In such a case, you might want to call
+     `select()' or `poll()'  before calling the interrupted gnutls
      function again.  To tell you whether a file descriptor should be
      selected for either reading or writing,
-     'gnutls_record_get_direction()' returns 0 if the interrupted
+     `gnutls_record_get_direction()'  returns 0 if the interrupted
      function was trying to read data, and 1 if it was trying to write
      data.
 
@@ -11213,7 +11209,7 @@ gnutls_record_get_max_size
 
  -- Function: size_t gnutls_record_get_max_size (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Get the record size.  The maximum record size is negotiated by the
      client after the first handshake message.
@@ -11223,59 +11219,59 @@ gnutls_record_get_max_size
 gnutls_record_recv
 ------------------
 
- -- Function: ssize_t gnutls_record_recv (gnutls_session_t SESSION, void
-          * DATA, size_t DATA_SIZE)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: ssize_t gnutls_record_recv (gnutls_session_t SESSION,
+          void * DATA, size_t DATA_SIZE)
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA: the buffer that the data will be read into
 
      DATA_SIZE: the number of requested bytes
 
-     This function has the similar semantics with 'recv()' .  The only
+     This function has the similar semantics with `recv()' .  The only
      difference is that it accepts a GnuTLS session, and uses different
      error codes.  In the special case that a server requests a
      renegotiation, the client may receive an error code of
-     'GNUTLS_E_REHANDSHAKE' .  This message may be simply ignored,
-     replied with an alert 'GNUTLS_A_NO_RENEGOTIATION' , or replied with
-     a new handshake, depending on the client's will.  If 'EINTR' is
-     returned by the internal push function (the default is 'recv()' )
-     then 'GNUTLS_E_INTERRUPTED' will be returned.  If
-     'GNUTLS_E_INTERRUPTED' or 'GNUTLS_E_AGAIN' is returned, you must
+     `GNUTLS_E_REHANDSHAKE' .  This message may be simply ignored,
+     replied with an alert `GNUTLS_A_NO_RENEGOTIATION' , or replied
+     with a new handshake, depending on the client's will.  If `EINTR'
+     is returned by the internal push function (the default is `recv()'
+     ) then `GNUTLS_E_INTERRUPTED'  will be returned.  If
+     `GNUTLS_E_INTERRUPTED'  or `GNUTLS_E_AGAIN'  is returned, you must
      call this function again to get the data.  See also
-     'gnutls_record_get_direction()' .  A server may also receive
-     'GNUTLS_E_REHANDSHAKE' when a client has initiated a handshake.  In
-     that case the server can only initiate a handshake or terminate the
-     connection.
+     `gnutls_record_get_direction()' .  A server may also receive
+     `GNUTLS_E_REHANDSHAKE'  when a client has initiated a handshake.
+     In that case the server can only initiate a handshake or terminate
+     the connection.
 
      *Returns:* The number of bytes received and zero on EOF (for stream
      connections).  A negative error code is returned in case of an
      error.  The number of bytes received might be less than the
-     requested 'data_size' .
+     requested  `data_size' .
 
 gnutls_record_recv_seq
 ----------------------
 
  -- Function: ssize_t gnutls_record_recv_seq (gnutls_session_t SESSION,
           void * DATA, size_t DATA_SIZE, unsigned char * SEQ)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA: the buffer that the data will be read into
 
      DATA_SIZE: the number of requested bytes
 
-     SEQ: is the packet's 64-bit sequence number.  Should have space for
+     SEQ: is the packet's 64-bit sequence number. Should have space for
      8 bytes.
 
-     This function is the same as 'gnutls_record_recv()' , except that
+     This function is the same as `gnutls_record_recv()' , except that
      it returns in addition to data, the sequence number of the data.
      This is useful in DTLS where record packets might be received
-     out-of-order.  The returned 8-byte sequence number is an integer in
+     out-of-order. The returned 8-byte sequence number is an integer in
      big-endian format and should be treated as a unique message
      identification.
 
-     *Returns:* The number of bytes received and zero on EOF. A negative
-     error code is returned in case of an error.  The number of bytes
-     received might be less than 'data_size' .
+     *Returns:* The number of bytes received and zero on EOF.  A
+     negative error code is returned in case of an error.  The number
+     of bytes received might be less than  `data_size' .
 
      *Since:* 3.0
 
@@ -11284,29 +11280,29 @@ gnutls_record_send
 
  -- Function: ssize_t gnutls_record_send (gnutls_session_t SESSION,
           const void * DATA, size_t DATA_SIZE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA: contains the data to send
 
      DATA_SIZE: is the length of the data
 
-     This function has the similar semantics with 'send()' .  The only
+     This function has the similar semantics with `send()' .  The only
      difference is that it accepts a GnuTLS session, and uses different
-     error codes.  Note that if the send buffer is full, 'send()' will
-     block this function.  See the 'send()' documentation for full
+     error codes.  Note that if the send buffer is full, `send()'  will
+     block this function.  See the `send()'  documentation for full
      information.  You can replace the default push function by using
-     'gnutls_transport_set_ptr2()' with a call to 'send()' with a
+     `gnutls_transport_set_ptr2()'  with a call to `send()'  with a
      MSG_DONTWAIT flag if blocking is a problem.  If the EINTR is
-     returned by the internal push function (the default is 'send()' )
-     then 'GNUTLS_E_INTERRUPTED' will be returned.  If
-     'GNUTLS_E_INTERRUPTED' or 'GNUTLS_E_AGAIN' is returned, you must
+     returned by the internal push function (the default is `send()' )
+     then `GNUTLS_E_INTERRUPTED'  will be returned. If
+     `GNUTLS_E_INTERRUPTED'  or `GNUTLS_E_AGAIN'  is returned, you must
      call this function again, with the same parameters; alternatively
-     you could provide a 'NULL' pointer for data, and 0 for size.  cf.
-     'gnutls_record_get_direction()' .  The errno value EMSGSIZE maps to
-     'GNUTLS_E_LARGE_PACKET' .
+     you could provide a `NULL'  pointer for data, and 0 for size. cf.
+     `gnutls_record_get_direction()' . The errno value EMSGSIZE maps to
+     `GNUTLS_E_LARGE_PACKET' .
 
      *Returns:* The number of bytes sent, or a negative error code.  The
-     number of bytes sent might be less than 'data_size' .  The maximum
+     number of bytes sent might be less than  `data_size' .  The maximum
      number of bytes this function can send in a single call depends on
      the negotiated maximum record size.
 
@@ -11316,7 +11312,7 @@ gnutls_record_send_range
  -- Function: ssize_t gnutls_record_send_range (gnutls_session_t
           SESSION, const void * DATA, size_t DATA_SIZE, const
           gnutls_range_st * RANGE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA: contains the data to send.
 
@@ -11325,16 +11321,16 @@ gnutls_record_send_range
      RANGE: is the range of lengths in which the real data length must
      be hidden.
 
-     This function operates like 'gnutls_record_send()' but, while
-     'gnutls_record_send()' adds minimal padding to each TLS record,
+     This function operates like `gnutls_record_send()'  but, while
+     `gnutls_record_send()'  adds minimal padding to each TLS record,
      this function uses the TLS extra-padding feature to conceal the
      real data size within the range of lengths provided.  Some TLS
-     sessions do not support extra padding (e.g.  stream ciphers in
-     standard TLS or SSL3 sessions).  To know whether the current
+     sessions do not support extra padding (e.g. stream ciphers in
+     standard TLS or SSL3 sessions). To know whether the current
      session supports extra padding, and hence length hiding, use the
-     'gnutls_record_can_use_length_hiding()' function.
+     `gnutls_record_can_use_length_hiding()' function.
 
-     *Note:* This function currently is only limited to blocking
+     *Note_* This function currently is only limited to blocking
      sockets.
 
      *Returns:* The number of bytes sent (that is data_size in a
@@ -11343,29 +11339,29 @@ gnutls_record_send_range
 gnutls_record_set_max_empty_records
 -----------------------------------
 
- -- Function: void gnutls_record_set_max_empty_records (gnutls_session_t
-          SESSION, const unsigned int I)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: void gnutls_record_set_max_empty_records
+          (gnutls_session_t SESSION, const unsigned int I)
+     SESSION: is a `gnutls_session_t'  structure.
 
      I: is the desired value of maximum empty records that can be
      accepted in a row.
 
      Used to set the maximum number of empty fragments that can be
-     accepted in a row.  Accepting many empty fragments is useful for
+     accepted in a row. Accepting many empty fragments is useful for
      receiving length-hidden content, where empty fragments filled with
-     pad are sent to hide the real length of a message.  However, a
-     malicious peer could send empty fragments to mount a DoS attack, so
-     as a safety measure, a maximum number of empty fragments is
-     accepted by default.  If you know your application must accept a
-     given number of empty fragments in a row, you can use this function
-     to set the desired value.
+     pad are sent to hide the real length of a message. However, a
+     malicious peer could send empty fragments to mount a DoS attack,
+     so as a safety measure, a maximum number of empty fragments is
+     accepted by default. If you know your application must accept a
+     given number of empty fragments in a row, you can use this
+     function to set the desired value.
 
 gnutls_record_set_max_size
 --------------------------
 
  -- Function: ssize_t gnutls_record_set_max_size (gnutls_session_t
           SESSION, size_t SIZE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      SIZE: is the new size
 
@@ -11375,13 +11371,13 @@ gnutls_record_set_max_size
 
      Acceptable values are 512(=2^9), 1024(=2^10), 2048(=2^11) and
      4096(=2^12).  The requested record size does get in effect
-     immediately only while sending data.  The receive part will take
+     immediately only while sending data. The receive part will take
      effect after a successful handshake.
 
      This function uses a TLS extension called 'max record size'.  Not
      all TLS implementations use or even understand this extension.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_record_set_timeout
@@ -11389,16 +11385,16 @@ gnutls_record_set_timeout
 
  -- Function: void gnutls_record_set_timeout (gnutls_session_t SESSION,
           unsigned int MS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      MS: is a timeout value in milliseconds
 
      This function sets the receive timeout for the record layer to the
-     provided value.  Use an 'ms' value of zero to disable timeout (the
+     provided value. Use an  `ms' value of zero to disable timeout (the
      default).
 
      Note that in order for the timeout to be enforced
-     'gnutls_transport_set_pull_timeout_function()' must be set (it is
+     `gnutls_transport_set_pull_timeout_function()'  must be set (it is
      set by default in most systems).
 
      *Since:* 3.1.7
@@ -11408,15 +11404,15 @@ gnutls_record_uncork
 
  -- Function: int gnutls_record_uncork (gnutls_session_t SESSION,
           unsigned int FLAGS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     FLAGS: Could be zero or 'GNUTLS_RECORD_WAIT'
+     FLAGS: Could be zero or `GNUTLS_RECORD_WAIT'
 
-     This resets the effect of 'gnutls_cork()' , and flushes any pending
-     data.  If the 'GNUTLS_RECORD_WAIT' flag is specified then this
+     This resets the effect of `gnutls_cork()' , and flushes any pending
+     data. If the `GNUTLS_RECORD_WAIT'  flag is specified then this
      function will block until the data is sent or a fatal error occurs
-     (i.e., the function will retry on 'GNUTLS_E_AGAIN' and
-     'GNUTLS_E_INTERRUPTED' ).
+     (i.e., the function will retry on `GNUTLS_E_AGAIN'  and
+     `GNUTLS_E_INTERRUPTED' ).
 
      *Returns:* On success the number of transmitted data is returned,
      or otherwise a negative error code.
@@ -11427,31 +11423,32 @@ gnutls_rehandshake
 ------------------
 
  -- Function: int gnutls_rehandshake (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     This function will renegotiate security parameters with the client.
-     This should only be called in case of a server.
+     This function will renegotiate security parameters with the
+     client.  This should only be called in case of a server.
 
      This message informs the peer that we want to renegotiate
      parameters (perform a handshake).
 
      If this function succeeds (returns 0), you must call the
-     'gnutls_handshake()' function in order to negotiate the new
+     `gnutls_handshake()'  function in order to negotiate the new
      parameters.
 
-     Since TLS is full duplex some application data might have been sent
-     during peer's processing of this message.  In that case one should
-     call 'gnutls_record_recv()' until GNUTLS_E_REHANDSHAKE is returned
-     to clear any pending data.  Care must be taken if rehandshake is
-     mandatory to terminate if it does not start after some threshold.
+     Since TLS is full duplex some application data might have been
+     sent during peer's processing of this message. In that case one
+     should call `gnutls_record_recv()'  until GNUTLS_E_REHANDSHAKE is
+     returned to clear any pending data. Care must be taken if
+     rehandshake is mandatory to terminate if it does not start after
+     some threshold.
 
      If the client does not wish to renegotiate parameters he will
      should with an alert message, thus the return code will be
-     'GNUTLS_E_WARNING_ALERT_RECEIVED' and the alert will be
-     'GNUTLS_A_NO_RENEGOTIATION' .  A client may also choose to ignore
+     `GNUTLS_E_WARNING_ALERT_RECEIVED'  and the alert will be
+     `GNUTLS_A_NO_RENEGOTIATION' .  A client may also choose to ignore
      this message.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
 gnutls_safe_renegotiation_status
@@ -11459,7 +11456,7 @@ gnutls_safe_renegotiation_status
 
  -- Function: int gnutls_safe_renegotiation_status (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Can be used to check whether safe renegotiation is being used in
      the current session.
@@ -11472,14 +11469,14 @@ gnutls_safe_renegotiation_status
 gnutls_sec_param_get_name
 -------------------------
 
- -- Function: const char * gnutls_sec_param_get_name (gnutls_sec_param_t
-          PARAM)
+ -- Function: const char * gnutls_sec_param_get_name
+          (gnutls_sec_param_t PARAM)
      PARAM: is a security parameter
 
-     Convert a 'gnutls_sec_param_t' value to a string.
+     Convert a `gnutls_sec_param_t'  value to a string.
 
      *Returns:* a pointer to a string that contains the name of the
-     specified security level, or 'NULL' .
+     specified security level, or `NULL' .
 
      *Since:* 2.12.0
 
@@ -11494,7 +11491,7 @@ gnutls_sec_param_to_pk_bits
 
      When generating private and public key pairs a difficult question
      is which size of "bits" the modulus will be in RSA and the group
-     size in DSA. The easy answer is 1024, which is also wrong.  This
+     size in DSA. The easy answer is 1024, which is also wrong. This
      function will convert a human understandable security parameter to
      an appropriate size for the specific algorithm.
 
@@ -11505,14 +11502,14 @@ gnutls_sec_param_to_pk_bits
 gnutls_server_name_get
 ----------------------
 
- -- Function: int gnutls_server_name_get (gnutls_session_t SESSION, void
-          * DATA, size_t * DATA_LENGTH, unsigned int * TYPE, unsigned
-          int INDX)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: int gnutls_server_name_get (gnutls_session_t SESSION,
+          void * DATA, size_t * DATA_LENGTH, unsigned int * TYPE,
+          unsigned int INDX)
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA: will hold the data
 
-     DATA_LENGTH: will hold the data length.  Must hold the maximum size
+     DATA_LENGTH: will hold the data length. Must hold the maximum size
      of data.
 
      TYPE: will hold the server name indicator type
@@ -11523,20 +11520,20 @@ gnutls_server_name_get
      client has sent.  The name indication may be any of the enumeration
      gnutls_server_name_type_t.
 
-     If 'type' is GNUTLS_NAME_DNS, then this function is to be used by
+     If  `type' is GNUTLS_NAME_DNS, then this function is to be used by
      servers that support virtual hosting, and the data will be a null
      terminated UTF-8 string.
 
-     If 'data' has not enough size to hold the server name
-     GNUTLS_E_SHORT_MEMORY_BUFFER is returned, and 'data_length' will
+     If  `data' has not enough size to hold the server name
+     GNUTLS_E_SHORT_MEMORY_BUFFER is returned, and  `data_length' will
      hold the required size.
 
-     'index' is used to retrieve more than one server names (if sent by
+     `index' is used to retrieve more than one server names (if sent by
      the client).  The first server name has an index of 0, the second 1
      and so on.  If no name with the given index exists
      GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE is returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_server_name_set
@@ -11545,7 +11542,7 @@ gnutls_server_name_set
  -- Function: int gnutls_server_name_set (gnutls_session_t SESSION,
           gnutls_server_name_type_t TYPE, const void * NAME, size_t
           NAME_LENGTH)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      TYPE: specifies the indicator type
 
@@ -11558,12 +11555,12 @@ gnutls_server_name_set
      This should be used by clients that connect to servers that do
      virtual hosting.
 
-     The value of 'name' depends on the 'type' type.  In case of
-     'GNUTLS_NAME_DNS' , an ASCII (0)-terminated domain name string,
+     The value of  `name' depends on the  `type' type.  In case of
+     `GNUTLS_NAME_DNS' , an ASCII (0)-terminated domain name string,
      without the trailing dot, is expected.  IPv4 or IPv6 addresses are
      not permitted.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_session_channel_binding
@@ -11571,18 +11568,18 @@ gnutls_session_channel_binding
 
  -- Function: int gnutls_session_channel_binding (gnutls_session_t
           SESSION, gnutls_channel_binding_t CBTYPE, gnutls_datum_t * CB)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     CBTYPE: an 'gnutls_channel_binding_t' enumeration type
+     CBTYPE: an `gnutls_channel_binding_t'  enumeration type
 
      CB: output buffer array with data
 
-     Extract given channel binding data of the 'cbtype' (e.g.,
-     'GNUTLS_CB_TLS_UNIQUE' ) type.
+     Extract given channel binding data of the  `cbtype' (e.g.,
+     `GNUTLS_CB_TLS_UNIQUE' ) type.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success,
-     'GNUTLS_E_UNIMPLEMENTED_FEATURE' if the 'cbtype' is unsupported,
-     'GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE' if the data is not
+     *Returns:* `GNUTLS_E_SUCCESS'  on success,
+     `GNUTLS_E_UNIMPLEMENTED_FEATURE'  if the  `cbtype' is unsupported,
+     `GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE'  if the data is not
      currently available, or an error code.
 
      *Since:* 2.12.0
@@ -11592,7 +11589,7 @@ gnutls_session_enable_compatibility_mode
 
  -- Function: void gnutls_session_enable_compatibility_mode
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function can be used to disable certain (security) features in
      TLS in order to maintain maximum compatibility with buggy clients.
@@ -11606,11 +11603,11 @@ gnutls_session_force_valid
 --------------------------
 
  -- Function: void gnutls_session_force_valid (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     Clears the invalid flag in a session.  That means that sessions
-     were corrupt or invalid data were received can be re-used.  Use
-     only when debugging or experimenting with the TLS protocol.  Should
+     Clears the invalid flag in a session. That means that sessions
+     were corrupt or invalid data were received can be re-used. Use
+     only when debugging or experimenting with the TLS protocol. Should
      not be used in typical applications.
 
 gnutls_session_get_data
@@ -11618,20 +11615,20 @@ gnutls_session_get_data
 
  -- Function: int gnutls_session_get_data (gnutls_session_t SESSION,
           void * SESSION_DATA, size_t * SESSION_DATA_SIZE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      SESSION_DATA: is a pointer to space to hold the session.
 
-     SESSION_DATA_SIZE: is the session_data's size, or it will be set by
-     the function.
+     SESSION_DATA_SIZE: is the session_data's size, or it will be set
+     by the function.
 
      Returns all session parameters needed to be stored to support
      resumption.  The client should call this, and store the returned
-     session data.  A session may be resumed later by calling
-     'gnutls_session_set_data()' .  This function must be called after a
-     successful handshake.
+     session data. A session may be resumed later by calling
+     `gnutls_session_set_data()' .  This function must be called after
+     a successful handshake.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_session_get_data2
@@ -11639,18 +11636,18 @@ gnutls_session_get_data2
 
  -- Function: int gnutls_session_get_data2 (gnutls_session_t SESSION,
           gnutls_datum_t * DATA)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      DATA: is a pointer to a datum that will hold the session.
 
      Returns all session parameters needed to be stored to support
      resumption.  The client should call this, and store the returned
-     session data.  A session may be resumed later by calling
-     'gnutls_session_set_data()' .  This function must be called after a
-     successful handshake.  The returned 'data' are allocated and must
-     be released using 'gnutls_free()' .
+     session data. A session may be resumed later by calling
+     `gnutls_session_set_data()' .  This function must be called after
+     a successful handshake.  The returned  `data' are allocated and
+     must be released using `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_session_get_desc
@@ -11659,8 +11656,9 @@ gnutls_session_get_desc
  -- Function: char * gnutls_session_get_desc (gnutls_session_t SESSION)
      SESSION: is a gnutls session
 
-     This function returns a string describing the current session.  The
-     string is null terminated and allocated using 'gnutls_malloc()' .
+     This function returns a string describing the current session.
+     The string is null terminated and allocated using
+     `gnutls_malloc()' .
 
      *Returns:* a description of the protocols and algorithms in the
      current session.
@@ -11672,23 +11670,23 @@ gnutls_session_get_id
 
  -- Function: int gnutls_session_get_id (gnutls_session_t SESSION, void
           * SESSION_ID, size_t * SESSION_ID_SIZE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      SESSION_ID: is a pointer to space to hold the session id.
 
-     SESSION_ID_SIZE: initially should contain the maximum 'session_id'
-     size and will be updated.
+     SESSION_ID_SIZE: initially should contain the maximum
+     `session_id' size and will be updated.
 
      Returns the current session ID. This can be used if you want to
-     check if the next session you tried to resume was actually resumed.
-     That is because resumed sessions share the same session ID with the
-     original session.
+     check if the next session you tried to resume was actually
+     resumed.  That is because resumed sessions share the same session
+     ID with the original session.
 
-     The session ID is selected by the server, that identify the current
-     session.  In TLS 1.0 and SSL 3.0 session id is always less than 32
-     bytes.
+     The session ID is selected by the server, that identify the
+     current session.  In TLS 1.0 and SSL 3.0 session id is always less
+     than 32 bytes.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_session_get_id2
@@ -11696,14 +11694,14 @@ gnutls_session_get_id2
 
  -- Function: int gnutls_session_get_id2 (gnutls_session_t SESSION,
           gnutls_datum_t * SESSION_ID)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      SESSION_ID: will point to the session ID.
 
-     Returns the current session ID. The returned data should be treated
-     as constant.
+     Returns the current session ID. The returned data should be
+     treated as constant.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
      *Since:* 3.1.4
@@ -11712,27 +11710,27 @@ gnutls_session_get_ptr
 ----------------------
 
  -- Function: void * gnutls_session_get_ptr (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Get user pointer for session.  Useful in callbacks.  This is the
-     pointer set with 'gnutls_session_set_ptr()' .
+     pointer set with `gnutls_session_set_ptr()' .
 
      *Returns:* the user given pointer from the session structure, or
-     'NULL' if it was never set.
+     `NULL'  if it was never set.
 
 gnutls_session_get_random
 -------------------------
 
  -- Function: void gnutls_session_get_random (gnutls_session_t SESSION,
           gnutls_datum_t* CLIENT, gnutls_datum_t* SERVER)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      CLIENT: the client part of the random
 
      SERVER: the server part of the random
 
      This function returns pointers to the client and server random
-     fields used in the TLS handshake.  The pointers are not to be
+     fields used in the TLS handshake. The pointers are not to be
      modified or deallocated.
 
      If a client random value has not yet been established, the output
@@ -11744,7 +11742,7 @@ gnutls_session_is_resumed
 -------------------------
 
  -- Function: int gnutls_session_is_resumed (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Check whether session is resumed or not.
 
@@ -11756,7 +11754,7 @@ gnutls_session_resumption_requested
 
  -- Function: int gnutls_session_resumption_requested (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Check whether the client has asked for session resumption.  This
      function is valid only on server side.
@@ -11769,7 +11767,7 @@ gnutls_session_set_data
 
  -- Function: int gnutls_session_set_data (gnutls_session_t SESSION,
           const void * SESSION_DATA, size_t SESSION_DATA_SIZE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      SESSION_DATA: is a pointer to space to hold the session.
 
@@ -11777,14 +11775,14 @@ gnutls_session_set_data
 
      Sets all session parameters, in order to resume a previously
      established session.  The session data given must be the one
-     returned by 'gnutls_session_get_data()' .  This function should be
-     called before 'gnutls_handshake()' .
+     returned by `gnutls_session_get_data()' .  This function should be
+     called before `gnutls_handshake()' .
 
-     Keep in mind that session resuming is advisory.  The server may
+     Keep in mind that session resuming is advisory. The server may
      choose not to resume the session, thus a full handshake will be
      performed.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_session_set_premaster
@@ -11796,7 +11794,7 @@ gnutls_session_set_premaster
           gnutls_mac_algorithm_t MAC, gnutls_compression_method_t COMP,
           const gnutls_datum_t* MASTER, const gnutls_datum_t *
           SESSION_ID)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      ENTITY: GNUTLS_SERVER or GNUTLS_CLIENT
 
@@ -11814,12 +11812,12 @@ gnutls_session_set_premaster
 
      SESSION_ID: the session identifier
 
-     This function sets the premaster secret in a session.  This is a
-     function intended for exceptional uses.  Do not use this function
+     This function sets the premaster secret in a session. This is a
+     function intended for exceptional uses. Do not use this function
      unless you are implementing a legacy protocol.  Use
-     'gnutls_session_set_data()' instead.
+     `gnutls_session_set_data()'  instead.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_session_set_ptr
@@ -11827,25 +11825,25 @@ gnutls_session_set_ptr
 
  -- Function: void gnutls_session_set_ptr (gnutls_session_t SESSION,
           void * PTR)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      PTR: is the user pointer
 
-     This function will set (associate) the user given pointer 'ptr' to
+     This function will set (associate) the user given pointer  `ptr' to
      the session structure.  This pointer can be accessed with
-     'gnutls_session_get_ptr()' .
+     `gnutls_session_get_ptr()' .
 
 gnutls_session_ticket_enable_client
 -----------------------------------
 
  -- Function: int gnutls_session_ticket_enable_client (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Request that the client should attempt session resumption using
      SessionTicket.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
      *Since:* 2.10.0
@@ -11855,15 +11853,15 @@ gnutls_session_ticket_enable_server
 
  -- Function: int gnutls_session_ticket_enable_server (gnutls_session_t
           SESSION, const gnutls_datum_t * KEY)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      KEY: key to encrypt session parameters.
 
      Request that the server should attempt session resumption using
-     SessionTicket.  'key' must be initialized with
-     'gnutls_session_ticket_key_generate()' .
+     SessionTicket.   `key' must be initialized with
+     `gnutls_session_ticket_key_generate()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
      *Since:* 2.10.0
@@ -11873,13 +11871,13 @@ gnutls_session_ticket_key_generate
 
  -- Function: int gnutls_session_ticket_key_generate (gnutls_datum_t *
           KEY)
-     KEY: is a pointer to a 'gnutls_datum_t' which will contain a newly
+     KEY: is a pointer to a `gnutls_datum_t'  which will contain a newly
      created key.
 
      Generate a random key to encrypt security parameters within
      SessionTicket.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
      *Since:* 2.10.0
@@ -11888,7 +11886,7 @@ gnutls_set_default_priority
 ---------------------------
 
  -- Function: int gnutls_set_default_priority (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Sets some default priority on the ciphers, key exchange methods,
      macs and compression methods.
@@ -11901,20 +11899,21 @@ gnutls_set_default_priority
      because of its wide use it is still fully supported.  If you wish
      to allow users to provide a string that specify which ciphers to
      use (which is recommended), you should use
-     'gnutls_priority_set_direct()' or 'gnutls_priority_set()' instead.
+     `gnutls_priority_set_direct()'  or `gnutls_priority_set()'
+     instead.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_sign_algorithm_get
 -------------------------
 
  -- Function: int gnutls_sign_algorithm_get (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Returns the signature algorithm that is (or will be) used in this
      session by the server to sign data.
 
-     *Returns:* The sign algorithm or 'GNUTLS_SIGN_UNKNOWN' .
+     *Returns:* The sign algorithm or `GNUTLS_SIGN_UNKNOWN' .
 
      *Since:* 3.1.1
 
@@ -11923,12 +11922,12 @@ gnutls_sign_algorithm_get_client
 
  -- Function: int gnutls_sign_algorithm_get_client (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Returns the signature algorithm that is (or will be) used in this
      session by the client to sign data.
 
-     *Returns:* The sign algorithm or 'GNUTLS_SIGN_UNKNOWN' .
+     *Returns:* The sign algorithm or `GNUTLS_SIGN_UNKNOWN' .
 
      *Since:* 3.1.11
 
@@ -11937,24 +11936,23 @@ gnutls_sign_algorithm_get_requested
 
  -- Function: int gnutls_sign_algorithm_get_requested (gnutls_session_t
           SESSION, size_t INDX, gnutls_sign_algorithm_t * ALGO)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      INDX: is an index of the signature algorithm to return
 
      ALGO: the returned certificate type will be stored there
 
      Returns the signature algorithm specified by index that was
-     requested by the peer.  If the specified index has no data
-     available this function returns
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' .  If the negotiated TLS
-     version does not support signature algorithms then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned even for
-     the first index.  The first index is 0.
+     requested by the peer. If the specified index has no data available
+     this function returns `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' .  If
+     the negotiated TLS version does not support signature algorithms
+     then `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be returned even
+     for the first index.  The first index is 0.
 
      This function is useful in the certificate callback functions to
      assist in selecting the correct certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
      *Since:* 2.10.0
@@ -11971,8 +11969,8 @@ gnutls_sign_get_hash_algorithm
 
      *Since:* 3.1.1
 
-     *Returns:* return a 'gnutls_digest_algorithm_t' value, or
-     'GNUTLS_DIG_UNKNOWN' on error.
+     *Returns:* return a `gnutls_digest_algorithm_t'  value, or
+     `GNUTLS_DIG_UNKNOWN'  on error.
 
 gnutls_sign_get_id
 ------------------
@@ -11983,20 +11981,20 @@ gnutls_sign_get_id
 
      The names are compared in a case insensitive way.
 
-     *Returns:* return a 'gnutls_sign_algorithm_t' value corresponding
-     to the specified algorithm, or 'GNUTLS_SIGN_UNKNOWN' on error.
+     *Returns:* return a `gnutls_sign_algorithm_t'  value corresponding
+     to the specified algorithm, or `GNUTLS_SIGN_UNKNOWN'  on error.
 
 gnutls_sign_get_name
 --------------------
 
- -- Function: const char * gnutls_sign_get_name (gnutls_sign_algorithm_t
-          ALGORITHM)
+ -- Function: const char * gnutls_sign_get_name
+          (gnutls_sign_algorithm_t ALGORITHM)
      ALGORITHM: is a sign algorithm
 
-     Convert a 'gnutls_sign_algorithm_t' value to a string.
+     Convert a `gnutls_sign_algorithm_t'  value to a string.
 
      *Returns:* a string that contains the name of the specified sign
-     algorithm, or 'NULL' .
+     algorithm, or `NULL' .
 
 gnutls_sign_get_pk_algorithm
 ----------------------------
@@ -12005,13 +12003,13 @@ gnutls_sign_get_pk_algorithm
           (gnutls_sign_algorithm_t SIGN)
      SIGN: is a signature algorithm
 
-     This function returns the public key algorithm corresponding to the
-     given signature algorithms.
+     This function returns the public key algorithm corresponding to
+     the given signature algorithms.
 
      *Since:* 3.1.1
 
-     *Returns:* return a 'gnutls_pk_algorithm_t' value, or
-     'GNUTLS_PK_UNKNOWN' on error.
+     *Returns:* return a `gnutls_pk_algorithm_t'  value, or
+     `GNUTLS_PK_UNKNOWN'  on error.
 
 gnutls_sign_is_secure
 ---------------------
@@ -12027,10 +12025,9 @@ gnutls_sign_list
 ----------------
 
  -- Function: const gnutls_sign_algorithm_t * gnutls_sign_list ( VOID)
-
      Get a list of supported public key signature algorithms.
 
-     *Returns:* a (0)-terminated list of 'gnutls_sign_algorithm_t'
+     *Returns:* a (0)-terminated list of `gnutls_sign_algorithm_t'
      integers indicating the available ciphers.
 
 gnutls_srp_allocate_client_credentials
@@ -12038,12 +12035,12 @@ gnutls_srp_allocate_client_credentials
 
  -- Function: int gnutls_srp_allocate_client_credentials
           (gnutls_srp_client_credentials_t * SC)
-     SC: is a pointer to a 'gnutls_srp_server_credentials_t' structure.
+     SC: is a pointer to a `gnutls_srp_server_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to allocate it.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
 gnutls_srp_allocate_server_credentials
@@ -12051,12 +12048,12 @@ gnutls_srp_allocate_server_credentials
 
  -- Function: int gnutls_srp_allocate_server_credentials
           (gnutls_srp_server_credentials_t * SC)
-     SC: is a pointer to a 'gnutls_srp_server_credentials_t' structure.
+     SC: is a pointer to a `gnutls_srp_server_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to allocate it.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
 gnutls_srp_base64_decode
@@ -12073,28 +12070,28 @@ gnutls_srp_base64_decode
      This function will decode the given encoded data, using the base64
      encoding found in libsrp.
 
-     Note that 'b64_data' should be null terminated.
+     Note that  `b64_data' should be null terminated.
 
      Warning!  This base64 encoding is not the "standard" encoding, so
      do not use it for non-SRP purposes.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the buffer given is
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the buffer given is
      not long enough, or 0 on success.
 
 gnutls_srp_base64_decode_alloc
 ------------------------------
 
- -- Function: int gnutls_srp_base64_decode_alloc (const gnutls_datum_t *
-          B64_DATA, gnutls_datum_t * RESULT)
+ -- Function: int gnutls_srp_base64_decode_alloc (const gnutls_datum_t
+          * B64_DATA, gnutls_datum_t * RESULT)
      B64_DATA: contains the encoded data
 
      RESULT: the place where decoded data lie
 
-     This function will decode the given encoded data.  The decoded data
+     This function will decode the given encoded data. The decoded data
      will be allocated, and stored into result.  It will decode using
      the base64 algorithm as used in libsrp.
 
-     You should use 'gnutls_free()' to free the returned data.
+     You should use `gnutls_free()'  to free the returned data.
 
      Warning!  This base64 encoding is not the "standard" encoding, so
      do not use it for non-SRP purposes.
@@ -12104,8 +12101,8 @@ gnutls_srp_base64_decode_alloc
 gnutls_srp_base64_encode
 ------------------------
 
- -- Function: int gnutls_srp_base64_encode (const gnutls_datum_t * DATA,
-          char * RESULT, size_t * RESULT_SIZE)
+ -- Function: int gnutls_srp_base64_encode (const gnutls_datum_t *
+          DATA, char * RESULT, size_t * RESULT_SIZE)
      DATA: contain the raw data
 
      RESULT: the place where base64 data will be copied
@@ -12120,24 +12117,24 @@ gnutls_srp_base64_encode
      Warning!  This base64 encoding is not the "standard" encoding, so
      do not use it for non-SRP purposes.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the buffer given is
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the buffer given is
      not long enough, or 0 on success.
 
 gnutls_srp_base64_encode_alloc
 ------------------------------
 
- -- Function: int gnutls_srp_base64_encode_alloc (const gnutls_datum_t *
-          DATA, gnutls_datum_t * RESULT)
+ -- Function: int gnutls_srp_base64_encode_alloc (const gnutls_datum_t
+          * DATA, gnutls_datum_t * RESULT)
      DATA: contains the raw data
 
      RESULT: will hold the newly allocated encoded data
 
      This function will convert the given data to printable data, using
      the base64 encoding.  This is the encoding used in SRP password
-     files.  This function will allocate the required memory to hold the
-     encoded data.
+     files.  This function will allocate the required memory to hold
+     the encoded data.
 
-     You should use 'gnutls_free()' to free the returned data.
+     You should use `gnutls_free()'  to free the returned data.
 
      Warning!  This base64 encoding is not the "standard" encoding, so
      do not use it for non-SRP purposes.
@@ -12149,7 +12146,7 @@ gnutls_srp_free_client_credentials
 
  -- Function: void gnutls_srp_free_client_credentials
           (gnutls_srp_client_credentials_t SC)
-     SC: is a 'gnutls_srp_client_credentials_t' structure.
+     SC: is a `gnutls_srp_client_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to free (deallocate) it.
@@ -12159,7 +12156,7 @@ gnutls_srp_free_server_credentials
 
  -- Function: void gnutls_srp_free_server_credentials
           (gnutls_srp_server_credentials_t SC)
-     SC: is a 'gnutls_srp_server_credentials_t' structure.
+     SC: is a `gnutls_srp_server_credentials_t'  structure.
 
      This structure is complex enough to manipulate directly thus this
      helper function is provided in order to free (deallocate) it.
@@ -12183,19 +12180,19 @@ gnutls_srp_set_client_credentials
  -- Function: int gnutls_srp_set_client_credentials
           (gnutls_srp_client_credentials_t RES, const char * USERNAME,
           const char * PASSWORD)
-     RES: is a 'gnutls_srp_client_credentials_t' structure.
+     RES: is a `gnutls_srp_client_credentials_t'  structure.
 
      USERNAME: is the user's userid
 
      PASSWORD: is the user's password
 
      This function sets the username and password, in a
-     'gnutls_srp_client_credentials_t' structure.  Those will be used in
-     SRP authentication.  'username' and 'password' should be ASCII
+     `gnutls_srp_client_credentials_t'  structure.  Those will be used
+     in SRP authentication.   `username' and  `password' should be ASCII
      strings or UTF-8 strings prepared using the "SASLprep" profile of
      "stringprep".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
 gnutls_srp_set_client_credentials_function
@@ -12204,7 +12201,7 @@ gnutls_srp_set_client_credentials_function
  -- Function: void gnutls_srp_set_client_credentials_function
           (gnutls_srp_client_credentials_t CRED,
           gnutls_srp_client_credentials_function * FUNC)
-     CRED: is a 'gnutls_srp_server_credentials_t' structure.
+     CRED: is a `gnutls_srp_server_credentials_t'  structure.
 
      FUNC: is the callback function
 
@@ -12214,8 +12211,8 @@ gnutls_srp_set_client_credentials_function
 
      int (*callback)(gnutls_session_t, char** username, char**password);
 
-     The 'username' and 'password' must be allocated using
-     'gnutls_malloc()' .  'username' and 'password' should be ASCII
+     The  `username' and  `password' must be allocated using
+     `gnutls_malloc()' .   `username' and  `password' should be ASCII
      strings or UTF-8 strings prepared using the "SASLprep" profile of
      "stringprep".
 
@@ -12233,7 +12230,7 @@ gnutls_srp_set_prime_bits
 
  -- Function: void gnutls_srp_set_prime_bits (gnutls_session_t SESSION,
           unsigned int BITS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      BITS: is the number of bits
 
@@ -12242,7 +12239,7 @@ gnutls_srp_set_prime_bits
 
      In the client side it sets the minimum accepted number of bits.  If
      a server sends a prime with less bits than that
-     'GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER' will be returned by the
+     `GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER'  will be returned by the
      handshake.
 
      This function has no effect in server side.
@@ -12255,18 +12252,18 @@ gnutls_srp_set_server_credentials_file
  -- Function: int gnutls_srp_set_server_credentials_file
           (gnutls_srp_server_credentials_t RES, const char *
           PASSWORD_FILE, const char * PASSWORD_CONF_FILE)
-     RES: is a 'gnutls_srp_server_credentials_t' structure.
+     RES: is a `gnutls_srp_server_credentials_t'  structure.
 
      PASSWORD_FILE: is the SRP password file (tpasswd)
 
      PASSWORD_CONF_FILE: is the SRP password conf file (tpasswd.conf)
 
      This function sets the password files, in a
-     'gnutls_srp_server_credentials_t' structure.  Those password files
+     `gnutls_srp_server_credentials_t'  structure.  Those password files
      hold usernames and verifiers and will be used for SRP
      authentication.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
 gnutls_srp_set_server_credentials_function
@@ -12275,7 +12272,7 @@ gnutls_srp_set_server_credentials_function
  -- Function: void gnutls_srp_set_server_credentials_function
           (gnutls_srp_server_credentials_t CRED,
           gnutls_srp_server_credentials_function * FUNC)
-     CRED: is a 'gnutls_srp_server_credentials_t' structure.
+     CRED: is a `gnutls_srp_server_credentials_t'  structure.
 
      FUNC: is the callback function
 
@@ -12286,9 +12283,9 @@ gnutls_srp_set_server_credentials_function
      gnutls_datum_t* salt, gnutls_datum_t *verifier, gnutls_datum_t* g,
      gnutls_datum_t* n);
 
-     'username' contains the actual username.  The 'salt' , 'verifier' ,
-     'generator' and 'prime' must be filled in using the
-     'gnutls_malloc()' .  For convenience 'prime' and 'generator' may
+     `username' contains the actual username.  The  `salt' ,
+     `verifier' ,  `generator' and  `prime' must be filled in using the
+     `gnutls_malloc()' . For convenience  `prime' and  `generator' may
      also be one of the static parameters defined in gnutls.h.
 
      In case the callback returned a negative number then gnutls will
@@ -12296,20 +12293,20 @@ gnutls_srp_set_server_credentials_function
 
      In order to prevent attackers from guessing valid usernames, if a
      user does not exist, g and n values should be filled in using a
-     random user's parameters.  In that case the callback must return
+     random user's parameters. In that case the callback must return
      the special value (1).
 
      The callback function will only be called once per handshake.  The
-     callback function should return 0 on success, while -1 indicates an
-     error.
+     callback function should return 0 on success, while -1 indicates
+     an error.
 
 gnutls_srp_verifier
 -------------------
 
- -- Function: int gnutls_srp_verifier (const char * USERNAME, const char
-          * PASSWORD, const gnutls_datum_t * SALT, const gnutls_datum_t
-          * GENERATOR, const gnutls_datum_t * PRIME, gnutls_datum_t *
-          RES)
+ -- Function: int gnutls_srp_verifier (const char * USERNAME, const
+          char * PASSWORD, const gnutls_datum_t * SALT, const
+          gnutls_datum_t * GENERATOR, const gnutls_datum_t * PRIME,
+          gnutls_datum_t * RES)
      USERNAME: is the user's name
 
      PASSWORD: is the user's password
@@ -12322,24 +12319,24 @@ gnutls_srp_verifier
 
      RES: where the verifier will be stored.
 
-     This function will create an SRP verifier, as specified in RFC2945.
-     The 'prime' and 'generator' should be one of the static parameters
-     defined in gnutls/gnutls.h or may be generated.
+     This function will create an SRP verifier, as specified in
+     RFC2945.  The  `prime' and  `generator' should be one of the static
+     parameters defined in gnutls/gnutls.h or may be generated.
 
-     The verifier will be allocated with 'gnutls_malloc' () and will be
-     stored in 'res' using binary format.
+     The verifier will be allocated with  `gnutls_malloc' () and will
+     be stored in  `res' using binary format.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or an
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or an
      error code.
 
 gnutls_srtp_get_keys
 --------------------
 
- -- Function: int gnutls_srtp_get_keys (gnutls_session_t SESSION, void *
-          KEY_MATERIAL, unsigned int KEY_MATERIAL_SIZE, gnutls_datum_t *
-          CLIENT_KEY, gnutls_datum_t * CLIENT_SALT, gnutls_datum_t *
-          SERVER_KEY, gnutls_datum_t * SERVER_SALT)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: int gnutls_srtp_get_keys (gnutls_session_t SESSION, void
+          * KEY_MATERIAL, unsigned int KEY_MATERIAL_SIZE,
+          gnutls_datum_t * CLIENT_KEY, gnutls_datum_t * CLIENT_SALT,
+          gnutls_datum_t * SERVER_KEY, gnutls_datum_t * SERVER_SALT)
+     SESSION: is a `gnutls_session_t'  structure.
 
      KEY_MATERIAL: Space to hold the generated key material
 
@@ -12359,13 +12356,13 @@ gnutls_srtp_get_keys
 
      This is a helper function to generate the keying material for SRTP.
      It requires the space of the key material to be pre-allocated
-     (should be at least 2x the maximum key size and salt size).  The
-     'client_key' , 'client_salt' , 'server_key' and 'server_salt' are
-     convenience datums that point inside the key material.  They may be
-     'NULL' .
+     (should be at least 2x the maximum key size and salt size). The
+     `client_key' ,  `client_salt' ,  `server_key' and  `server_salt'
+     are convenience datums that point inside the key material. They may
+     be `NULL' .
 
      *Returns:* On success the size of the key material is returned,
-     otherwise, 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the buffer given is
+     otherwise, `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the buffer given is
      not sufficient, or a negative error code.
 
      Since 3.1.4
@@ -12375,15 +12372,15 @@ gnutls_srtp_get_mki
 
  -- Function: int gnutls_srtp_get_mki (gnutls_session_t SESSION,
           gnutls_datum_t * MKI)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      MKI: will hold the MKI
 
      This function exports the negotiated Master Key Identifier,
-     received by the peer if any.  The returned value in 'mki' should be
+     received by the peer if any. The returned value in  `mki' should be
      treated as constant and valid only during the session's lifetime.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      Since 3.1.4
@@ -12399,7 +12396,7 @@ gnutls_srtp_get_profile_id
 
      This function allows you to look up a profile based on a string.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      Since 3.1.4
@@ -12424,13 +12421,13 @@ gnutls_srtp_get_selected_profile
 
  -- Function: int gnutls_srtp_get_selected_profile (gnutls_session_t
           SESSION, gnutls_srtp_profile_t * PROFILE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      PROFILE: will hold the profile
 
      This function allows you to get the negotiated SRTP profile.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      Since 3.1.4
@@ -12440,14 +12437,14 @@ gnutls_srtp_set_mki
 
  -- Function: int gnutls_srtp_set_mki (gnutls_session_t SESSION, const
           gnutls_datum_t * MKI)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      MKI: holds the MKI
 
      This function sets the Master Key Identifier, to be used by this
      session (if any).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      Since 3.1.4
@@ -12457,14 +12454,14 @@ gnutls_srtp_set_profile
 
  -- Function: int gnutls_srtp_set_profile (gnutls_session_t SESSION,
           gnutls_srtp_profile_t PROFILE)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      PROFILE: is the profile id to add.
 
      This function is to be used by both clients and servers, to declare
      what SRTP profiles they support, to negotiate with the peer.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
      Since 3.1.4
@@ -12474,7 +12471,7 @@ gnutls_srtp_set_profile_direct
 
  -- Function: int gnutls_srtp_set_profile_direct (gnutls_session_t
           SESSION, const char * PROFILES, const char ** ERR_POS)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      PROFILES: is a string that contains the supported SRTP profiles,
      separated by colons.
@@ -12485,8 +12482,8 @@ gnutls_srtp_set_profile_direct
      This function is to be used by both clients and servers, to declare
      what SRTP profiles they support, to negotiate with the peer.
 
-     *Returns:* On syntax error 'GNUTLS_E_INVALID_REQUEST' is returned,
-     'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* On syntax error `GNUTLS_E_INVALID_REQUEST'  is returned,
+     `GNUTLS_E_SUCCESS'  on success, or an error code.
 
      Since 3.1.4
 
@@ -12504,7 +12501,7 @@ gnutls_store_commitment
 
      HOST: The peer's name
 
-     SERVICE: non-NULL if this key is specific to a service (e.g.  http)
+     SERVICE: non-NULL if this key is specific to a service (e.g. http)
 
      HASH_ALGO: The hash algorithm type
 
@@ -12515,17 +12512,17 @@ gnutls_store_commitment
      FLAGS: should be 0.
 
      This function will store the provided hash commitment to the list
-     of stored public keys.  The key with the given hash will be
+     of stored public keys. The key with the given hash will be
      considered valid until the provided expiration time.
 
-     The 'store' variable if non-null specifies a custom backend for the
-     storage of entries.  If it is NULL then the default file backend
-     will be used.
+     The  `store' variable if non-null specifies a custom backend for
+     the storage of entries. If it is NULL then the default file
+     backend will be used.
 
      Note that this function is not thread safe with the default
      backend.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -12533,8 +12530,8 @@ gnutls_store_commitment
 gnutls_store_pubkey
 -------------------
 
- -- Function: int gnutls_store_pubkey (const char* DB_NAME, gnutls_tdb_t
-          TDB, const char* HOST, const char* SERVICE,
+ -- Function: int gnutls_store_pubkey (const char* DB_NAME,
+          gnutls_tdb_t TDB, const char* HOST, const char* SERVICE,
           gnutls_certificate_type_t CERT_TYPE, const gnutls_datum_t *
           CERT, time_t EXPIRATION, unsigned int FLAGS)
      DB_NAME: A file specifying the stored keys (use NULL for the
@@ -12544,7 +12541,7 @@ gnutls_store_pubkey
 
      HOST: The peer's name
 
-     SERVICE: non-NULL if this key is specific to a service (e.g.  http)
+     SERVICE: non-NULL if this key is specific to a service (e.g. http)
 
      CERT_TYPE: The type of the certificate
 
@@ -12555,14 +12552,14 @@ gnutls_store_pubkey
      FLAGS: should be 0.
 
      This function will store the provided certificate to the list of
-     stored public keys.  The key will be considered valid until the
+     stored public keys. The key will be considered valid until the
      provided expiration time.
 
-     The 'store' variable if non-null specifies a custom backend for the
-     storage of entries.  If it is NULL then the default file backend
-     will be used.
+     The  `store' variable if non-null specifies a custom backend for
+     the storage of entries. If it is NULL then the default file
+     backend will be used.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -12575,7 +12572,7 @@ gnutls_strerror
 
      This function is similar to strerror.  The difference is that it
      accepts an error number returned by a gnutls function; In case of
-     an unknown error a descriptive string is sent instead of 'NULL' .
+     an unknown error a descriptive string is sent instead of `NULL' .
 
      Error codes are always a negative error code.
 
@@ -12603,11 +12600,11 @@ gnutls_supplemental_get_name
           (gnutls_supplemental_data_format_type_t TYPE)
      TYPE: is a supplemental data format type
 
-     Convert a 'gnutls_supplemental_data_format_type_t' value to a
+     Convert a `gnutls_supplemental_data_format_type_t'  value to a
      string.
 
      *Returns:* a string that contains the name of the specified
-     supplemental data format type, or 'NULL' for unknown types.
+     supplemental data format type, or `NULL'  for unknown types.
 
 gnutls_tdb_deinit
 -----------------
@@ -12626,7 +12623,7 @@ gnutls_tdb_init
 
      This function will initialize a public key trust storage structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_tdb_set_store_commitment_func
@@ -12639,7 +12636,7 @@ gnutls_tdb_set_store_commitment_func
      CSTORE: The commitment storage function
 
      This function will associate a commitment (hash) storage function
-     with the trust storage structure.  The function is of the following
+     with the trust storage structure. The function is of the following
      form.
 
      gnutls_tdb_store_commitment_func(const char* db_name, const char*
@@ -12656,7 +12653,7 @@ gnutls_tdb_set_store_func
      STORE: The storage function
 
      This function will associate a storage function with the trust
-     storage structure.  The function is of the following form.
+     storage structure. The function is of the following form.
 
      gnutls_tdb_store_func(const char* db_name, const char* host, const
      char* service, time_t expiration, const gnutls_datum_t* pubkey);
@@ -12671,20 +12668,20 @@ gnutls_tdb_set_verify_func
      VERIFY: The verification function
 
      This function will associate a retrieval function with the trust
-     storage structure.  The function is of the following form.
+     storage structure. The function is of the following form.
 
-     gnutls_tdb_verify_func(const char* db_name, const char* host, const
-     char* service, const gnutls_datum_t* pubkey);
+     gnutls_tdb_verify_func(const char* db_name, const char* host,
+     const char* service, const gnutls_datum_t* pubkey);
 
 gnutls_transport_get_int
 ------------------------
 
  -- Function: int gnutls_transport_get_int (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     Used to get the first argument of the transport function (like PUSH
-     and PULL). This must have been set using
-     'gnutls_transport_set_int()' .
+     Used to get the first argument of the transport function (like
+     PUSH and PULL).  This must have been set using
+     `gnutls_transport_set_int()' .
 
      *Returns:* The first argument of the transport function.
 
@@ -12695,15 +12692,15 @@ gnutls_transport_get_int2
 
  -- Function: void gnutls_transport_get_int2 (gnutls_session_t SESSION,
           int * RECV_INT, int * SEND_INT)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      RECV_INT: will hold the value for the pull function
 
      SEND_INT: will hold the value for the push function
 
-     Used to get the arguments of the transport functions (like PUSH and
-     PULL). These should have been set using
-     'gnutls_transport_set_int2()' .
+     Used to get the arguments of the transport functions (like PUSH
+     and PULL).  These should have been set using
+     `gnutls_transport_set_int2()' .
 
      *Since:* 3.1.9
 
@@ -12712,11 +12709,11 @@ gnutls_transport_get_ptr
 
  -- Function: gnutls_transport_ptr_t gnutls_transport_get_ptr
           (gnutls_session_t SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     Used to get the first argument of the transport function (like PUSH
-     and PULL). This must have been set using
-     'gnutls_transport_set_ptr()' .
+     Used to get the first argument of the transport function (like
+     PUSH and PULL).  This must have been set using
+     `gnutls_transport_set_ptr()' .
 
      *Returns:* The first argument of the transport function.
 
@@ -12726,51 +12723,51 @@ gnutls_transport_get_ptr2
  -- Function: void gnutls_transport_get_ptr2 (gnutls_session_t SESSION,
           gnutls_transport_ptr_t * RECV_PTR, gnutls_transport_ptr_t *
           SEND_PTR)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      RECV_PTR: will hold the value for the pull function
 
      SEND_PTR: will hold the value for the push function
 
-     Used to get the arguments of the transport functions (like PUSH and
-     PULL). These should have been set using
-     'gnutls_transport_set_ptr2()' .
+     Used to get the arguments of the transport functions (like PUSH
+     and PULL).  These should have been set using
+     `gnutls_transport_set_ptr2()' .
 
 gnutls_transport_set_errno
 --------------------------
 
- -- Function: void gnutls_transport_set_errno (gnutls_session_t SESSION,
-          int ERR)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: void gnutls_transport_set_errno (gnutls_session_t
+          SESSION, int ERR)
+     SESSION: is a `gnutls_session_t'  structure.
 
      ERR: error value to store in session-specific errno variable.
 
-     Store 'err' in the session-specific errno variable.  Useful values
-     for 'err' is EAGAIN and EINTR, other values are treated will be
+     Store  `err' in the session-specific errno variable.  Useful values
+     for  `err' is EAGAIN and EINTR, other values are treated will be
      treated as real errors in the push/pull function.
 
      This function is useful in replacement push and pull functions set
-     by 'gnutls_transport_set_push_function()' and
-     'gnutls_transport_set_pull_function()' under Windows, where the
-     replacements may not have access to the same 'errno' variable that
-     is used by GnuTLS (e.g., the application is linked to msvcr71.dll
-     and gnutls is linked to msvcrt.dll).
+     by `gnutls_transport_set_push_function()'  and
+     `gnutls_transport_set_pull_function()'  under Windows, where the
+     replacements may not have access to the same  `errno' variable
+     that is used by GnuTLS (e.g., the application is linked to
+     msvcr71.dll and gnutls is linked to msvcrt.dll).
 
 gnutls_transport_set_errno_function
 -----------------------------------
 
- -- Function: void gnutls_transport_set_errno_function (gnutls_session_t
-          SESSION, gnutls_errno_func ERRNO_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: void gnutls_transport_set_errno_function
+          (gnutls_session_t SESSION, gnutls_errno_func ERRNO_FUNC)
+     SESSION: is a `gnutls_session_t'  structure.
 
-     ERRNO_FUNC: a callback function similar to 'write()'
+     ERRNO_FUNC: a callback function similar to `write()'
 
      This is the function where you set a function to retrieve errno
      after a failed push or pull operation.
 
-     'errno_func' is of the form, int
-     (*gnutls_errno_func)(gnutls_transport_ptr_t); and should return the
-     errno.
+     `errno_func' is of the form, int
+     (*gnutls_errno_func)(gnutls_transport_ptr_t); and should return
+     the errno.
 
      *Since:* 2.12.0
 
@@ -12779,7 +12776,7 @@ gnutls_transport_set_int
 
  -- Function: void gnutls_transport_set_int (gnutls_session_t SESSION,
           int I)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      I: is the value.
 
@@ -12793,7 +12790,7 @@ gnutls_transport_set_int2
 
  -- Function: void gnutls_transport_set_int2 (gnutls_session_t SESSION,
           int RECV_INT, int SEND_INT)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      RECV_INT: is the value for the pull function
 
@@ -12811,12 +12808,12 @@ gnutls_transport_set_ptr
 
  -- Function: void gnutls_transport_set_ptr (gnutls_session_t SESSION,
           gnutls_transport_ptr_t PTR)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      PTR: is the value.
 
      Used to set the first argument of the transport function (for push
-     and pull callbacks).  In berkeley style sockets this function will
+     and pull callbacks). In berkeley style sockets this function will
      set the connection descriptor.
 
 gnutls_transport_set_ptr2
@@ -12825,14 +12822,14 @@ gnutls_transport_set_ptr2
  -- Function: void gnutls_transport_set_ptr2 (gnutls_session_t SESSION,
           gnutls_transport_ptr_t RECV_PTR, gnutls_transport_ptr_t
           SEND_PTR)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      RECV_PTR: is the value for the pull function
 
      SEND_PTR: is the value for the push function
 
      Used to set the first argument of the transport function (for push
-     and pull callbacks).  In berkeley style sockets this function will
+     and pull callbacks). In berkeley style sockets this function will
      set the connection descriptor.  With this function you can use two
      different pointers for receiving and sending.
 
@@ -12841,9 +12838,9 @@ gnutls_transport_set_pull_function
 
  -- Function: void gnutls_transport_set_pull_function (gnutls_session_t
           SESSION, gnutls_pull_func PULL_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     PULL_FUNC: a callback function similar to 'read()'
+     PULL_FUNC: a callback function similar to `read()'
 
      This is the function where you set a function for gnutls to receive
      data.  Normally, if you use berkeley style sockets, do not need to
@@ -12851,7 +12848,7 @@ gnutls_transport_set_pull_function
      The callback should return 0 on connection termination, a positive
      number indicating the number of bytes received, and -1 on error.
 
-     'gnutls_pull_func' is of the form, ssize_t
+     `gnutls_pull_func' is of the form, ssize_t
      (*gnutls_pull_func)(gnutls_transport_ptr_t, void*, size_t);
 
 gnutls_transport_set_pull_timeout_function
@@ -12859,21 +12856,21 @@ gnutls_transport_set_pull_timeout_function
 
  -- Function: void gnutls_transport_set_pull_timeout_function
           (gnutls_session_t SESSION, gnutls_pull_timeout_func FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      FUNC: a callback function
 
      This is the function where you set a function for gnutls to know
-     whether data are ready to be received.  It should wait for data a
-     given time frame in milliseconds.  The callback should return 0 on
+     whether data are ready to be received. It should wait for data a
+     given time frame in milliseconds. The callback should return 0 on
      timeout, a positive number if data can be received, and -1 on
-     error.  You'll need to override this function if 'select()' is not
-     suitable for the provided transport calls.
+     error.  You'll need to override this function if `select()'  is
+     not suitable for the provided transport calls.
 
-     As with 'select()' , if the timeout value is zero the callback
+     As with `select()' , if the timeout value is zero the callback
      should return zero if no data are immediately available.
 
-     'gnutls_pull_timeout_func' is of the form, int
+     `gnutls_pull_timeout_func' is of the form, int
      (*gnutls_pull_timeout_func)(gnutls_transport_ptr_t, unsigned int
      ms);
 
@@ -12884,9 +12881,9 @@ gnutls_transport_set_push_function
 
  -- Function: void gnutls_transport_set_push_function (gnutls_session_t
           SESSION, gnutls_push_func PUSH_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     PUSH_FUNC: a callback function similar to 'write()'
+     PUSH_FUNC: a callback function similar to `write()'
 
      This is the function where you set a push function for gnutls to
      use in order to send data.  If you are going to use berkeley style
@@ -12896,7 +12893,7 @@ gnutls_transport_set_push_function
      return a positive number indicating the bytes sent, and -1 on
      error.
 
-     'push_func' is of the form, ssize_t
+     `push_func' is of the form, ssize_t
      (*gnutls_push_func)(gnutls_transport_ptr_t, const void*, size_t);
 
 gnutls_transport_set_vec_push_function
@@ -12904,16 +12901,16 @@ gnutls_transport_set_vec_push_function
 
  -- Function: void gnutls_transport_set_vec_push_function
           (gnutls_session_t SESSION, gnutls_vec_push_func VEC_FUNC)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
-     VEC_FUNC: a callback function similar to 'writev()'
+     VEC_FUNC: a callback function similar to `writev()'
 
-     Using this function you can override the default writev(2) function
-     for gnutls to send data.  Setting this callback instead of
-     'gnutls_transport_set_push_function()' is recommended since it
+     Using this function you can override the default writev(2)
+     function for gnutls to send data. Setting this callback instead of
+     `gnutls_transport_set_push_function()'  is recommended since it
      introduces less overhead in the TLS handshake process.
 
-     'vec_func' is of the form, ssize_t (*gnutls_vec_push_func)
+     `vec_func' is of the form, ssize_t (*gnutls_vec_push_func)
      (gnutls_transport_ptr_t, const giovec_t * iov, int iovcnt);
 
      *Since:* 2.12.0
@@ -12946,7 +12943,7 @@ gnutls_verify_stored_pubkey
 
      HOST: The peer's name
 
-     SERVICE: non-NULL if this key is specific to a service (e.g.  http)
+     SERVICE: non-NULL if this key is specific to a service (e.g. http)
 
      CERT_TYPE: The type of the certificate
 
@@ -12955,25 +12952,25 @@ gnutls_verify_stored_pubkey
      FLAGS: should be 0.
 
      This function will try to verify the provided certificate using a
-     list of stored public keys.  The 'service' field if non-NULL should
-     be a port number.
+     list of stored public keys.  The  `service' field if non-NULL
+     should be a port number.
 
-     The 'retrieve' variable if non-null specifies a custom backend for
-     the retrieval of entries.  If it is NULL then the default file
-     backend will be used.  In POSIX-like systems the file backend uses
+     The  `retrieve' variable if non-null specifies a custom backend for
+     the retrieval of entries. If it is NULL then the default file
+     backend will be used. In POSIX-like systems the file backend uses
      the $HOME/.gnutls/known_hosts file.
 
      Note that if the custom storage backend is provided the retrieval
-     function should return 'GNUTLS_E_CERTIFICATE_KEY_MISMATCH' if the
+     function should return `GNUTLS_E_CERTIFICATE_KEY_MISMATCH' if the
      host/service pair is found but key doesn't match,
-     'GNUTLS_E_NO_CERTIFICATE_FOUND' if no such host/service with the
-     given key is found, and 0 if it was found.  The storage function
+     `GNUTLS_E_NO_CERTIFICATE_FOUND'  if no such host/service with the
+     given key is found, and 0 if it was found. The storage function
      should return 0 on success.
 
      *Returns:* If no associated public key is found then
-     'GNUTLS_E_NO_CERTIFICATE_FOUND' will be returned.  If a key is
-     found but does not match 'GNUTLS_E_CERTIFICATE_KEY_MISMATCH' is
-     returned.  On success, 'GNUTLS_E_SUCCESS' (0) is returned, or a
+     `GNUTLS_E_NO_CERTIFICATE_FOUND'  will be returned. If a key is
+     found but does not match `GNUTLS_E_CERTIFICATE_KEY_MISMATCH' is
+     returned. On success, `GNUTLS_E_SUCCESS'  (0) is returned, or a
      negative error value on other errors.
 
      *Since:* 3.0
diff --git a/doc/gnutls.info-3 b/doc/gnutls.info-3
index 318a08f..d48146e 100644
--- a/doc/gnutls.info-3
+++ b/doc/gnutls.info-3
@@ -1,4 +1,4 @@
-This is gnutls.info, produced by makeinfo version 5.1 from gnutls.texi.
+This is gnutls.info, produced by makeinfo version 4.13 from gnutls.texi.
 
 This manual is last updated 2 April 2013 for version 3.1.13 of GnuTLS.
 
@@ -11,6 +11,7 @@ Copyright (C) 2001-2013 Free Software Foundation, Inc.\\ Copyright (C)
      Foundation; with no Invariant Sections, no Front-Cover Texts, and
      no Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
+
 INFO-DIR-SECTION Software libraries
 START-INFO-DIR-ENTRY
 * GnuTLS: (gnutls).		GNU Transport Layer Security Library.
@@ -32,7 +33,7 @@ File: gnutls.info,  Node: High level TLS API,  Next: Datagram TLS API,  Prev: Co
 E.2 High level TLS API
 ======================
 
-The prototypes for the following functions lie in 'gnutls/xssl.h'.
+The prototypes for the following functions lie in `gnutls/xssl.h'.
 
 
 File: gnutls.info,  Node: Datagram TLS API,  Next: X509 certificate API,  Prev: High level TLS API,  Up: API reference
@@ -40,32 +41,32 @@ File: gnutls.info,  Node: Datagram TLS API,  Next: X509 certificate API,  Prev:
 E.3 Datagram TLS API
 ====================
 
-The prototypes for the following functions lie in 'gnutls/dtls.h'.
+The prototypes for the following functions lie in `gnutls/dtls.h'.
 
 gnutls_dtls_cookie_send
 -----------------------
 
  -- Function: int gnutls_dtls_cookie_send (gnutls_datum_t* KEY, void*
-          CLIENT_DATA, size_t CLIENT_DATA_SIZE, gnutls_dtls_prestate_st*
-          PRESTATE, gnutls_transport_ptr_t PTR, gnutls_push_func
-          PUSH_FUNC)
+          CLIENT_DATA, size_t CLIENT_DATA_SIZE,
+          gnutls_dtls_prestate_st* PRESTATE, gnutls_transport_ptr_t
+          PTR, gnutls_push_func PUSH_FUNC)
      KEY: is a random key to be used at cookie generation
 
-     CLIENT_DATA: contains data identifying the client (i.e.  address)
+     CLIENT_DATA: contains data identifying the client (i.e. address)
 
      CLIENT_DATA_SIZE: The size of client's data
 
      PRESTATE: The previous cookie returned by
-     'gnutls_dtls_cookie_verify()'
+     `gnutls_dtls_cookie_verify()'
 
-     PTR: A transport pointer to be used by 'push_func'
+     PTR: A transport pointer to be used by  `push_func'
 
      PUSH_FUNC: A function that will be used to reply
 
-     This function can be used to prevent denial of service attacks to a
-     DTLS server by requiring the client to reply using a cookie sent by
-     this function.  That way it can be ensured that a client we
-     allocated resources for (i.e.  'gnutls_session_t' ) is the one that
+     This function can be used to prevent denial of service attacks to
+     a DTLS server by requiring the client to reply using a cookie sent
+     by this function. That way it can be ensured that a client we
+     allocated resources for (i.e. `gnutls_session_t' ) is the one that
      the original incoming packet was originated from.
 
      *Returns:* the number of bytes sent, or a negative error code.
@@ -80,7 +81,7 @@ gnutls_dtls_cookie_verify
           MSG_SIZE, gnutls_dtls_prestate_st* PRESTATE)
      KEY: is a random key to be used at cookie generation
 
-     CLIENT_DATA: contains data identifying the client (i.e.  address)
+     CLIENT_DATA: contains data identifying the client (i.e. address)
 
      CLIENT_DATA_SIZE: The size of client's data
 
@@ -91,10 +92,10 @@ gnutls_dtls_cookie_verify
      PRESTATE: The cookie of this client.
 
      This function will verify an incoming message for a valid cookie.
-     If a valid cookie is returned then it should be associated with the
-     session using 'gnutls_dtls_prestate_set()' ;
+     If a valid cookie is returned then it should be associated with
+     the session using `gnutls_dtls_prestate_set()' ;
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
      *Since:* 3.0
@@ -104,11 +105,11 @@ gnutls_dtls_get_data_mtu
 
  -- Function: unsigned int gnutls_dtls_get_data_mtu (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function will return the actual maximum transfer unit for
-     application data.  I.e.  DTLS headers are subtracted from the
-     actual MTU.
+     application data. I.e. DTLS headers are subtracted from the actual
+     MTU.
 
      *Returns:* the maximum allowed transfer unit.
 
@@ -119,11 +120,11 @@ gnutls_dtls_get_mtu
 
  -- Function: unsigned int gnutls_dtls_get_mtu (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function will return the MTU size as set with
-     'gnutls_dtls_set_mtu()' .  This is not the actual MTU of data you
-     can transmit.  Use 'gnutls_dtls_get_data_mtu()' for that reason.
+     `gnutls_dtls_set_mtu()' . This is not the actual MTU of data you
+     can transmit. Use `gnutls_dtls_get_data_mtu()' for that reason.
 
      *Returns:* the set maximum transfer unit.
 
@@ -134,12 +135,12 @@ gnutls_dtls_get_timeout
 
  -- Function: unsigned int gnutls_dtls_get_timeout (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      This function will return the milliseconds remaining for a
-     retransmission of the previously sent handshake message.  This
+     retransmission of the previously sent handshake message. This
      function is useful when DTLS is used in non-blocking mode, to
-     estimate when to call 'gnutls_handshake()' if no packets have been
+     estimate when to call `gnutls_handshake()' if no packets have been
      received.
 
      *Returns:* the remaining time in milliseconds.
@@ -165,20 +166,20 @@ gnutls_dtls_set_data_mtu
 
  -- Function: int gnutls_dtls_set_data_mtu (gnutls_session_t SESSION,
           unsigned int MTU)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      MTU: The maximum unencrypted transfer unit of the session
 
      This function will set the maximum size of the *unencrypted*
-     records which will be sent over a DTLS session.  It is equivalent
-     to calculating the DTLS packet overhead with the current encryption
-     parameters, and calling 'gnutls_dtls_set_mtu()' with that value.
-     In particular, this means that you may need to call this function
-     again after any negotiation or renegotiation, in order to ensure
-     that the MTU is still sufficient to account for the new protocol
-     overhead.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     records which will be sent over a DTLS session. It is equivalent
+     to calculating the DTLS packet overhead with the current
+     encryption parameters, and calling `gnutls_dtls_set_mtu()'  with
+     that value. In particular, this means that you may need to call
+     this function again after any negotiation or renegotiation, in
+     order to ensure that the MTU is still sufficient to account for
+     the new protocol overhead.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
      *Since:* 3.1
@@ -188,13 +189,13 @@ gnutls_dtls_set_mtu
 
  -- Function: void gnutls_dtls_set_mtu (gnutls_session_t SESSION,
           unsigned int MTU)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      MTU: The maximum transfer unit of the transport
 
      This function will set the maximum transfer unit of the transport
-     that DTLS packets are sent over.  Note that this should exclude the
-     IP (or IPv6) and UDP headers.  So for DTLS over IPv6 on an Ethenet
+     that DTLS packets are sent over. Note that this should exclude the
+     IP (or IPv6) and UDP headers. So for DTLS over IPv6 on an Ethenet
      device with MTU 1500, the DTLS MTU set with this function would be
      1500 - 40 (IPV6 header) - 8 (UDP header) = 1452.
 
@@ -205,34 +206,34 @@ gnutls_dtls_set_timeouts
 
  -- Function: void gnutls_dtls_set_timeouts (gnutls_session_t SESSION,
           unsigned int RETRANS_TIMEOUT, unsigned int TOTAL_TIMEOUT)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      RETRANS_TIMEOUT: The time at which a retransmission will occur in
      milliseconds
 
-     TOTAL_TIMEOUT: The time at which the connection will be aborted, in
-     milliseconds.
+     TOTAL_TIMEOUT: The time at which the connection will be aborted,
+     in milliseconds.
 
      This function will set the timeouts required for the DTLS handshake
-     protocol.  The retransmission timeout is the time after which a
+     protocol. The retransmission timeout is the time after which a
      message from the peer is not received, the previous messages will
-     be retransmitted.  The total timeout is the time after which the
-     handshake will be aborted with 'GNUTLS_E_TIMEDOUT' .
+     be retransmitted. The total timeout is the time after which the
+     handshake will be aborted with `GNUTLS_E_TIMEDOUT' .
 
      The DTLS protocol recommends the values of 1 sec and 60 seconds
      respectively.
 
      If the retransmission timeout is zero then the handshake will
-     operate in a non-blocking way, i.e., return 'GNUTLS_E_AGAIN' .
+     operate in a non-blocking way, i.e., return `GNUTLS_E_AGAIN' .
 
      *Since:* 3.0
 
 gnutls_record_get_discarded
 ---------------------------
 
- -- Function: unsigned int gnutls_record_get_discarded (gnutls_session_t
-          SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: unsigned int gnutls_record_get_discarded
+          (gnutls_session_t SESSION)
+     SESSION: is a `gnutls_session_t'  structure.
 
      Returns the number of discarded packets in a DTLS connection.
 
@@ -247,7 +248,7 @@ E.4 X.509 certificate API
 =========================
 
 The following functions are to be used for X.509 certificate handling.
-Their prototypes lie in 'gnutls/x509.h'.
+Their prototypes lie in `gnutls/x509.h'.
 
 gnutls_pkcs7_deinit
 -------------------
@@ -262,14 +263,14 @@ gnutls_pkcs7_delete_crl
 
  -- Function: int gnutls_pkcs7_delete_crl (gnutls_pkcs7_t PKCS7, int
           INDX)
-     PKCS7: should contain a 'gnutls_pkcs7_t' structure
+     PKCS7: should contain a `gnutls_pkcs7_t'  structure
 
      INDX: the index of the crl to delete
 
      This function will delete a crl from a PKCS7 or RFC2630 crl set.
-     Index starts from 0.  Returns 0 on success.
+     Index starts from 0. Returns 0 on success.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_delete_crt
@@ -282,9 +283,9 @@ gnutls_pkcs7_delete_crt
      INDX: the index of the certificate to delete
 
      This function will delete a certificate from a PKCS7 or RFC2630
-     certificate set.  Index starts from 0.  Returns 0 on success.
+     certificate set.  Index starts from 0. Returns 0 on success.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_export
@@ -295,7 +296,7 @@ gnutls_pkcs7_export
           OUTPUT_DATA_SIZE)
      PKCS7: Holds the pkcs7 structure
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUTPUT_DATA: will contain a structure PEM or DER encoded
 
@@ -305,13 +306,13 @@ gnutls_pkcs7_export
      This function will export the pkcs7 structure to DER or PEM format.
 
      If the buffer provided is not long enough to hold the output, then
-     * 'output_data_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
+     * `output_data_size' is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
      will be returned.
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      PKCS7".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_export2
@@ -321,18 +322,18 @@ gnutls_pkcs7_export2
           gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
      PKCS7: Holds the pkcs7 structure
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUT: will contain a structure PEM or DER encoded
 
      This function will export the pkcs7 structure to DER or PEM format.
 
-     The output buffer is allocated using 'gnutls_malloc()' .
+     The output buffer is allocated using `gnutls_malloc()' .
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      PKCS7".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.3
@@ -343,10 +344,10 @@ gnutls_pkcs7_get_crl_count
  -- Function: int gnutls_pkcs7_get_crl_count (gnutls_pkcs7_t PKCS7)
      PKCS7: should contain a gnutls_pkcs7_t structure
 
-     This function will return the number of certifcates in the PKCS7 or
-     RFC2630 crl set.
+     This function will return the number of certifcates in the PKCS7
+     or RFC2630 crl set.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_get_crl_raw
@@ -354,7 +355,7 @@ gnutls_pkcs7_get_crl_raw
 
  -- Function: int gnutls_pkcs7_get_crl_raw (gnutls_pkcs7_t PKCS7, int
           INDX, void * CRL, size_t * CRL_SIZE)
-     PKCS7: should contain a 'gnutls_pkcs7_t' structure
+     PKCS7: should contain a `gnutls_pkcs7_t'  structure
 
      INDX: contains the index of the crl to extract
 
@@ -364,22 +365,23 @@ gnutls_pkcs7_get_crl_raw
 
      This function will return a crl of the PKCS7 or RFC2630 crl set.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.  If the provided buffer is not
-     long enough, then 'crl_size' is updated and
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned.  After the last crl has
-     been read 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     long enough, then  `crl_size' is updated and
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  is returned.  After the last crl
+     has been read `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be
+     returned.
 
 gnutls_pkcs7_get_crt_count
 --------------------------
 
  -- Function: int gnutls_pkcs7_get_crt_count (gnutls_pkcs7_t PKCS7)
-     PKCS7: should contain a 'gnutls_pkcs7_t' structure
+     PKCS7: should contain a `gnutls_pkcs7_t'  structure
 
-     This function will return the number of certifcates in the PKCS7 or
-     RFC2630 certificate set.
+     This function will return the number of certifcates in the PKCS7
+     or RFC2630 certificate set.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_get_crt_raw
@@ -400,12 +402,12 @@ gnutls_pkcs7_get_crt_raw
      certificate set.
 
      After the last certificate has been read
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.  If the provided buffer is not
-     long enough, then 'certificate_size' is updated and
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned.
+     long enough, then  `certificate_size' is updated and
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  is returned.
 
 gnutls_pkcs7_import
 -------------------
@@ -419,12 +421,12 @@ gnutls_pkcs7_import
      FORMAT: One of DER or PEM
 
      This function will convert the given DER or PEM encoded PKCS7 to
-     the native 'gnutls_pkcs7_t' format.  The output will be stored in
-     'pkcs7' .
+     the native `gnutls_pkcs7_t'  format.  The output will be stored in
+     `pkcs7' .
 
      If the PKCS7 is PEM encoded it should have a header of "PKCS7".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_init
@@ -433,11 +435,11 @@ gnutls_pkcs7_init
  -- Function: int gnutls_pkcs7_init (gnutls_pkcs7_t * PKCS7)
      PKCS7: The structure to be initialized
 
-     This function will initialize a PKCS7 structure.  PKCS7 structures
+     This function will initialize a PKCS7 structure. PKCS7 structures
      usually contain lists of X.509 Certificates and X.509 Certificate
      revocation lists.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_set_crl
@@ -445,14 +447,14 @@ gnutls_pkcs7_set_crl
 
  -- Function: int gnutls_pkcs7_set_crl (gnutls_pkcs7_t PKCS7,
           gnutls_x509_crl_t CRL)
-     PKCS7: should contain a 'gnutls_pkcs7_t' structure
+     PKCS7: should contain a `gnutls_pkcs7_t'  structure
 
      CRL: the DER encoded crl to be added
 
      This function will add a parsed CRL to the PKCS7 or RFC2630 crl
      set.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_set_crl_raw
@@ -460,13 +462,13 @@ gnutls_pkcs7_set_crl_raw
 
  -- Function: int gnutls_pkcs7_set_crl_raw (gnutls_pkcs7_t PKCS7, const
           gnutls_datum_t * CRL)
-     PKCS7: should contain a 'gnutls_pkcs7_t' structure
+     PKCS7: should contain a `gnutls_pkcs7_t'  structure
 
      CRL: the DER encoded crl to be added
 
      This function will add a crl to the PKCS7 or RFC2630 crl set.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_set_crt
@@ -474,15 +476,15 @@ gnutls_pkcs7_set_crt
 
  -- Function: int gnutls_pkcs7_set_crt (gnutls_pkcs7_t PKCS7,
           gnutls_x509_crt_t CRT)
-     PKCS7: should contain a 'gnutls_pkcs7_t' structure
+     PKCS7: should contain a `gnutls_pkcs7_t'  structure
 
      CRT: the certificate to be copied.
 
-     This function will add a parsed certificate to the PKCS7 or RFC2630
-     certificate set.  This is a wrapper function over
-     'gnutls_pkcs7_set_crt_raw()' .
+     This function will add a parsed certificate to the PKCS7 or
+     RFC2630 certificate set.  This is a wrapper function over
+     `gnutls_pkcs7_set_crt_raw()'  .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_pkcs7_set_crt_raw
@@ -490,14 +492,14 @@ gnutls_pkcs7_set_crt_raw
 
  -- Function: int gnutls_pkcs7_set_crt_raw (gnutls_pkcs7_t PKCS7, const
           gnutls_datum_t * CRT)
-     PKCS7: should contain a 'gnutls_pkcs7_t' structure
+     PKCS7: should contain a `gnutls_pkcs7_t'  structure
 
      CRT: the DER encoded certificate to be added
 
      This function will add a certificate to the PKCS7 or RFC2630
      certificate set.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_check_issuer
@@ -531,7 +533,7 @@ gnutls_x509_crl_export
           OUTPUT_DATA_SIZE)
      CRL: Holds the revocation list
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUTPUT_DATA: will contain a private key PEM or DER encoded
 
@@ -541,13 +543,13 @@ gnutls_x509_crl_export
      This function will export the revocation list to DER or PEM format.
 
      If the buffer provided is not long enough to hold the output, then
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' will be returned.
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  will be returned.
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      X509 CRL".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      failure.
 
 gnutls_x509_crl_export2
@@ -557,19 +559,19 @@ gnutls_x509_crl_export2
           gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
      CRL: Holds the revocation list
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUT: will contain a private key PEM or DER encoded
 
      This function will export the revocation list to DER or PEM format.
 
-     The output buffer is allocated using 'gnutls_malloc()' .
+     The output buffer is allocated using `gnutls_malloc()' .
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      X509 CRL".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      failure.
 
      Since 3.1.3
@@ -578,13 +580,13 @@ gnutls_x509_crl_get_authority_key_gn_serial
 -------------------------------------------
 
  -- Function: int gnutls_x509_crl_get_authority_key_gn_serial
-          (gnutls_x509_crl_t CRL, unsigned int SEQ, void * ALT, size_t *
-          ALT_SIZE, unsigned int * ALT_TYPE, void* SERIAL, size_t *
+          (gnutls_x509_crl_t CRL, unsigned int SEQ, void * ALT, size_t
+          * ALT_SIZE, unsigned int * ALT_TYPE, void* SERIAL, size_t *
           SERIAL_SIZE, unsigned int * CRITICAL)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
-     SEQ: specifies the sequence number of the alt name (0 for the first
-     one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the alt name (0 for the
+     first one, 1 for the second etc.)
 
      ALT: is the place where the alternative name will be copied to
 
@@ -603,9 +605,9 @@ gnutls_x509_crl_get_authority_key_gn_serial
      This function will return the X.509 authority key identifier when
      stored as a general name (authorityCertIssuer) and serial number.
 
-     Because more than one general names might be stored 'seq' can be
+     Because more than one general names might be stored  `seq' can be
      used as a counter to request them all until
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
      *Returns:* Returns 0 on success, or an error code.
 
@@ -617,7 +619,7 @@ gnutls_x509_crl_get_authority_key_id
  -- Function: int gnutls_x509_crl_get_authority_key_id
           (gnutls_x509_crl_t CRL, void * ID, size_t * ID_SIZE, unsigned
           int * CRITICAL)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      ID: The place where the identifier will be copied
 
@@ -630,11 +632,11 @@ gnutls_x509_crl_get_authority_key_id
      is obtained by the X.509 Authority Key identifier extension field
      (2.5.29.35).  Note that this function only returns the
      keyIdentifier field of the extension and
-     'GNUTLS_E_X509_UNSUPPORTED_EXTENSION' , if the extension contains
-     the name and serial number of the certificate.  In that case
-     'gnutls_x509_crl_get_authority_key_gn_serial()' may be used.
+     `GNUTLS_E_X509_UNSUPPORTED_EXTENSION' , if the extension contains
+     the name and serial number of the certificate. In that case
+     `gnutls_x509_crl_get_authority_key_gn_serial()'  may be used.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.
 
      *Since:* 2.8.0
@@ -643,7 +645,7 @@ gnutls_x509_crl_get_crt_count
 -----------------------------
 
  -- Function: int gnutls_x509_crl_get_crt_count (gnutls_x509_crl_t CRL)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      This function will return the number of revoked certificates in the
      given CRL.
@@ -654,10 +656,10 @@ gnutls_x509_crl_get_crt_count
 gnutls_x509_crl_get_crt_serial
 ------------------------------
 
- -- Function: int gnutls_x509_crl_get_crt_serial (gnutls_x509_crl_t CRL,
-          int INDX, unsigned char * SERIAL, size_t * SERIAL_SIZE, time_t
-          * T)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+ -- Function: int gnutls_x509_crl_get_crt_serial (gnutls_x509_crl_t
+          CRL, int INDX, unsigned char * SERIAL, size_t * SERIAL_SIZE,
+          time_t * T)
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      INDX: the index of the certificate to extract (starting from 0)
 
@@ -670,19 +672,18 @@ gnutls_x509_crl_get_crt_serial
      This function will retrieve the serial number of the specified, by
      the index, revoked certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      error.
 
 gnutls_x509_crl_get_dn_oid
 --------------------------
 
- -- Function: int gnutls_x509_crl_get_dn_oid (gnutls_x509_crl_t CRL, int
-          INDX, void * OID, size_t * SIZEOF_OID)
+ -- Function: int gnutls_x509_crl_get_dn_oid (gnutls_x509_crl_t CRL,
+          int INDX, void * OID, size_t * SIZEOF_OID)
      CRL: should contain a gnutls_x509_crl_t structure
 
-     INDX: Specifies which DN OID to send.  Use (0) to get the first
-     one.
+     INDX: Specifies which DN OID to send. Use (0) to get the first one.
 
      OID: a pointer to a structure to hold the name (may be null)
 
@@ -693,8 +694,8 @@ gnutls_x509_crl_get_dn_oid
 
      If oid is null then only the size will be filled.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the sizeof_oid will be updated
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the sizeof_oid will be updated
      with the required size.  On success 0 is returned.
 
 gnutls_x509_crl_get_extension_data
@@ -702,28 +703,28 @@ gnutls_x509_crl_get_extension_data
 
  -- Function: int gnutls_x509_crl_get_extension_data (gnutls_x509_crl_t
           CRL, int INDX, void * DATA, size_t * SIZEOF_DATA)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
-     INDX: Specifies which extension OID to send.  Use (0) to get the
+     INDX: Specifies which extension OID to send. Use (0) to get the
      first one.
 
      DATA: a pointer to a structure to hold the data (may be null)
 
-     SIZEOF_DATA: initially holds the size of 'oid'
+     SIZEOF_DATA: initially holds the size of  `oid'
 
      This function will return the requested extension data in the CRL.
      The extension data will be stored as a string in the provided
      buffer.
 
-     Use 'gnutls_x509_crl_get_extension_info()' to extract the OID and
-     critical flag.  Use 'gnutls_x509_crl_get_extension_info()' instead,
-     if you want to get data indexed by the extension OID rather than
-     sequence.
+     Use `gnutls_x509_crl_get_extension_info()'  to extract the OID and
+     critical flag.  Use `gnutls_x509_crl_get_extension_info()'
+     instead, if you want to get data indexed by the extension OID
+     rather than sequence.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.  If your have
      reached the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
      *Since:* 2.8.0
 
@@ -731,33 +732,33 @@ gnutls_x509_crl_get_extension_info
 ----------------------------------
 
  -- Function: int gnutls_x509_crl_get_extension_info (gnutls_x509_crl_t
-          CRL, int INDX, void * OID, size_t * SIZEOF_OID, unsigned int *
-          CRITICAL)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+          CRL, int INDX, void * OID, size_t * SIZEOF_OID, unsigned int
+          * CRITICAL)
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      INDX: Specifies which extension OID to send, use (0) to get the
      first one.
 
      OID: a pointer to a structure to hold the OID
 
-     SIZEOF_OID: initially holds the maximum size of 'oid' , on return
-     holds actual size of 'oid' .
+     SIZEOF_OID: initially holds the maximum size of  `oid' , on return
+     holds actual size of  `oid' .
 
      CRITICAL: output variable with critical flag, may be NULL.
 
      This function will return the requested extension OID in the CRL,
      and the critical flag for it.  The extension OID will be stored as
      a string in the provided buffer.  Use
-     'gnutls_x509_crl_get_extension_data()' to extract the data.
+     `gnutls_x509_crl_get_extension_data()'  to extract the data.
 
      If the buffer provided is not long enough to hold the output, then
-     * 'sizeof_oid' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER' will
+     * `sizeof_oid' is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'  will
      be returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.  If your have
      reached the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
      *Since:* 2.8.0
 
@@ -766,64 +767,64 @@ gnutls_x509_crl_get_extension_oid
 
  -- Function: int gnutls_x509_crl_get_extension_oid (gnutls_x509_crl_t
           CRL, int INDX, void * OID, size_t * SIZEOF_OID)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      INDX: Specifies which extension OID to send, use (0) to get the
      first one.
 
      OID: a pointer to a structure to hold the OID (may be null)
 
-     SIZEOF_OID: initially holds the size of 'oid'
+     SIZEOF_OID: initially holds the size of  `oid'
 
      This function will return the requested extension OID in the CRL.
      The extension OID will be stored as a string in the provided
      buffer.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.  If your have
      reached the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
      *Since:* 2.8.0
 
 gnutls_x509_crl_get_issuer_dn
 -----------------------------
 
- -- Function: int gnutls_x509_crl_get_issuer_dn (const gnutls_x509_crl_t
-          CRL, char * BUF, size_t * SIZEOF_BUF)
+ -- Function: int gnutls_x509_crl_get_issuer_dn (const
+          gnutls_x509_crl_t CRL, char * BUF, size_t * SIZEOF_BUF)
      CRL: should contain a gnutls_x509_crl_t structure
 
      BUF: a pointer to a structure to hold the peer's name (may be null)
 
-     SIZEOF_BUF: initially holds the size of 'buf'
+     SIZEOF_BUF: initially holds the size of  `buf'
 
      This function will copy the name of the CRL issuer in the provided
-     buffer.  The name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as
-     described in RFC4514.  The output string will be ASCII or UTF-8
+     buffer. The name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as
+     described in RFC4514. The output string will be ASCII or UTF-8
      encoded, depending on the certificate data.
 
-     If buf is 'NULL' then only the size will be filled.
+     If buf is `NULL'  then only the size will be filled.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the sizeof_buf will be updated
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the sizeof_buf will be updated
      with the required size, and 0 on success.
 
 gnutls_x509_crl_get_issuer_dn2
 ------------------------------
 
- -- Function: int gnutls_x509_crl_get_issuer_dn2 (gnutls_x509_crl_t CRL,
-          gnutls_datum_t * DN)
+ -- Function: int gnutls_x509_crl_get_issuer_dn2 (gnutls_x509_crl_t
+          CRL, gnutls_datum_t * DN)
      CRL: - undescribed -
 
      DN: a pointer to a structure to hold the name
 
      This function will allocate buffer and copy the name of the CRL
      issuer.  The name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as
-     described in RFC4514.  The output string will be ASCII or UTF-8
+     described in RFC4514. The output string will be ASCII or UTF-8
      encoded, depending on the certificate data.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      error.
 
      *Since:* 3.1.10
@@ -839,29 +840,29 @@ gnutls_x509_crl_get_issuer_dn_by_oid
      OID: holds an Object Identified in null terminated string
 
      INDX: In case multiple same OIDs exist in the RDN, this specifies
-     which to send.  Use (0) to get the first one.
+     which to send. Use (0) to get the first one.
 
      RAW_FLAG: If non-zero returns the raw DER data of the DN part.
 
      BUF: a pointer to a structure to hold the peer's name (may be null)
 
-     SIZEOF_BUF: initially holds the size of 'buf'
+     SIZEOF_BUF: initially holds the size of  `buf'
 
      This function will extract the part of the name of the CRL issuer
      specified by the given OID. The output will be encoded as described
-     in RFC4514.  The output string will be ASCII or UTF-8 encoded,
+     in RFC4514. The output string will be ASCII or UTF-8 encoded,
      depending on the certificate data.
 
      Some helper macros with popular OIDs can be found in gnutls/x509.h
      If raw flag is (0), this function will only return known OIDs as
-     text.  Other OIDs will be DER encoded, as described in RFC4514 - in
-     hex format with a '#' prefix.  You can check about known OIDs using
-     'gnutls_x509_dn_oid_known()' .
+     text. Other OIDs will be DER encoded, as described in RFC4514 - in
+     hex format with a '#' prefix.  You can check about known OIDs
+     using `gnutls_x509_dn_oid_known()' .
 
      If buf is null then only the size will be filled.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the sizeof_buf will be updated
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the sizeof_buf will be updated
      with the required size, and 0 on success.
 
 gnutls_x509_crl_get_next_update
@@ -869,7 +870,7 @@ gnutls_x509_crl_get_next_update
 
  -- Function: time_t gnutls_x509_crl_get_next_update (gnutls_x509_crl_t
           CRL)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      This function will return the time the next CRL will be issued.
      This field is optional in a CRL so it might be normal to get an
@@ -883,7 +884,7 @@ gnutls_x509_crl_get_number
 
  -- Function: int gnutls_x509_crl_get_number (gnutls_x509_crl_t CRL,
           void * RET, size_t * RET_SIZE, unsigned int * CRITICAL)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      RET: The place where the number will be copied
 
@@ -895,7 +896,7 @@ gnutls_x509_crl_get_number
      This function will return the CRL number extension.  This is
      obtained by the CRL Number extension field (2.5.29.20).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.
 
      *Since:* 2.8.0
@@ -926,12 +927,12 @@ gnutls_x509_crl_get_signature
      SIG: a pointer where the signature part will be copied (may be
      null).
 
-     SIZEOF_SIG: initially holds the size of 'sig'
+     SIZEOF_SIG: initially holds the size of  `sig'
 
      This function will extract the signature field of a CRL.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      error.
 
 gnutls_x509_crl_get_signature_algorithm
@@ -939,12 +940,12 @@ gnutls_x509_crl_get_signature_algorithm
 
  -- Function: int gnutls_x509_crl_get_signature_algorithm
           (gnutls_x509_crl_t CRL)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
-     This function will return a value of the 'gnutls_sign_algorithm_t'
+     This function will return a value of the `gnutls_sign_algorithm_t'
      enumeration that is the signature algorithm.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_get_this_update
@@ -952,7 +953,7 @@ gnutls_x509_crl_get_this_update
 
  -- Function: time_t gnutls_x509_crl_get_this_update (gnutls_x509_crl_t
           CRL)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      This function will return the time this CRL was issued.
 
@@ -962,7 +963,7 @@ gnutls_x509_crl_get_version
 ---------------------------
 
  -- Function: int gnutls_x509_crl_get_version (gnutls_x509_crl_t CRL)
-     CRL: should contain a 'gnutls_x509_crl_t' structure
+     CRL: should contain a `gnutls_x509_crl_t'  structure
 
      This function will return the version of the specified CRL.
 
@@ -980,12 +981,12 @@ gnutls_x509_crl_import
      FORMAT: One of DER or PEM
 
      This function will convert the given DER or PEM encoded CRL to the
-     native 'gnutls_x509_crl_t' format.  The output will be stored in
+     native `gnutls_x509_crl_t'  format. The output will be stored in
      'crl'.
 
      If the CRL is PEM encoded it should have a header of "X509 CRL".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_init
@@ -994,25 +995,25 @@ gnutls_x509_crl_init
  -- Function: int gnutls_x509_crl_init (gnutls_x509_crl_t * CRL)
      CRL: The structure to be initialized
 
-     This function will initialize a CRL structure.  CRL stands for
-     Certificate Revocation List.  A revocation list usually contains
+     This function will initialize a CRL structure. CRL stands for
+     Certificate Revocation List. A revocation list usually contains
      lists of certificate serial numbers that have been revoked by an
-     Authority.  The revocation lists are always signed with the
+     Authority. The revocation lists are always signed with the
      authority's private key.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_list_import
 ---------------------------
 
- -- Function: int gnutls_x509_crl_list_import (gnutls_x509_crl_t * CRLS,
-          unsigned int * CRL_MAX, const gnutls_datum_t * DATA,
+ -- Function: int gnutls_x509_crl_list_import (gnutls_x509_crl_t *
+          CRLS, unsigned int * CRL_MAX, const gnutls_datum_t * DATA,
           gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
-     CRLS: The structures to store the parsed CRLs.  Must not be
+     CRLS: The structures to store the parsed CRLs. Must not be
      initialized.
 
-     CRL_MAX: Initially must hold the maximum number of crls.  It will
+     CRL_MAX: Initially must hold the maximum number of crls. It will
      be updated with the number of crls available.
 
      DATA: The PEM encoded CRLs
@@ -1023,8 +1024,8 @@ gnutls_x509_crl_list_import
      gnutls_certificate_import_flags.
 
      This function will convert the given PEM encoded CRL list to the
-     native gnutls_x509_crl_t format.  The output will be stored in
-     'crls' .  They will be automatically initialized.
+     native gnutls_x509_crl_t format. The output will be stored in
+     `crls' .  They will be automatically initialized.
 
      If the Certificate is PEM encoded it should have a header of "X509
      CRL".
@@ -1040,7 +1041,7 @@ gnutls_x509_crl_list_import2
  -- Function: int gnutls_x509_crl_list_import2 (gnutls_x509_crl_t **
           CRLS, unsigned int * SIZE, const gnutls_datum_t * DATA,
           gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
-     CRLS: The structures to store the parsed crl list.  Must not be
+     CRLS: The structures to store the parsed crl list. Must not be
      initialized.
 
      SIZE: It will contain the size of the list.
@@ -1053,8 +1054,8 @@ gnutls_x509_crl_list_import2
      gnutls_certificate_import_flags.
 
      This function will convert the given PEM encoded CRL list to the
-     native gnutls_x509_crl_t format.  The output will be stored in
-     'crls' .  They will be automatically initialized.
+     native gnutls_x509_crl_t format. The output will be stored in
+     `crls' .  They will be automatically initialized.
 
      If the Certificate is PEM encoded it should have a header of "X509
      CRL".
@@ -1079,9 +1080,9 @@ gnutls_x509_crl_print
      This function will pretty print a X.509 certificate revocation
      list, suitable for display to a human.
 
-     The output 'out' needs to be deallocated using 'gnutls_free()' .
+     The output  `out' needs to be deallocated using `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_set_authority_key_id
@@ -1089,18 +1090,18 @@ gnutls_x509_crl_set_authority_key_id
 
  -- Function: int gnutls_x509_crl_set_authority_key_id
           (gnutls_x509_crl_t CRL, const void * ID, size_t ID_SIZE)
-     CRL: a CRL of type 'gnutls_x509_crl_t'
+     CRL: a CRL of type `gnutls_x509_crl_t'
 
      ID: The key ID
 
      ID_SIZE: Holds the size of the serial field.
 
      This function will set the CRL's authority key ID extension.  Only
-     the keyIdentifier field can be set with this function.  This may be
+     the keyIdentifier field can be set with this function. This may be
      used by an authority that holds multiple private keys, to
      distinguish the used key.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.8.0
@@ -1112,22 +1113,22 @@ gnutls_x509_crl_set_crt
           gnutls_x509_crt_t CRT, time_t REVOCATION_TIME)
      CRL: should contain a gnutls_x509_crl_t structure
 
-     CRT: a certificate of type 'gnutls_x509_crt_t' with the revoked
+     CRT: a certificate of type `gnutls_x509_crt_t'  with the revoked
      certificate
 
      REVOCATION_TIME: The time this certificate was revoked
 
-     This function will set a revoked certificate's serial number to the
-     CRL.
+     This function will set a revoked certificate's serial number to
+     the CRL.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_set_crt_serial
 ------------------------------
 
- -- Function: int gnutls_x509_crl_set_crt_serial (gnutls_x509_crl_t CRL,
-          const void * SERIAL, size_t SERIAL_SIZE, time_t
+ -- Function: int gnutls_x509_crl_set_crt_serial (gnutls_x509_crl_t
+          CRL, const void * SERIAL, size_t SERIAL_SIZE, time_t
           REVOCATION_TIME)
      CRL: should contain a gnutls_x509_crl_t structure
 
@@ -1137,10 +1138,10 @@ gnutls_x509_crl_set_crt_serial
 
      REVOCATION_TIME: The time this certificate was revoked
 
-     This function will set a revoked certificate's serial number to the
-     CRL.
+     This function will set a revoked certificate's serial number to
+     the CRL.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_set_next_update
@@ -1154,7 +1155,7 @@ gnutls_x509_crl_set_next_update
 
      This function will set the time this CRL will be updated.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_set_number
@@ -1162,17 +1163,17 @@ gnutls_x509_crl_set_number
 
  -- Function: int gnutls_x509_crl_set_number (gnutls_x509_crl_t CRL,
           const void * NR, size_t NR_SIZE)
-     CRL: a CRL of type 'gnutls_x509_crl_t'
+     CRL: a CRL of type `gnutls_x509_crl_t'
 
      NR: The CRL number
 
      NR_SIZE: Holds the size of the nr field.
 
-     This function will set the CRL's number extension.  This is to be
+     This function will set the CRL's number extension. This is to be
      used as a unique and monotonic number assigned to the CRL by the
      authority.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.8.0
@@ -1188,7 +1189,7 @@ gnutls_x509_crl_set_this_update
 
      This function will set the time this CRL was issued.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_set_version
@@ -1198,13 +1199,13 @@ gnutls_x509_crl_set_version
           unsigned int VERSION)
      CRL: should contain a gnutls_x509_crl_t structure
 
-     VERSION: holds the version number.  For CRLv1 crls must be 1.
+     VERSION: holds the version number. For CRLv1 crls must be 1.
 
-     This function will set the version of the CRL. This must be one for
-     CRL version 1, and so on.  The CRLs generated by gnutls should have
-     a version number of 2.
+     This function will set the version of the CRL. This must be one
+     for CRL version 1, and so on. The CRLs generated by gnutls should
+     have a version number of 2.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_sign2
@@ -1219,7 +1220,7 @@ gnutls_x509_crl_sign2
 
      ISSUER_KEY: holds the issuer's private key
 
-     DIG: The message digest to use.  GNUTLS_DIG_SHA1 is the safe choice
+     DIG: The message digest to use. GNUTLS_DIG_SHA1 is the safe choice
      unless you know what you're doing.
 
      FLAGS: must be 0
@@ -1230,7 +1231,7 @@ gnutls_x509_crl_sign2
      This must be the last step in a certificate CRL since all the
      previously set parameters are now signed.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crl_verify
@@ -1241,26 +1242,27 @@ gnutls_x509_crl_verify
           FLAGS, unsigned int * VERIFY)
      CRL: is the crl to be verified
 
-     TRUSTED_CAS: is a certificate list that is considered to be trusted
-     one
+     TRUSTED_CAS: is a certificate list that is considered to be
+     trusted one
 
      TCAS_SIZE: holds the number of CA certificates in CA_list
 
-     FLAGS: Flags that may be used to change the verification algorithm.
-     Use OR of the gnutls_certificate_verify_flags enumerations.
+     FLAGS: Flags that may be used to change the verification
+     algorithm. Use OR of the gnutls_certificate_verify_flags
+     enumerations.
 
      VERIFY: will hold the crl verification output.
 
      This function will try to verify the given crl and return its
-     verification status.  See 'gnutls_x509_crt_list_verify()' for a
-     detailed description of return values.  Note that since GnuTLS
+     verification status.  See `gnutls_x509_crt_list_verify()'  for a
+     detailed description of return values. Note that since GnuTLS
      3.1.4 this function includes the time checks.
 
-     Note that value in 'verify' is set only when the return value of
-     this function is success (i.e, failure to trust a CRL a certificate
-     does not imply a negative return value).
+     Note that value in  `verify' is set only when the return value of
+     this function is success (i.e, failure to trust a CRL a
+     certificate does not imply a negative return value).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_deinit
@@ -1269,7 +1271,7 @@ gnutls_x509_crq_deinit
  -- Function: void gnutls_x509_crq_deinit (gnutls_x509_crq_t CRQ)
      CRQ: The structure to be initialized
 
-     This function will deinitialize a PKCS'10' certificate request
+     This function will deinitialize a PKCS`10'  certificate request
      structure.
 
 gnutls_x509_crq_export
@@ -1278,9 +1280,9 @@ gnutls_x509_crq_export
  -- Function: int gnutls_x509_crq_export (gnutls_x509_crq_t CRQ,
           gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
           OUTPUT_DATA_SIZE)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUTPUT_DATA: will contain a certificate request PEM or DER encoded
 
@@ -1291,13 +1293,13 @@ gnutls_x509_crq_export
      encoded PKCS10 structure.
 
      If the buffer provided is not long enough to hold the output, then
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' will be returned and *
-     'output_data_size' will be updated.
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  will be returned and *
+     `output_data_size' will be updated.
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      NEW CERTIFICATE REQUEST".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_export2
@@ -1305,21 +1307,21 @@ gnutls_x509_crq_export2
 
  -- Function: int gnutls_x509_crq_export2 (gnutls_x509_crq_t CRQ,
           gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUT: will contain a certificate request PEM or DER encoded
 
      This function will export the certificate request to a PEM or DER
      encoded PKCS10 structure.
 
-     The output buffer is allocated using 'gnutls_malloc()' .
+     The output buffer is allocated using `gnutls_malloc()' .
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      NEW CERTIFICATE REQUEST".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      Since 3.1.3
@@ -1330,7 +1332,7 @@ gnutls_x509_crq_get_attribute_by_oid
  -- Function: int gnutls_x509_crq_get_attribute_by_oid
           (gnutls_x509_crq_t CRQ, const char * OID, int INDX, void *
           BUF, size_t * BUF_SIZE)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      OID: holds an Object Identifier in null-terminated string
 
@@ -1338,19 +1340,19 @@ gnutls_x509_crq_get_attribute_by_oid
      specifies which to get, use (0) to get the first one
 
      BUF: a pointer to a structure to hold the attribute data (may be
-     'NULL' )
+     `NULL' )
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      This function will return the attribute in the certificate request
-     specified by the given Object ID. The attribute will be DER
+     specified by the given Object ID.  The attribute will be DER
      encoded.
 
      Attributes in a certificate request is an optional set of data
-     appended to the request.  Their interpretation depends on the CA
+     appended to the request. Their interpretation depends on the CA
      policy.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_get_attribute_data
@@ -1358,27 +1360,27 @@ gnutls_x509_crq_get_attribute_data
 
  -- Function: int gnutls_x509_crq_get_attribute_data (gnutls_x509_crq_t
           CRQ, int INDX, void * DATA, size_t * SIZEOF_DATA)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     INDX: Specifies which attribute number to get.  Use (0) to get the
+     INDX: Specifies which attribute number to get. Use (0) to get the
      first one.
 
      DATA: a pointer to a structure to hold the data (may be null)
 
-     SIZEOF_DATA: initially holds the size of 'oid'
+     SIZEOF_DATA: initially holds the size of  `oid'
 
      This function will return the requested attribute data in the
-     certificate request.  The attribute data will be stored as a string
-     in the provided buffer.
+     certificate request.  The attribute data will be stored as a
+     string in the provided buffer.
 
-     Use 'gnutls_x509_crq_get_attribute_info()' to extract the OID. Use
-     'gnutls_x509_crq_get_attribute_by_oid()' instead, if you want to
-     get data indexed by the attribute OID rather than sequence.
+     Use `gnutls_x509_crq_get_attribute_info()'  to extract the OID.
+     Use `gnutls_x509_crq_get_attribute_by_oid()'  instead, if you want
+     to get data indexed by the attribute OID rather than sequence.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.  If your have
      reached the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
      *Since:* 2.8.0
 
@@ -1387,29 +1389,29 @@ gnutls_x509_crq_get_attribute_info
 
  -- Function: int gnutls_x509_crq_get_attribute_info (gnutls_x509_crq_t
           CRQ, int INDX, void * OID, size_t * SIZEOF_OID)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     INDX: Specifies which attribute number to get.  Use (0) to get the
+     INDX: Specifies which attribute number to get. Use (0) to get the
      first one.
 
      OID: a pointer to a structure to hold the OID
 
-     SIZEOF_OID: initially holds the maximum size of 'oid' , on return
-     holds actual size of 'oid' .
+     SIZEOF_OID: initially holds the maximum size of  `oid' , on return
+     holds actual size of  `oid' .
 
      This function will return the requested attribute OID in the
      certificate, and the critical flag for it.  The attribute OID will
      be stored as a string in the provided buffer.  Use
-     'gnutls_x509_crq_get_attribute_data()' to extract the data.
+     `gnutls_x509_crq_get_attribute_data()'  to extract the data.
 
      If the buffer provided is not long enough to hold the output, then
-     * 'sizeof_oid' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER' will
+     * `sizeof_oid' is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'  will
      be returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.  If your have
      reached the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
      *Since:* 2.8.0
 
@@ -1419,7 +1421,7 @@ gnutls_x509_crq_get_basic_constraints
  -- Function: int gnutls_x509_crq_get_basic_constraints
           (gnutls_x509_crq_t CRQ, unsigned int * CRITICAL, unsigned int
           * CA, int * PATHLEN)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      CRITICAL: will be non-zero if the extension is marked as critical
 
@@ -1439,7 +1441,7 @@ gnutls_x509_crq_get_basic_constraints
      returned, or (0) if the certificate does not have CA flag set.  A
      negative error code may be returned in case of errors.  If the
      certificate does not contain the basicConstraints extension
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be returned.
 
      *Since:* 2.8.0
 
@@ -1448,17 +1450,17 @@ gnutls_x509_crq_get_challenge_password
 
  -- Function: int gnutls_x509_crq_get_challenge_password
           (gnutls_x509_crq_t CRQ, char * PASS, size_t * PASS_SIZE)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      PASS: will hold a (0)-terminated password string
 
-     PASS_SIZE: Initially holds the size of 'pass' .
+     PASS_SIZE: Initially holds the size of  `pass' .
 
      This function will return the challenge password in the request.
      The challenge password is intended to be used for requesting a
      revocation of the certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_get_dn
@@ -1466,38 +1468,38 @@ gnutls_x509_crq_get_dn
 
  -- Function: int gnutls_x509_crq_get_dn (gnutls_x509_crq_t CRQ, char *
           BUF, size_t * BUF_SIZE)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     BUF: a pointer to a structure to hold the name (may be 'NULL' )
+     BUF: a pointer to a structure to hold the name (may be `NULL' )
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      This function will copy the name of the Certificate request subject
      to the provided buffer.  The name will be in the form
-     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC 2253.  The output
-     string 'buf' will be ASCII or UTF-8 encoded, depending on the
-     certificate data.
+     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC 2253. The output string
+     `buf' will be ASCII or UTF-8 encoded, depending on the certificate
+     data.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the * 'buf_size' will be updated
-     with the required size.  On success 0 is returned.
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the * `buf_size' will be
+     updated with the required size.  On success 0 is returned.
 
 gnutls_x509_crq_get_dn2
 -----------------------
 
  -- Function: int gnutls_x509_crq_get_dn2 (gnutls_x509_crq_t CRQ,
           gnutls_datum_t * DN)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      DN: a pointer to a structure to hold the name
 
      This function will allocate buffer and copy the name of the
-     Certificate request.  The name will be in the form
-     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC4514.  The output string
+     Certificate request. The name will be in the form
+     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC4514. The output string
      will be ASCII or UTF-8 encoded, depending on the certificate data.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      error.
 
      *Since:* 3.1.10
@@ -1506,54 +1508,54 @@ gnutls_x509_crq_get_dn_by_oid
 -----------------------------
 
  -- Function: int gnutls_x509_crq_get_dn_by_oid (gnutls_x509_crq_t CRQ,
-          const char * OID, int INDX, unsigned int RAW_FLAG, void * BUF,
-          size_t * BUF_SIZE)
+          const char * OID, int INDX, unsigned int RAW_FLAG, void *
+          BUF, size_t * BUF_SIZE)
      CRQ: should contain a gnutls_x509_crq_t structure
 
      OID: holds an Object Identifier in a null terminated string
 
      INDX: In case multiple same OIDs exist in the RDN, this specifies
-     which to get.  Use (0) to get the first one.
+     which to get. Use (0) to get the first one.
 
      RAW_FLAG: If non-zero returns the raw DER data of the DN part.
 
-     BUF: a pointer to a structure to hold the name (may be 'NULL' )
+     BUF: a pointer to a structure to hold the name (may be `NULL' )
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      This function will extract the part of the name of the Certificate
      request subject, specified by the given OID. The output will be
-     encoded as described in RFC2253.  The output string will be ASCII
+     encoded as described in RFC2253. The output string will be ASCII
      or UTF-8 encoded, depending on the certificate data.
 
      Some helper macros with popular OIDs can be found in gnutls/x509.h
      If raw flag is (0), this function will only return known OIDs as
-     text.  Other OIDs will be DER encoded, as described in RFC2253 - in
+     text. Other OIDs will be DER encoded, as described in RFC2253 - in
      hex format with a '\#' prefix.  You can check about known OIDs
-     using 'gnutls_x509_dn_oid_known()' .
+     using `gnutls_x509_dn_oid_known()' .
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the * 'buf_size' will be updated
-     with the required size.  On success 0 is returned.
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the * `buf_size' will be
+     updated with the required size.  On success 0 is returned.
 
 gnutls_x509_crq_get_dn_oid
 --------------------------
 
- -- Function: int gnutls_x509_crq_get_dn_oid (gnutls_x509_crq_t CRQ, int
-          INDX, void * OID, size_t * SIZEOF_OID)
+ -- Function: int gnutls_x509_crq_get_dn_oid (gnutls_x509_crq_t CRQ,
+          int INDX, void * OID, size_t * SIZEOF_OID)
      CRQ: should contain a gnutls_x509_crq_t structure
 
-     INDX: Specifies which DN OID to get.  Use (0) to get the first one.
+     INDX: Specifies which DN OID to get. Use (0) to get the first one.
 
-     OID: a pointer to a structure to hold the name (may be 'NULL' )
+     OID: a pointer to a structure to hold the name (may be `NULL' )
 
-     SIZEOF_OID: initially holds the size of 'oid'
+     SIZEOF_OID: initially holds the size of  `oid'
 
      This function will extract the requested OID of the name of the
      certificate request subject, specified by the given index.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the * 'sizeof_oid' will be
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the * `sizeof_oid' will be
      updated with the required size.  On success 0 is returned.
 
 gnutls_x509_crq_get_extension_by_oid
@@ -1562,27 +1564,27 @@ gnutls_x509_crq_get_extension_by_oid
  -- Function: int gnutls_x509_crq_get_extension_by_oid
           (gnutls_x509_crq_t CRQ, const char * OID, int INDX, void *
           BUF, size_t * BUF_SIZE, unsigned int * CRITICAL)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      OID: holds an Object Identifier in a null terminated string
 
      INDX: In case multiple same OIDs exist in the extensions, this
-     specifies which to get.  Use (0) to get the first one.
+     specifies which to get. Use (0) to get the first one.
 
      BUF: a pointer to a structure to hold the name (may be null)
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      CRITICAL: will be non-zero if the extension is marked as critical
 
-     This function will return the extension specified by the OID in the
-     certificate.  The extensions will be returned as binary data DER
-     encoded, in the provided buffer.
+     This function will return the extension specified by the OID in
+     the certificate.  The extensions will be returned as binary data
+     DER encoded, in the provided buffer.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.  If the
      certificate does not contain the specified extension
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be returned.
 
      *Since:* 2.8.0
 
@@ -1591,28 +1593,28 @@ gnutls_x509_crq_get_extension_data
 
  -- Function: int gnutls_x509_crq_get_extension_data (gnutls_x509_crq_t
           CRQ, int INDX, void * DATA, size_t * SIZEOF_DATA)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     INDX: Specifies which extension number to get.  Use (0) to get the
+     INDX: Specifies which extension number to get. Use (0) to get the
      first one.
 
      DATA: a pointer to a structure to hold the data (may be null)
 
-     SIZEOF_DATA: initially holds the size of 'oid'
+     SIZEOF_DATA: initially holds the size of  `oid'
 
      This function will return the requested extension data in the
      certificate.  The extension data will be stored as a string in the
      provided buffer.
 
-     Use 'gnutls_x509_crq_get_extension_info()' to extract the OID and
-     critical flag.  Use 'gnutls_x509_crq_get_extension_by_oid()'
+     Use `gnutls_x509_crq_get_extension_info()'  to extract the OID and
+     critical flag.  Use `gnutls_x509_crq_get_extension_by_oid()'
      instead, if you want to get data indexed by the extension OID
      rather than sequence.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.  If your have
      reached the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
      *Since:* 2.8.0
 
@@ -1620,33 +1622,33 @@ gnutls_x509_crq_get_extension_info
 ----------------------------------
 
  -- Function: int gnutls_x509_crq_get_extension_info (gnutls_x509_crq_t
-          CRQ, int INDX, void * OID, size_t * SIZEOF_OID, unsigned int *
-          CRITICAL)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+          CRQ, int INDX, void * OID, size_t * SIZEOF_OID, unsigned int
+          * CRITICAL)
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     INDX: Specifies which extension number to get.  Use (0) to get the
+     INDX: Specifies which extension number to get. Use (0) to get the
      first one.
 
      OID: a pointer to a structure to hold the OID
 
-     SIZEOF_OID: initially holds the maximum size of 'oid' , on return
-     holds actual size of 'oid' .
+     SIZEOF_OID: initially holds the maximum size of  `oid' , on return
+     holds actual size of  `oid' .
 
      CRITICAL: output variable with critical flag, may be NULL.
 
      This function will return the requested extension OID in the
      certificate, and the critical flag for it.  The extension OID will
      be stored as a string in the provided buffer.  Use
-     'gnutls_x509_crq_get_extension_data()' to extract the data.
+     `gnutls_x509_crq_get_extension_data()'  to extract the data.
 
      If the buffer provided is not long enough to hold the output, then
-     * 'sizeof_oid' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER' will
+     * `sizeof_oid' is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'  will
      be returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code in case of an error.  If your have
      reached the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
      *Since:* 2.8.0
 
@@ -1656,7 +1658,7 @@ gnutls_x509_crq_get_key_id
  -- Function: int gnutls_x509_crq_get_key_id (gnutls_x509_crq_t CRQ,
           unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
           OUTPUT_DATA_SIZE)
-     CRQ: a certificate of type 'gnutls_x509_crq_t'
+     CRQ: a certificate of type `gnutls_x509_crq_t'
 
      FLAGS: should be 0 for now
 
@@ -1670,7 +1672,7 @@ gnutls_x509_crq_get_key_id
      certificate corresponds to the given private key.
 
      If the buffer provided is not long enough to hold the output, then
-     * 'output_data_size' is updated and GNUTLS_E_SHORT_MEMORY_BUFFER
+     * `output_data_size' is updated and GNUTLS_E_SHORT_MEMORY_BUFFER
      will be returned.  The output will normally be a SHA-1 hash output,
      which is 20 bytes.
 
@@ -1682,27 +1684,27 @@ gnutls_x509_crq_get_key_id
 gnutls_x509_crq_get_key_purpose_oid
 -----------------------------------
 
- -- Function: int gnutls_x509_crq_get_key_purpose_oid (gnutls_x509_crq_t
-          CRQ, int INDX, void * OID, size_t * SIZEOF_OID, unsigned int *
-          CRITICAL)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+ -- Function: int gnutls_x509_crq_get_key_purpose_oid
+          (gnutls_x509_crq_t CRQ, int INDX, void * OID, size_t *
+          SIZEOF_OID, unsigned int * CRITICAL)
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      INDX: This specifies which OID to return, use (0) to get the first
      one
 
-     OID: a pointer to a buffer to hold the OID (may be 'NULL' )
+     OID: a pointer to a buffer to hold the OID (may be `NULL' )
 
-     SIZEOF_OID: initially holds the size of 'oid'
+     SIZEOF_OID: initially holds the size of  `oid'
 
-     CRITICAL: output variable with critical flag, may be 'NULL' .
+     CRITICAL: output variable with critical flag, may be `NULL' .
 
      This function will extract the key purpose OIDs of the Certificate
      specified by the given index.  These are stored in the Extended Key
      Usage extension (2.5.29.37).  See the GNUTLS_KP_* definitions for
      human readable names.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the * 'sizeof_oid' will be
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the * `sizeof_oid' will be
      updated with the required size.  On success 0 is returned.
 
      *Since:* 2.8.0
@@ -1720,9 +1722,9 @@ gnutls_x509_crq_get_key_rsa_raw
 
      This function will export the RSA public key's parameters found in
      the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.8.0
@@ -1732,7 +1734,7 @@ gnutls_x509_crq_get_key_usage
 
  -- Function: int gnutls_x509_crq_get_key_usage (gnutls_x509_crq_t CRQ,
           unsigned int * KEY_USAGE, unsigned int * CRITICAL)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      KEY_USAGE: where the key usage bits will be stored
 
@@ -1740,15 +1742,15 @@ gnutls_x509_crq_get_key_usage
 
      This function will return certificate's key usage, by reading the
      keyUsage X.509 extension (2.5.29.15).  The key usage value will
-     ORed values of the: 'GNUTLS_KEY_DIGITAL_SIGNATURE' ,
-     'GNUTLS_KEY_NON_REPUDIATION' , 'GNUTLS_KEY_KEY_ENCIPHERMENT' ,
-     'GNUTLS_KEY_DATA_ENCIPHERMENT' , 'GNUTLS_KEY_KEY_AGREEMENT' ,
-     'GNUTLS_KEY_KEY_CERT_SIGN' , 'GNUTLS_KEY_CRL_SIGN' ,
-     'GNUTLS_KEY_ENCIPHER_ONLY' , 'GNUTLS_KEY_DECIPHER_ONLY' .
+     ORed values of the: `GNUTLS_KEY_DIGITAL_SIGNATURE' ,
+     `GNUTLS_KEY_NON_REPUDIATION' , `GNUTLS_KEY_KEY_ENCIPHERMENT' ,
+     `GNUTLS_KEY_DATA_ENCIPHERMENT' , `GNUTLS_KEY_KEY_AGREEMENT' ,
+     `GNUTLS_KEY_KEY_CERT_SIGN' , `GNUTLS_KEY_CRL_SIGN' ,
+     `GNUTLS_KEY_ENCIPHER_ONLY' , `GNUTLS_KEY_DECIPHER_ONLY' .
 
      *Returns:* the certificate key usage, or a negative error code in
      case of parsing error.  If the certificate does not contain the
-     keyUsage extension 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
+     keyUsage extension `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be
      returned.
 
      *Since:* 2.8.0
@@ -1758,19 +1760,19 @@ gnutls_x509_crq_get_pk_algorithm
 
  -- Function: int gnutls_x509_crq_get_pk_algorithm (gnutls_x509_crq_t
           CRQ, unsigned int * BITS)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     BITS: if bits is non-'NULL' it will hold the size of the
+     BITS: if bits is non-`NULL'  it will hold the size of the
      parameters' in bits
 
-     This function will return the public key algorithm of a PKCS'10'
+     This function will return the public key algorithm of a PKCS`10'
      certificate request.
 
-     If bits is non-'NULL' , it should have enough size to hold the
+     If bits is non-`NULL' , it should have enough size to hold the
      parameters size in bits.  For RSA the bits returned is the modulus.
      For DSA the bits returned are of the public exponent.
 
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
      success, or a negative error code on error.
 
 gnutls_x509_crq_get_private_key_usage_period
@@ -1790,44 +1792,44 @@ gnutls_x509_crq_get_private_key_usage_period
      This function will return the expiration and activation times of
      the private key of the certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
      present, otherwise a negative error value.
 
 gnutls_x509_crq_get_subject_alt_name
 ------------------------------------
 
  -- Function: int gnutls_x509_crq_get_subject_alt_name
-          (gnutls_x509_crq_t CRQ, unsigned int SEQ, void * RET, size_t *
-          RET_SIZE, unsigned int * RET_TYPE, unsigned int * CRITICAL)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+          (gnutls_x509_crq_t CRQ, unsigned int SEQ, void * RET, size_t
+          * RET_SIZE, unsigned int * RET_TYPE, unsigned int * CRITICAL)
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     SEQ: specifies the sequence number of the alt name, 0 for the first
-     one, 1 for the second etc.
+     SEQ: specifies the sequence number of the alt name, 0 for the
+     first one, 1 for the second etc.
 
      RET: is the place where the alternative name will be copied to
 
      RET_SIZE: holds the size of ret.
 
-     RET_TYPE: holds the 'gnutls_x509_subject_alt_name_t' name type
+     RET_TYPE: holds the `gnutls_x509_subject_alt_name_t'  name type
 
      CRITICAL: will be non-zero if the extension is marked as critical
      (may be null)
 
      This function will return the alternative names, contained in the
      given certificate.  It is the same as
-     'gnutls_x509_crq_get_subject_alt_name()' except for the fact that
-     it will return the type of the alternative name in 'ret_type' even
-     if the function fails for some reason (i.e.  the buffer provided is
-     not enough).
+     `gnutls_x509_crq_get_subject_alt_name()'  except for the fact that
+     it will return the type of the alternative name in  `ret_type'
+     even if the function fails for some reason (i.e.  the buffer
+     provided is not enough).
 
      *Returns:* the alternative subject name type on success, one of the
-     enumerated 'gnutls_x509_subject_alt_name_t' .  It will return
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ret_size' is not large enough to
-     hold the value.  In that case 'ret_size' will be updated with the
-     required size.  If the certificate request does not have an
+     enumerated `gnutls_x509_subject_alt_name_t' .  It will return
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  if  `ret_size' is not large enough
+     to hold the value.  In that case  `ret_size' will be updated with
+     the required size.  If the certificate request does not have an
      Alternative name with the specified sequence number then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
      *Since:* 2.8.0
 
@@ -1835,12 +1837,12 @@ gnutls_x509_crq_get_subject_alt_othername_oid
 ---------------------------------------------
 
  -- Function: int gnutls_x509_crq_get_subject_alt_othername_oid
-          (gnutls_x509_crq_t CRQ, unsigned int SEQ, void * RET, size_t *
-          RET_SIZE)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+          (gnutls_x509_crq_t CRQ, unsigned int SEQ, void * RET, size_t
+          * RET_SIZE)
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
-     SEQ: specifies the sequence number of the alt name (0 for the first
-     one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the alt name (0 for the
+     first one, 1 for the second etc.)
 
      RET: is the place where the otherName OID will be copied to
 
@@ -1851,19 +1853,19 @@ gnutls_x509_crq_get_subject_alt_othername_oid
      the type as an enumerated element.
 
      This function is only useful if
-     'gnutls_x509_crq_get_subject_alt_name()' returned
-     'GNUTLS_SAN_OTHERNAME' .
+     `gnutls_x509_crq_get_subject_alt_name()'  returned
+     `GNUTLS_SAN_OTHERNAME' .
 
      *Returns:* the alternative subject name type on success, one of the
      enumerated gnutls_x509_subject_alt_name_t.  For supported OIDs, it
-     will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types, e.g.
-     'GNUTLS_SAN_OTHERNAME_XMPP' , and 'GNUTLS_SAN_OTHERNAME' for
-     unknown OIDs.  It will return 'GNUTLS_E_SHORT_MEMORY_BUFFER' if
-     'ret_size' is not large enough to hold the value.  In that case
-     'ret_size' will be updated with the required size.  If the
+     will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types,
+     e.g. `GNUTLS_SAN_OTHERNAME_XMPP' , and `GNUTLS_SAN_OTHERNAME'  for
+     unknown OIDs.  It will return `GNUTLS_E_SHORT_MEMORY_BUFFER'  if
+     `ret_size' is not large enough to hold the value.  In that case
+     `ret_size' will be updated with the required size.  If the
      certificate does not have an Alternative name with the specified
      sequence number and with the otherName type then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
      *Since:* 2.8.0
 
@@ -1871,13 +1873,13 @@ gnutls_x509_crq_get_version
 ---------------------------
 
  -- Function: int gnutls_x509_crq_get_version (gnutls_x509_crq_t CRQ)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      This function will return the version of the specified Certificate
      request.
 
-     *Returns:* version of certificate request, or a negative error code
-     on error.
+     *Returns:* version of certificate request, or a negative error
+     code on error.
 
 gnutls_x509_crq_import
 ----------------------
@@ -1891,13 +1893,13 @@ gnutls_x509_crq_import
      FORMAT: One of DER or PEM
 
      This function will convert the given DER or PEM encoded certificate
-     request to a 'gnutls_x509_crq_t' structure.  The output will be
-     stored in 'crq' .
+     request to a `gnutls_x509_crq_t'  structure.  The output will be
+     stored in  `crq' .
 
      If the Certificate is PEM encoded it should have a header of "NEW
      CERTIFICATE REQUEST".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_init
@@ -1906,10 +1908,10 @@ gnutls_x509_crq_init
  -- Function: int gnutls_x509_crq_init (gnutls_x509_crq_t * CRQ)
      CRQ: The structure to be initialized
 
-     This function will initialize a PKCS'10' certificate request
+     This function will initialize a PKCS`10'  certificate request
      structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_print
@@ -1927,9 +1929,9 @@ gnutls_x509_crq_print
      This function will pretty print a certificate request, suitable for
      display to a human.
 
-     The output 'out' needs to be deallocated using 'gnutls_free()' .
+     The output  `out' needs to be deallocated using `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.8.0
@@ -1940,23 +1942,23 @@ gnutls_x509_crq_set_attribute_by_oid
  -- Function: int gnutls_x509_crq_set_attribute_by_oid
           (gnutls_x509_crq_t CRQ, const char * OID, void * BUF, size_t
           BUF_SIZE)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      OID: holds an Object Identifier in a null-terminated string
 
      BUF: a pointer to a structure that holds the attribute data
 
-     BUF_SIZE: holds the size of 'buf'
+     BUF_SIZE: holds the size of  `buf'
 
      This function will set the attribute in the certificate request
-     specified by the given Object ID. The provided attribute must be be
-     DER encoded.
+     specified by the given Object ID. The provided attribute must be
+     be DER encoded.
 
      Attributes in a certificate request is an optional set of data
-     appended to the request.  Their interpretation depends on the CA
+     appended to the request. Their interpretation depends on the CA
      policy.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_set_basic_constraints
@@ -1965,18 +1967,18 @@ gnutls_x509_crq_set_basic_constraints
  -- Function: int gnutls_x509_crq_set_basic_constraints
           (gnutls_x509_crq_t CRQ, unsigned int CA, int
           PATHLENCONSTRAINT)
-     CRQ: a certificate request of type 'gnutls_x509_crq_t'
+     CRQ: a certificate request of type `gnutls_x509_crq_t'
 
      CA: true(1) or false(0) depending on the Certificate authority
      status.
 
-     PATHLENCONSTRAINT: non-negative error codes indicate maximum length
-     of path, and negative error codes indicate that the
+     PATHLENCONSTRAINT: non-negative error codes indicate maximum
+     length of path, and negative error codes indicate that the
      pathLenConstraints field should not be present.
 
      This function will set the basicConstraints certificate extension.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.8.0
@@ -1986,14 +1988,14 @@ gnutls_x509_crq_set_challenge_password
 
  -- Function: int gnutls_x509_crq_set_challenge_password
           (gnutls_x509_crq_t CRQ, const char * PASS)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      PASS: holds a (0)-terminated password
 
      This function will set a challenge password to be used when
      revoking the request.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_set_dn
@@ -2001,7 +2003,7 @@ gnutls_x509_crq_set_dn
 
  -- Function: int gnutls_x509_crq_set_dn (gnutls_x509_crq_t CRQ, const
           char * DN, const char** ERR)
-     CRQ: a certificate of type 'gnutls_x509_crq_t'
+     CRQ: a certificate of type `gnutls_x509_crq_t'
 
      DN: a comma separated DN string (RFC4514)
 
@@ -2010,7 +2012,7 @@ gnutls_x509_crq_set_dn
      This function will set the DN on the provided certificate.  The
      input string should be plain ASCII or UTF-8 encoded.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_set_dn_by_oid
@@ -2019,7 +2021,7 @@ gnutls_x509_crq_set_dn_by_oid
  -- Function: int gnutls_x509_crq_set_dn_by_oid (gnutls_x509_crq_t CRQ,
           const char * OID, unsigned int RAW_FLAG, const void * DATA,
           unsigned int SIZEOF_DATA)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      OID: holds an Object Identifier in a (0)-terminated string
 
@@ -2027,19 +2029,19 @@ gnutls_x509_crq_set_dn_by_oid
 
      DATA: a pointer to the input data
 
-     SIZEOF_DATA: holds the size of 'data'
+     SIZEOF_DATA: holds the size of  `data'
 
      This function will set the part of the name of the Certificate
-     request subject, specified by the given OID. The input string
+     request subject, specified by the given OID.  The input string
      should be ASCII or UTF-8 encoded.
 
      Some helper macros with popular OIDs can be found in gnutls/x509.h
      With this function you can only set the known OIDs.  You can test
-     for known OIDs using 'gnutls_x509_dn_oid_known()' .  For OIDs that
-     are not known (by gnutls) you should properly DER encode your data,
-     and call this function with raw_flag set.
+     for known OIDs using `gnutls_x509_dn_oid_known()' .  For OIDs that
+     are not known (by gnutls) you should properly DER encode your
+     data, and call this function with raw_flag set.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_set_key
@@ -2047,22 +2049,23 @@ gnutls_x509_crq_set_key
 
  -- Function: int gnutls_x509_crq_set_key (gnutls_x509_crq_t CRQ,
           gnutls_x509_privkey_t KEY)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      KEY: holds a private key
 
      This function will set the public parameters from the given private
      key to the request.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_set_key_purpose_oid
 -----------------------------------
 
- -- Function: int gnutls_x509_crq_set_key_purpose_oid (gnutls_x509_crq_t
-          CRQ, const void * OID, unsigned int CRITICAL)
-     CRQ: a certificate of type 'gnutls_x509_crq_t'
+ -- Function: int gnutls_x509_crq_set_key_purpose_oid
+          (gnutls_x509_crq_t CRQ, const void * OID, unsigned int
+          CRITICAL)
+     CRQ: a certificate of type `gnutls_x509_crq_t'
 
      OID: a pointer to a (0)-terminated string that holds the OID
 
@@ -2074,7 +2077,7 @@ gnutls_x509_crq_set_key_purpose_oid
 
      Subsequent calls to this function will append OIDs to the OID list.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.8.0
@@ -2084,16 +2087,16 @@ gnutls_x509_crq_set_key_rsa_raw
 
  -- Function: int gnutls_x509_crq_set_key_rsa_raw (gnutls_x509_crq_t
           CRQ, const gnutls_datum_t * M, const gnutls_datum_t * E)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      M: holds the modulus
 
      E: holds the public exponent
 
      This function will set the public parameters from the given private
-     key to the request.  Only RSA keys are currently supported.
+     key to the request. Only RSA keys are currently supported.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.6.0
@@ -2103,13 +2106,13 @@ gnutls_x509_crq_set_key_usage
 
  -- Function: int gnutls_x509_crq_set_key_usage (gnutls_x509_crq_t CRQ,
           unsigned int USAGE)
-     CRQ: a certificate request of type 'gnutls_x509_crq_t'
+     CRQ: a certificate request of type `gnutls_x509_crq_t'
 
      USAGE: an ORed sequence of the GNUTLS_KEY_* elements.
 
      This function will set the keyUsage certificate extension.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.8.0
@@ -2119,7 +2122,7 @@ gnutls_x509_crq_set_private_key_usage_period
 
  -- Function: int gnutls_x509_crq_set_private_key_usage_period
           (gnutls_x509_crq_t CRQ, time_t ACTIVATION, time_t EXPIRATION)
-     CRQ: a certificate of type 'gnutls_x509_crq_t'
+     CRQ: a certificate of type `gnutls_x509_crq_t'
 
      ACTIVATION: The activation time
 
@@ -2128,7 +2131,7 @@ gnutls_x509_crq_set_private_key_usage_period
      This function will set the private key usage period extension
      (2.5.29.16).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_set_subject_alt_name
@@ -2137,21 +2140,21 @@ gnutls_x509_crq_set_subject_alt_name
  -- Function: int gnutls_x509_crq_set_subject_alt_name
           (gnutls_x509_crq_t CRQ, gnutls_x509_subject_alt_name_t NT,
           const void * DATA, unsigned int DATA_SIZE, unsigned int FLAGS)
-     CRQ: a certificate request of type 'gnutls_x509_crq_t'
+     CRQ: a certificate request of type `gnutls_x509_crq_t'
 
-     NT: is one of the 'gnutls_x509_subject_alt_name_t' enumerations
+     NT: is one of the `gnutls_x509_subject_alt_name_t'  enumerations
 
      DATA: The data to be set
 
      DATA_SIZE: The size of data to be set
 
-     FLAGS: 'GNUTLS_FSAN_SET' to clear previous data or
-     'GNUTLS_FSAN_APPEND' to append.
+     FLAGS: `GNUTLS_FSAN_SET'  to clear previous data or
+     `GNUTLS_FSAN_APPEND'  to append.
 
      This function will set the subject alternative name certificate
      extension.  It can set the following types:
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.8.0
@@ -2161,14 +2164,14 @@ gnutls_x509_crq_set_version
 
  -- Function: int gnutls_x509_crq_set_version (gnutls_x509_crq_t CRQ,
           unsigned int VERSION)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      VERSION: holds the version number, for v1 Requests must be 1
 
      This function will set the version of the certificate request.  For
      version 1 requests this must be one.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crq_sign2
@@ -2177,26 +2180,26 @@ gnutls_x509_crq_sign2
  -- Function: int gnutls_x509_crq_sign2 (gnutls_x509_crq_t CRQ,
           gnutls_x509_privkey_t KEY, gnutls_digest_algorithm_t DIG,
           unsigned int FLAGS)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      KEY: holds a private key
 
-     DIG: The message digest to use, i.e., 'GNUTLS_DIG_SHA1'
+     DIG: The message digest to use, i.e., `GNUTLS_DIG_SHA1'
 
      FLAGS: must be 0
 
      This function will sign the certificate request with a private key.
      This must be the same key as the one used in
-     'gnutls_x509_crt_set_key()' since a certificate request is self
+     `gnutls_x509_crt_set_key()'  since a certificate request is self
      signed.
 
      This must be the last step in a certificate request generation
      since all the previously set parameters are now signed.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.  'GNUTLS_E_ASN1_VALUE_NOT_FOUND' is returned if you
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.  `GNUTLS_E_ASN1_VALUE_NOT_FOUND'  is returned if you
      didn't set all information in the certificate request (e.g., the
-     version using 'gnutls_x509_crq_set_version()' ).
+     version using `gnutls_x509_crq_set_version()' ).
 
 gnutls_x509_crq_verify
 ----------------------
@@ -2205,14 +2208,15 @@ gnutls_x509_crq_verify
           unsigned int FLAGS)
      CRQ: is the crq to be verified
 
-     FLAGS: Flags that may be used to change the verification algorithm.
-     Use OR of the gnutls_certificate_verify_flags enumerations.
+     FLAGS: Flags that may be used to change the verification
+     algorithm. Use OR of the gnutls_certificate_verify_flags
+     enumerations.
 
-     This function will verify self signature in the certificate request
-     and return its status.
+     This function will verify self signature in the certificate
+     request and return its status.
 
      *Returns:* In case of a verification failure
-     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
+     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
      code on success.
 
      Since 2.12.0
@@ -2243,7 +2247,7 @@ gnutls_x509_crt_check_issuer
      ISSUER: is the certificate of a possible issuer
 
      This function will check if the given certificate was issued by the
-     given issuer.  It checks the DN fields and the authority key
+     given issuer. It checks the DN fields and the authority key
      identifier and subject key identifier fields match.
 
      *Returns:* It will return true (1) if the given certificate is
@@ -2254,7 +2258,7 @@ gnutls_x509_crt_check_revocation
 
  -- Function: int gnutls_x509_crt_check_revocation (gnutls_x509_crt_t
           CERT, const gnutls_x509_crl_t * CRL_LIST, int CRL_LIST_LENGTH)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      CRL_LIST: should contain a list of gnutls_x509_crl_t structures
 
@@ -2269,9 +2273,9 @@ gnutls_x509_crt_check_revocation
 gnutls_x509_crt_cpy_crl_dist_points
 -----------------------------------
 
- -- Function: int gnutls_x509_crt_cpy_crl_dist_points (gnutls_x509_crt_t
-          DST, gnutls_x509_crt_t SRC)
-     DST: a certificate of type 'gnutls_x509_crt_t'
+ -- Function: int gnutls_x509_crt_cpy_crl_dist_points
+          (gnutls_x509_crt_t DST, gnutls_x509_crt_t SRC)
+     DST: a certificate of type `gnutls_x509_crt_t'
 
      SRC: the certificate where the dist points will be copied from
 
@@ -2279,7 +2283,7 @@ gnutls_x509_crt_cpy_crl_dist_points
      extension, from the source to the destination certificate.  This
      may be useful to copy from a CA certificate to issued ones.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_deinit
@@ -2298,7 +2302,7 @@ gnutls_x509_crt_export
           OUTPUT_DATA_SIZE)
      CERT: Holds the certificate
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUTPUT_DATA: will contain a certificate PEM or DER encoded
 
@@ -2324,12 +2328,12 @@ gnutls_x509_crt_export2
           gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
      CERT: Holds the certificate
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUT: will contain a certificate PEM or DER encoded
 
      This function will export the certificate to DER or PEM format.
-     The output buffer is allocated using 'gnutls_malloc()' .
+     The output buffer is allocated using `gnutls_malloc()' .
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      CERTIFICATE".
@@ -2344,7 +2348,7 @@ gnutls_x509_crt_get_activation_time
 
  -- Function: time_t gnutls_x509_crt_get_activation_time
           (gnutls_x509_crt_t CERT)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      This function will return the time this Certificate was or will be
      activated.
@@ -2362,68 +2366,70 @@ gnutls_x509_crt_get_authority_info_access
      SEQ: specifies the sequence number of the access descriptor (0 for
      the first one, 1 for the second etc.)
 
-     WHAT: what data to get, a 'gnutls_info_access_what_t' type.
+     WHAT: what data to get, a `gnutls_info_access_what_t'  type.
 
-     DATA: output data to be freed with 'gnutls_free()' .
+     DATA: output data to be freed with `gnutls_free()' .
 
      CRITICAL: pointer to output integer that is set to non-0 if the
-     extension is marked as critical (may be 'NULL' )
+     extension is marked as critical (may be `NULL' )
 
      This function extracts the Authority Information Access (AIA)
      extension, see RFC 5280 section 4.2.2.1 for more information.  The
      AIA extension holds a sequence of AccessDescription (AD) data:
 
-     <informalexample><programlisting> AuthorityInfoAccessSyntax ::=
+     <informalexample><programlisting> AuthorityInfoAccessSyntax  ::=
      SEQUENCE SIZE (1..MAX) OF AccessDescription
 
-     AccessDescription ::= SEQUENCE { accessMethod OBJECT IDENTIFIER,
-     accessLocation GeneralName } </programlisting></informalexample>
+     AccessDescription  ::=  SEQUENCE { accessMethod          OBJECT
+     IDENTIFIER, accessLocation        GeneralName  }
+     </programlisting></informalexample>
 
-     The 'seq' input parameter is used to indicate which member of the
+     The  `seq' input parameter is used to indicate which member of the
      sequence the caller is interested in.  The first member is 0, the
-     second member 1 and so on.  When the 'seq' value is out of bounds,
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     second member 1 and so on.  When the  `seq' value is out of bounds,
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
-     The type of data returned in 'data' is specified via 'what' which
-     should be 'gnutls_info_access_what_t' values.
+     The type of data returned in  `data' is specified via  `what' which
+     should be `gnutls_info_access_what_t'  values.
 
-     If 'what' is 'GNUTLS_IA_ACCESSMETHOD_OID' then 'data' will hold the
-     accessMethod OID (e.g., "1.3.6.1.5.5.7.48.1").
+     If  `what' is `GNUTLS_IA_ACCESSMETHOD_OID'  then  `data' will hold
+     the accessMethod OID (e.g., "1.3.6.1.5.5.7.48.1").
 
-     If 'what' is 'GNUTLS_IA_ACCESSLOCATION_GENERALNAME_TYPE' , 'data'
-     will hold the accessLocation GeneralName type (e.g.,
+     If  `what' is `GNUTLS_IA_ACCESSLOCATION_GENERALNAME_TYPE' ,
+     `data' will hold the accessLocation GeneralName type (e.g.,
      "uniformResourceIdentifier").
 
-     If 'what' is 'GNUTLS_IA_URI' , 'data' will hold the accessLocation
-     URI data.  Requesting this 'what' value leads to an error if the
-     accessLocation is not of the "uniformResourceIdentifier" type.
+     If  `what' is `GNUTLS_IA_URI' ,  `data' will hold the
+     accessLocation URI data.  Requesting this  `what' value leads to
+     an error if the accessLocation is not of the
+     "uniformResourceIdentifier" type.
 
-     If 'what' is 'GNUTLS_IA_OCSP_URI' , 'data' will hold the OCSP URI.
-     Requesting this 'what' value leads to an error if the accessMethod
-     is not 1.3.6.1.5.5.7.48.1 aka OSCP, or if accessLocation is not of
-     the "uniformResourceIdentifier" type.
+     If  `what' is `GNUTLS_IA_OCSP_URI' ,  `data' will hold the OCSP
+     URI.  Requesting this  `what' value leads to an error if the
+     accessMethod is not 1.3.6.1.5.5.7.48.1 aka OSCP, or if
+     accessLocation is not of the "uniformResourceIdentifier" type.
 
-     If 'what' is 'GNUTLS_IA_CAISSUERS_URI' , 'data' will hold the
-     caIssuers URI. Requesting this 'what' value leads to an error if
+     If  `what' is `GNUTLS_IA_CAISSUERS_URI' ,  `data' will hold the
+     caIssuers URI.  Requesting this  `what' value leads to an error if
      the accessMethod is not 1.3.6.1.5.5.7.48.2 aka caIssuers, or if
      accessLocation is not of the "uniformResourceIdentifier" type.
 
-     More 'what' values may be allocated in the future as needed.
+     More  `what' values may be allocated in the future as needed.
 
-     If 'data' is NULL, the function does the same without storing the
-     output data, that is, it will set 'critical' and do error checking
+     If  `data' is NULL, the function does the same without storing the
+     output data, that is, it will set  `critical' and do error checking
      as usual.
 
-     The value of the critical flag is returned in * 'critical' .
-     Supply a NULL 'critical' if you want the function to make sure the
-     extension is non-critical, as required by RFC 5280.
+     The value of the critical flag is returned in * `critical' .
+     Supply a NULL  `critical' if you want the function to make sure
+     the extension is non-critical, as required by RFC 5280.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success,
-     'GNUTLS_E_INVALID_REQUEST' on invalid 'crt' ,
-     'GNUTLS_E_CONSTRAINT_ERROR' if the extension is incorrectly marked
-     as critical (use a non-NULL 'critical' to override),
-     'GNUTLS_E_UNKNOWN_ALGORITHM' if the requested OID does not match
-     (e.g., when using 'GNUTLS_IA_OCSP_URI' ), otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success,
+     `GNUTLS_E_INVALID_REQUEST'  on invalid  `crt' ,
+     `GNUTLS_E_CONSTRAINT_ERROR'  if the extension is incorrectly
+     marked as critical (use a non-NULL  `critical' to override),
+     `GNUTLS_E_UNKNOWN_ALGORITHM'  if the requested OID does not match
+     (e.g., when using `GNUTLS_IA_OCSP_URI' ), otherwise a negative
      error code.
 
      *Since:* 3.0
@@ -2435,10 +2441,10 @@ gnutls_x509_crt_get_authority_key_gn_serial
           (gnutls_x509_crt_t CERT, unsigned int SEQ, void * ALT, size_t
           * ALT_SIZE, unsigned int * ALT_TYPE, void* SERIAL, size_t *
           SERIAL_SIZE, unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     SEQ: specifies the sequence number of the alt name (0 for the first
-     one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the alt name (0 for the
+     first one, 1 for the second etc.)
 
      ALT: is the place where the alternative name will be copied to
 
@@ -2457,12 +2463,12 @@ gnutls_x509_crt_get_authority_key_gn_serial
      This function will return the X.509 authority key identifier when
      stored as a general name (authorityCertIssuer) and serial number.
 
-     Because more than one general names might be stored 'seq' can be
+     Because more than one general names might be stored  `seq' can be
      used as a counter to request them all until
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
      present, otherwise a negative error value.
 
      *Since:* 3.0
@@ -2471,9 +2477,9 @@ gnutls_x509_crt_get_authority_key_id
 ------------------------------------
 
  -- Function: int gnutls_x509_crt_get_authority_key_id
-          (gnutls_x509_crt_t CERT, void * ID, size_t * ID_SIZE, unsigned
-          int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+          (gnutls_x509_crt_t CERT, void * ID, size_t * ID_SIZE,
+          unsigned int * CRITICAL)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      ID: The place where the identifier will be copied
 
@@ -2483,24 +2489,24 @@ gnutls_x509_crt_get_authority_key_id
      (may be null)
 
      This function will return the X.509v3 certificate authority's key
-     identifier.  This is obtained by the X.509 Authority Key identifier
-     extension field (2.5.29.35).  Note that this function only returns
-     the keyIdentifier field of the extension and
-     'GNUTLS_E_X509_UNSUPPORTED_EXTENSION' , if the extension contains
-     the name and serial number of the certificate.  In that case
-     'gnutls_x509_crt_get_authority_key_gn_serial()' may be used.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
+     identifier.  This is obtained by the X.509 Authority Key
+     identifier extension field (2.5.29.35). Note that this function
+     only returns the keyIdentifier field of the extension and
+     `GNUTLS_E_X509_UNSUPPORTED_EXTENSION' , if the extension contains
+     the name and serial number of the certificate. In that case
+     `gnutls_x509_crt_get_authority_key_gn_serial()'  may be used.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
      present, otherwise a negative error value.
 
 gnutls_x509_crt_get_basic_constraints
 -------------------------------------
 
  -- Function: int gnutls_x509_crt_get_basic_constraints
-          (gnutls_x509_crt_t CERT, unsigned int * CRITICAL, unsigned int
-          * CA, int * PATHLEN)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+          (gnutls_x509_crt_t CERT, unsigned int * CRITICAL, unsigned
+          int * CA, int * PATHLEN)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      CRITICAL: will be non-zero if the extension is marked as critical
 
@@ -2525,41 +2531,43 @@ gnutls_x509_crt_get_basic_constraints
 gnutls_x509_crt_get_ca_status
 -----------------------------
 
- -- Function: int gnutls_x509_crt_get_ca_status (gnutls_x509_crt_t CERT,
-          unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+ -- Function: int gnutls_x509_crt_get_ca_status (gnutls_x509_crt_t
+          CERT, unsigned int * CRITICAL)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      CRITICAL: will be non-zero if the extension is marked as critical
 
      This function will return certificates CA status, by reading the
-     basicConstraints X.509 extension (2.5.29.19).  If the certificate
-     is a CA a positive value will be returned, or (0) if the
-     certificate does not have CA flag set.
+     basicConstraints X.509 extension (2.5.29.19). If the certificate is
+     a CA a positive value will be returned, or (0) if the certificate
+     does not have CA flag set.
 
-     Use 'gnutls_x509_crt_get_basic_constraints()' if you want to read
+     Use `gnutls_x509_crt_get_basic_constraints()'  if you want to read
      the pathLenConstraint field too.
 
-     *Returns:* A negative error code may be returned in case of parsing
-     error.  If the certificate does not contain the basicConstraints
-     extension 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     *Returns:* A negative error code may be returned in case of
+     parsing error.  If the certificate does not contain the
+     basicConstraints extension `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
+     will be returned.
 
 gnutls_x509_crt_get_crl_dist_points
 -----------------------------------
 
- -- Function: int gnutls_x509_crt_get_crl_dist_points (gnutls_x509_crt_t
-          CERT, unsigned int SEQ, void * RET, size_t * RET_SIZE,
-          unsigned int * REASON_FLAGS, unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+ -- Function: int gnutls_x509_crt_get_crl_dist_points
+          (gnutls_x509_crt_t CERT, unsigned int SEQ, void * RET, size_t
+          * RET_SIZE, unsigned int * REASON_FLAGS, unsigned int *
+          CRITICAL)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     SEQ: specifies the sequence number of the distribution point (0 for
-     the first one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the distribution point (0
+     for the first one, 1 for the second etc.)
 
      RET: is the place where the distribution point will be copied to
 
      RET_SIZE: holds the size of ret.
 
-     REASON_FLAGS: Revocation reasons.  An ORed sequence of flags from
-     'gnutls_x509_crl_reason_flags_t' .
+     REASON_FLAGS: Revocation reasons. An ORed sequence of flags from
+     `gnutls_x509_crl_reason_flags_t' .
 
      CRITICAL: will be non-zero if the extension is marked as critical
      (may be null)
@@ -2568,52 +2576,52 @@ gnutls_x509_crt_get_crl_dist_points
      contained in the given certificate in the X509v3 Certificate
      Extensions.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' and updates 'ret_size' if
-     'ret_size' is not enough to hold the distribution point, or the
-     type of the distribution point if everything was ok.  The type is
-     one of the enumerated 'gnutls_x509_subject_alt_name_t' .  If the
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  and updates  `ret_size'
+     if  `ret_size' is not enough to hold the distribution point, or the
+     type of the distribution point if everything was ok. The type is
+     one of the enumerated `gnutls_x509_subject_alt_name_t' .  If the
      certificate does not have an Alternative name with the specified
-     sequence number then 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is
+     sequence number then `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is
      returned.
 
 gnutls_x509_crt_get_dn
 ----------------------
 
- -- Function: int gnutls_x509_crt_get_dn (gnutls_x509_crt_t CERT, char *
-          BUF, size_t * BUF_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+ -- Function: int gnutls_x509_crt_get_dn (gnutls_x509_crt_t CERT, char
+          * BUF, size_t * BUF_SIZE)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      BUF: a pointer to a structure to hold the name (may be null)
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      This function will copy the name of the Certificate in the provided
-     buffer.  The name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as
-     described in RFC4514.  The output string will be ASCII or UTF-8
+     buffer. The name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as
+     described in RFC4514. The output string will be ASCII or UTF-8
      encoded, depending on the certificate data.
 
-     If 'buf' is null then only the size will be filled.
+     If  `buf' is null then only the size will be filled.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the 'buf_size' will be updated
-     with the required size.  On success 0 is returned.
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the  `buf_size' will be
+     updated with the required size.  On success 0 is returned.
 
 gnutls_x509_crt_get_dn2
 -----------------------
 
  -- Function: int gnutls_x509_crt_get_dn2 (gnutls_x509_crt_t CERT,
           gnutls_datum_t * DN)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      DN: a pointer to a structure to hold the name
 
      This function will allocate buffer and copy the name of the
      Certificate.  The name will be in the form "C=xxxx,O=yyyy,CN=zzzz"
-     as described in RFC4514.  The output string will be ASCII or UTF-8
+     as described in RFC4514. The output string will be ASCII or UTF-8
      encoded, depending on the certificate data.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      error.
 
      *Since:* 3.1.10
@@ -2621,74 +2629,76 @@ gnutls_x509_crt_get_dn2
 gnutls_x509_crt_get_dn_by_oid
 -----------------------------
 
- -- Function: int gnutls_x509_crt_get_dn_by_oid (gnutls_x509_crt_t CERT,
-          const char * OID, int INDX, unsigned int RAW_FLAG, void * BUF,
-          size_t * BUF_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+ -- Function: int gnutls_x509_crt_get_dn_by_oid (gnutls_x509_crt_t
+          CERT, const char * OID, int INDX, unsigned int RAW_FLAG, void
+          * BUF, size_t * BUF_SIZE)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      OID: holds an Object Identified in null terminated string
 
      INDX: In case multiple same OIDs exist in the RDN, this specifies
-     which to send.  Use (0) to get the first one.
+     which to send. Use (0) to get the first one.
 
      RAW_FLAG: If non-zero returns the raw DER data of the DN part.
 
      BUF: a pointer where the DN part will be copied (may be null).
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      This function will extract the part of the name of the Certificate
      subject specified by the given OID. The output, if the raw flag is
-     not used, will be encoded as described in RFC4514.  Thus a string
+     not used, will be encoded as described in RFC4514. Thus a string
      that is ASCII or UTF-8 encoded, depending on the certificate data.
 
      Some helper macros with popular OIDs can be found in gnutls/x509.h
      If raw flag is (0), this function will only return known OIDs as
-     text.  Other OIDs will be DER encoded, as described in RFC4514 - in
-     hex format with a '#' prefix.  You can check about known OIDs using
-     'gnutls_x509_dn_oid_known()' .
+     text. Other OIDs will be DER encoded, as described in RFC4514 - in
+     hex format with a '#' prefix.  You can check about known OIDs
+     using `gnutls_x509_dn_oid_known()' .
 
-     If 'buf' is null then only the size will be filled.  If the
-     'raw_flag' is not specified the output is always null terminated,
-     although the 'buf_size' will not include the null character.
+     If  `buf' is null then only the size will be filled. If the
+     `raw_flag' is not specified the output is always null terminated,
+     although the  `buf_size' will not include the null character.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the 'buf_size' will be updated
-     with the required size.  'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if
-     there are no data in the current index.  On success 0 is returned.
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the  `buf_size' will be
+     updated with the required size.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  if there are no data in
+     the current index. On success 0 is returned.
 
 gnutls_x509_crt_get_dn_oid
 --------------------------
 
  -- Function: int gnutls_x509_crt_get_dn_oid (gnutls_x509_crt_t CERT,
           int INDX, void * OID, size_t * OID_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     INDX: This specifies which OID to return.  Use (0) to get the first
+     INDX: This specifies which OID to return. Use (0) to get the first
      one.
 
      OID: a pointer to a buffer to hold the OID (may be null)
 
-     OID_SIZE: initially holds the size of 'oid'
+     OID_SIZE: initially holds the size of  `oid'
 
      This function will extract the OIDs of the name of the Certificate
      subject specified by the given index.
 
-     If 'oid' is null then only the size will be filled.  The 'oid'
-     returned will be null terminated, although 'oid_size' will not
+     If  `oid' is null then only the size will be filled. The  `oid'
+     returned will be null terminated, although  `oid_size' will not
      account for the trailing null.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the 'buf_size' will be updated
-     with the required size.  'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if
-     there are no data in the current index.  On success 0 is returned.
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the  `buf_size' will be
+     updated with the required size.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  if there are no data in
+     the current index. On success 0 is returned.
 
 gnutls_x509_crt_get_expiration_time
 -----------------------------------
 
  -- Function: time_t gnutls_x509_crt_get_expiration_time
           (gnutls_x509_crt_t CERT)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      This function will return the time this Certificate was or will be
      expired.
@@ -2701,16 +2711,16 @@ gnutls_x509_crt_get_extension_by_oid
  -- Function: int gnutls_x509_crt_get_extension_by_oid
           (gnutls_x509_crt_t CERT, const char * OID, int INDX, void *
           BUF, size_t * BUF_SIZE, unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      OID: holds an Object Identified in null terminated string
 
      INDX: In case multiple same OIDs exist in the extensions, this
-     specifies which to send.  Use (0) to get the first one.
+     specifies which to send. Use (0) to get the first one.
 
      BUF: a pointer to a structure to hold the name (may be null)
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      CRITICAL: will be non-zero if the extension is marked as critical
 
@@ -2718,8 +2728,8 @@ gnutls_x509_crt_get_extension_by_oid
      certificate.  The extensions will be returned as binary data DER
      encoded, in the provided buffer.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.  If the certificate
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned. If the certificate
      does not contain the specified extension
      GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE will be returned.
 
@@ -2728,28 +2738,28 @@ gnutls_x509_crt_get_extension_data
 
  -- Function: int gnutls_x509_crt_get_extension_data (gnutls_x509_crt_t
           CERT, int INDX, void * DATA, size_t * SIZEOF_DATA)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     INDX: Specifies which extension OID to send.  Use (0) to get the
+     INDX: Specifies which extension OID to send. Use (0) to get the
      first one.
 
      DATA: a pointer to a structure to hold the data (may be null)
 
-     SIZEOF_DATA: initially holds the size of 'oid'
+     SIZEOF_DATA: initially holds the size of  `oid'
 
      This function will return the requested extension data in the
      certificate.  The extension data will be stored as a string in the
      provided buffer.
 
-     Use 'gnutls_x509_crt_get_extension_info()' to extract the OID and
-     critical flag.  Use 'gnutls_x509_crt_get_extension_by_oid()'
+     Use `gnutls_x509_crt_get_extension_info()'  to extract the OID and
+     critical flag.  Use `gnutls_x509_crt_get_extension_by_oid()'
      instead, if you want to get data indexed by the extension OID
      rather than sequence.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.  If you have reached
      the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
 gnutls_x509_crt_get_extension_info
 ----------------------------------
@@ -2757,58 +2767,58 @@ gnutls_x509_crt_get_extension_info
  -- Function: int gnutls_x509_crt_get_extension_info (gnutls_x509_crt_t
           CERT, int INDX, void * OID, size_t * OID_SIZE, unsigned int *
           CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     INDX: Specifies which extension OID to send.  Use (0) to get the
+     INDX: Specifies which extension OID to send. Use (0) to get the
      first one.
 
      OID: a pointer to a structure to hold the OID
 
-     OID_SIZE: initially holds the maximum size of 'oid' , on return
-     holds actual size of 'oid' .
+     OID_SIZE: initially holds the maximum size of  `oid' , on return
+     holds actual size of  `oid' .
 
      CRITICAL: output variable with critical flag, may be NULL.
 
      This function will return the requested extension OID in the
      certificate, and the critical flag for it.  The extension OID will
      be stored as a string in the provided buffer.  Use
-     'gnutls_x509_crt_get_extension_data()' to extract the data.
+     `gnutls_x509_crt_get_extension_data()'  to extract the data.
 
      If the buffer provided is not long enough to hold the output, then
-     'oid_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER' will be
-     returned.  The 'oid' returned will be null terminated, although
-     'oid_size' will not account for the trailing null.
+     `oid_size' is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'  will be
+     returned. The  `oid' returned will be null terminated, although
+     `oid_size' will not account for the trailing null.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.  If you have reached
      the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
 gnutls_x509_crt_get_extension_oid
 ---------------------------------
 
  -- Function: int gnutls_x509_crt_get_extension_oid (gnutls_x509_crt_t
           CERT, int INDX, void * OID, size_t * OID_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     INDX: Specifies which extension OID to send.  Use (0) to get the
+     INDX: Specifies which extension OID to send. Use (0) to get the
      first one.
 
      OID: a pointer to a structure to hold the OID (may be null)
 
-     OID_SIZE: initially holds the size of 'oid'
+     OID_SIZE: initially holds the size of  `oid'
 
      This function will return the requested extension OID in the
      certificate.  The extension OID will be stored as a string in the
      provided buffer.
 
-     The 'oid' returned will be null terminated, although 'oid_size'
+     The  `oid' returned will be null terminated, although  `oid_size'
      will not account for the trailing null.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.  If you have reached
      the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
 
 gnutls_x509_crt_get_fingerprint
 -------------------------------
@@ -2816,21 +2826,21 @@ gnutls_x509_crt_get_fingerprint
  -- Function: int gnutls_x509_crt_get_fingerprint (gnutls_x509_crt_t
           CERT, gnutls_digest_algorithm_t ALGO, void * BUF, size_t *
           BUF_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      ALGO: is a digest algorithm
 
      BUF: a pointer to a structure to hold the fingerprint (may be null)
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      This function will calculate and copy the certificate's fingerprint
      in the provided buffer.
 
      If the buffer is null then only the size will be filled.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the *buf_size will be updated
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the *buf_size will be updated
      with the required size.  On success 0 is returned.
 
 gnutls_x509_crt_get_issuer
@@ -2838,15 +2848,15 @@ gnutls_x509_crt_get_issuer
 
  -- Function: int gnutls_x509_crt_get_issuer (gnutls_x509_crt_t CERT,
           gnutls_x509_dn_t * DN)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      DN: output variable with pointer to uint8_t DN
 
-     Return the Certificate's Issuer DN as a 'gnutls_x509_dn_t' data
-     type, that can be decoded using 'gnutls_x509_dn_get_rdn_ava()' .
+     Return the Certificate's Issuer DN as a `gnutls_x509_dn_t'  data
+     type, that can be decoded using `gnutls_x509_dn_get_rdn_ava()' .
 
-     Note that 'dn' should be treated as constant.  Because it points
-     into the 'cert' object, you should not use 'dn' after 'cert' is
+     Note that  `dn' should be treated as constant. Because it points
+     into the  `cert' object, you should not use  `dn' after  `cert' is
      deallocated.
 
      *Returns:* Returns 0 on success, or an error code.
@@ -2854,13 +2864,13 @@ gnutls_x509_crt_get_issuer
 gnutls_x509_crt_get_issuer_alt_name
 -----------------------------------
 
- -- Function: int gnutls_x509_crt_get_issuer_alt_name (gnutls_x509_crt_t
-          CERT, unsigned int SEQ, void * IAN, size_t * IAN_SIZE,
-          unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+ -- Function: int gnutls_x509_crt_get_issuer_alt_name
+          (gnutls_x509_crt_t CERT, unsigned int SEQ, void * IAN, size_t
+          * IAN_SIZE, unsigned int * CRITICAL)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     SEQ: specifies the sequence number of the alt name (0 for the first
-     one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the alt name (0 for the
+     first one, 1 for the second etc.)
 
      IAN: is the place where the alternative name will be copied to
 
@@ -2874,10 +2884,10 @@ gnutls_x509_crt_get_issuer_alt_name
      Extensions.
 
      When the SAN type is otherName, it will extract the data in the
-     otherName's value field, and 'GNUTLS_SAN_OTHERNAME' is returned.
-     You may use 'gnutls_x509_crt_get_subject_alt_othername_oid()' to
+     otherName's value field, and `GNUTLS_SAN_OTHERNAME'  is returned.
+     You may use `gnutls_x509_crt_get_subject_alt_othername_oid()'  to
      get the corresponding OID and the "virtual" SAN types (e.g.,
-     'GNUTLS_SAN_OTHERNAME_XMPP' ).
+     `GNUTLS_SAN_OTHERNAME_XMPP' ).
 
      If an otherName OID is known, the data will be decoded.  Otherwise
      the returned data will be DER encoded, and you will have to decode
@@ -2885,12 +2895,12 @@ gnutls_x509_crt_get_issuer_alt_name
      AltName is recognized.
 
      *Returns:* the alternative issuer name type on success, one of the
-     enumerated 'gnutls_x509_subject_alt_name_t' .  It will return
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ian_size' is not large enough to
-     hold the value.  In that case 'ian_size' will be updated with the
-     required size.  If the certificate does not have an Alternative
-     name with the specified sequence number then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     enumerated `gnutls_x509_subject_alt_name_t' .  It will return
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  if  `ian_size' is not large enough
+     to hold the value.  In that case  `ian_size' will be updated with
+     the required size.  If the certificate does not have an
+     Alternative name with the specified sequence number then
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
      *Since:* 2.10.0
 
@@ -2900,10 +2910,10 @@ gnutls_x509_crt_get_issuer_alt_name2
  -- Function: int gnutls_x509_crt_get_issuer_alt_name2
           (gnutls_x509_crt_t CERT, unsigned int SEQ, void * IAN, size_t
           * IAN_SIZE, unsigned int * IAN_TYPE, unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     SEQ: specifies the sequence number of the alt name (0 for the first
-     one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the alt name (0 for the
+     first one, 1 for the second etc.)
 
      IAN: is the place where the alternative name will be copied to
 
@@ -2916,19 +2926,19 @@ gnutls_x509_crt_get_issuer_alt_name2
      (may be null)
 
      This function will return the alternative names, contained in the
-     given certificate.  It is the same as
-     'gnutls_x509_crt_get_issuer_alt_name()' except for the fact that it
-     will return the type of the alternative name in 'ian_type' even if
-     the function fails for some reason (i.e.  the buffer provided is
-     not enough).
+     given certificate. It is the same as
+     `gnutls_x509_crt_get_issuer_alt_name()'  except for the fact that
+     it will return the type of the alternative name in  `ian_type'
+     even if the function fails for some reason (i.e.  the buffer
+     provided is not enough).
 
      *Returns:* the alternative issuer name type on success, one of the
-     enumerated 'gnutls_x509_subject_alt_name_t' .  It will return
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ian_size' is not large enough to
-     hold the value.  In that case 'ian_size' will be updated with the
-     required size.  If the certificate does not have an Alternative
-     name with the specified sequence number then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     enumerated `gnutls_x509_subject_alt_name_t' .  It will return
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  if  `ian_size' is not large enough
+     to hold the value.  In that case  `ian_size' will be updated with
+     the required size.  If the certificate does not have an
+     Alternative name with the specified sequence number then
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
      *Since:* 2.10.0
 
@@ -2938,10 +2948,10 @@ gnutls_x509_crt_get_issuer_alt_othername_oid
  -- Function: int gnutls_x509_crt_get_issuer_alt_othername_oid
           (gnutls_x509_crt_t CERT, unsigned int SEQ, void * RET, size_t
           * RET_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     SEQ: specifies the sequence number of the alt name (0 for the first
-     one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the alt name (0 for the
+     first one, 1 for the second etc.)
 
      RET: is the place where the otherName OID will be copied to
 
@@ -2951,47 +2961,47 @@ gnutls_x509_crt_get_issuer_alt_othername_oid
      Alternative Name, contained in the given certificate, and return
      the type as an enumerated element.
 
-     If 'oid' is null then only the size will be filled.  The 'oid'
-     returned will be null terminated, although 'oid_size' will not
+     If  `oid' is null then only the size will be filled. The  `oid'
+     returned will be null terminated, although  `oid_size' will not
      account for the trailing null.
 
      This function is only useful if
-     'gnutls_x509_crt_get_issuer_alt_name()' returned
-     'GNUTLS_SAN_OTHERNAME' .
+     `gnutls_x509_crt_get_issuer_alt_name()'  returned
+     `GNUTLS_SAN_OTHERNAME' .
 
      *Returns:* the alternative issuer name type on success, one of the
      enumerated gnutls_x509_subject_alt_name_t.  For supported OIDs, it
-     will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types, e.g.
-     'GNUTLS_SAN_OTHERNAME_XMPP' , and 'GNUTLS_SAN_OTHERNAME' for
-     unknown OIDs.  It will return 'GNUTLS_E_SHORT_MEMORY_BUFFER' if
-     'ret_size' is not large enough to hold the value.  In that case
-     'ret_size' will be updated with the required size.  If the
+     will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types,
+     e.g. `GNUTLS_SAN_OTHERNAME_XMPP' , and `GNUTLS_SAN_OTHERNAME'  for
+     unknown OIDs.  It will return `GNUTLS_E_SHORT_MEMORY_BUFFER'  if
+     `ret_size' is not large enough to hold the value.  In that case
+     `ret_size' will be updated with the required size.  If the
      certificate does not have an Alternative name with the specified
      sequence number and with the otherName type then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
      *Since:* 2.10.0
 
 gnutls_x509_crt_get_issuer_dn
 -----------------------------
 
- -- Function: int gnutls_x509_crt_get_issuer_dn (gnutls_x509_crt_t CERT,
-          char * BUF, size_t * BUF_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+ -- Function: int gnutls_x509_crt_get_issuer_dn (gnutls_x509_crt_t
+          CERT, char * BUF, size_t * BUF_SIZE)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      BUF: a pointer to a structure to hold the name (may be null)
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      This function will copy the name of the Certificate issuer in the
-     provided buffer.  The name will be in the form
-     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC4514.  The output string
+     provided buffer. The name will be in the form
+     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC4514. The output string
      will be ASCII or UTF-8 encoded, depending on the certificate data.
 
-     If 'buf' is null then only the size will be filled.
+     If  `buf' is null then only the size will be filled.
 
      *Returns:* GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is
-     not long enough, and in that case the 'buf_size' will be updated
+     not long enough, and in that case the  `buf_size' will be updated
      with the required size.  On success 0 is returned.
 
 gnutls_x509_crt_get_issuer_dn2
@@ -2999,17 +3009,17 @@ gnutls_x509_crt_get_issuer_dn2
 
  -- Function: int gnutls_x509_crt_get_issuer_dn2 (gnutls_x509_crt_t
           CERT, gnutls_datum_t * DN)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      DN: a pointer to a structure to hold the name
 
      This function will allocate buffer and copy the name of issuer of
      the Certificate.  The name will be in the form
-     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC4514.  The output string
+     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC4514. The output string
      will be ASCII or UTF-8 encoded, depending on the certificate data.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      error.
 
      *Since:* 3.1.10
@@ -3020,64 +3030,66 @@ gnutls_x509_crt_get_issuer_dn_by_oid
  -- Function: int gnutls_x509_crt_get_issuer_dn_by_oid
           (gnutls_x509_crt_t CERT, const char * OID, int INDX, unsigned
           int RAW_FLAG, void * BUF, size_t * BUF_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      OID: holds an Object Identified in null terminated string
 
      INDX: In case multiple same OIDs exist in the RDN, this specifies
-     which to send.  Use (0) to get the first one.
+     which to send. Use (0) to get the first one.
 
      RAW_FLAG: If non-zero returns the raw DER data of the DN part.
 
      BUF: a pointer to a structure to hold the name (may be null)
 
-     BUF_SIZE: initially holds the size of 'buf'
+     BUF_SIZE: initially holds the size of  `buf'
 
      This function will extract the part of the name of the Certificate
      issuer specified by the given OID. The output, if the raw flag is
-     not used, will be encoded as described in RFC4514.  Thus a string
+     not used, will be encoded as described in RFC4514. Thus a string
      that is ASCII or UTF-8 encoded, depending on the certificate data.
 
      Some helper macros with popular OIDs can be found in gnutls/x509.h
      If raw flag is (0), this function will only return known OIDs as
-     text.  Other OIDs will be DER encoded, as described in RFC4514 - in
-     hex format with a '#' prefix.  You can check about known OIDs using
-     'gnutls_x509_dn_oid_known()' .
+     text. Other OIDs will be DER encoded, as described in RFC4514 - in
+     hex format with a '#' prefix.  You can check about known OIDs
+     using `gnutls_x509_dn_oid_known()' .
 
-     If 'buf' is null then only the size will be filled.  If the
-     'raw_flag' is not specified the output is always null terminated,
-     although the 'buf_size' will not include the null character.
+     If  `buf' is null then only the size will be filled. If the
+     `raw_flag' is not specified the output is always null terminated,
+     although the  `buf_size' will not include the null character.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the 'buf_size' will be updated
-     with the required size.  'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if
-     there are no data in the current index.  On success 0 is returned.
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the  `buf_size' will be
+     updated with the required size.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  if there are no data in
+     the current index. On success 0 is returned.
 
 gnutls_x509_crt_get_issuer_dn_oid
 ---------------------------------
 
  -- Function: int gnutls_x509_crt_get_issuer_dn_oid (gnutls_x509_crt_t
           CERT, int INDX, void * OID, size_t * OID_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     INDX: This specifies which OID to return.  Use (0) to get the first
+     INDX: This specifies which OID to return. Use (0) to get the first
      one.
 
      OID: a pointer to a buffer to hold the OID (may be null)
 
-     OID_SIZE: initially holds the size of 'oid'
+     OID_SIZE: initially holds the size of  `oid'
 
      This function will extract the OIDs of the name of the Certificate
      issuer specified by the given index.
 
-     If 'oid' is null then only the size will be filled.  The 'oid'
-     returned will be null terminated, although 'oid_size' will not
+     If  `oid' is null then only the size will be filled. The  `oid'
+     returned will be null terminated, although  `oid_size' will not
      account for the trailing null.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the 'buf_size' will be updated
-     with the required size.  'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if
-     there are no data in the current index.  On success 0 is returned.
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the  `buf_size' will be
+     updated with the required size.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  if there are no data in
+     the current index. On success 0 is returned.
 
 gnutls_x509_crt_get_issuer_unique_id
 ------------------------------------
@@ -3098,7 +3110,7 @@ gnutls_x509_crt_get_issuer_unique_id
      full subjectUniqueID, then a GNUTLS_E_SHORT_MEMORY_BUFFER error
      will be returned, and buf_size will be set to the actual length.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
      *Since:* 2.12.0
@@ -3119,7 +3131,7 @@ gnutls_x509_crt_get_key_id
      replaced by the actual size of parameters)
 
      This function will return a unique ID that depends on the public
-     key parameters.  This ID can be used in checking whether a
+     key parameters. This ID can be used in checking whether a
      certificate corresponds to the given private key.
 
      If the buffer provided is not long enough to hold the output, then
@@ -3133,17 +3145,17 @@ gnutls_x509_crt_get_key_id
 gnutls_x509_crt_get_key_purpose_oid
 -----------------------------------
 
- -- Function: int gnutls_x509_crt_get_key_purpose_oid (gnutls_x509_crt_t
-          CERT, int INDX, void * OID, size_t * OID_SIZE, unsigned int *
-          CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+ -- Function: int gnutls_x509_crt_get_key_purpose_oid
+          (gnutls_x509_crt_t CERT, int INDX, void * OID, size_t *
+          OID_SIZE, unsigned int * CRITICAL)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     INDX: This specifies which OID to return.  Use (0) to get the first
+     INDX: This specifies which OID to return. Use (0) to get the first
      one.
 
      OID: a pointer to a buffer to hold the OID (may be null)
 
-     OID_SIZE: initially holds the size of 'oid'
+     OID_SIZE: initially holds the size of  `oid'
 
      CRITICAL: output flag to indicate criticality of extension
 
@@ -3152,36 +3164,36 @@ gnutls_x509_crt_get_key_purpose_oid
      Usage extension (2.5.29.37) See the GNUTLS_KP_* definitions for
      human readable names.
 
-     If 'oid' is null then only the size will be filled.  The 'oid'
-     returned will be null terminated, although 'oid_size' will not
+     If  `oid' is null then only the size will be filled. The  `oid'
+     returned will be null terminated, although  `oid_size' will not
      account for the trailing null.
 
-     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
-     not long enough, and in that case the *oid_size will be updated
+     *Returns:* `GNUTLS_E_SHORT_MEMORY_BUFFER'  if the provided buffer
+     is not long enough, and in that case the *oid_size will be updated
      with the required size.  On success 0 is returned.
 
 gnutls_x509_crt_get_key_usage
 -----------------------------
 
- -- Function: int gnutls_x509_crt_get_key_usage (gnutls_x509_crt_t CERT,
-          unsigned int * KEY_USAGE, unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+ -- Function: int gnutls_x509_crt_get_key_usage (gnutls_x509_crt_t
+          CERT, unsigned int * KEY_USAGE, unsigned int * CRITICAL)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      KEY_USAGE: where the key usage bits will be stored
 
      CRITICAL: will be non-zero if the extension is marked as critical
 
      This function will return certificate's key usage, by reading the
-     keyUsage X.509 extension (2.5.29.15).  The key usage value will
-     ORed values of the: 'GNUTLS_KEY_DIGITAL_SIGNATURE' ,
-     'GNUTLS_KEY_NON_REPUDIATION' , 'GNUTLS_KEY_KEY_ENCIPHERMENT' ,
-     'GNUTLS_KEY_DATA_ENCIPHERMENT' , 'GNUTLS_KEY_KEY_AGREEMENT' ,
-     'GNUTLS_KEY_KEY_CERT_SIGN' , 'GNUTLS_KEY_CRL_SIGN' ,
-     'GNUTLS_KEY_ENCIPHER_ONLY' , 'GNUTLS_KEY_DECIPHER_ONLY' .
+     keyUsage X.509 extension (2.5.29.15). The key usage value will ORed
+     values of the: `GNUTLS_KEY_DIGITAL_SIGNATURE' ,
+     `GNUTLS_KEY_NON_REPUDIATION' , `GNUTLS_KEY_KEY_ENCIPHERMENT' ,
+     `GNUTLS_KEY_DATA_ENCIPHERMENT' , `GNUTLS_KEY_KEY_AGREEMENT' ,
+     `GNUTLS_KEY_KEY_CERT_SIGN' , `GNUTLS_KEY_CRL_SIGN' ,
+     `GNUTLS_KEY_ENCIPHER_ONLY' , `GNUTLS_KEY_DECIPHER_ONLY' .
 
      *Returns:* the certificate key usage, or a negative error code in
      case of parsing error.  If the certificate does not contain the
-     keyUsage extension 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
+     keyUsage extension `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be
      returned.
 
 gnutls_x509_crt_get_pk_algorithm
@@ -3189,7 +3201,7 @@ gnutls_x509_crt_get_pk_algorithm
 
  -- Function: int gnutls_x509_crt_get_pk_algorithm (gnutls_x509_crt_t
           CERT, unsigned int * BITS)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      BITS: if bits is non null it will hold the size of the parameters'
      in bits
@@ -3198,18 +3210,18 @@ gnutls_x509_crt_get_pk_algorithm
      certificate.
 
      If bits is non null, it should have enough size to hold the
-     parameters size in bits.  For RSA the bits returned is the modulus.
+     parameters size in bits. For RSA the bits returned is the modulus.
      For DSA the bits returned are of the public exponent.
 
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
      success, or a negative error code on error.
 
 gnutls_x509_crt_get_pk_dsa_raw
 ------------------------------
 
- -- Function: int gnutls_x509_crt_get_pk_dsa_raw (gnutls_x509_crt_t CRT,
-          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
-          gnutls_datum_t * Y)
+ -- Function: int gnutls_x509_crt_get_pk_dsa_raw (gnutls_x509_crt_t
+          CRT, gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t *
+          G, gnutls_datum_t * Y)
      CRT: Holds the certificate
 
      P: will hold the p
@@ -3222,16 +3234,16 @@ gnutls_x509_crt_get_pk_dsa_raw
 
      This function will export the DSA public key's parameters found in
      the given certificate.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
 gnutls_x509_crt_get_pk_rsa_raw
 ------------------------------
 
- -- Function: int gnutls_x509_crt_get_pk_rsa_raw (gnutls_x509_crt_t CRT,
-          gnutls_datum_t * M, gnutls_datum_t * E)
+ -- Function: int gnutls_x509_crt_get_pk_rsa_raw (gnutls_x509_crt_t
+          CRT, gnutls_datum_t * M, gnutls_datum_t * E)
      CRT: Holds the certificate
 
      M: will hold the modulus
@@ -3240,20 +3252,20 @@ gnutls_x509_crt_get_pk_rsa_raw
 
      This function will export the RSA public key's parameters found in
      the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
 gnutls_x509_crt_get_policy
 --------------------------
 
- -- Function: int gnutls_x509_crt_get_policy (gnutls_x509_crt_t CRT, int
-          INDX, struct gnutls_x509_policy_st* POLICY, unsigned int *
-          CRITICAL)
+ -- Function: int gnutls_x509_crt_get_policy (gnutls_x509_crt_t CRT,
+          int INDX, struct gnutls_x509_policy_st* POLICY, unsigned int
+          * CRITICAL)
      CRT: - undescribed -
 
-     INDX: This specifies which policy to return.  Use (0) to get the
+     INDX: This specifies which policy to return. Use (0) to get the
      first one.
 
      POLICY: A pointer to a policy structure.
@@ -3264,10 +3276,10 @@ gnutls_x509_crt_get_policy
      2.5.29.32) specified by the given index.
 
      The policy returned by this function must be deinitialized by using
-     'gnutls_x509_policy_release()' .
+     `gnutls_x509_policy_release()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
      present, otherwise a negative error value.
 
      *Since:* 3.1.5
@@ -3278,7 +3290,7 @@ gnutls_x509_crt_get_private_key_usage_period
  -- Function: int gnutls_x509_crt_get_private_key_usage_period
           (gnutls_x509_crt_t CERT, time_t* ACTIVATION, time_t*
           EXPIRATION, unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      ACTIVATION: The activation time
 
@@ -3287,11 +3299,11 @@ gnutls_x509_crt_get_private_key_usage_period
      CRITICAL: the extension status
 
      This function will return the expiration and activation times of
-     the private key of the certificate.  It relies on the PKIX
+     the private key of the certificate. It relies on the PKIX
      extension 2.5.29.16 being present.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
      present, otherwise a negative error value.
 
 gnutls_x509_crt_get_proxy
@@ -3300,7 +3312,7 @@ gnutls_x509_crt_get_proxy
  -- Function: int gnutls_x509_crt_get_proxy (gnutls_x509_crt_t CERT,
           unsigned int * CRITICAL, int * PATHLEN, char **
           POLICYLANGUAGE, char ** POLICY, size_t * SIZEOF_POLICY)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      CRITICAL: will be non-zero if the extension is marked as critical
 
@@ -3318,7 +3330,7 @@ gnutls_x509_crt_get_proxy
      This function will get information from a proxy certificate.  It
      reads the ProxyCertInfo X.509 extension (1.3.6.1.5.5.7.1.14).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_x509_crt_get_raw_dn
@@ -3326,16 +3338,16 @@ gnutls_x509_crt_get_raw_dn
 
  -- Function: int gnutls_x509_crt_get_raw_dn (gnutls_x509_crt_t CERT,
           gnutls_datum_t * DN)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      DN: will hold the starting point of the DN
 
-     This function will return a pointer to the DER encoded DN structure
-     and the length.  This points to allocated data that must be free'd
-     using 'gnutls_free()' .
+     This function will return a pointer to the DER encoded DN
+     structure and the length. This points to allocated data that must
+     be free'd using `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  or a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. or a negative error code on
      error.
 
 gnutls_x509_crt_get_raw_issuer_dn
@@ -3343,15 +3355,15 @@ gnutls_x509_crt_get_raw_issuer_dn
 
  -- Function: int gnutls_x509_crt_get_raw_issuer_dn (gnutls_x509_crt_t
           CERT, gnutls_datum_t * DN)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      DN: will hold the starting point of the DN
 
      This function will return a pointer to the DER encoded DN structure
-     and the length.  This points to allocated data that must be free'd
-     using 'gnutls_free()' .
+     and the length. This points to allocated data that must be free'd
+     using `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.or a negative error code on error.
 
 gnutls_x509_crt_get_serial
@@ -3359,37 +3371,36 @@ gnutls_x509_crt_get_serial
 
  -- Function: int gnutls_x509_crt_get_serial (gnutls_x509_crt_t CERT,
           void * RESULT, size_t * RESULT_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      RESULT: The place where the serial number will be copied
 
      RESULT_SIZE: Holds the size of the result field.
 
      This function will return the X.509 certificate's serial number.
-     This is obtained by the X509 Certificate serialNumber field.
-     Serial is not always a 32 or 64bit number.  Some CAs use large
-     serial numbers, thus it may be wise to handle it as something
-     uint8_t.
+     This is obtained by the X509 Certificate serialNumber field. Serial
+     is not always a 32 or 64bit number. Some CAs use large serial
+     numbers, thus it may be wise to handle it as something uint8_t.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_get_signature
 -----------------------------
 
- -- Function: int gnutls_x509_crt_get_signature (gnutls_x509_crt_t CERT,
-          char * SIG, size_t * SIZEOF_SIG)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+ -- Function: int gnutls_x509_crt_get_signature (gnutls_x509_crt_t
+          CERT, char * SIG, size_t * SIZEOF_SIG)
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      SIG: a pointer where the signature part will be copied (may be
      null).
 
-     SIZEOF_SIG: initially holds the size of 'sig'
+     SIZEOF_SIG: initially holds the size of  `sig'
 
      This function will extract the signature field of a certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  and a negative error code on
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. and a negative error code on
      error.
 
 gnutls_x509_crt_get_signature_algorithm
@@ -3397,13 +3408,13 @@ gnutls_x509_crt_get_signature_algorithm
 
  -- Function: int gnutls_x509_crt_get_signature_algorithm
           (gnutls_x509_crt_t CERT)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     This function will return a value of the 'gnutls_sign_algorithm_t'
+     This function will return a value of the `gnutls_sign_algorithm_t'
      enumeration that is the signature algorithm that has been used to
      sign this certificate.
 
-     *Returns:* a 'gnutls_sign_algorithm_t' value, or a negative error
+     *Returns:* a `gnutls_sign_algorithm_t'  value, or a negative error
      code on error.
 
 gnutls_x509_crt_get_subject
@@ -3411,15 +3422,15 @@ gnutls_x509_crt_get_subject
 
  -- Function: int gnutls_x509_crt_get_subject (gnutls_x509_crt_t CERT,
           gnutls_x509_dn_t * DN)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      DN: output variable with pointer to uint8_t DN.
 
-     Return the Certificate's Subject DN as a 'gnutls_x509_dn_t' data
-     type, that can be decoded using 'gnutls_x509_dn_get_rdn_ava()' .
+     Return the Certificate's Subject DN as a `gnutls_x509_dn_t'  data
+     type, that can be decoded using `gnutls_x509_dn_get_rdn_ava()' .
 
-     Note that 'dn' should be treated as constant.  Because it points
-     into the 'cert' object, you should not use 'dn' after 'cert' is
+     Note that  `dn' should be treated as constant. Because it points
+     into the  `cert' object, you should not use  `dn' after  `cert' is
      deallocated.
 
      *Returns:* Returns 0 on success, or an error code.
@@ -3430,10 +3441,10 @@ gnutls_x509_crt_get_subject_alt_name
  -- Function: int gnutls_x509_crt_get_subject_alt_name
           (gnutls_x509_crt_t CERT, unsigned int SEQ, void * SAN, size_t
           * SAN_SIZE, unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     SEQ: specifies the sequence number of the alt name (0 for the first
-     one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the alt name (0 for the
+     first one, 1 for the second etc.)
 
      SAN: is the place where the alternative name will be copied to
 
@@ -3446,10 +3457,10 @@ gnutls_x509_crt_get_subject_alt_name
      in the given certificate in the X509v3 Certificate Extensions.
 
      When the SAN type is otherName, it will extract the data in the
-     otherName's value field, and 'GNUTLS_SAN_OTHERNAME' is returned.
-     You may use 'gnutls_x509_crt_get_subject_alt_othername_oid()' to
+     otherName's value field, and `GNUTLS_SAN_OTHERNAME'  is returned.
+     You may use `gnutls_x509_crt_get_subject_alt_othername_oid()'  to
      get the corresponding OID and the "virtual" SAN types (e.g.,
-     'GNUTLS_SAN_OTHERNAME_XMPP' ).
+     `GNUTLS_SAN_OTHERNAME_XMPP' ).
 
      If an otherName OID is known, the data will be decoded.  Otherwise
      the returned data will be DER encoded, and you will have to decode
@@ -3457,12 +3468,12 @@ gnutls_x509_crt_get_subject_alt_name
      recognized.
 
      *Returns:* the alternative subject name type on success, one of the
-     enumerated 'gnutls_x509_subject_alt_name_t' .  It will return
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'san_size' is not large enough to
-     hold the value.  In that case 'san_size' will be updated with the
-     required size.  If the certificate does not have an Alternative
+     enumerated `gnutls_x509_subject_alt_name_t' .  It will return
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  if  `san_size' is not large enough
+     to hold the value.  In that case  `san_size' will be updated with
+     the required size.  If the certificate does not have an Alternative
      name with the specified sequence number then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
 gnutls_x509_crt_get_subject_alt_name2
 -------------------------------------
@@ -3470,10 +3481,10 @@ gnutls_x509_crt_get_subject_alt_name2
  -- Function: int gnutls_x509_crt_get_subject_alt_name2
           (gnutls_x509_crt_t CERT, unsigned int SEQ, void * SAN, size_t
           * SAN_SIZE, unsigned int * SAN_TYPE, unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     SEQ: specifies the sequence number of the alt name (0 for the first
-     one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the alt name (0 for the
+     first one, 1 for the second etc.)
 
      SAN: is the place where the alternative name will be copied to
 
@@ -3486,19 +3497,19 @@ gnutls_x509_crt_get_subject_alt_name2
      (may be null)
 
      This function will return the alternative names, contained in the
-     given certificate.  It is the same as
-     'gnutls_x509_crt_get_subject_alt_name()' except for the fact that
-     it will return the type of the alternative name in 'san_type' even
-     if the function fails for some reason (i.e.  the buffer provided is
-     not enough).
+     given certificate. It is the same as
+     `gnutls_x509_crt_get_subject_alt_name()'  except for the fact that
+     it will return the type of the alternative name in  `san_type'
+     even if the function fails for some reason (i.e.  the buffer
+     provided is not enough).
 
      *Returns:* the alternative subject name type on success, one of the
-     enumerated 'gnutls_x509_subject_alt_name_t' .  It will return
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'san_size' is not large enough to
-     hold the value.  In that case 'san_size' will be updated with the
-     required size.  If the certificate does not have an Alternative
-     name with the specified sequence number then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     enumerated `gnutls_x509_subject_alt_name_t' .  It will return
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  if  `san_size' is not large enough
+     to hold the value.  In that case  `san_size' will be updated with
+     the required size.  If the certificate does not have an
+     Alternative name with the specified sequence number then
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
 gnutls_x509_crt_get_subject_alt_othername_oid
 ---------------------------------------------
@@ -3506,10 +3517,10 @@ gnutls_x509_crt_get_subject_alt_othername_oid
  -- Function: int gnutls_x509_crt_get_subject_alt_othername_oid
           (gnutls_x509_crt_t CERT, unsigned int SEQ, void * OID, size_t
           * OID_SIZE)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
-     SEQ: specifies the sequence number of the alt name (0 for the first
-     one, 1 for the second etc.)
+     SEQ: specifies the sequence number of the alt name (0 for the
+     first one, 1 for the second etc.)
 
      OID: is the place where the otherName OID will be copied to
 
@@ -3520,30 +3531,30 @@ gnutls_x509_crt_get_subject_alt_othername_oid
      the type as an enumerated element.
 
      This function is only useful if
-     'gnutls_x509_crt_get_subject_alt_name()' returned
-     'GNUTLS_SAN_OTHERNAME' .
+     `gnutls_x509_crt_get_subject_alt_name()'  returned
+     `GNUTLS_SAN_OTHERNAME' .
 
-     If 'oid' is null then only the size will be filled.  The 'oid'
-     returned will be null terminated, although 'oid_size' will not
+     If  `oid' is null then only the size will be filled. The  `oid'
+     returned will be null terminated, although  `oid_size' will not
      account for the trailing null.
 
      *Returns:* the alternative subject name type on success, one of the
      enumerated gnutls_x509_subject_alt_name_t.  For supported OIDs, it
-     will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types, e.g.
-     'GNUTLS_SAN_OTHERNAME_XMPP' , and 'GNUTLS_SAN_OTHERNAME' for
-     unknown OIDs.  It will return 'GNUTLS_E_SHORT_MEMORY_BUFFER' if
-     'ian_size' is not large enough to hold the value.  In that case
-     'ian_size' will be updated with the required size.  If the
+     will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types,
+     e.g. `GNUTLS_SAN_OTHERNAME_XMPP' , and `GNUTLS_SAN_OTHERNAME'  for
+     unknown OIDs.  It will return `GNUTLS_E_SHORT_MEMORY_BUFFER'  if
+     `ian_size' is not large enough to hold the value.  In that case
+     `ian_size' will be updated with the required size.  If the
      certificate does not have an Alternative name with the specified
      sequence number and with the otherName type then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  is returned.
 
 gnutls_x509_crt_get_subject_key_id
 ----------------------------------
 
  -- Function: int gnutls_x509_crt_get_subject_key_id (gnutls_x509_crt_t
           CERT, void * RET, size_t * RET_SIZE, unsigned int * CRITICAL)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      RET: The place where the identifier will be copied
 
@@ -3556,8 +3567,8 @@ gnutls_x509_crt_get_subject_key_id
      identifier.  This is obtained by the X.509 Subject Key identifier
      extension field (2.5.29.14).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the extension is not
      present, otherwise a negative error value.
 
 gnutls_x509_crt_get_subject_unique_id
@@ -3579,14 +3590,14 @@ gnutls_x509_crt_get_subject_unique_id
      full subjectUniqueID, then a GNUTLS_E_SHORT_MEMORY_BUFFER error
      will be returned, and buf_size will be set to the actual length.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
 gnutls_x509_crt_get_version
 ---------------------------
 
  -- Function: int gnutls_x509_crt_get_version (gnutls_x509_crt_t CERT)
-     CERT: should contain a 'gnutls_x509_crt_t' structure
+     CERT: should contain a `gnutls_x509_crt_t'  structure
 
      This function will return the version of the specified Certificate.
 
@@ -3605,13 +3616,13 @@ gnutls_x509_crt_import
      FORMAT: One of DER or PEM
 
      This function will convert the given DER or PEM encoded Certificate
-     to the native gnutls_x509_crt_t format.  The output will be stored
-     in 'cert' .
+     to the native gnutls_x509_crt_t format. The output will be stored
+     in  `cert' .
 
      If the Certificate is PEM encoded it should have a header of "X509
      CERTIFICATE", or "CERTIFICATE".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_init
@@ -3622,7 +3633,7 @@ gnutls_x509_crt_init
 
      This function will initialize an X.509 certificate structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_list_import
@@ -3631,10 +3642,10 @@ gnutls_x509_crt_list_import
  -- Function: int gnutls_x509_crt_list_import (gnutls_x509_crt_t *
           CERTS, unsigned int * CERT_MAX, const gnutls_datum_t * DATA,
           gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
-     CERTS: The structures to store the parsed certificate.  Must not be
+     CERTS: The structures to store the parsed certificate. Must not be
      initialized.
 
-     CERT_MAX: Initially must hold the maximum number of certs.  It will
+     CERT_MAX: Initially must hold the maximum number of certs. It will
      be updated with the number of certs available.
 
      DATA: The PEM encoded certificate.
@@ -3645,15 +3656,15 @@ gnutls_x509_crt_list_import
      gnutls_certificate_import_flags.
 
      This function will convert the given PEM encoded certificate list
-     to the native gnutls_x509_crt_t format.  The output will be stored
-     in 'certs' .  They will be automatically initialized.
+     to the native gnutls_x509_crt_t format. The output will be stored
+     in  `certs' .  They will be automatically initialized.
 
-     The flag 'GNUTLS_X509_CRT_LIST_IMPORT_FAIL_IF_EXCEED' will cause
+     The flag `GNUTLS_X509_CRT_LIST_IMPORT_FAIL_IF_EXCEED'  will cause
      import to fail if the certificates in the provided buffer are more
-     than the available structures.  The
-     'GNUTLS_X509_CRT_LIST_FAIL_IF_UNSORTED' flag will cause the
-     function to fail if the provided list is not sorted from subject to
-     issuer.
+     than the available structures. The
+     `GNUTLS_X509_CRT_LIST_FAIL_IF_UNSORTED' flag will cause the
+     function to fail if the provided list is not sorted from subject
+     to issuer.
 
      If the Certificate is PEM encoded it should have a header of "X509
      CERTIFICATE", or "CERTIFICATE".
@@ -3667,7 +3678,7 @@ gnutls_x509_crt_list_import2
  -- Function: int gnutls_x509_crt_list_import2 (gnutls_x509_crt_t **
           CERTS, unsigned int * SIZE, const gnutls_datum_t * DATA,
           gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
-     CERTS: The structures to store the parsed certificate.  Must not be
+     CERTS: The structures to store the parsed certificate. Must not be
      initialized.
 
      SIZE: It will contain the size of the list.
@@ -3680,8 +3691,8 @@ gnutls_x509_crt_list_import2
      gnutls_certificate_import_flags.
 
      This function will convert the given PEM encoded certificate list
-     to the native gnutls_x509_crt_t format.  The output will be stored
-     in 'certs' which will be initialized.
+     to the native gnutls_x509_crt_t format. The output will be stored
+     in  `certs' which will be initialized.
 
      If the Certificate is PEM encoded it should have a header of "X509
      CERTIFICATE", or "CERTIFICATE".
@@ -3694,8 +3705,8 @@ gnutls_x509_crt_list_import2
 gnutls_x509_crt_list_verify
 ---------------------------
 
- -- Function: int gnutls_x509_crt_list_verify (const gnutls_x509_crt_t *
-          CERT_LIST, int CERT_LIST_LENGTH, const gnutls_x509_crt_t *
+ -- Function: int gnutls_x509_crt_list_verify (const gnutls_x509_crt_t
+          * CERT_LIST, int CERT_LIST_LENGTH, const gnutls_x509_crt_t *
           CA_LIST, int CA_LIST_LENGTH, const gnutls_x509_crl_t *
           CRL_LIST, int CRL_LIST_LENGTH, unsigned int FLAGS, unsigned
           int * VERIFY)
@@ -3711,26 +3722,27 @@ gnutls_x509_crt_list_verify
 
      CRL_LIST_LENGTH: the length of CRL list.
 
-     FLAGS: Flags that may be used to change the verification algorithm.
-     Use OR of the gnutls_certificate_verify_flags enumerations.
+     FLAGS: Flags that may be used to change the verification
+     algorithm. Use OR of the gnutls_certificate_verify_flags
+     enumerations.
 
      VERIFY: will hold the certificate verification output.
 
      This function will try to verify the given certificate list and
      return its status.  If no flags are specified (0), this function
-     will use the basicConstraints (2.5.29.19) PKIX extension.  This
+     will use the basicConstraints (2.5.29.19) PKIX extension. This
      means that only a certificate authority is allowed to sign a
      certificate.
 
      You must also check the peer's name in order to check if the
      verified certificate belongs to the actual peer.
 
-     The certificate verification output will be put in 'verify' and
+     The certificate verification output will be put in  `verify' and
      will be one or more of the gnutls_certificate_status_t enumerated
      elements bitwise or'd.  For a more detailed verification status use
-     'gnutls_x509_crt_verify()' per list element.
+     `gnutls_x509_crt_verify()'  per list element.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_print
@@ -3748,29 +3760,29 @@ gnutls_x509_crt_print
      This function will pretty print a X.509 certificate, suitable for
      display to a human.
 
-     If the format is 'GNUTLS_CRT_PRINT_FULL' then all fields of the
+     If the format is `GNUTLS_CRT_PRINT_FULL'  then all fields of the
      certificate will be output, on multiple lines.  The
-     'GNUTLS_CRT_PRINT_ONELINE' format will generate one line with some
+     `GNUTLS_CRT_PRINT_ONELINE'  format will generate one line with some
      selected fields, which is useful for logging purposes.
 
-     The output 'out' needs to be deallocated using 'gnutls_free()' .
+     The output  `out' needs to be deallocated using `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_activation_time
 -----------------------------------
 
- -- Function: int gnutls_x509_crt_set_activation_time (gnutls_x509_crt_t
-          CERT, time_t ACT_TIME)
-     CERT: a certificate of type 'gnutls_x509_crt_t'
+ -- Function: int gnutls_x509_crt_set_activation_time
+          (gnutls_x509_crt_t CERT, time_t ACT_TIME)
+     CERT: a certificate of type `gnutls_x509_crt_t'
 
      ACT_TIME: The actual time
 
      This function will set the time this Certificate was or will be
      activated.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_authority_info_access
@@ -3780,21 +3792,21 @@ gnutls_x509_crt_set_authority_info_access
           (gnutls_x509_crt_t CRT, int WHAT, gnutls_datum_t * DATA)
      CRT: Holds the certificate
 
-     WHAT: what data to get, a 'gnutls_info_access_what_t' type.
+     WHAT: what data to get, a `gnutls_info_access_what_t'  type.
 
-     DATA: output data to be freed with 'gnutls_free()' .
+     DATA: output data to be freed with `gnutls_free()' .
 
      This function sets the Authority Information Access (AIA)
      extension, see RFC 5280 section 4.2.2.1 for more information.
 
-     The type of data stored in 'data' is specified via 'what' which
-     should be 'gnutls_info_access_what_t' values.
+     The type of data stored in  `data' is specified via  `what' which
+     should be `gnutls_info_access_what_t'  values.
 
-     If 'what' is 'GNUTLS_IA_OCSP_URI' , 'data' will hold the OCSP URI.
-     If 'what' is 'GNUTLS_IA_CAISSUERS_URI' , 'data' will hold the
-     caIssuers URI.
+     If  `what' is `GNUTLS_IA_OCSP_URI' ,  `data' will hold the OCSP
+     URI.  If  `what' is `GNUTLS_IA_CAISSUERS_URI' ,  `data' will hold
+     the caIssuers URI.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -3804,7 +3816,7 @@ gnutls_x509_crt_set_authority_key_id
 
  -- Function: int gnutls_x509_crt_set_authority_key_id
           (gnutls_x509_crt_t CERT, const void * ID, size_t ID_SIZE)
-     CERT: a certificate of type 'gnutls_x509_crt_t'
+     CERT: a certificate of type `gnutls_x509_crt_t'
 
      ID: The key ID
 
@@ -3814,7 +3826,7 @@ gnutls_x509_crt_set_authority_key_id
      extension.  Only the keyIdentifier field can be set with this
      function.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_basic_constraints
@@ -3823,18 +3835,18 @@ gnutls_x509_crt_set_basic_constraints
  -- Function: int gnutls_x509_crt_set_basic_constraints
           (gnutls_x509_crt_t CRT, unsigned int CA, int
           PATHLENCONSTRAINT)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
-     CA: true(1) or false(0).  Depending on the Certificate authority
+     CA: true(1) or false(0). Depending on the Certificate authority
      status.
 
-     PATHLENCONSTRAINT: non-negative error codes indicate maximum length
-     of path, and negative error codes indicate that the
+     PATHLENCONSTRAINT: non-negative error codes indicate maximum
+     length of path, and negative error codes indicate that the
      pathLenConstraints field should not be present.
 
      This function will set the basicConstraints certificate extension.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_ca_status
@@ -3842,25 +3854,25 @@ gnutls_x509_crt_set_ca_status
 
  -- Function: int gnutls_x509_crt_set_ca_status (gnutls_x509_crt_t CRT,
           unsigned int CA)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
-     CA: true(1) or false(0).  Depending on the Certificate authority
+     CA: true(1) or false(0). Depending on the Certificate authority
      status.
 
      This function will set the basicConstraints certificate extension.
-     Use 'gnutls_x509_crt_set_basic_constraints()' if you want to
+     Use `gnutls_x509_crt_set_basic_constraints()'  if you want to
      control the pathLenConstraint field too.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_crl_dist_points
 -----------------------------------
 
- -- Function: int gnutls_x509_crt_set_crl_dist_points (gnutls_x509_crt_t
-          CRT, gnutls_x509_subject_alt_name_t TYPE, const void *
-          DATA_STRING, unsigned int REASON_FLAGS)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+ -- Function: int gnutls_x509_crt_set_crl_dist_points
+          (gnutls_x509_crt_t CRT, gnutls_x509_subject_alt_name_t TYPE,
+          const void * DATA_STRING, unsigned int REASON_FLAGS)
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      TYPE: is one of the gnutls_x509_subject_alt_name_t enumerations
 
@@ -3871,7 +3883,7 @@ gnutls_x509_crt_set_crl_dist_points
      This function will set the CRL distribution points certificate
      extension.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_crl_dist_points2
@@ -3881,7 +3893,7 @@ gnutls_x509_crt_set_crl_dist_points2
           (gnutls_x509_crt_t CRT, gnutls_x509_subject_alt_name_t TYPE,
           const void * DATA, unsigned int DATA_SIZE, unsigned int
           REASON_FLAGS)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      TYPE: is one of the gnutls_x509_subject_alt_name_t enumerations
 
@@ -3894,7 +3906,7 @@ gnutls_x509_crt_set_crl_dist_points2
      This function will set the CRL distribution points certificate
      extension.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.6.0
@@ -3904,7 +3916,7 @@ gnutls_x509_crt_set_crq
 
  -- Function: int gnutls_x509_crt_set_crq (gnutls_x509_crt_t CRT,
           gnutls_x509_crq_t CRQ)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      CRQ: holds a certificate request
 
@@ -3912,7 +3924,7 @@ gnutls_x509_crt_set_crq
      the extensions from the given certificate request to the
      certificate.  Only RSA keys are currently supported.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_crq_extensions
@@ -3920,14 +3932,14 @@ gnutls_x509_crt_set_crq_extensions
 
  -- Function: int gnutls_x509_crt_set_crq_extensions (gnutls_x509_crt_t
           CRT, gnutls_x509_crq_t CRQ)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      CRQ: holds a certificate request
 
      This function will set extensions from the given request to the
      certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.8.0
@@ -3937,7 +3949,7 @@ gnutls_x509_crt_set_dn
 
  -- Function: int gnutls_x509_crt_set_dn (gnutls_x509_crt_t CRT, const
           char * DN, const char** ERR)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      DN: a comma separated DN string (RFC4514)
 
@@ -3946,7 +3958,7 @@ gnutls_x509_crt_set_dn
      This function will set the DN on the provided certificate.  The
      input string should be plain ASCII or UTF-8 encoded.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_dn_by_oid
@@ -3955,7 +3967,7 @@ gnutls_x509_crt_set_dn_by_oid
  -- Function: int gnutls_x509_crt_set_dn_by_oid (gnutls_x509_crt_t CRT,
           const char * OID, unsigned int RAW_FLAG, const void * NAME,
           unsigned int SIZEOF_NAME)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      OID: holds an Object Identifier in a null terminated string
 
@@ -3963,33 +3975,33 @@ gnutls_x509_crt_set_dn_by_oid
 
      NAME: a pointer to the name
 
-     SIZEOF_NAME: holds the size of 'name'
+     SIZEOF_NAME: holds the size of  `name'
 
      This function will set the part of the name of the Certificate
      subject, specified by the given OID. The input string should be
      ASCII or UTF-8 encoded.
 
      Some helper macros with popular OIDs can be found in gnutls/x509.h
-     With this function you can only set the known OIDs.  You can test
-     for known OIDs using 'gnutls_x509_dn_oid_known()' .  For OIDs that
+     With this function you can only set the known OIDs. You can test
+     for known OIDs using `gnutls_x509_dn_oid_known()' . For OIDs that
      are not known (by gnutls) you should properly DER encode your data,
-     and call this function with 'raw_flag' set.
+     and call this function with  `raw_flag' set.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_expiration_time
 -----------------------------------
 
- -- Function: int gnutls_x509_crt_set_expiration_time (gnutls_x509_crt_t
-          CERT, time_t EXP_TIME)
-     CERT: a certificate of type 'gnutls_x509_crt_t'
+ -- Function: int gnutls_x509_crt_set_expiration_time
+          (gnutls_x509_crt_t CERT, time_t EXP_TIME)
+     CERT: a certificate of type `gnutls_x509_crt_t'
 
      EXP_TIME: The actual time
 
      This function will set the time this Certificate will expire.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_extension_by_oid
@@ -3998,13 +4010,13 @@ gnutls_x509_crt_set_extension_by_oid
  -- Function: int gnutls_x509_crt_set_extension_by_oid
           (gnutls_x509_crt_t CRT, const char * OID, const void * BUF,
           size_t SIZEOF_BUF, unsigned int CRITICAL)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      OID: holds an Object Identified in null terminated string
 
      BUF: a pointer to a DER encoded data
 
-     SIZEOF_BUF: holds the size of 'buf'
+     SIZEOF_BUF: holds the size of  `buf'
 
      CRITICAL: should be non-zero if the extension is to be marked as
      critical
@@ -4013,7 +4025,7 @@ gnutls_x509_crt_set_extension_by_oid
      the certificate.  The extension data should be binary data DER
      encoded.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_issuer_dn
@@ -4021,7 +4033,7 @@ gnutls_x509_crt_set_issuer_dn
 
  -- Function: int gnutls_x509_crt_set_issuer_dn (gnutls_x509_crt_t CRT,
           const char * DN, const char** ERR)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      DN: a comma separated DN string (RFC4514)
 
@@ -4030,7 +4042,7 @@ gnutls_x509_crt_set_issuer_dn
      This function will set the DN on the provided certificate.  The
      input string should be plain ASCII or UTF-8 encoded.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_issuer_dn_by_oid
@@ -4039,7 +4051,7 @@ gnutls_x509_crt_set_issuer_dn_by_oid
  -- Function: int gnutls_x509_crt_set_issuer_dn_by_oid
           (gnutls_x509_crt_t CRT, const char * OID, unsigned int
           RAW_FLAG, const void * NAME, unsigned int SIZEOF_NAME)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      OID: holds an Object Identifier in a null terminated string
 
@@ -4047,23 +4059,23 @@ gnutls_x509_crt_set_issuer_dn_by_oid
 
      NAME: a pointer to the name
 
-     SIZEOF_NAME: holds the size of 'name'
+     SIZEOF_NAME: holds the size of  `name'
 
      This function will set the part of the name of the Certificate
-     issuer, specified by the given OID. The input string should be
+     issuer, specified by the given OID.  The input string should be
      ASCII or UTF-8 encoded.
 
      Some helper macros with popular OIDs can be found in gnutls/x509.h
-     With this function you can only set the known OIDs.  You can test
-     for known OIDs using 'gnutls_x509_dn_oid_known()' .  For OIDs that
+     With this function you can only set the known OIDs. You can test
+     for known OIDs using `gnutls_x509_dn_oid_known()' . For OIDs that
      are not known (by gnutls) you should properly DER encode your data,
-     and call this function with 'raw_flag' set.
+     and call this function with  `raw_flag' set.
 
      Normally you do not need to call this function, since the signing
      operation will copy the signer's name as the issuer of the
      certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_key
@@ -4071,22 +4083,24 @@ gnutls_x509_crt_set_key
 
  -- Function: int gnutls_x509_crt_set_key (gnutls_x509_crt_t CRT,
           gnutls_x509_privkey_t KEY)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      KEY: holds a private key
 
-     This function will set the public parameters from the given private
-     key to the certificate.  Only RSA keys are currently supported.
+     This function will set the public parameters from the given
+     private key to the certificate. Only RSA keys are currently
+     supported.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_key_purpose_oid
 -----------------------------------
 
- -- Function: int gnutls_x509_crt_set_key_purpose_oid (gnutls_x509_crt_t
-          CERT, const void * OID, unsigned int CRITICAL)
-     CERT: a certificate of type 'gnutls_x509_crt_t'
+ -- Function: int gnutls_x509_crt_set_key_purpose_oid
+          (gnutls_x509_crt_t CERT, const void * OID, unsigned int
+          CRITICAL)
+     CERT: a certificate of type `gnutls_x509_crt_t'
 
      OID: a pointer to a null terminated string that holds the OID
 
@@ -4098,7 +4112,7 @@ gnutls_x509_crt_set_key_purpose_oid
 
      Subsequent calls to this function will append OIDs to the OID list.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error code is returned.
 
 gnutls_x509_crt_set_key_usage
@@ -4106,13 +4120,13 @@ gnutls_x509_crt_set_key_usage
 
  -- Function: int gnutls_x509_crt_set_key_usage (gnutls_x509_crt_t CRT,
           unsigned int USAGE)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      USAGE: an ORed sequence of the GNUTLS_KEY_* elements.
 
      This function will set the keyUsage certificate extension.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_pin_function
@@ -4127,12 +4141,12 @@ gnutls_x509_crt_set_pin_function
      USERDATA: data associated with the callback
 
      This function will set a callback function to be used when it is
-     required to access a protected object.  This function overrides the
-     global function set using 'gnutls_pkcs11_set_pin_function()' .
+     required to access a protected object. This function overrides the
+     global function set using `gnutls_pkcs11_set_pin_function()' .
 
-     Note that this callback is currently used only during the import of
-     a PKCS '11' certificate with 'gnutls_x509_crt_import_pkcs11_url()'
-     .
+     Note that this callback is currently used only during the import
+     of a PKCS `11'  certificate with
+     `gnutls_x509_crt_import_pkcs11_url()' .
 
      *Since:* 3.1.0
 
@@ -4151,10 +4165,10 @@ gnutls_x509_crt_set_policy
      (2.5.29.32).  Multiple calls to this function append a new policy.
 
      Note the maximum text size for the qualifier
-     'GNUTLS_X509_QUALIFIER_NOTICE' is 200 characters.  This function
-     will fail with 'GNUTLS_E_INVALID_REQUEST' if this is exceeded.
+     `GNUTLS_X509_QUALIFIER_NOTICE' is 200 characters. This function
+     will fail with `GNUTLS_E_INVALID_REQUEST' if this is exceeded.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.5
@@ -4164,7 +4178,7 @@ gnutls_x509_crt_set_private_key_usage_period
 
  -- Function: int gnutls_x509_crt_set_private_key_usage_period
           (gnutls_x509_crt_t CRT, time_t ACTIVATION, time_t EXPIRATION)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      ACTIVATION: The activation time
 
@@ -4173,7 +4187,7 @@ gnutls_x509_crt_set_private_key_usage_period
      This function will set the private key usage period extension
      (2.5.29.16).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_proxy
@@ -4182,21 +4196,21 @@ gnutls_x509_crt_set_proxy
  -- Function: int gnutls_x509_crt_set_proxy (gnutls_x509_crt_t CRT, int
           PATHLENCONSTRAINT, const char * POLICYLANGUAGE, const char *
           POLICY, size_t SIZEOF_POLICY)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
-     PATHLENCONSTRAINT: non-negative error codes indicate maximum length
-     of path, and negative error codes indicate that the
+     PATHLENCONSTRAINT: non-negative error codes indicate maximum
+     length of path, and negative error codes indicate that the
      pathLenConstraints field should not be present.
 
-     POLICYLANGUAGE: OID describing the language of 'policy' .
+     POLICYLANGUAGE: OID describing the language of  `policy' .
 
-     POLICY: uint8_t byte array with policy language, can be 'NULL'
+     POLICY: uint8_t byte array with policy language, can be `NULL'
 
-     SIZEOF_POLICY: size of 'policy' .
+     SIZEOF_POLICY: size of  `policy' .
 
      This function will set the proxyCertInfo extension.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_proxy_dn
@@ -4211,18 +4225,19 @@ gnutls_x509_crt_set_proxy_dn
 
      RAW_FLAG: must be 0, or 1 if the CN is DER encoded
 
-     NAME: a pointer to the CN name, may be NULL (but MUST then be added
-     later)
+     NAME: a pointer to the CN name, may be NULL (but MUST then be
+     added later)
 
-     SIZEOF_NAME: holds the size of 'name'
+     SIZEOF_NAME: holds the size of  `name'
 
-     This function will set the subject in 'crt' to the end entity's
-     'eecrt' subject name, and add a single Common Name component 'name'
-     of size 'sizeof_name' .  This corresponds to the required proxy
-     certificate naming style.  Note that if 'name' is 'NULL' , you MUST
-     set it later by using 'gnutls_x509_crt_set_dn_by_oid()' or similar.
+     This function will set the subject in  `crt' to the end entity's
+     `eecrt' subject name, and add a single Common Name component
+     `name' of size  `sizeof_name' .  This corresponds to the required
+     proxy certificate naming style.  Note that if  `name' is `NULL' ,
+     you MUST set it later by using `gnutls_x509_crt_set_dn_by_oid()'
+     or similar.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_serial
@@ -4230,7 +4245,7 @@ gnutls_x509_crt_set_serial
 
  -- Function: int gnutls_x509_crt_set_serial (gnutls_x509_crt_t CERT,
           const void * SERIAL, size_t SERIAL_SIZE)
-     CERT: a certificate of type 'gnutls_x509_crt_t'
+     CERT: a certificate of type `gnutls_x509_crt_t'
 
      SERIAL: The serial number
 
@@ -4238,13 +4253,12 @@ gnutls_x509_crt_set_serial
 
      This function will set the X.509 certificate's serial number.
      While the serial number is an integer, it is often handled as an
-     opaque field by several CAs.  For this reason this function accepts
-     any kind of data as a serial number.  To be consistent with the
-     X.509/PKIX specifications the provided 'serial' should be a
-     big-endian positive number (i.e.  it's leftmost bit should be
-     zero).
+     opaque field by several CAs. For this reason this function accepts
+     any kind of data as a serial number. To be consistent with the
+     X.509/PKIX specifications the provided  `serial' should be a
+     big-endian positive number (i.e. it's leftmost bit should be zero).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_subject_alt_name
@@ -4253,7 +4267,7 @@ gnutls_x509_crt_set_subject_alt_name
  -- Function: int gnutls_x509_crt_set_subject_alt_name
           (gnutls_x509_crt_t CRT, gnutls_x509_subject_alt_name_t TYPE,
           const void * DATA, unsigned int DATA_SIZE, unsigned int FLAGS)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      TYPE: is one of the gnutls_x509_subject_alt_name_t enumerations
 
@@ -4261,13 +4275,13 @@ gnutls_x509_crt_set_subject_alt_name
 
      DATA_SIZE: The size of data to be set
 
-     FLAGS: GNUTLS_FSAN_SET to clear previous data or GNUTLS_FSAN_APPEND
-     to append.
+     FLAGS: GNUTLS_FSAN_SET to clear previous data or
+     GNUTLS_FSAN_APPEND to append.
 
      This function will set the subject alternative name certificate
-     extension.  It can set the following types:
+     extension. It can set the following types:
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.6.0
@@ -4278,20 +4292,20 @@ gnutls_x509_crt_set_subject_alternative_name
  -- Function: int gnutls_x509_crt_set_subject_alternative_name
           (gnutls_x509_crt_t CRT, gnutls_x509_subject_alt_name_t TYPE,
           const char * DATA_STRING)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      TYPE: is one of the gnutls_x509_subject_alt_name_t enumerations
 
      DATA_STRING: The data to be set, a (0) terminated string
 
      This function will set the subject alternative name certificate
-     extension.  This function assumes that data can be expressed as a
+     extension. This function assumes that data can be expressed as a
      null terminated string.
 
      The name of the function is unfortunate since it is incosistent
-     with 'gnutls_x509_crt_get_subject_alt_name()' .
+     with `gnutls_x509_crt_get_subject_alt_name()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_subject_key_id
@@ -4299,7 +4313,7 @@ gnutls_x509_crt_set_subject_key_id
 
  -- Function: int gnutls_x509_crt_set_subject_key_id (gnutls_x509_crt_t
           CERT, const void * ID, size_t ID_SIZE)
-     CERT: a certificate of type 'gnutls_x509_crt_t'
+     CERT: a certificate of type `gnutls_x509_crt_t'
 
      ID: The key ID
 
@@ -4308,7 +4322,7 @@ gnutls_x509_crt_set_subject_key_id
      This function will set the X.509 certificate's subject key ID
      extension.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_version
@@ -4316,9 +4330,9 @@ gnutls_x509_crt_set_version
 
  -- Function: int gnutls_x509_crt_set_version (gnutls_x509_crt_t CRT,
           unsigned int VERSION)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
-     VERSION: holds the version number.  For X.509v1 certificates must
+     VERSION: holds the version number. For X.509v1 certificates must
      be 1.
 
      This function will set the version of the certificate.  This must
@@ -4327,10 +4341,10 @@ gnutls_x509_crt_set_version
 
      To create well-formed certificates, you must specify version 3 if
      you use any certificate extensions.  Extensions are created by
-     functions such as 'gnutls_x509_crt_set_subject_alt_name()' or
-     'gnutls_x509_crt_set_key_usage()' .
+     functions such as `gnutls_x509_crt_set_subject_alt_name()' or
+     `gnutls_x509_crt_set_key_usage()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_sign
@@ -4338,16 +4352,16 @@ gnutls_x509_crt_sign
 
  -- Function: int gnutls_x509_crt_sign (gnutls_x509_crt_t CRT,
           gnutls_x509_crt_t ISSUER, gnutls_x509_privkey_t ISSUER_KEY)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      ISSUER: is the certificate of the certificate issuer
 
      ISSUER_KEY: holds the issuer's private key
 
-     This function is the same a 'gnutls_x509_crt_sign2()' with no
+     This function is the same a `gnutls_x509_crt_sign2()'  with no
      flags, and SHA1 as the hash algorithm.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_sign2
@@ -4356,13 +4370,13 @@ gnutls_x509_crt_sign2
  -- Function: int gnutls_x509_crt_sign2 (gnutls_x509_crt_t CRT,
           gnutls_x509_crt_t ISSUER, gnutls_x509_privkey_t ISSUER_KEY,
           gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      ISSUER: is the certificate of the certificate issuer
 
      ISSUER_KEY: holds the issuer's private key
 
-     DIG: The message digest to use, 'GNUTLS_DIG_SHA1' is a safe choice
+     DIG: The message digest to use, `GNUTLS_DIG_SHA1'  is a safe choice
 
      FLAGS: must be 0
 
@@ -4372,7 +4386,7 @@ gnutls_x509_crt_sign2
      This must be the last step in a certificate generation since all
      the previously set parameters are now signed.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_verify
@@ -4387,16 +4401,17 @@ gnutls_x509_crt_verify
 
      CA_LIST_LENGTH: holds the number of CA certificate in CA_list
 
-     FLAGS: Flags that may be used to change the verification algorithm.
-     Use OR of the gnutls_certificate_verify_flags enumerations.
+     FLAGS: Flags that may be used to change the verification
+     algorithm. Use OR of the gnutls_certificate_verify_flags
+     enumerations.
 
      VERIFY: will hold the certificate verification output.
 
      This function will try to verify the given certificate and return
-     its status.  Note that a verification error does not imply a
-     negative return status.  In that case the 'verify' status is set.
+     its status. Note that a verification error does not imply a
+     negative return status. In that case the  `verify' status is set.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_dn_deinit
@@ -4406,7 +4421,7 @@ gnutls_x509_dn_deinit
      DN: a DN uint8_t object pointer.
 
      This function deallocates the DN object as returned by
-     'gnutls_x509_dn_import()' .
+     `gnutls_x509_dn_import()' .
 
      *Since:* 2.4.0
 
@@ -4418,7 +4433,7 @@ gnutls_x509_dn_export
           OUTPUT_DATA_SIZE)
      DN: Holds the uint8_t DN object
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUTPUT_DATA: will contain a DN PEM or DER encoded
 
@@ -4428,13 +4443,13 @@ gnutls_x509_dn_export
      This function will export the DN to DER or PEM format.
 
      If the buffer provided is not long enough to hold the output, then
-     * 'output_data_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
+     * `output_data_size' is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
      will be returned.
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      NAME".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_dn_export2
@@ -4444,18 +4459,18 @@ gnutls_x509_dn_export2
           gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
      DN: Holds the uint8_t DN object
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUT: will contain a DN PEM or DER encoded
 
      This function will export the DN to DER or PEM format.
 
-     The output buffer is allocated using 'gnutls_malloc()' .
+     The output buffer is allocated using `gnutls_malloc()' .
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      NAME".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.3
@@ -4473,21 +4488,21 @@ gnutls_x509_dn_get_rdn_ava
 
      AVA: Pointer to structure which will hold output information.
 
-     Get pointers to data within the DN. The format of the 'ava'
+     Get pointers to data within the DN. The format of the  `ava'
      structure is shown below.
 
      struct gnutls_x509_ava_st { gnutls_datum_t oid; gnutls_datum_t
      value; unsigned long value_tag; };
 
      The X.509 distinguished name is a sequence of sequences of strings
-     and this is what the 'irdn' and 'iava' indexes model.
+     and this is what the  `irdn' and  `iava' indexes model.
 
-     Note that 'ava' will contain pointers into the 'dn' structure which
-     in turns points to the original certificate.  Thus you should not
-     modify any data or deallocate any of those.
+     Note that  `ava' will contain pointers into the  `dn' structure
+     which in turns points to the original certificate. Thus you should
+     not modify any data or deallocate any of those.
 
      This is a low-level function that requires the caller to do the
-     value conversions when necessary (e.g.  from UCS-2).
+     value conversions when necessary (e.g. from UCS-2).
 
      *Returns:* Returns 0 on success, or an error code.
 
@@ -4501,11 +4516,11 @@ gnutls_x509_dn_import
      DATA: should contain a DER encoded RDN sequence
 
      This function parses an RDN sequence and stores the result to a
-     'gnutls_x509_dn_t' structure.  The structure must have been
-     initialized with 'gnutls_x509_dn_init()' .  You may use
-     'gnutls_x509_dn_get_rdn_ava()' to decode the DN.
+     `gnutls_x509_dn_t'  structure. The structure must have been
+     initialized with `gnutls_x509_dn_init()' . You may use
+     `gnutls_x509_dn_get_rdn_ava()'  to decode the DN.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.4.0
@@ -4516,12 +4531,12 @@ gnutls_x509_dn_init
  -- Function: int gnutls_x509_dn_init (gnutls_x509_dn_t * DN)
      DN: the object to be initialized
 
-     This function initializes a 'gnutls_x509_dn_t' structure.
+     This function initializes a `gnutls_x509_dn_t'  structure.
 
      The object returned must be deallocated using
-     'gnutls_x509_dn_deinit()' .
+     `gnutls_x509_dn_deinit()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.4.0
@@ -4532,11 +4547,11 @@ gnutls_x509_dn_oid_known
  -- Function: int gnutls_x509_dn_oid_known (const char * OID)
      OID: holds an Object Identifier in a null terminated string
 
-     This function will inform about known DN OIDs.  This is useful
-     since functions like 'gnutls_x509_crt_set_dn_by_oid()' use the
-     information on known OIDs to properly encode their input.  Object
+     This function will inform about known DN OIDs. This is useful since
+     functions like `gnutls_x509_crt_set_dn_by_oid()'  use the
+     information on known OIDs to properly encode their input. Object
      Identifiers that are not known are not encoded by these functions,
-     and their input is stored directly into the ASN.1 structure.  In
+     and their input is stored directly into the ASN.1 structure. In
      that case of unknown OIDs, you have the responsibility of DER
      encoding your data.
 
@@ -4552,7 +4567,7 @@ gnutls_x509_dn_oid_name
      FLAGS: 0 or GNUTLS_X509_DN_OID_*
 
      This function will return the name of a known DN OID. If
-     'GNUTLS_X509_DN_OID_RETURN_OID' is specified this function will
+     `GNUTLS_X509_DN_OID_RETURN_OID'  is specified this function will
      return the given OID if no descriptive name has been found.
 
      *Returns:* A null terminated string or NULL otherwise.
@@ -4567,8 +4582,8 @@ gnutls_x509_policy_release
      POLICY: a certificate policy
 
      This function will deinitialize all memory associated with the
-     provided 'policy' .  The policy is allocated using
-     'gnutls_x509_crt_get_policy()' .
+     provided  `policy' . The policy is allocated using
+     `gnutls_x509_crt_get_policy()' .
 
      *Since:* 3.1.5
 
@@ -4582,9 +4597,9 @@ gnutls_x509_privkey_cpy
      SRC: The source key
 
      This function will copy a private key from source to destination
-     key.  Destination has to be initialized.
+     key. Destination has to be initialized.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_deinit
@@ -4599,12 +4614,12 @@ gnutls_x509_privkey_deinit
 gnutls_x509_privkey_export
 --------------------------
 
- -- Function: int gnutls_x509_privkey_export (gnutls_x509_privkey_t KEY,
-          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
-          OUTPUT_DATA_SIZE)
+ -- Function: int gnutls_x509_privkey_export (gnutls_x509_privkey_t
+          KEY, gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t
+          * OUTPUT_DATA_SIZE)
      KEY: Holds the key
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUTPUT_DATA: will contain a private key PEM or DER encoded
 
@@ -4616,13 +4631,13 @@ gnutls_x509_privkey_export
      the same format with the parameters used by openssl.
 
      If the buffer provided is not long enough to hold the output, then
-     * 'output_data_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
+     * `output_data_size' is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
      will be returned.
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      RSA PRIVATE KEY".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_export2
@@ -4632,7 +4647,7 @@ gnutls_x509_privkey_export2
           KEY, gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
      KEY: Holds the key
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUT: will contain a private key PEM or DER encoded
 
@@ -4640,12 +4655,12 @@ gnutls_x509_privkey_export2
      RSA keys, or an integer sequence for DSA keys.  The DSA keys are in
      the same format with the parameters used by openssl.
 
-     The output buffer is allocated using 'gnutls_malloc()' .
+     The output buffer is allocated using `gnutls_malloc()' .
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      RSA PRIVATE KEY".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      Since 3.1.3
@@ -4659,7 +4674,7 @@ gnutls_x509_privkey_export2_pkcs8
           OUT)
      KEY: Holds the key
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      PASSWORD: the password that will be used to encrypt the key.
 
@@ -4668,14 +4683,14 @@ gnutls_x509_privkey_export2_pkcs8
      OUT: will contain a private key PEM or DER encoded
 
      This function will export the private key to a PKCS8 structure.
-     Both RSA and DSA keys can be exported.  For DSA keys we use PKCS
-     '11' definitions.  If the flags do not specify the encryption
+     Both RSA and DSA keys can be exported. For DSA keys we use PKCS
+     `11'  definitions. If the flags do not specify the encryption
      cipher, then the default 3DES (PBES2) will be used.
 
-     The 'password' can be either ASCII or UTF-8 in the default PBES2
+     The  `password' can be either ASCII or UTF-8 in the default PBES2
      encryption schemas, or ASCII for the PKCS12 schemas.
 
-     The output buffer is allocated using 'gnutls_malloc()' .
+     The output buffer is allocated using `gnutls_malloc()' .
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      ENCRYPTED PRIVATE KEY" or "BEGIN PRIVATE KEY" if encryption is not
@@ -4690,9 +4705,9 @@ gnutls_x509_privkey_export_dsa_raw
 ----------------------------------
 
  -- Function: int gnutls_x509_privkey_export_dsa_raw
-          (gnutls_x509_privkey_t KEY, gnutls_datum_t * P, gnutls_datum_t
-          * Q, gnutls_datum_t * G, gnutls_datum_t * Y, gnutls_datum_t *
-          X)
+          (gnutls_x509_privkey_t KEY, gnutls_datum_t * P,
+          gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y,
+          gnutls_datum_t * X)
      KEY: a structure that holds the DSA parameters
 
      P: will hold the p
@@ -4705,11 +4720,11 @@ gnutls_x509_privkey_export_dsa_raw
 
      X: will hold the x
 
-     This function will export the DSA private key's parameters found in
-     the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     This function will export the DSA private key's parameters found
+     in the given structure. The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_export_ecc_raw
@@ -4728,11 +4743,11 @@ gnutls_x509_privkey_export_ecc_raw
 
      K: will hold the private key
 
-     This function will export the ECC private key's parameters found in
-     the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     This function will export the ECC private key's parameters found
+     in the given structure. The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -4742,11 +4757,11 @@ gnutls_x509_privkey_export_pkcs8
 
  -- Function: int gnutls_x509_privkey_export_pkcs8
           (gnutls_x509_privkey_t KEY, gnutls_x509_crt_fmt_t FORMAT,
-          const char * PASSWORD, unsigned int FLAGS, void * OUTPUT_DATA,
-          size_t * OUTPUT_DATA_SIZE)
+          const char * PASSWORD, unsigned int FLAGS, void *
+          OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
      KEY: Holds the key
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      PASSWORD: the password that will be used to encrypt the key.
 
@@ -4758,11 +4773,11 @@ gnutls_x509_privkey_export_pkcs8
      replaced by the actual size of parameters)
 
      This function will export the private key to a PKCS8 structure.
-     Both RSA and DSA keys can be exported.  For DSA keys we use PKCS
-     '11' definitions.  If the flags do not specify the encryption
+     Both RSA and DSA keys can be exported. For DSA keys we use PKCS
+     `11'  definitions. If the flags do not specify the encryption
      cipher, then the default 3DES (PBES2) will be used.
 
-     The 'password' can be either ASCII or UTF-8 in the default PBES2
+     The  `password' can be either ASCII or UTF-8 in the default PBES2
      encryption schemas, or ASCII for the PKCS12 schemas.
 
      If the buffer provided is not long enough to hold the output, then
@@ -4780,9 +4795,9 @@ gnutls_x509_privkey_export_rsa_raw
 ----------------------------------
 
  -- Function: int gnutls_x509_privkey_export_rsa_raw
-          (gnutls_x509_privkey_t KEY, gnutls_datum_t * M, gnutls_datum_t
-          * E, gnutls_datum_t * D, gnutls_datum_t * P, gnutls_datum_t *
-          Q, gnutls_datum_t * U)
+          (gnutls_x509_privkey_t KEY, gnutls_datum_t * M,
+          gnutls_datum_t * E, gnutls_datum_t * D, gnutls_datum_t * P,
+          gnutls_datum_t * Q, gnutls_datum_t * U)
      KEY: a structure that holds the rsa parameters
 
      M: will hold the modulus
@@ -4797,21 +4812,21 @@ gnutls_x509_privkey_export_rsa_raw
 
      U: will hold the coefficient
 
-     This function will export the RSA private key's parameters found in
-     the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     This function will export the RSA private key's parameters found
+     in the given structure. The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_export_rsa_raw2
 -----------------------------------
 
  -- Function: int gnutls_x509_privkey_export_rsa_raw2
-          (gnutls_x509_privkey_t KEY, gnutls_datum_t * M, gnutls_datum_t
-          * E, gnutls_datum_t * D, gnutls_datum_t * P, gnutls_datum_t *
-          Q, gnutls_datum_t * U, gnutls_datum_t * E1, gnutls_datum_t *
-          E2)
+          (gnutls_x509_privkey_t KEY, gnutls_datum_t * M,
+          gnutls_datum_t * E, gnutls_datum_t * D, gnutls_datum_t * P,
+          gnutls_datum_t * Q, gnutls_datum_t * U, gnutls_datum_t * E1,
+          gnutls_datum_t * E2)
      KEY: a structure that holds the rsa parameters
 
      M: will hold the modulus
@@ -4830,11 +4845,11 @@ gnutls_x509_privkey_export_rsa_raw2
 
      E2: will hold e2 = d mod (q-1)
 
-     This function will export the RSA private key's parameters found in
-     the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     This function will export the RSA private key's parameters found
+     in the given structure. The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4848,7 +4863,7 @@ gnutls_x509_privkey_fix
      This function will recalculate the secondary parameters in a key.
      In RSA keys, this can be the coefficient and exponent1,2.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_generate
@@ -4857,29 +4872,29 @@ gnutls_x509_privkey_generate
  -- Function: int gnutls_x509_privkey_generate (gnutls_x509_privkey_t
           KEY, gnutls_pk_algorithm_t ALGO, unsigned int BITS, unsigned
           int FLAGS)
-     KEY: should contain a 'gnutls_x509_privkey_t' structure
+     KEY: should contain a `gnutls_x509_privkey_t'  structure
 
-     ALGO: is one of the algorithms in 'gnutls_pk_algorithm_t' .
+     ALGO: is one of the algorithms in `gnutls_pk_algorithm_t' .
 
      BITS: the size of the modulus
 
      FLAGS: unused for now.  Must be 0.
 
-     This function will generate a random private key.  Note that this
+     This function will generate a random private key. Note that this
      function must be called on an empty private key.
 
      Do not set the number of bits directly, use
-     'gnutls_sec_param_to_pk_bits()' .
+     `gnutls_sec_param_to_pk_bits()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_get_key_id
 ------------------------------
 
  -- Function: int gnutls_x509_privkey_get_key_id (gnutls_x509_privkey_t
-          KEY, unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
-          OUTPUT_DATA_SIZE)
+          KEY, unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t
+          * OUTPUT_DATA_SIZE)
      KEY: Holds the key
 
      FLAGS: should be 0 for now
@@ -4890,15 +4905,15 @@ gnutls_x509_privkey_get_key_id
      replaced by the actual size of parameters)
 
      This function will return a unique ID that depends on the public
-     key parameters.  This ID can be used in checking whether a
+     key parameters. This ID can be used in checking whether a
      certificate corresponds to the given key.
 
      If the buffer provided is not long enough to hold the output, then
-     * 'output_data_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
+     * `output_data_size' is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
      will be returned.  The output will normally be a SHA-1 hash output,
      which is 20 bytes.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_get_pk_algorithm
@@ -4906,12 +4921,12 @@ gnutls_x509_privkey_get_pk_algorithm
 
  -- Function: int gnutls_x509_privkey_get_pk_algorithm
           (gnutls_x509_privkey_t KEY)
-     KEY: should contain a 'gnutls_x509_privkey_t' structure
+     KEY: should contain a `gnutls_x509_privkey_t'  structure
 
      This function will return the public key algorithm of a private
      key.
 
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
      success, or a negative error code on error.
 
 gnutls_x509_privkey_get_pk_algorithm2
@@ -4919,21 +4934,22 @@ gnutls_x509_privkey_get_pk_algorithm2
 
  -- Function: int gnutls_x509_privkey_get_pk_algorithm2
           (gnutls_x509_privkey_t KEY, unsigned int * BITS)
-     KEY: should contain a 'gnutls_x509_privkey_t' structure
+     KEY: should contain a `gnutls_x509_privkey_t'  structure
 
      BITS: The number of bits in the public key algorithm
 
      This function will return the public key algorithm of a private
      key.
 
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
      success, or a negative error code on error.
 
 gnutls_x509_privkey_import
 --------------------------
 
- -- Function: int gnutls_x509_privkey_import (gnutls_x509_privkey_t KEY,
-          const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
+ -- Function: int gnutls_x509_privkey_import (gnutls_x509_privkey_t
+          KEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t
+          FORMAT)
      KEY: The structure to store the parsed key
 
      DATA: The DER or PEM encoded certificate.
@@ -4941,14 +4957,14 @@ gnutls_x509_privkey_import
      FORMAT: One of DER or PEM
 
      This function will convert the given DER or PEM encoded key to the
-     native 'gnutls_x509_privkey_t' format.  The output will be stored
-     in 'key' .
+     native `gnutls_x509_privkey_t'  format. The output will be stored
+     in  `key' .
 
      If the key is PEM encoded it should have a header that contains
-     "PRIVATE KEY". Note that this function falls back to PKCS '8'
+     "PRIVATE KEY". Note that this function falls back to PKCS `8'
      decoding without password, if the default format fails to import.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_import2
@@ -4968,16 +4984,16 @@ gnutls_x509_privkey_import2
      FLAGS: an ORed sequence of gnutls_pkcs_encrypt_flags_t
 
      This function will import the given DER or PEM encoded key, to the
-     native 'gnutls_x509_privkey_t' format, irrespective of the input
-     format.  The input format is auto-detected.
+     native `gnutls_x509_privkey_t'  format, irrespective of the input
+     format. The input format is auto-detected.
 
-     The supported formats are basic unencrypted key, PKCS8, PKCS12, and
-     the openssl format.
+     The supported formats are basic unencrypted key, PKCS8, PKCS12,
+     and the openssl format.
 
      If the provided key is encrypted but no password was given, then
-     'GNUTLS_E_DECRYPTION_FAILED' is returned.
+     `GNUTLS_E_DECRYPTION_FAILED'  is returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_import_dsa_raw
@@ -5000,10 +5016,10 @@ gnutls_x509_privkey_import_dsa_raw
      X: holds the x
 
      This function will convert the given DSA raw parameters to the
-     native 'gnutls_x509_privkey_t' format.  The output will be stored
-     in 'key' .
+     native `gnutls_x509_privkey_t'  format.  The output will be stored
+     in  `key' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_import_ecc_raw
@@ -5024,10 +5040,10 @@ gnutls_x509_privkey_import_ecc_raw
      K: holds the k
 
      This function will convert the given elliptic curve parameters to
-     the native 'gnutls_x509_privkey_t' format.  The output will be
-     stored in 'key' .
+     the native `gnutls_x509_privkey_t'  format.  The output will be
+     stored in  `key' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -5036,8 +5052,8 @@ gnutls_x509_privkey_import_openssl
 ----------------------------------
 
  -- Function: int gnutls_x509_privkey_import_openssl
-          (gnutls_x509_privkey_t KEY, const gnutls_datum_t * DATA, const
-          char* PASSWORD)
+          (gnutls_x509_privkey_t KEY, const gnutls_datum_t * DATA,
+          const char* PASSWORD)
      KEY: The structure to store the parsed key
 
      DATA: The DER or PEM encoded key.
@@ -5045,15 +5061,15 @@ gnutls_x509_privkey_import_openssl
      PASSWORD: the password to decrypt the key (if it is encrypted).
 
      This function will convert the given PEM encrypted to the native
-     gnutls_x509_privkey_t format.  The output will be stored in 'key' .
+     gnutls_x509_privkey_t format. The output will be stored in  `key' .
 
-     The 'password' should be in ASCII. If the password is not provided
-     or wrong then 'GNUTLS_E_DECRYPTION_FAILED' will be returned.
+     The  `password' should be in ASCII. If the password is not provided
+     or wrong then `GNUTLS_E_DECRYPTION_FAILED'  will be returned.
 
      If the Certificate is PEM encoded it should have a header of
      "PRIVATE KEY" and the "DEK-Info" header.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_import_pkcs8
@@ -5074,23 +5090,23 @@ gnutls_x509_privkey_import_pkcs8
      FLAGS: 0 if encrypted or GNUTLS_PKCS_PLAIN if not encrypted.
 
      This function will convert the given DER or PEM encoded PKCS8 2.0
-     encrypted key to the native gnutls_x509_privkey_t format.  The
-     output will be stored in 'key' .  Both RSA and DSA keys can be
+     encrypted key to the native gnutls_x509_privkey_t format. The
+     output will be stored in  `key' .  Both RSA and DSA keys can be
      imported, and flags can only be used to indicate an unencrypted
      key.
 
-     The 'password' can be either ASCII or UTF-8 in the default PBES2
+     The  `password' can be either ASCII or UTF-8 in the default PBES2
      encryption schemas, or ASCII for the PKCS12 schemas.
 
      If the Certificate is PEM encoded it should have a header of
-     "ENCRYPTED PRIVATE KEY", or "PRIVATE KEY". You only need to specify
-     the flags if the key is DER encoded, since in that case the
-     encryption status cannot be auto-detected.
+     "ENCRYPTED PRIVATE KEY", or "PRIVATE KEY". You only need to
+     specify the flags if the key is DER encoded, since in that case
+     the encryption status cannot be auto-detected.
 
-     If the 'GNUTLS_PKCS_PLAIN' flag is specified and the supplied data
-     are encrypted then 'GNUTLS_E_DECRYPTION_FAILED' is returned.
+     If the `GNUTLS_PKCS_PLAIN'  flag is specified and the supplied data
+     are encrypted then `GNUTLS_E_DECRYPTION_FAILED'  is returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_import_rsa_raw
@@ -5116,10 +5132,10 @@ gnutls_x509_privkey_import_rsa_raw
      U: holds the coefficient
 
      This function will convert the given RSA raw parameters to the
-     native 'gnutls_x509_privkey_t' format.  The output will be stored
-     in 'key' .
+     native `gnutls_x509_privkey_t'  format.  The output will be stored
+     in  `key' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_import_rsa_raw2
@@ -5150,10 +5166,10 @@ gnutls_x509_privkey_import_rsa_raw2
      E2: holds e2 = d mod (q-1)
 
      This function will convert the given RSA raw parameters to the
-     native 'gnutls_x509_privkey_t' format.  The output will be stored
-     in 'key' .
+     native `gnutls_x509_privkey_t'  format.  The output will be stored
+     in  `key' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_init
@@ -5164,7 +5180,7 @@ gnutls_x509_privkey_init
 
      This function will initialize an private key structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_privkey_sec_param
@@ -5178,7 +5194,7 @@ gnutls_x509_privkey_sec_param
      this private key.
 
      *Returns:* On success, a valid security parameter is returned
-     otherwise 'GNUTLS_SEC_PARAM_UNKNOWN' is returned.
+     otherwise `GNUTLS_SEC_PARAM_UNKNOWN'  is returned.
 
      *Since:* 2.12.0
 
@@ -5187,11 +5203,11 @@ gnutls_x509_privkey_verify_params
 
  -- Function: int gnutls_x509_privkey_verify_params
           (gnutls_x509_privkey_t KEY)
-     KEY: should contain a 'gnutls_x509_privkey_t' structure
+     KEY: should contain a `gnutls_x509_privkey_t'  structure
 
      This function will verify the private key parameters.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_rdn_get
@@ -5203,14 +5219,14 @@ gnutls_x509_rdn_get
 
      BUF: a pointer to a structure to hold the peer's name
 
-     BUF_SIZE: holds the size of 'buf'
+     BUF_SIZE: holds the size of  `buf'
 
      This function will return the name of the given RDN sequence.  The
      name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as described in
      RFC4514.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned and * 'buf_size' is
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  is returned and * `buf_size' is
      updated if the provided buffer is not long enough, otherwise a
      negative error value.
 
@@ -5218,27 +5234,27 @@ gnutls_x509_rdn_get_by_oid
 --------------------------
 
  -- Function: int gnutls_x509_rdn_get_by_oid (const gnutls_datum_t *
-          IDN, const char * OID, int INDX, unsigned int RAW_FLAG, void *
-          BUF, size_t * BUF_SIZE)
+          IDN, const char * OID, int INDX, unsigned int RAW_FLAG, void
+          * BUF, size_t * BUF_SIZE)
      IDN: should contain a DER encoded RDN sequence
 
      OID: an Object Identifier
 
      INDX: In case multiple same OIDs exist in the RDN indicates which
-     to send.  Use 0 for the first one.
+     to send. Use 0 for the first one.
 
      RAW_FLAG: If non-zero then the raw DER data are returned.
 
      BUF: a pointer to a structure to hold the peer's name
 
-     BUF_SIZE: holds the size of 'buf'
+     BUF_SIZE: holds the size of  `buf'
 
      This function will return the name of the given Object identifier,
-     of the RDN sequence.  The name will be encoded using the rules from
-     RFC4514.
+     of the RDN sequence.  The name will be encoded using the rules
+     from RFC4514.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned and * 'buf_size' is
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  is returned and * `buf_size' is
      updated if the provided buffer is not long enough, otherwise a
      negative error value.
 
@@ -5249,17 +5265,17 @@ gnutls_x509_rdn_get_oid
           int INDX, void * BUF, size_t * BUF_SIZE)
      IDN: should contain a DER encoded RDN sequence
 
-     INDX: Indicates which OID to return.  Use 0 for the first one.
+     INDX: Indicates which OID to return. Use 0 for the first one.
 
      BUF: a pointer to a structure to hold the peer's name OID
 
-     BUF_SIZE: holds the size of 'buf'
+     BUF_SIZE: holds the size of  `buf'
 
      This function will return the specified Object identifier, of the
      RDN sequence.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned, or
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned and * 'buf_size' is
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned, or
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  is returned and * `buf_size' is
      updated if the provided buffer is not long enough, otherwise a
      negative error value.
 
@@ -5280,7 +5296,7 @@ gnutls_x509_trust_list_add_cas
      FLAGS: should be 0.
 
      This function will add the given certificate authorities to the
-     trusted list.  The list of CAs must not be deinitialized during
+     trusted list. The list of CAs must not be deinitialized during
      this structure's lifetime.
 
      *Returns:* The number of added elements is returned.
@@ -5307,11 +5323,11 @@ gnutls_x509_trust_list_add_crls
      specifies GNUTLS_TL_VERIFY_CRL
 
      This function will add the given certificate revocation lists to
-     the trusted list.  The list of CRLs must not be deinitialized
+     the trusted list. The list of CRLs must not be deinitialized
      during this structure's lifetime.
 
      This function must be called after
-     'gnutls_x509_trust_list_add_cas()' to allow verifying the CRLs for
+     `gnutls_x509_trust_list_add_cas()' to allow verifying the CRLs for
      validity.
 
      *Returns:* The number of added elements is returned.
@@ -5335,9 +5351,9 @@ gnutls_x509_trust_list_add_named_crt
      FLAGS: should be 0.
 
      This function will add the given certificate to the trusted list
-     and associate it with a name.  The certificate will not be be used
-     for verification with 'gnutls_x509_trust_list_verify_crt()' but
-     only with 'gnutls_x509_trust_list_verify_named_crt()' .
+     and associate it with a name. The certificate will not be be used
+     for verification with `gnutls_x509_trust_list_verify_crt()' but
+     only with `gnutls_x509_trust_list_verify_named_crt()' .
 
      In principle this function can be used to set individual "server"
      certificates that are trusted by the user for that specific server
@@ -5346,7 +5362,7 @@ gnutls_x509_trust_list_add_named_crt
      The certificate must not be deinitialized during the lifetime of
      the trusted list.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -5365,11 +5381,11 @@ gnutls_x509_trust_list_add_system_trust
      GNUTLS_TL_VERIFY_CRL
 
      This function adds the system's default trusted certificate
-     authorities to the trusted list.  Note that on unsupported system
-     this function returns 'GNUTLS_E_UNIMPLEMENTED_FEATURE' .
+     authorities to the trusted list. Note that on unsupported system
+     this function returns `GNUTLS_E_UNIMPLEMENTED_FEATURE' .
 
-     *Returns:* The number of added elements or a negative error code on
-     error.
+     *Returns:* The number of added elements or a negative error code
+     on error.
 
      *Since:* 3.1
 
@@ -5394,7 +5410,7 @@ gnutls_x509_trust_list_add_trust_file
      GNUTLS_TL_VERIFY_CRL
 
      This function will add the given certificate authorities to the
-     trusted list.  pkcs11 URLs are also accepted, instead of files, by
+     trusted list. pkcs11 URLs are also accepted, instead of files, by
      this function.
 
      *Returns:* The number of added elements is returned.
@@ -5452,15 +5468,14 @@ gnutls_x509_trust_list_get_issuer
 
      CERT: is the certificate to find issuer for
 
-     ISSUER: Will hold the issuer if any.  Should be treated as
-     constant.
+     ISSUER: Will hold the issuer if any. Should be treated as constant.
 
      FLAGS: Use (0).
 
      This function will attempt to find the issuer of the given
      certificate.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -5472,12 +5487,12 @@ gnutls_x509_trust_list_init
           * LIST, unsigned int SIZE)
      LIST: The structure to be initialized
 
-     SIZE: The size of the internal hash table.  Use (0) for default
+     SIZE: The size of the internal hash table. Use (0) for default
      size.
 
      This function will initialize an X.509 trust list structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -5514,7 +5529,7 @@ gnutls_x509_trust_list_remove_trust_file
      TYPE: The format of the certificates
 
      This function will add the given certificate authorities to the
-     trusted list.  pkcs11 URLs are also accepted, instead of files, by
+     trusted list. pkcs11 URLs are also accepted, instead of files, by
      this function.
 
      *Returns:* The number of added elements is returned.
@@ -5544,31 +5559,32 @@ gnutls_x509_trust_list_verify_crt
 ---------------------------------
 
  -- Function: int gnutls_x509_trust_list_verify_crt
-          (gnutls_x509_trust_list_t LIST, gnutls_x509_crt_t * CERT_LIST,
-          unsigned int CERT_LIST_SIZE, unsigned int FLAGS, unsigned int
-          * VERIFY, gnutls_verify_output_function FUNC)
+          (gnutls_x509_trust_list_t LIST, gnutls_x509_crt_t *
+          CERT_LIST, unsigned int CERT_LIST_SIZE, unsigned int FLAGS,
+          unsigned int * VERIFY, gnutls_verify_output_function FUNC)
      LIST: The structure of the list
 
      CERT_LIST: is the certificate list to be verified
 
      CERT_LIST_SIZE: is the certificate list size
 
-     FLAGS: Flags that may be used to change the verification algorithm.
-     Use OR of the gnutls_certificate_verify_flags enumerations.
+     FLAGS: Flags that may be used to change the verification
+     algorithm. Use OR of the gnutls_certificate_verify_flags
+     enumerations.
 
      VERIFY: will hold the certificate verification output.
 
-     FUNC: If non-null will be called on each chain element verification
-     with the output.
+     FUNC: If non-null will be called on each chain element
+     verification with the output.
 
      This function will try to verify the given certificate and return
-     its status.  The 'verify' parameter will hold an OR'ed sequence of
-     'gnutls_certificate_status_t' flags.
+     its status. The  `verify' parameter will hold an OR'ed sequence of
+     `gnutls_certificate_status_t'  flags.
 
      *Limitation:* Pathlen constraints or key usage flags are not
      consulted.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -5588,23 +5604,3339 @@ gnutls_x509_trust_list_verify_named_crt
 
      NAME_SIZE: is the certificate's name size
 
-     FLAGS: Flags that may be used to change the verification algorithm.
-     Use OR of the gnutls_certificate_verify_flags enumerations.
+     FLAGS: Flags that may be used to change the verification
+     algorithm. Use OR of the gnutls_certificate_verify_flags
+     enumerations.
 
      VERIFY: will hold the certificate verification output.
 
-     FUNC: If non-null will be called on each chain element verification
-     with the output.
+     FUNC: If non-null will be called on each chain element
+     verification with the output.
 
      This function will try to find a certificate that is associated
      with the provided name -see
-     'gnutls_x509_trust_list_add_named_crt()' .  If a match is found the
-     certificate is considered valid.  In addition to that this function
-     will also check CRLs.  The 'verify' parameter will hold an OR'ed
-     sequence of 'gnutls_certificate_status_t' flags.
+     `gnutls_x509_trust_list_add_named_crt()' . If a match is found the
+     certificate is considered valid. In addition to that this function
+     will also check CRLs. The  `verify' parameter will hold an OR'ed
+     sequence of `gnutls_certificate_status_t'  flags.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
 
+
+File: gnutls.info,  Node: OCSP API,  Next: OpenPGP API,  Prev: X509 certificate API,  Up: API reference
+
+E.5 OCSP API
+============
+
+The following functions are for OCSP certificate status checking.
+Their prototypes lie in `gnutls/ocsp.h'.
+
+gnutls_ocsp_req_add_cert
+------------------------
+
+ -- Function: int gnutls_ocsp_req_add_cert (gnutls_ocsp_req_t REQ,
+          gnutls_digest_algorithm_t DIGEST, gnutls_x509_crt_t ISSUER,
+          gnutls_x509_crt_t CERT)
+     REQ: should contain a `gnutls_ocsp_req_t'  structure
+
+     DIGEST: hash algorithm, a `gnutls_digest_algorithm_t'  value
+
+     ISSUER: issuer of  `subject' certificate
+
+     CERT: certificate to request status for
+
+     This function will add another request to the OCSP request for a
+     particular certificate.  The issuer name hash, issuer key hash, and
+     serial number fields is populated as follows.  The issuer name and
+     the serial number is taken from  `cert' .  The issuer key is taken
+     from  `issuer' .  The hashed values will be hashed using the
+     `digest' algorithm, normally `GNUTLS_DIG_SHA1' .
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_ocsp_req_add_cert_id
+---------------------------
+
+ -- Function: int gnutls_ocsp_req_add_cert_id (gnutls_ocsp_req_t REQ,
+          gnutls_digest_algorithm_t DIGEST, const gnutls_datum_t *
+          ISSUER_NAME_HASH, const gnutls_datum_t * ISSUER_KEY_HASH,
+          const gnutls_datum_t * SERIAL_NUMBER)
+     REQ: should contain a `gnutls_ocsp_req_t'  structure
+
+     DIGEST: hash algorithm, a `gnutls_digest_algorithm_t'  value
+
+     ISSUER_NAME_HASH: hash of issuer's DN
+
+     ISSUER_KEY_HASH: hash of issuer's public key
+
+     SERIAL_NUMBER: serial number of certificate to check
+
+     This function will add another request to the OCSP request for a
+     particular certificate having the issuer name hash of
+     `issuer_name_hash' and issuer key hash of  `issuer_key_hash' (both
+     hashed using  `digest' ) and serial number  `serial_number' .
+
+     The information needed corresponds to the CertID structure:
+
+     <informalexample><programlisting> CertID          ::=     SEQUENCE
+     { hashAlgorithm       AlgorithmIdentifier, issuerNameHash
+     OCTET STRING, - Hash of Issuer's DN issuerKeyHash       OCTET
+     STRING, - Hash of Issuers public key serialNumber
+     CertificateSerialNumber } </programlisting></informalexample>
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_ocsp_req_deinit
+----------------------
+
+ -- Function: void gnutls_ocsp_req_deinit (gnutls_ocsp_req_t REQ)
+     REQ: The structure to be deinitialized
+
+     This function will deinitialize a OCSP request structure.
+
+gnutls_ocsp_req_export
+----------------------
+
+ -- Function: int gnutls_ocsp_req_export (gnutls_ocsp_req_t REQ,
+          gnutls_datum_t * DATA)
+     REQ: Holds the OCSP request
+
+     DATA: newly allocate buffer holding DER encoded OCSP request
+
+     This function will export the OCSP request to DER format.
+
+     *Returns:* In case of failure a negative error code will be
+     returned, and 0 on success.
+
+gnutls_ocsp_req_get_cert_id
+---------------------------
+
+ -- Function: int gnutls_ocsp_req_get_cert_id (gnutls_ocsp_req_t REQ,
+          unsigned INDX, gnutls_digest_algorithm_t * DIGEST,
+          gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t *
+          ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER)
+     REQ: should contain a `gnutls_ocsp_req_t'  structure
+
+     INDX: Specifies which extension OID to get. Use (0) to get the
+     first one.
+
+     DIGEST: output variable with `gnutls_digest_algorithm_t'  hash
+     algorithm
+
+     ISSUER_NAME_HASH: output buffer with hash of issuer's DN
+
+     ISSUER_KEY_HASH: output buffer with hash of issuer's public key
+
+     SERIAL_NUMBER: output buffer with serial number of certificate to
+     check
+
+     This function will return the certificate information of the
+     `indx' 'ed request in the OCSP request.  The information returned
+     corresponds to the CertID structure:
+
+     <informalexample><programlisting> CertID          ::=     SEQUENCE
+     { hashAlgorithm       AlgorithmIdentifier, issuerNameHash
+     OCTET STRING, - Hash of Issuer's DN issuerKeyHash       OCTET
+     STRING, - Hash of Issuers public key serialNumber
+     CertificateSerialNumber } </programlisting></informalexample>
+
+     Each of the pointers to output variables may be NULL to indicate
+     that the caller is not interested in that value.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.  If you have reached
+     the last CertID available `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
+     will be returned.
+
+gnutls_ocsp_req_get_extension
+-----------------------------
+
+ -- Function: int gnutls_ocsp_req_get_extension (gnutls_ocsp_req_t REQ,
+          unsigned INDX, gnutls_datum_t * OID, unsigned int * CRITICAL,
+          gnutls_datum_t * DATA)
+     REQ: should contain a `gnutls_ocsp_req_t'  structure
+
+     INDX: Specifies which extension OID to get. Use (0) to get the
+     first one.
+
+     OID: will hold newly allocated buffer with OID of extension, may
+     be NULL
+
+     CRITICAL: output variable with critical flag, may be NULL.
+
+     DATA: will hold newly allocated buffer with extension data, may be
+     NULL
+
+     This function will return all information about the requested
+     extension in the OCSP request.  The information returned is the
+     OID, the critical flag, and the data itself.  The extension OID
+     will be stored as a string.  Any of  `oid' ,  `critical' , and
+     `data' may be NULL which means that the caller is not interested
+     in getting that information back.
+
+     The caller needs to deallocate memory by calling `gnutls_free()'
+     on  `oid' ->data and  `data' ->data.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.  If you have reached
+     the last extension available
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be returned.
+
+gnutls_ocsp_req_get_nonce
+-------------------------
+
+ -- Function: int gnutls_ocsp_req_get_nonce (gnutls_ocsp_req_t REQ,
+          unsigned int * CRITICAL, gnutls_datum_t * NONCE)
+     REQ: should contain a `gnutls_ocsp_req_t'  structure
+
+     CRITICAL: whether nonce extension is marked critical, or NULL
+
+     NONCE: will hold newly allocated buffer with nonce data
+
+     This function will return the OCSP request nonce extension data.
+
+     The caller needs to deallocate memory by calling `gnutls_free()'
+     on  `nonce' ->data.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_ocsp_req_get_version
+---------------------------
+
+ -- Function: int gnutls_ocsp_req_get_version (gnutls_ocsp_req_t REQ)
+     REQ: should contain a `gnutls_ocsp_req_t'  structure
+
+     This function will return the version of the OCSP request.
+     Typically this is always 1 indicating version 1.
+
+     *Returns:* version of OCSP request, or a negative error code on
+     error.
+
+gnutls_ocsp_req_import
+----------------------
+
+ -- Function: int gnutls_ocsp_req_import (gnutls_ocsp_req_t REQ, const
+          gnutls_datum_t * DATA)
+     REQ: The structure to store the parsed request.
+
+     DATA: DER encoded OCSP request.
+
+     This function will convert the given DER encoded OCSP request to
+     the native `gnutls_ocsp_req_t'  format. The output will be stored
+     in  `req' .
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_req_init
+--------------------
+
+ -- Function: int gnutls_ocsp_req_init (gnutls_ocsp_req_t * REQ)
+     REQ: The structure to be initialized
+
+     This function will initialize an OCSP request structure.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_req_print
+---------------------
+
+ -- Function: int gnutls_ocsp_req_print (gnutls_ocsp_req_t REQ,
+          gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)
+     REQ: The structure to be printed
+
+     FORMAT: Indicate the format to use
+
+     OUT: Newly allocated datum with (0) terminated string.
+
+     This function will pretty print a OCSP request, suitable for
+     display to a human.
+
+     If the format is `GNUTLS_OCSP_PRINT_FULL'  then all fields of the
+     request will be output, on multiple lines.
+
+     The output  `out' ->data needs to be deallocate using
+     `gnutls_free()' .
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_req_randomize_nonce
+-------------------------------
+
+ -- Function: int gnutls_ocsp_req_randomize_nonce (gnutls_ocsp_req_t
+          REQ)
+     REQ: should contain a `gnutls_ocsp_req_t'  structure
+
+     This function will add or update an nonce extension to the OCSP
+     request with a newly generated random value.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_ocsp_req_set_extension
+-----------------------------
+
+ -- Function: int gnutls_ocsp_req_set_extension (gnutls_ocsp_req_t REQ,
+          const char * OID, unsigned int CRITICAL, const gnutls_datum_t
+          * DATA)
+     REQ: should contain a `gnutls_ocsp_req_t'  structure
+
+     OID: buffer with OID of extension as a string.
+
+     CRITICAL: critical flag, normally false.
+
+     DATA: the extension data
+
+     This function will add an extension to the OCSP request.  Calling
+     this function multiple times for the same OID will overwrite values
+     from earlier calls.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_ocsp_req_set_nonce
+-------------------------
+
+ -- Function: int gnutls_ocsp_req_set_nonce (gnutls_ocsp_req_t REQ,
+          unsigned int CRITICAL, const gnutls_datum_t * NONCE)
+     REQ: should contain a `gnutls_ocsp_req_t'  structure
+
+     CRITICAL: critical flag, normally false.
+
+     NONCE: the nonce data
+
+     This function will add an nonce extension to the OCSP request.
+     Calling this function multiple times will overwrite values from
+     earlier calls.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_ocsp_resp_check_crt
+--------------------------
+
+ -- Function: int gnutls_ocsp_resp_check_crt (gnutls_ocsp_resp_t RESP,
+          unsigned int INDX, gnutls_x509_crt_t CRT)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     INDX: Specifies response number to get. Use (0) to get the first
+     one.
+
+     CRT: The certificate to check
+
+     This function will check whether the OCSP response is about the
+     provided certificate.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+     *Since:* 3.1.3
+
+gnutls_ocsp_resp_deinit
+-----------------------
+
+ -- Function: void gnutls_ocsp_resp_deinit (gnutls_ocsp_resp_t RESP)
+     RESP: The structure to be deinitialized
+
+     This function will deinitialize a OCSP response structure.
+
+gnutls_ocsp_resp_export
+-----------------------
+
+ -- Function: int gnutls_ocsp_resp_export (gnutls_ocsp_resp_t RESP,
+          gnutls_datum_t * DATA)
+     RESP: Holds the OCSP response
+
+     DATA: newly allocate buffer holding DER encoded OCSP response
+
+     This function will export the OCSP response to DER format.
+
+     *Returns:* In case of failure a negative error code will be
+     returned, and 0 on success.
+
+gnutls_ocsp_resp_get_certs
+--------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_certs (gnutls_ocsp_resp_t RESP,
+          gnutls_x509_crt_t ** CERTS, size_t * NCERTS)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     CERTS: newly allocated array with `gnutls_x509_crt_t'  certificates
+
+     NCERTS: output variable with number of allocated certs.
+
+     This function will extract the X.509 certificates found in the
+     Basic OCSP Response.  The  `certs' output variable will hold a
+     newly allocated zero-terminated array with X.509 certificates.
+
+     Every certificate in the array needs to be de-allocated with
+     `gnutls_x509_crt_deinit()'  and the array itself must be freed
+     using `gnutls_free()' .
+
+     Both the  `certs' and  `ncerts' variables may be NULL.  Then the
+     function will work as normal but will not return the NULL:d
+     information.  This can be used to get the number of certificates
+     only, or to just get the certificate array without its size.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_resp_get_extension
+------------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_extension (gnutls_ocsp_resp_t
+          RESP, unsigned INDX, gnutls_datum_t * OID, unsigned int *
+          CRITICAL, gnutls_datum_t * DATA)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     INDX: Specifies which extension OID to get. Use (0) to get the
+     first one.
+
+     OID: will hold newly allocated buffer with OID of extension, may
+     be NULL
+
+     CRITICAL: output variable with critical flag, may be NULL.
+
+     DATA: will hold newly allocated buffer with extension data, may be
+     NULL
+
+     This function will return all information about the requested
+     extension in the OCSP response.  The information returned is the
+     OID, the critical flag, and the data itself.  The extension OID
+     will be stored as a string.  Any of  `oid' ,  `critical' , and
+     `data' may be NULL which means that the caller is not interested
+     in getting that information back.
+
+     The caller needs to deallocate memory by calling `gnutls_free()'
+     on  `oid' ->data and  `data' ->data.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.  If you have reached
+     the last extension available
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be returned.
+
+gnutls_ocsp_resp_get_nonce
+--------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_nonce (gnutls_ocsp_resp_t RESP,
+          unsigned int * CRITICAL, gnutls_datum_t * NONCE)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     CRITICAL: whether nonce extension is marked critical
+
+     NONCE: will hold newly allocated buffer with nonce data
+
+     This function will return the Basic OCSP Response nonce extension
+     data.
+
+     The caller needs to deallocate memory by calling `gnutls_free()'
+     on  `nonce' ->data.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_ocsp_resp_get_produced
+-----------------------------
+
+ -- Function: time_t gnutls_ocsp_resp_get_produced (gnutls_ocsp_resp_t
+          RESP)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     This function will return the time when the OCSP response was
+     signed.
+
+     *Returns:* signing time, or (time_t)-1 on error.
+
+gnutls_ocsp_resp_get_responder
+------------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_responder (gnutls_ocsp_resp_t
+          RESP, gnutls_datum_t * DN)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     DN: newly allocated buffer with name
+
+     This function will extract the name of the Basic OCSP Response in
+     the provided buffer. The name will be in the form
+     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC2253. The output string
+     will be ASCII or UTF-8 encoded, depending on the certificate data.
+
+     The caller needs to deallocate memory by calling `gnutls_free()'
+     on  `dn' ->data.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_ocsp_resp_get_response
+-----------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_response (gnutls_ocsp_resp_t
+          RESP, gnutls_datum_t * RESPONSE_TYPE_OID, gnutls_datum_t *
+          RESPONSE)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     RESPONSE_TYPE_OID: newly allocated output buffer with response
+     type OID
+
+     RESPONSE: newly allocated output buffer with DER encoded response
+
+     This function will extract the response type OID in and the
+     response data from an OCSP response.  Normally the
+     `response_type_oid' is always "1.3.6.1.5.5.7.48.1.1" which means
+     the  `response' should be decoded as a Basic OCSP Response, but
+     technically other response types could be used.
+
+     This function is typically only useful when you want to extract the
+     response type OID of an response for diagnostic purposes.
+     Otherwise `gnutls_ocsp_resp_import()'  will decode the basic OCSP
+     response part and the caller need not worry about that aspect.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_resp_get_signature
+------------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_signature (gnutls_ocsp_resp_t
+          RESP, gnutls_datum_t * SIG)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     SIG: newly allocated output buffer with signature data
+
+     This function will extract the signature field of a OCSP response.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_resp_get_signature_algorithm
+----------------------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_signature_algorithm
+          (gnutls_ocsp_resp_t RESP)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     This function will return a value of the `gnutls_sign_algorithm_t'
+     enumeration that is the signature algorithm that has been used to
+     sign the OCSP response.
+
+     *Returns:* a `gnutls_sign_algorithm_t'  value, or a negative error
+     code on error.
+
+gnutls_ocsp_resp_get_single
+---------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_single (gnutls_ocsp_resp_t RESP,
+          unsigned INDX, gnutls_digest_algorithm_t * DIGEST,
+          gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t *
+          ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER, unsigned int
+          * CERT_STATUS, time_t * THIS_UPDATE, time_t * NEXT_UPDATE,
+          time_t * REVOCATION_TIME, unsigned int * REVOCATION_REASON)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     INDX: Specifies response number to get. Use (0) to get the first
+     one.
+
+     DIGEST: output variable with `gnutls_digest_algorithm_t'  hash
+     algorithm
+
+     ISSUER_NAME_HASH: output buffer with hash of issuer's DN
+
+     ISSUER_KEY_HASH: output buffer with hash of issuer's public key
+
+     SERIAL_NUMBER: output buffer with serial number of certificate to
+     check
+
+     CERT_STATUS: a certificate status, a `gnutls_ocsp_cert_status_t'
+     enum.
+
+     THIS_UPDATE: time at which the status is known to be correct.
+
+     NEXT_UPDATE: when newer information will be available, or
+     (time_t)-1 if unspecified
+
+     REVOCATION_TIME: when  `cert_status' is `GNUTLS_OCSP_CERT_REVOKED'
+     , holds time of revocation.
+
+     REVOCATION_REASON: revocation reason, a `gnutls_x509_crl_reason_t'
+     enum.
+
+     This function will return the certificate information of the
+     `indx' 'ed response in the Basic OCSP Response  `resp' .  The
+     information returned corresponds to the OCSP SingleResponse
+     structure except the final singleExtensions.
+
+     Each of the pointers to output variables may be NULL to indicate
+     that the caller is not interested in that value.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.  If you have reached
+     the last CertID available `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
+     will be returned.
+
+gnutls_ocsp_resp_get_status
+---------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_status (gnutls_ocsp_resp_t RESP)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     This function will return the status of a OCSP response, an
+     `gnutls_ocsp_resp_status_t'  enumeration.
+
+     *Returns:* status of OCSP request as a `gnutls_ocsp_resp_status_t'
+     , or a negative error code on error.
+
+gnutls_ocsp_resp_get_version
+----------------------------
+
+ -- Function: int gnutls_ocsp_resp_get_version (gnutls_ocsp_resp_t RESP)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     This function will return the version of the Basic OCSP Response.
+     Typically this is always 1 indicating version 1.
+
+     *Returns:* version of Basic OCSP response, or a negative error code
+     on error.
+
+gnutls_ocsp_resp_import
+-----------------------
+
+ -- Function: int gnutls_ocsp_resp_import (gnutls_ocsp_resp_t RESP,
+          const gnutls_datum_t * DATA)
+     RESP: The structure to store the parsed response.
+
+     DATA: DER encoded OCSP response.
+
+     This function will convert the given DER encoded OCSP response to
+     the native `gnutls_ocsp_resp_t'  format.  It also decodes the Basic
+     OCSP Response part, if any.  The output will be stored in  `resp' .
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_resp_init
+---------------------
+
+ -- Function: int gnutls_ocsp_resp_init (gnutls_ocsp_resp_t * RESP)
+     RESP: The structure to be initialized
+
+     This function will initialize an OCSP response structure.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_resp_print
+----------------------
+
+ -- Function: int gnutls_ocsp_resp_print (gnutls_ocsp_resp_t RESP,
+          gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)
+     RESP: The structure to be printed
+
+     FORMAT: Indicate the format to use
+
+     OUT: Newly allocated datum with (0) terminated string.
+
+     This function will pretty print a OCSP response, suitable for
+     display to a human.
+
+     If the format is `GNUTLS_OCSP_PRINT_FULL'  then all fields of the
+     response will be output, on multiple lines.
+
+     The output  `out' ->data needs to be deallocate using
+     `gnutls_free()' .
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_resp_verify
+-----------------------
+
+ -- Function: int gnutls_ocsp_resp_verify (gnutls_ocsp_resp_t RESP,
+          gnutls_x509_trust_list_t TRUSTLIST, unsigned int * VERIFY,
+          unsigned int FLAGS)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     TRUSTLIST: trust anchors as a `gnutls_x509_trust_list_t'  structure
+
+     VERIFY: output variable with verification status, an
+     `gnutls_ocsp_cert_status_t'
+
+     FLAGS: verification flags, 0 for now.
+
+     Verify signature of the Basic OCSP Response against the public key
+     in the certificate of a trusted signer.  The  `trustlist' should be
+     populated with trust anchors.  The function will extract the signer
+     certificate from the Basic OCSP Response and will verify it against
+     the  `trustlist' .  A trusted signer is a certificate that is
+     either in  `trustlist' , or it is signed directly by a certificate
+     in  `trustlist' and has the id-ad-ocspSigning Extended Key Usage
+     bit set.
+
+     The output  `verify' variable will hold verification status codes
+     (e.g., `GNUTLS_OCSP_VERIFY_SIGNER_NOT_FOUND' ,
+     `GNUTLS_OCSP_VERIFY_INSECURE_ALGORITHM' ) which are only valid if
+     the function returned `GNUTLS_E_SUCCESS' .
+
+     Note that the function returns `GNUTLS_E_SUCCESS'  even when
+     verification failed.  The caller must always inspect the  `verify'
+     variable to find out the verification status.
+
+     The  `flags' variable should be 0 for now.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_ocsp_resp_verify_direct
+------------------------------
+
+ -- Function: int gnutls_ocsp_resp_verify_direct (gnutls_ocsp_resp_t
+          RESP, gnutls_x509_crt_t ISSUER, unsigned int * VERIFY,
+          unsigned int FLAGS)
+     RESP: should contain a `gnutls_ocsp_resp_t'  structure
+
+     ISSUER: certificate believed to have signed the response
+
+     VERIFY: output variable with verification status, an
+     `gnutls_ocsp_cert_status_t'
+
+     FLAGS: verification flags, 0 for now.
+
+     Verify signature of the Basic OCSP Response against the public key
+     in the  `issuer' certificate.
+
+     The output  `verify' variable will hold verification status codes
+     (e.g., `GNUTLS_OCSP_VERIFY_SIGNER_NOT_FOUND' ,
+     `GNUTLS_OCSP_VERIFY_INSECURE_ALGORITHM' ) which are only valid if
+     the function returned `GNUTLS_E_SUCCESS' .
+
+     Note that the function returns `GNUTLS_E_SUCCESS'  even when
+     verification failed.  The caller must always inspect the  `verify'
+     variable to find out the verification status.
+
+     The  `flags' variable should be 0 for now.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+
+File: gnutls.info,  Node: OpenPGP API,  Next: PKCS 12 API,  Prev: OCSP API,  Up: API reference
+
+E.6 OpenPGP API
+===============
+
+The following functions are to be used for OpenPGP certificate
+handling.  Their prototypes lie in `gnutls/openpgp.h'.
+
+gnutls_certificate_set_openpgp_key
+----------------------------------
+
+ -- Function: int gnutls_certificate_set_openpgp_key
+          (gnutls_certificate_credentials_t RES, gnutls_openpgp_crt_t
+          CRT, gnutls_openpgp_privkey_t PKEY)
+     RES: is a `gnutls_certificate_credentials_t'  structure.
+
+     CRT: contains an openpgp public key
+
+     PKEY: is an openpgp private key
+
+     This function sets a certificate/private key pair in the
+     gnutls_certificate_credentials_t structure.  This function may be
+     called more than once (in case multiple keys/certificates exist
+     for the server).
+
+     Note that this function requires that the preferred key ids have
+     been set and be used. See
+     `gnutls_openpgp_crt_set_preferred_key_id()' .  Otherwise the
+     master key will be used.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_certificate_set_openpgp_key_file
+---------------------------------------
+
+ -- Function: int gnutls_certificate_set_openpgp_key_file
+          (gnutls_certificate_credentials_t RES, const char * CERTFILE,
+          const char * KEYFILE, gnutls_openpgp_crt_fmt_t FORMAT)
+     RES: the destination context to save the data.
+
+     CERTFILE: the file that contains the public key.
+
+     KEYFILE: the file that contains the secret key.
+
+     FORMAT: the format of the keys
+
+     This funtion is used to load OpenPGP keys into the GnuTLS
+     credentials structure. The file should contain at least one valid
+     non encrypted subkey.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_certificate_set_openpgp_key_file2
+----------------------------------------
+
+ -- Function: int gnutls_certificate_set_openpgp_key_file2
+          (gnutls_certificate_credentials_t RES, const char * CERTFILE,
+          const char * KEYFILE, const char * SUBKEY_ID,
+          gnutls_openpgp_crt_fmt_t FORMAT)
+     RES: the destination context to save the data.
+
+     CERTFILE: the file that contains the public key.
+
+     KEYFILE: the file that contains the secret key.
+
+     SUBKEY_ID: a hex encoded subkey id
+
+     FORMAT: the format of the keys
+
+     This funtion is used to load OpenPGP keys into the GnuTLS
+     credential structure. The file should contain at least one valid
+     non encrypted subkey.
+
+     The special keyword "auto" is also accepted as  `subkey_id' .  In
+     that case the `gnutls_openpgp_crt_get_auth_subkey()'  will be used
+     to retrieve the subkey.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.4.0
+
+gnutls_certificate_set_openpgp_key_mem
+--------------------------------------
+
+ -- Function: int gnutls_certificate_set_openpgp_key_mem
+          (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
+          CERT, const gnutls_datum_t * KEY, gnutls_openpgp_crt_fmt_t
+          FORMAT)
+     RES: the destination context to save the data.
+
+     CERT: the datum that contains the public key.
+
+     KEY: the datum that contains the secret key.
+
+     FORMAT: the format of the keys
+
+     This funtion is used to load OpenPGP keys into the GnuTLS
+     credential structure. The datum should contain at least one valid
+     non encrypted subkey.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_certificate_set_openpgp_key_mem2
+---------------------------------------
+
+ -- Function: int gnutls_certificate_set_openpgp_key_mem2
+          (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
+          CERT, const gnutls_datum_t * KEY, const char * SUBKEY_ID,
+          gnutls_openpgp_crt_fmt_t FORMAT)
+     RES: the destination context to save the data.
+
+     CERT: the datum that contains the public key.
+
+     KEY: the datum that contains the secret key.
+
+     SUBKEY_ID: a hex encoded subkey id
+
+     FORMAT: the format of the keys
+
+     This funtion is used to load OpenPGP keys into the GnuTLS
+     credentials structure. The datum should contain at least one valid
+     non encrypted subkey.
+
+     The special keyword "auto" is also accepted as  `subkey_id' .  In
+     that case the `gnutls_openpgp_crt_get_auth_subkey()'  will be used
+     to retrieve the subkey.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.4.0
+
+gnutls_certificate_set_openpgp_keyring_file
+-------------------------------------------
+
+ -- Function: int gnutls_certificate_set_openpgp_keyring_file
+          (gnutls_certificate_credentials_t C, const char * FILE,
+          gnutls_openpgp_crt_fmt_t FORMAT)
+     C: A certificate credentials structure
+
+     FILE: filename of the keyring.
+
+     FORMAT: format of keyring.
+
+     The function is used to set keyrings that will be used internally
+     by various OpenPGP functions. For example to find a key when it is
+     needed for an operations. The keyring will also be used at the
+     verification functions.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_certificate_set_openpgp_keyring_mem
+------------------------------------------
+
+ -- Function: int gnutls_certificate_set_openpgp_keyring_mem
+          (gnutls_certificate_credentials_t C, const uint8_t * DATA,
+          size_t DLEN, gnutls_openpgp_crt_fmt_t FORMAT)
+     C: A certificate credentials structure
+
+     DATA: buffer with keyring data.
+
+     DLEN: length of data buffer.
+
+     FORMAT: the format of the keyring
+
+     The function is used to set keyrings that will be used internally
+     by various OpenPGP functions. For example to find a key when it is
+     needed for an operations. The keyring will also be used at the
+     verification functions.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_openpgp_crt_check_hostname
+---------------------------------
+
+ -- Function: int gnutls_openpgp_crt_check_hostname
+          (gnutls_openpgp_crt_t KEY, const char * HOSTNAME)
+     KEY: should contain a `gnutls_openpgp_crt_t'  structure
+
+     HOSTNAME: A null terminated string that contains a DNS name
+
+     This function will check if the given key's owner matches the
+     given hostname. This is a basic implementation of the matching
+     described in RFC2818 (HTTPS), which takes into account wildcards.
+
+     *Returns:* non-zero for a successful match, and zero on failure.
+
+gnutls_openpgp_crt_deinit
+-------------------------
+
+ -- Function: void gnutls_openpgp_crt_deinit (gnutls_openpgp_crt_t KEY)
+     KEY: The structure to be initialized
+
+     This function will deinitialize a key structure.
+
+gnutls_openpgp_crt_export
+-------------------------
+
+ -- Function: int gnutls_openpgp_crt_export (gnutls_openpgp_crt_t KEY,
+          gnutls_openpgp_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
+          OUTPUT_DATA_SIZE)
+     KEY: Holds the key.
+
+     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
+
+     OUTPUT_DATA: will contain the raw or base64 encoded key
+
+     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
+     replaced by the actual size of parameters)
+
+     This function will convert the given key to RAW or Base64 format.
+     If the buffer provided is not long enough to hold the output, then
+     `GNUTLS_E_SHORT_MEMORY_BUFFER'  will be returned.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_crt_export2
+--------------------------
+
+ -- Function: int gnutls_openpgp_crt_export2 (gnutls_openpgp_crt_t KEY,
+          gnutls_openpgp_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
+     KEY: Holds the key.
+
+     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
+
+     OUT: will contain the raw or base64 encoded key
+
+     This function will convert the given key to RAW or Base64 format.
+     The output buffer is allocated using `gnutls_malloc()' .
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+     *Since:* 3.1.3
+
+gnutls_openpgp_crt_get_auth_subkey
+----------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_auth_subkey
+          (gnutls_openpgp_crt_t CRT, gnutls_openpgp_keyid_t KEYID,
+          unsigned int FLAG)
+     CRT: the structure that contains the OpenPGP public key.
+
+     KEYID: the struct to save the keyid.
+
+     FLAG: Non-zero indicates that a valid subkey is always returned.
+
+     Returns the 64-bit keyID of the first valid OpenPGP subkey marked
+     for authentication.  If flag is non-zero and no authentication
+     subkey exists, then a valid subkey will be returned even if it is
+     not marked for authentication.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_crt_get_creation_time
+------------------------------------
+
+ -- Function: time_t gnutls_openpgp_crt_get_creation_time
+          (gnutls_openpgp_crt_t KEY)
+     KEY: the structure that contains the OpenPGP public key.
+
+     Get key creation time.
+
+     *Returns:* the timestamp when the OpenPGP key was created.
+
+gnutls_openpgp_crt_get_expiration_time
+--------------------------------------
+
+ -- Function: time_t gnutls_openpgp_crt_get_expiration_time
+          (gnutls_openpgp_crt_t KEY)
+     KEY: the structure that contains the OpenPGP public key.
+
+     Get key expiration time.  A value of '0' means that the key doesn't
+     expire at all.
+
+     *Returns:* the time when the OpenPGP key expires.
+
+gnutls_openpgp_crt_get_fingerprint
+----------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_fingerprint
+          (gnutls_openpgp_crt_t KEY, void * FPR, size_t * FPRLEN)
+     KEY: the raw data that contains the OpenPGP public key.
+
+     FPR: the buffer to save the fingerprint, must hold at least 20
+     bytes.
+
+     FPRLEN: the integer to save the length of the fingerprint.
+
+     Get key fingerprint.  Depending on the algorithm, the fingerprint
+     can be 16 or 20 bytes.
+
+     *Returns:* On success, 0 is returned.  Otherwise, an error code.
+
+gnutls_openpgp_crt_get_key_id
+-----------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_key_id (gnutls_openpgp_crt_t
+          KEY, gnutls_openpgp_keyid_t KEYID)
+     KEY: the structure that contains the OpenPGP public key.
+
+     KEYID: the buffer to save the keyid.
+
+     Get key id string.
+
+     *Returns:* the 64-bit keyID of the OpenPGP key.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_key_usage
+--------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_key_usage
+          (gnutls_openpgp_crt_t KEY, unsigned int * KEY_USAGE)
+     KEY: should contain a gnutls_openpgp_crt_t structure
+
+     KEY_USAGE: where the key usage bits will be stored
+
+     This function will return certificate's key usage, by checking the
+     key algorithm. The key usage value will ORed values of the:
+     `GNUTLS_KEY_DIGITAL_SIGNATURE' , `GNUTLS_KEY_KEY_ENCIPHERMENT' .
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_crt_get_name
+---------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_name (gnutls_openpgp_crt_t
+          KEY, int IDX, char * BUF, size_t * SIZEOF_BUF)
+     KEY: the structure that contains the OpenPGP public key.
+
+     IDX: the index of the ID to extract
+
+     BUF: a pointer to a structure to hold the name, may be `NULL' to
+     only get the  `sizeof_buf' .
+
+     SIZEOF_BUF: holds the maximum size of  `buf' , on return hold the
+     actual/required size of  `buf' .
+
+     Extracts the userID from the parsed OpenPGP key.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, and if the index of the
+     ID does not exist `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' , or an
+     error code.
+
+gnutls_openpgp_crt_get_pk_algorithm
+-----------------------------------
+
+ -- Function: gnutls_pk_algorithm_t gnutls_openpgp_crt_get_pk_algorithm
+          (gnutls_openpgp_crt_t KEY, unsigned int * BITS)
+     KEY: is an OpenPGP key
+
+     BITS: if bits is non null it will hold the size of the parameters'
+     in bits
+
+     This function will return the public key algorithm of an OpenPGP
+     certificate.
+
+     If bits is non null, it should have enough size to hold the
+     parameters size in bits. For RSA the bits returned is the modulus.
+     For DSA the bits returned are of the public exponent.
+
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
+     success, or GNUTLS_PK_UNKNOWN on error.
+
+gnutls_openpgp_crt_get_pk_dsa_raw
+---------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_pk_dsa_raw
+          (gnutls_openpgp_crt_t CRT, gnutls_datum_t * P, gnutls_datum_t
+          * Q, gnutls_datum_t * G, gnutls_datum_t * Y)
+     CRT: Holds the certificate
+
+     P: will hold the p
+
+     Q: will hold the q
+
+     G: will hold the g
+
+     Y: will hold the y
+
+     This function will export the DSA public key's parameters found in
+     the given certificate.  The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_pk_rsa_raw
+---------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_pk_rsa_raw
+          (gnutls_openpgp_crt_t CRT, gnutls_datum_t * M, gnutls_datum_t
+          * E)
+     CRT: Holds the certificate
+
+     M: will hold the modulus
+
+     E: will hold the public exponent
+
+     This function will export the RSA public key's parameters found in
+     the given structure.  The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_preferred_key_id
+---------------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_preferred_key_id
+          (gnutls_openpgp_crt_t KEY, gnutls_openpgp_keyid_t KEYID)
+     KEY: the structure that contains the OpenPGP public key.
+
+     KEYID: the struct to save the keyid.
+
+     Get preferred key id.  If it hasn't been set it returns
+     `GNUTLS_E_INVALID_REQUEST' .
+
+     *Returns:* the 64-bit preferred keyID of the OpenPGP key.
+
+gnutls_openpgp_crt_get_revoked_status
+-------------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_revoked_status
+          (gnutls_openpgp_crt_t KEY)
+     KEY: the structure that contains the OpenPGP public key.
+
+     Get revocation status of key.
+
+     *Returns:* true (1) if the key has been revoked, or false (0) if it
+     has not.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_count
+-----------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_subkey_count
+          (gnutls_openpgp_crt_t KEY)
+     KEY: is an OpenPGP key
+
+     This function will return the number of subkeys present in the
+     given OpenPGP certificate.
+
+     *Returns:* the number of subkeys, or a negative error code on
+     error.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_creation_time
+-------------------------------------------
+
+ -- Function: time_t gnutls_openpgp_crt_get_subkey_creation_time
+          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
+     KEY: the structure that contains the OpenPGP public key.
+
+     IDX: the subkey index
+
+     Get subkey creation time.
+
+     *Returns:* the timestamp when the OpenPGP sub-key was created.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_expiration_time
+---------------------------------------------
+
+ -- Function: time_t gnutls_openpgp_crt_get_subkey_expiration_time
+          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
+     KEY: the structure that contains the OpenPGP public key.
+
+     IDX: the subkey index
+
+     Get subkey expiration time.  A value of '0' means that the key
+     doesn't expire at all.
+
+     *Returns:* the time when the OpenPGP key expires.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_fingerprint
+-----------------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_subkey_fingerprint
+          (gnutls_openpgp_crt_t KEY, unsigned int IDX, void * FPR,
+          size_t * FPRLEN)
+     KEY: the raw data that contains the OpenPGP public key.
+
+     IDX: the subkey index
+
+     FPR: the buffer to save the fingerprint, must hold at least 20
+     bytes.
+
+     FPRLEN: the integer to save the length of the fingerprint.
+
+     Get key fingerprint of a subkey.  Depending on the algorithm, the
+     fingerprint can be 16 or 20 bytes.
+
+     *Returns:* On success, 0 is returned.  Otherwise, an error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_id
+--------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_subkey_id
+          (gnutls_openpgp_crt_t KEY, unsigned int IDX,
+          gnutls_openpgp_keyid_t KEYID)
+     KEY: the structure that contains the OpenPGP public key.
+
+     IDX: the subkey index
+
+     KEYID: the buffer to save the keyid.
+
+     Get the subkey's key-id.
+
+     *Returns:* the 64-bit keyID of the OpenPGP key.
+
+gnutls_openpgp_crt_get_subkey_idx
+---------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_subkey_idx
+          (gnutls_openpgp_crt_t KEY, const gnutls_openpgp_keyid_t KEYID)
+     KEY: the structure that contains the OpenPGP public key.
+
+     KEYID: the keyid.
+
+     Get subkey's index.
+
+     *Returns:* the index of the subkey or a negative error value.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_pk_algorithm
+------------------------------------------
+
+ -- Function: gnutls_pk_algorithm_t
+gnutls_openpgp_crt_get_subkey_pk_algorithm (gnutls_openpgp_crt_t KEY,
+          unsigned int IDX, unsigned int * BITS)
+     KEY: is an OpenPGP key
+
+     IDX: is the subkey index
+
+     BITS: if bits is non null it will hold the size of the parameters'
+     in bits
+
+     This function will return the public key algorithm of a subkey of
+     an OpenPGP certificate.
+
+     If bits is non null, it should have enough size to hold the
+     parameters size in bits.  For RSA the bits returned is the modulus.
+     For DSA the bits returned are of the public exponent.
+
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
+     success, or GNUTLS_PK_UNKNOWN on error.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_pk_dsa_raw
+----------------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_subkey_pk_dsa_raw
+          (gnutls_openpgp_crt_t CRT, unsigned int IDX, gnutls_datum_t *
+          P, gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y)
+     CRT: Holds the certificate
+
+     IDX: Is the subkey index
+
+     P: will hold the p
+
+     Q: will hold the q
+
+     G: will hold the g
+
+     Y: will hold the y
+
+     This function will export the DSA public key's parameters found in
+     the given certificate.  The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_pk_rsa_raw
+----------------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_subkey_pk_rsa_raw
+          (gnutls_openpgp_crt_t CRT, unsigned int IDX, gnutls_datum_t *
+          M, gnutls_datum_t * E)
+     CRT: Holds the certificate
+
+     IDX: Is the subkey index
+
+     M: will hold the modulus
+
+     E: will hold the public exponent
+
+     This function will export the RSA public key's parameters found in
+     the given structure.  The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_revoked_status
+--------------------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_subkey_revoked_status
+          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
+     KEY: the structure that contains the OpenPGP public key.
+
+     IDX: is the subkey index
+
+     Get subkey revocation status.  A negative error code indicates an
+     error.
+
+     *Returns:* true (1) if the key has been revoked, or false (0) if it
+     has not.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_subkey_usage
+-----------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_subkey_usage
+          (gnutls_openpgp_crt_t KEY, unsigned int IDX, unsigned int *
+          KEY_USAGE)
+     KEY: should contain a gnutls_openpgp_crt_t structure
+
+     IDX: the subkey index
+
+     KEY_USAGE: where the key usage bits will be stored
+
+     This function will return certificate's key usage, by checking the
+     key algorithm.  The key usage value will ORed values of
+     `GNUTLS_KEY_DIGITAL_SIGNATURE'  or `GNUTLS_KEY_KEY_ENCIPHERMENT' .
+
+     A negative error code may be returned in case of parsing error.
+
+     *Returns:* key usage value.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_crt_get_version
+------------------------------
+
+ -- Function: int gnutls_openpgp_crt_get_version (gnutls_openpgp_crt_t
+          KEY)
+     KEY: the structure that contains the OpenPGP public key.
+
+     Extract the version of the OpenPGP key.
+
+     *Returns:* the version number is returned, or a negative error
+     code on errors.
+
+gnutls_openpgp_crt_import
+-------------------------
+
+ -- Function: int gnutls_openpgp_crt_import (gnutls_openpgp_crt_t KEY,
+          const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t FORMAT)
+     KEY: The structure to store the parsed key.
+
+     DATA: The RAW or BASE64 encoded key.
+
+     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
+
+     This function will convert the given RAW or Base64 encoded key to
+     the native `gnutls_openpgp_crt_t'  format. The output will be
+     stored in 'key'.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_crt_init
+-----------------------
+
+ -- Function: int gnutls_openpgp_crt_init (gnutls_openpgp_crt_t * KEY)
+     KEY: The structure to be initialized
+
+     This function will initialize an OpenPGP key structure.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_crt_print
+------------------------
+
+ -- Function: int gnutls_openpgp_crt_print (gnutls_openpgp_crt_t CERT,
+          gnutls_certificate_print_formats_t FORMAT, gnutls_datum_t *
+          OUT)
+     CERT: The structure to be printed
+
+     FORMAT: Indicate the format to use
+
+     OUT: Newly allocated datum with (0) terminated string.
+
+     This function will pretty print an OpenPGP certificate, suitable
+     for display to a human.
+
+     The format should be (0) for future compatibility.
+
+     The output  `out' needs to be deallocate using `gnutls_free()' .
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_crt_set_preferred_key_id
+---------------------------------------
+
+ -- Function: int gnutls_openpgp_crt_set_preferred_key_id
+          (gnutls_openpgp_crt_t KEY, const gnutls_openpgp_keyid_t KEYID)
+     KEY: the structure that contains the OpenPGP public key.
+
+     KEYID: the selected keyid
+
+     This allows setting a preferred key id for the given certificate.
+     This key will be used by functions that involve key handling.
+
+     If the provided  `keyid' is `NULL'  then the master key is set as
+     preferred.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_openpgp_crt_verify_ring
+------------------------------
+
+ -- Function: int gnutls_openpgp_crt_verify_ring (gnutls_openpgp_crt_t
+          KEY, gnutls_openpgp_keyring_t KEYRING, unsigned int FLAGS,
+          unsigned int * VERIFY)
+     KEY: the structure that holds the key.
+
+     KEYRING: holds the keyring to check against
+
+     FLAGS: unused (should be 0)
+
+     VERIFY: will hold the certificate verification output.
+
+     Verify all signatures in the key, using the given set of keys
+     (keyring).
+
+     The key verification output will be put in  `verify' and will be
+     one or more of the `gnutls_certificate_status_t'  enumerated
+     elements bitwise or'd.
+
+     Note that this function does not verify using any "web of trust".
+     You may use GnuPG for that purpose, or any other external PGP
+     application.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_crt_verify_self
+------------------------------
+
+ -- Function: int gnutls_openpgp_crt_verify_self (gnutls_openpgp_crt_t
+          KEY, unsigned int FLAGS, unsigned int * VERIFY)
+     KEY: the structure that holds the key.
+
+     FLAGS: unused (should be 0)
+
+     VERIFY: will hold the key verification output.
+
+     Verifies the self signature in the key.  The key verification
+     output will be put in  `verify' and will be one or more of the
+     gnutls_certificate_status_t enumerated elements bitwise or'd.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_keyring_check_id
+-------------------------------
+
+ -- Function: int gnutls_openpgp_keyring_check_id
+          (gnutls_openpgp_keyring_t RING, const gnutls_openpgp_keyid_t
+          KEYID, unsigned int FLAGS)
+     RING: holds the keyring to check against
+
+     KEYID: will hold the keyid to check for.
+
+     FLAGS: unused (should be 0)
+
+     Check if a given key ID exists in the keyring.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success (if keyid exists) and a
+     negative error code on failure.
+
+gnutls_openpgp_keyring_deinit
+-----------------------------
+
+ -- Function: void gnutls_openpgp_keyring_deinit
+          (gnutls_openpgp_keyring_t KEYRING)
+     KEYRING: The structure to be initialized
+
+     This function will deinitialize a keyring structure.
+
+gnutls_openpgp_keyring_get_crt
+------------------------------
+
+ -- Function: int gnutls_openpgp_keyring_get_crt
+          (gnutls_openpgp_keyring_t RING, unsigned int IDX,
+          gnutls_openpgp_crt_t * CERT)
+     RING: Holds the keyring.
+
+     IDX: the index of the certificate to export
+
+     CERT: An uninitialized `gnutls_openpgp_crt_t'  structure
+
+     This function will extract an OpenPGP certificate from the given
+     keyring.  If the index given is out of range
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be returned. The
+     returned structure needs to be deinited.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_keyring_get_crt_count
+------------------------------------
+
+ -- Function: int gnutls_openpgp_keyring_get_crt_count
+          (gnutls_openpgp_keyring_t RING)
+     RING: is an OpenPGP key ring
+
+     This function will return the number of OpenPGP certificates
+     present in the given keyring.
+
+     *Returns:* the number of subkeys, or a negative error code on
+     error.
+
+gnutls_openpgp_keyring_import
+-----------------------------
+
+ -- Function: int gnutls_openpgp_keyring_import
+          (gnutls_openpgp_keyring_t KEYRING, const gnutls_datum_t *
+          DATA, gnutls_openpgp_crt_fmt_t FORMAT)
+     KEYRING: The structure to store the parsed key.
+
+     DATA: The RAW or BASE64 encoded keyring.
+
+     FORMAT: One of `gnutls_openpgp_keyring_fmt'  elements.
+
+     This function will convert the given RAW or Base64 encoded keyring
+     to the native `gnutls_openpgp_keyring_t'  format.  The output will
+     be stored in 'keyring'.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_keyring_init
+---------------------------
+
+ -- Function: int gnutls_openpgp_keyring_init (gnutls_openpgp_keyring_t
+          * KEYRING)
+     KEYRING: The structure to be initialized
+
+     This function will initialize an keyring structure.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_privkey_deinit
+-----------------------------
+
+ -- Function: void gnutls_openpgp_privkey_deinit
+          (gnutls_openpgp_privkey_t KEY)
+     KEY: The structure to be initialized
+
+     This function will deinitialize a key structure.
+
+gnutls_openpgp_privkey_export
+-----------------------------
+
+ -- Function: int gnutls_openpgp_privkey_export
+          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_crt_fmt_t
+          FORMAT, const char * PASSWORD, unsigned int FLAGS, void *
+          OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
+     KEY: Holds the key.
+
+     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
+
+     PASSWORD: the password that will be used to encrypt the key.
+     (unused for now)
+
+     FLAGS: (0) for future compatibility
+
+     OUTPUT_DATA: will contain the key base64 encoded or raw
+
+     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
+     replaced by the actual size of parameters)
+
+     This function will convert the given key to RAW or Base64 format.
+     If the buffer provided is not long enough to hold the output, then
+     GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_export2
+------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_export2
+          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_crt_fmt_t
+          FORMAT, const char * PASSWORD, unsigned int FLAGS,
+          gnutls_datum_t * OUT)
+     KEY: Holds the key.
+
+     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
+
+     PASSWORD: the password that will be used to encrypt the key.
+     (unused for now)
+
+     FLAGS: (0) for future compatibility
+
+     OUT: will contain the raw or based64 encoded key
+
+     This function will convert the given key to RAW or Base64 format.
+     The output buffer is allocated using `gnutls_malloc()' .
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+     *Since:* 3.1.3
+
+gnutls_openpgp_privkey_export_dsa_raw
+-------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_export_dsa_raw
+          (gnutls_openpgp_privkey_t PKEY, gnutls_datum_t * P,
+          gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y,
+          gnutls_datum_t * X)
+     PKEY: Holds the certificate
+
+     P: will hold the p
+
+     Q: will hold the q
+
+     G: will hold the g
+
+     Y: will hold the y
+
+     X: will hold the x
+
+     This function will export the DSA private key's parameters found in
+     the given certificate.  The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_export_rsa_raw
+-------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_export_rsa_raw
+          (gnutls_openpgp_privkey_t PKEY, gnutls_datum_t * M,
+          gnutls_datum_t * E, gnutls_datum_t * D, gnutls_datum_t * P,
+          gnutls_datum_t * Q, gnutls_datum_t * U)
+     PKEY: Holds the certificate
+
+     M: will hold the modulus
+
+     E: will hold the public exponent
+
+     D: will hold the private exponent
+
+     P: will hold the first prime (p)
+
+     Q: will hold the second prime (q)
+
+     U: will hold the coefficient
+
+     This function will export the RSA private key's parameters found in
+     the given structure.  The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_export_subkey_dsa_raw
+--------------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_export_subkey_dsa_raw
+          (gnutls_openpgp_privkey_t PKEY, unsigned int IDX,
+          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
+          gnutls_datum_t * Y, gnutls_datum_t * X)
+     PKEY: Holds the certificate
+
+     IDX: Is the subkey index
+
+     P: will hold the p
+
+     Q: will hold the q
+
+     G: will hold the g
+
+     Y: will hold the y
+
+     X: will hold the x
+
+     This function will export the DSA private key's parameters found
+     in the given certificate.  The new parameters will be allocated
+     using `gnutls_malloc()'  and will be stored in the appropriate
+     datum.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_export_subkey_rsa_raw
+--------------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_export_subkey_rsa_raw
+          (gnutls_openpgp_privkey_t PKEY, unsigned int IDX,
+          gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D,
+          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U)
+     PKEY: Holds the certificate
+
+     IDX: Is the subkey index
+
+     M: will hold the modulus
+
+     E: will hold the public exponent
+
+     D: will hold the private exponent
+
+     P: will hold the first prime (p)
+
+     Q: will hold the second prime (q)
+
+     U: will hold the coefficient
+
+     This function will export the RSA private key's parameters found in
+     the given structure.  The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_fingerprint
+--------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_get_fingerprint
+          (gnutls_openpgp_privkey_t KEY, void * FPR, size_t * FPRLEN)
+     KEY: the raw data that contains the OpenPGP secret key.
+
+     FPR: the buffer to save the fingerprint, must hold at least 20
+     bytes.
+
+     FPRLEN: the integer to save the length of the fingerprint.
+
+     Get the fingerprint of the OpenPGP key. Depends on the algorithm,
+     the fingerprint can be 16 or 20 bytes.
+
+     *Returns:* On success, 0 is returned, or an error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_key_id
+---------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_get_key_id
+          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_keyid_t KEYID)
+     KEY: the structure that contains the OpenPGP secret key.
+
+     KEYID: the buffer to save the keyid.
+
+     Get key-id.
+
+     *Returns:* the 64-bit keyID of the OpenPGP key.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_pk_algorithm
+---------------------------------------
+
+ -- Function: gnutls_pk_algorithm_t
+gnutls_openpgp_privkey_get_pk_algorithm (gnutls_openpgp_privkey_t KEY,
+          unsigned int * BITS)
+     KEY: is an OpenPGP key
+
+     BITS: if bits is non null it will hold the size of the parameters'
+     in bits
+
+     This function will return the public key algorithm of an OpenPGP
+     certificate.
+
+     If bits is non null, it should have enough size to hold the
+     parameters size in bits. For RSA the bits returned is the modulus.
+     For DSA the bits returned are of the public exponent.
+
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
+     success, or a negative error code on error.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_preferred_key_id
+-------------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_get_preferred_key_id
+          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_keyid_t KEYID)
+     KEY: the structure that contains the OpenPGP public key.
+
+     KEYID: the struct to save the keyid.
+
+     Get the preferred key-id for the key.
+
+     *Returns:* the 64-bit preferred keyID of the OpenPGP key, or if it
+     hasn't been set it returns `GNUTLS_E_INVALID_REQUEST' .
+
+gnutls_openpgp_privkey_get_revoked_status
+-----------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_get_revoked_status
+          (gnutls_openpgp_privkey_t KEY)
+     KEY: the structure that contains the OpenPGP private key.
+
+     Get revocation status of key.
+
+     *Returns:* true (1) if the key has been revoked, or false (0) if it
+     has not, or a negative error code indicates an error.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_subkey_count
+---------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_get_subkey_count
+          (gnutls_openpgp_privkey_t KEY)
+     KEY: is an OpenPGP key
+
+     This function will return the number of subkeys present in the
+     given OpenPGP certificate.
+
+     *Returns:* the number of subkeys, or a negative error code on
+     error.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_subkey_creation_time
+-----------------------------------------------
+
+ -- Function: time_t gnutls_openpgp_privkey_get_subkey_creation_time
+          (gnutls_openpgp_privkey_t KEY, unsigned int IDX)
+     KEY: the structure that contains the OpenPGP private key.
+
+     IDX: the subkey index
+
+     Get subkey creation time.
+
+     *Returns:* the timestamp when the OpenPGP key was created.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_subkey_fingerprint
+---------------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_get_subkey_fingerprint
+          (gnutls_openpgp_privkey_t KEY, unsigned int IDX, void * FPR,
+          size_t * FPRLEN)
+     KEY: the raw data that contains the OpenPGP secret key.
+
+     IDX: the subkey index
+
+     FPR: the buffer to save the fingerprint, must hold at least 20
+     bytes.
+
+     FPRLEN: the integer to save the length of the fingerprint.
+
+     Get the fingerprint of an OpenPGP subkey.  Depends on the
+     algorithm, the fingerprint can be 16 or 20 bytes.
+
+     *Returns:* On success, 0 is returned, or an error code.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_subkey_id
+------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_get_subkey_id
+          (gnutls_openpgp_privkey_t KEY, unsigned int IDX,
+          gnutls_openpgp_keyid_t KEYID)
+     KEY: the structure that contains the OpenPGP secret key.
+
+     IDX: the subkey index
+
+     KEYID: the buffer to save the keyid.
+
+     Get the key-id for the subkey.
+
+     *Returns:* the 64-bit keyID of the OpenPGP key.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_subkey_idx
+-------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_get_subkey_idx
+          (gnutls_openpgp_privkey_t KEY, const gnutls_openpgp_keyid_t
+          KEYID)
+     KEY: the structure that contains the OpenPGP private key.
+
+     KEYID: the keyid.
+
+     Get index of subkey.
+
+     *Returns:* the index of the subkey or a negative error value.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_subkey_pk_algorithm
+----------------------------------------------
+
+ -- Function: gnutls_pk_algorithm_t
+gnutls_openpgp_privkey_get_subkey_pk_algorithm
+          (gnutls_openpgp_privkey_t KEY, unsigned int IDX, unsigned int
+          * BITS)
+     KEY: is an OpenPGP key
+
+     IDX: is the subkey index
+
+     BITS: if bits is non null it will hold the size of the parameters'
+     in bits
+
+     This function will return the public key algorithm of a subkey of
+     an OpenPGP certificate.
+
+     If bits is non null, it should have enough size to hold the
+     parameters size in bits. For RSA the bits returned is the modulus.
+     For DSA the bits returned are of the public exponent.
+
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
+     success, or a negative error code on error.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_get_subkey_revoked_status
+------------------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_get_subkey_revoked_status
+          (gnutls_openpgp_privkey_t KEY, unsigned int IDX)
+     KEY: the structure that contains the OpenPGP private key.
+
+     IDX: is the subkey index
+
+     Get revocation status of key.
+
+     *Returns:* true (1) if the key has been revoked, or false (0) if it
+     has not, or a negative error code indicates an error.
+
+     *Since:* 2.4.0
+
+gnutls_openpgp_privkey_import
+-----------------------------
+
+ -- Function: int gnutls_openpgp_privkey_import
+          (gnutls_openpgp_privkey_t KEY, const gnutls_datum_t * DATA,
+          gnutls_openpgp_crt_fmt_t FORMAT, const char * PASSWORD,
+          unsigned int FLAGS)
+     KEY: The structure to store the parsed key.
+
+     DATA: The RAW or BASE64 encoded key.
+
+     FORMAT: One of `gnutls_openpgp_crt_fmt_t'  elements.
+
+     PASSWORD: not used for now
+
+     FLAGS: should be (0)
+
+     This function will convert the given RAW or Base64 encoded key to
+     the native gnutls_openpgp_privkey_t format.  The output will be
+     stored in 'key'.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_privkey_init
+---------------------------
+
+ -- Function: int gnutls_openpgp_privkey_init (gnutls_openpgp_privkey_t
+          * KEY)
+     KEY: The structure to be initialized
+
+     This function will initialize an OpenPGP key structure.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
+
+gnutls_openpgp_privkey_sec_param
+--------------------------------
+
+ -- Function: gnutls_sec_param_t gnutls_openpgp_privkey_sec_param
+          (gnutls_openpgp_privkey_t KEY)
+     KEY: a key structure
+
+     This function will return the security parameter appropriate with
+     this private key.
+
+     *Returns:* On success, a valid security parameter is returned
+     otherwise `GNUTLS_SEC_PARAM_UNKNOWN'  is returned.
+
+     *Since:* 2.12.0
+
+gnutls_openpgp_privkey_set_preferred_key_id
+-------------------------------------------
+
+ -- Function: int gnutls_openpgp_privkey_set_preferred_key_id
+          (gnutls_openpgp_privkey_t KEY, const gnutls_openpgp_keyid_t
+          KEYID)
+     KEY: the structure that contains the OpenPGP public key.
+
+     KEYID: the selected keyid
+
+     This allows setting a preferred key id for the given certificate.
+     This key will be used by functions that involve key handling.
+
+     If the provided  `keyid' is `NULL'  then the master key is set as
+     preferred.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_openpgp_set_recv_key_function
+------------------------------------
+
+ -- Function: void gnutls_openpgp_set_recv_key_function
+          (gnutls_session_t SESSION, gnutls_openpgp_recv_key_func FUNC)
+     SESSION: a TLS session
+
+     FUNC: the callback
+
+     This funtion will set a key retrieval function for OpenPGP keys.
+     This callback is only useful in server side, and will be used if
+     the peer sent a key fingerprint instead of a full key.
+
+     The retrieved key must be allocated using `gnutls_malloc()' .
+
+
+File: gnutls.info,  Node: PKCS 12 API,  Next: PKCS 11 API,  Prev: OpenPGP API,  Up: API reference
+
+E.7 PKCS 12 API
+===============
+
+The following functions are to be used for PKCS 12 handling.  Their
+prototypes lie in `gnutls/pkcs12.h'.
+
+gnutls_pkcs12_bag_decrypt
+-------------------------
+
+ -- Function: int gnutls_pkcs12_bag_decrypt (gnutls_pkcs12_bag_t BAG,
+          const char * PASS)
+     BAG: The bag
+
+     PASS: The password used for encryption, must be ASCII.
+
+     This function will decrypt the given encrypted bag and return 0 on
+     success.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_pkcs12_bag_deinit
+------------------------
+
+ -- Function: void gnutls_pkcs12_bag_deinit (gnutls_pkcs12_bag_t BAG)
+     BAG: The structure to be initialized
+
+     This function will deinitialize a PKCS12 Bag structure.
+
+gnutls_pkcs12_bag_encrypt
+-------------------------
+
+ -- Function: int gnutls_pkcs12_bag_encrypt (gnutls_pkcs12_bag_t BAG,
+          const char * PASS, unsigned int FLAGS)
+     BAG: The bag
+
+     PASS: The password used for encryption, must be ASCII
+
+     FLAGS: should be one of `gnutls_pkcs_encrypt_flags_t'  elements
+     bitwise or'd
+
+     This function will encrypt the given bag.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error code is returned.
+
+gnutls_pkcs12_bag_get_count
+---------------------------
+
+ -- Function: int gnutls_pkcs12_bag_get_count (gnutls_pkcs12_bag_t BAG)
+     BAG: The bag
+
+     This function will return the number of the elements withing the
+     bag.
+
+     *Returns:* Number of elements in bag, or an negative error code on
+     error.
+
+gnutls_pkcs12_bag_get_data
+--------------------------
+
+ -- Function: int gnutls_pkcs12_bag_get_data (gnutls_pkcs12_bag_t BAG,
+          int INDX, gnutls_datum_t * DATA)
+     BAG: The bag
+
+     INDX: The element of the bag to get the data from
+
+     DATA: where the bag's data will be. Should be treated as constant.
+
+     This function will return the bag's data. The data is a constant
+     that is stored into the bag.  Should not be accessed after the bag
+     is deleted.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs12_bag_get_friendly_name
+-----------------------------------
+
+ -- Function: int gnutls_pkcs12_bag_get_friendly_name
+          (gnutls_pkcs12_bag_t BAG, int INDX, char ** NAME)
+     BAG: The bag
+
+     INDX: The bag's element to add the id
+
+     NAME: will hold a pointer to the name (to be treated as const)
+
+     This function will return the friendly name, of the specified bag
+     element.  The key ID is usually used to distinguish the local
+     private key and the certificate pair.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. or a negative error code on
+     error.
+
+gnutls_pkcs12_bag_get_key_id
+----------------------------
+
+ -- Function: int gnutls_pkcs12_bag_get_key_id (gnutls_pkcs12_bag_t
+          BAG, int INDX, gnutls_datum_t * ID)
+     BAG: The bag
+
+     INDX: The bag's element to add the id
+
+     ID: where the ID will be copied (to be treated as const)
+
+     This function will return the key ID, of the specified bag element.
+     The key ID is usually used to distinguish the local private key and
+     the certificate pair.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. or a negative error code on
+     error.
+
+gnutls_pkcs12_bag_get_type
+--------------------------
+
+ -- Function: gnutls_pkcs12_bag_type_t gnutls_pkcs12_bag_get_type
+          (gnutls_pkcs12_bag_t BAG, int INDX)
+     BAG: The bag
+
+     INDX: The element of the bag to get the type
+
+     This function will return the bag's type.
+
+     *Returns:* One of the `gnutls_pkcs12_bag_type_t'  enumerations.
+
+gnutls_pkcs12_bag_init
+----------------------
+
+ -- Function: int gnutls_pkcs12_bag_init (gnutls_pkcs12_bag_t * BAG)
+     BAG: The structure to be initialized
+
+     This function will initialize a PKCS12 bag structure. PKCS12 Bags
+     usually contain private keys, lists of X.509 Certificates and X.509
+     Certificate revocation lists.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs12_bag_set_crl
+-------------------------
+
+ -- Function: int gnutls_pkcs12_bag_set_crl (gnutls_pkcs12_bag_t BAG,
+          gnutls_x509_crl_t CRL)
+     BAG: The bag
+
+     CRL: the CRL to be copied.
+
+     This function will insert the given CRL into the bag. This is just
+     a wrapper over `gnutls_pkcs12_bag_set_data()' .
+
+     *Returns:* the index of the added bag on success, or a negative
+     error code on failure.
+
+gnutls_pkcs12_bag_set_crt
+-------------------------
+
+ -- Function: int gnutls_pkcs12_bag_set_crt (gnutls_pkcs12_bag_t BAG,
+          gnutls_x509_crt_t CRT)
+     BAG: The bag
+
+     CRT: the certificate to be copied.
+
+     This function will insert the given certificate into the bag. This
+     is just a wrapper over `gnutls_pkcs12_bag_set_data()' .
+
+     *Returns:* the index of the added bag on success, or a negative
+     value on failure.
+
+gnutls_pkcs12_bag_set_data
+--------------------------
+
+ -- Function: int gnutls_pkcs12_bag_set_data (gnutls_pkcs12_bag_t BAG,
+          gnutls_pkcs12_bag_type_t TYPE, const gnutls_datum_t * DATA)
+     BAG: The bag
+
+     TYPE: The data's type
+
+     DATA: the data to be copied.
+
+     This function will insert the given data of the given type into
+     the bag.
+
+     *Returns:* the index of the added bag on success, or a negative
+     value on error.
+
+gnutls_pkcs12_bag_set_friendly_name
+-----------------------------------
+
+ -- Function: int gnutls_pkcs12_bag_set_friendly_name
+          (gnutls_pkcs12_bag_t BAG, int INDX, const char * NAME)
+     BAG: The bag
+
+     INDX: The bag's element to add the id
+
+     NAME: the name
+
+     This function will add the given key friendly name, to the
+     specified, by the index, bag element. The name will be encoded as
+     a 'Friendly name' bag attribute, which is usually used to set a
+     user name to the local private key and the certificate pair.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. or a negative error code on
+     error.
+
+gnutls_pkcs12_bag_set_key_id
+----------------------------
+
+ -- Function: int gnutls_pkcs12_bag_set_key_id (gnutls_pkcs12_bag_t
+          BAG, int INDX, const gnutls_datum_t * ID)
+     BAG: The bag
+
+     INDX: The bag's element to add the id
+
+     ID: the ID
+
+     This function will add the given key ID, to the specified, by the
+     index, bag element. The key ID will be encoded as a 'Local key
+     identifier' bag attribute, which is usually used to distinguish
+     the local private key and the certificate pair.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value. or a negative error code on
+     error.
+
+gnutls_pkcs12_deinit
+--------------------
+
+ -- Function: void gnutls_pkcs12_deinit (gnutls_pkcs12_t PKCS12)
+     PKCS12: The structure to be initialized
+
+     This function will deinitialize a PKCS12 structure.
+
+gnutls_pkcs12_export
+--------------------
+
+ -- Function: int gnutls_pkcs12_export (gnutls_pkcs12_t PKCS12,
+          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
+          OUTPUT_DATA_SIZE)
+     PKCS12: Holds the pkcs12 structure
+
+     FORMAT: the format of output params. One of PEM or DER.
+
+     OUTPUT_DATA: will contain a structure PEM or DER encoded
+
+     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
+     replaced by the actual size of parameters)
+
+     This function will export the pkcs12 structure to DER or PEM
+     format.
+
+     If the buffer provided is not long enough to hold the output, then
+     *output_data_size will be updated and GNUTLS_E_SHORT_MEMORY_BUFFER
+     will be returned.
+
+     If the structure is PEM encoded, it will have a header of "BEGIN
+     PKCS12".
+
+     *Returns:* In case of failure a negative error code will be
+     returned, and 0 on success.
+
+gnutls_pkcs12_export2
+---------------------
+
+ -- Function: int gnutls_pkcs12_export2 (gnutls_pkcs12_t PKCS12,
+          gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
+     PKCS12: Holds the pkcs12 structure
+
+     FORMAT: the format of output params. One of PEM or DER.
+
+     OUT: will contain a structure PEM or DER encoded
+
+     This function will export the pkcs12 structure to DER or PEM
+     format.
+
+     The output buffer is allocated using `gnutls_malloc()' .
+
+     If the structure is PEM encoded, it will have a header of "BEGIN
+     PKCS12".
+
+     *Returns:* In case of failure a negative error code will be
+     returned, and 0 on success.
+
+     *Since:* 3.1.3
+
+gnutls_pkcs12_generate_mac
+--------------------------
+
+ -- Function: int gnutls_pkcs12_generate_mac (gnutls_pkcs12_t PKCS12,
+          const char * PASS)
+     PKCS12: should contain a gnutls_pkcs12_t structure
+
+     PASS: The password for the MAC
+
+     This function will generate a MAC for the PKCS12 structure.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs12_get_bag
+---------------------
+
+ -- Function: int gnutls_pkcs12_get_bag (gnutls_pkcs12_t PKCS12, int
+          INDX, gnutls_pkcs12_bag_t BAG)
+     PKCS12: should contain a gnutls_pkcs12_t structure
+
+     INDX: contains the index of the bag to extract
+
+     BAG: An initialized bag, where the contents of the bag will be
+     copied
+
+     This function will return a Bag from the PKCS12 structure.
+
+     After the last Bag has been read
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  will be returned.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs12_import
+--------------------
+
+ -- Function: int gnutls_pkcs12_import (gnutls_pkcs12_t PKCS12, const
+          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned
+          int FLAGS)
+     PKCS12: The structure to store the parsed PKCS12.
+
+     DATA: The DER or PEM encoded PKCS12.
+
+     FORMAT: One of DER or PEM
+
+     FLAGS: an ORed sequence of gnutls_privkey_pkcs8_flags
+
+     This function will convert the given DER or PEM encoded PKCS12 to
+     the native gnutls_pkcs12_t format. The output will be stored in
+     'pkcs12'.
+
+     If the PKCS12 is PEM encoded it should have a header of "PKCS12".
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs12_init
+------------------
+
+ -- Function: int gnutls_pkcs12_init (gnutls_pkcs12_t * PKCS12)
+     PKCS12: The structure to be initialized
+
+     This function will initialize a PKCS12 structure. PKCS12 structures
+     usually contain lists of X.509 Certificates and X.509 Certificate
+     revocation lists.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs12_set_bag
+---------------------
+
+ -- Function: int gnutls_pkcs12_set_bag (gnutls_pkcs12_t PKCS12,
+          gnutls_pkcs12_bag_t BAG)
+     PKCS12: should contain a gnutls_pkcs12_t structure
+
+     BAG: An initialized bag
+
+     This function will insert a Bag into the PKCS12 structure.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs12_simple_parse
+--------------------------
+
+ -- Function: int gnutls_pkcs12_simple_parse (gnutls_pkcs12_t P12,
+          const char * PASSWORD, gnutls_x509_privkey_t * KEY,
+          gnutls_x509_crt_t ** CHAIN, unsigned int * CHAIN_LEN,
+          gnutls_x509_crt_t ** EXTRA_CERTS, unsigned int *
+          EXTRA_CERTS_LEN, gnutls_x509_crl_t * CRL, unsigned int FLAGS)
+     P12: the PKCS12 blob.
+
+     PASSWORD: optional password used to decrypt PKCS12 blob, bags and
+     keys.
+
+     KEY: a structure to store the parsed private key.
+
+     CHAIN: the corresponding to key certificate chain (may be `NULL' )
+
+     CHAIN_LEN: will be updated with the number of additional (may be
+     `NULL' )
+
+     EXTRA_CERTS: optional pointer to receive an array of additional
+     certificates found in the PKCS12 blob (may be `NULL' ).
+
+     EXTRA_CERTS_LEN: will be updated with the number of additional
+     certs (may be `NULL' ).
+
+     CRL: an optional structure to store the parsed CRL (may be `NULL'
+     ).
+
+     FLAGS: should be zero or one of GNUTLS_PKCS12_SP_*
+
+     This function parses a PKCS12 blob in  `p12blob' and extracts the
+     private key, the corresponding certificate chain, and any
+     additional certificates and a CRL.
+
+     The  `extra_certs_ret' and  `extra_certs_len' parameters are
+     optional and both may be set to `NULL' . If either is non-`NULL' ,
+     then both must be set.
+
+     Encrypted PKCS12 bags and PKCS8 private keys are supported.
+     However, only password based security, and the same password for
+     all operations, are supported.
+
+     A PKCS12 file may contain many keys and/or certificates, and there
+     is no way to identify which key/certificate pair you want.  You
+     should make sure the PKCS12 file only contain one key/certificate
+     pair and/or one CRL.
+
+     It is believed that the limitations of this function are acceptable
+     for common usage, and that any more flexibility would introduce
+     complexity that would make it harder to use this functionality at
+     all.
+
+     If the provided structure has encrypted fields but no password is
+     provided then this function returns `GNUTLS_E_DECRYPTION_FAILED' .
+
+     Note that normally the chain constructed does not include self
+     signed certificates, to comply with TLS' requirements. If,
+     however, the flag `GNUTLS_PKCS12_SP_INCLUDE_SELF_SIGNED'  is
+     specified then self signed certificates will be included in the
+     chain.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 3.1
+
+gnutls_pkcs12_verify_mac
+------------------------
+
+ -- Function: int gnutls_pkcs12_verify_mac (gnutls_pkcs12_t PKCS12,
+          const char * PASS)
+     PKCS12: should contain a gnutls_pkcs12_t structure
+
+     PASS: The password for the MAC
+
+     This function will verify the MAC for the PKCS12 structure.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+
+File: gnutls.info,  Node: PKCS 11 API,  Next: TPM API,  Prev: PKCS 12 API,  Up: API reference
+
+E.8 Hardware token via PKCS 11 API
+==================================
+
+The following functions are to be used for PKCS 11 handling.  Their
+prototypes lie in `gnutls/pkcs11.h'.
+
+gnutls_pkcs11_add_provider
+--------------------------
+
+ -- Function: int gnutls_pkcs11_add_provider (const char * NAME, const
+          char * PARAMS)
+     NAME: The filename of the module
+
+     PARAMS: should be NULL
+
+     This function will load and add a PKCS 11 module to the module
+     list used in gnutls. After this function is called the module will
+     be used for PKCS 11 operations.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_copy_secret_key
+-----------------------------
+
+ -- Function: int gnutls_pkcs11_copy_secret_key (const char *
+          TOKEN_URL, gnutls_datum_t * KEY, const char * LABEL, unsigned
+          int KEY_USAGE, unsigned int FLAGS)
+     TOKEN_URL: A PKCS `11'  URL specifying a token
+
+     KEY: The raw key
+
+     LABEL: A name to be used for the stored data
+
+     KEY_USAGE: One of GNUTLS_KEY_*
+
+     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*
+
+     This function will copy a raw secret (symmetric) key into a PKCS
+     `11' token specified by a URL. The key can be marked as sensitive
+     or not.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_copy_x509_crt
+---------------------------
+
+ -- Function: int gnutls_pkcs11_copy_x509_crt (const char * TOKEN_URL,
+          gnutls_x509_crt_t CRT, const char * LABEL, unsigned int FLAGS)
+     TOKEN_URL: A PKCS `11'  URL specifying a token
+
+     CRT: A certificate
+
+     LABEL: A name to be used for the stored data
+
+     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*
+
+     This function will copy a certificate into a PKCS `11'  token
+     specified by a URL. The certificate can be marked as trusted or
+     not.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_copy_x509_privkey
+-------------------------------
+
+ -- Function: int gnutls_pkcs11_copy_x509_privkey (const char *
+          TOKEN_URL, gnutls_x509_privkey_t KEY, const char * LABEL,
+          unsigned int KEY_USAGE, unsigned int FLAGS)
+     TOKEN_URL: A PKCS `11'  URL specifying a token
+
+     KEY: A private key
+
+     LABEL: A name to be used for the stored data
+
+     KEY_USAGE: One of GNUTLS_KEY_*
+
+     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
+
+     This function will copy a private key into a PKCS `11'  token
+     specified by a URL. It is highly recommended flags to contain
+     `GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE' unless there is a strong
+     reason not to.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_deinit
+--------------------
+
+ -- Function: void gnutls_pkcs11_deinit ( VOID)
+     This function will deinitialize the PKCS 11 subsystem in gnutls.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_delete_url
+------------------------
+
+ -- Function: int gnutls_pkcs11_delete_url (const char * OBJECT_URL,
+          unsigned int FLAGS)
+     OBJECT_URL: The URL of the object to delete.
+
+     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
+
+     This function will delete objects matching the given URL.  Note
+     that not all tokens support the delete operation.
+
+     *Returns:* On success, the number of objects deleted is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_get_pin_function
+------------------------------
+
+ -- Function: gnutls_pin_callback_t gnutls_pkcs11_get_pin_function
+          (void ** USERDATA)
+     USERDATA: data to be supplied to callback
+
+     This function will return the callback function set using
+     `gnutls_pkcs11_set_pin_function()' .
+
+     *Returns:* The function set or NULL otherwise.
+
+     *Since:* 3.1.0
+
+gnutls_pkcs11_init
+------------------
+
+ -- Function: int gnutls_pkcs11_init (unsigned int FLAGS, const char *
+          DEPRECATED_CONFIG_FILE)
+     FLAGS: `GNUTLS_PKCS11_FLAG_MANUAL'  or `GNUTLS_PKCS11_FLAG_AUTO'
+
+     DEPRECATED_CONFIG_FILE: either NULL or the location of a deprecated
+     configuration file
+
+     This function will initialize the PKCS 11 subsystem in gnutls. It
+     will read configuration files if `GNUTLS_PKCS11_FLAG_AUTO'  is
+     used or allow you to independently load PKCS 11 modules using
+     `gnutls_pkcs11_add_provider()' if `GNUTLS_PKCS11_FLAG_MANUAL'  is
+     specified.
+
+     Normally you don't need to call this function since it is being
+     called by `gnutls_global_init()'  using the
+     `GNUTLS_PKCS11_FLAG_AUTO' . If other option is required then it
+     must be called before it.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_obj_deinit
+------------------------
+
+ -- Function: void gnutls_pkcs11_obj_deinit (gnutls_pkcs11_obj_t OBJ)
+     OBJ: The structure to be initialized
+
+     This function will deinitialize a certificate structure.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_obj_export
+------------------------
+
+ -- Function: int gnutls_pkcs11_obj_export (gnutls_pkcs11_obj_t OBJ,
+          void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
+     OBJ: Holds the object
+
+     OUTPUT_DATA: will contain a certificate PEM or DER encoded
+
+     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
+     replaced by the actual size of parameters)
+
+     This function will export the PKCS11 object data.  It is normal for
+     data to be inaccesible and in that case `GNUTLS_E_INVALID_REQUEST'
+     will be returned.
+
+     If the buffer provided is not long enough to hold the output, then
+     *output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
+     be returned.
+
+     If the structure is PEM encoded, it will have a header of "BEGIN
+     CERTIFICATE".
+
+     *Returns:* In case of failure a negative error code will be
+     returned, and `GNUTLS_E_SUCCESS'  (0) on success.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_obj_export2
+-------------------------
+
+ -- Function: int gnutls_pkcs11_obj_export2 (gnutls_pkcs11_obj_t OBJ,
+          gnutls_datum_t * OUT)
+     OBJ: Holds the object
+
+     OUT: will contain a certificate PEM or DER encoded
+
+     This function will export the PKCS11 object data.  It is normal for
+     data to be inaccesible and in that case `GNUTLS_E_INVALID_REQUEST'
+     will be returned.
+
+     The output buffer is allocated using `gnutls_malloc()' .
+
+     If the structure is PEM encoded, it will have a header of "BEGIN
+     CERTIFICATE".
+
+     *Returns:* In case of failure a negative error code will be
+     returned, and `GNUTLS_E_SUCCESS'  (0) on success.
+
+     *Since:* 3.1.3
+
+gnutls_pkcs11_obj_export_url
+----------------------------
+
+ -- Function: int gnutls_pkcs11_obj_export_url (gnutls_pkcs11_obj_t
+          OBJ, gnutls_pkcs11_url_type_t DETAILED, char ** URL)
+     OBJ: Holds the PKCS 11 certificate
+
+     DETAILED: non zero if a detailed URL is required
+
+     URL: will contain an allocated url
+
+     This function will export a URL identifying the given certificate.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_obj_get_info
+--------------------------
+
+ -- Function: int gnutls_pkcs11_obj_get_info (gnutls_pkcs11_obj_t CRT,
+          gnutls_pkcs11_obj_info_t ITYPE, void * OUTPUT, size_t *
+          OUTPUT_SIZE)
+     CRT: should contain a `gnutls_pkcs11_obj_t'  structure
+
+     ITYPE: Denotes the type of information requested
+
+     OUTPUT: where output will be stored
+
+     OUTPUT_SIZE: contains the maximum size of the output and will be
+     overwritten with actual
+
+     This function will return information about the PKCS11 certificate
+     such as the label, id as well as token information where the key is
+     stored. When output is text it returns null terminated string
+     although  `output_size' contains the size of the actual data only.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success or a negative error
+     code on error.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_obj_get_type
+--------------------------
+
+ -- Function: gnutls_pkcs11_obj_type_t gnutls_pkcs11_obj_get_type
+          (gnutls_pkcs11_obj_t OBJ)
+     OBJ: Holds the PKCS 11 object
+
+     This function will return the type of the certificate being stored
+     in the structure.
+
+     *Returns:* The type of the certificate.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_obj_import_url
+----------------------------
+
+ -- Function: int gnutls_pkcs11_obj_import_url (gnutls_pkcs11_obj_t
+          OBJ, const char * URL, unsigned int FLAGS)
+     OBJ: The structure to store the object
+
+     URL: a PKCS 11 url identifying the key
+
+     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
+
+     This function will "import" a PKCS 11 URL identifying an object
+     (e.g. certificate) to the `gnutls_pkcs11_obj_t'  structure. This
+     does not involve any parsing (such as X.509 or OpenPGP) since the
+     `gnutls_pkcs11_obj_t'  is format agnostic. Only data are
+     transferred.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_obj_init
+----------------------
+
+ -- Function: int gnutls_pkcs11_obj_init (gnutls_pkcs11_obj_t * OBJ)
+     OBJ: The structure to be initialized
+
+     This function will initialize a pkcs11 certificate structure.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_obj_list_import_url
+---------------------------------
+
+ -- Function: int gnutls_pkcs11_obj_list_import_url
+          (gnutls_pkcs11_obj_t * P_LIST, unsigned int * N_LIST, const
+          char * URL, gnutls_pkcs11_obj_attr_t ATTRS, unsigned int
+          FLAGS)
+     P_LIST: An uninitialized object list (may be NULL)
+
+     N_LIST: initially should hold the maximum size of the list. Will
+     contain the actual size.
+
+     URL: A PKCS 11 url identifying a set of objects
+
+     ATTRS: Attributes of type `gnutls_pkcs11_obj_attr_t'  that can be
+     used to limit output
+
+     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
+
+     This function will initialize and set values to an object list by
+     using all objects identified by a PKCS 11 URL.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_obj_list_import_url2
+----------------------------------
+
+ -- Function: int gnutls_pkcs11_obj_list_import_url2
+          (gnutls_pkcs11_obj_t ** P_LIST, unsigned int * N_LIST, const
+          char * URL, gnutls_pkcs11_obj_attr_t ATTRS, unsigned int
+          FLAGS)
+     P_LIST: An uninitialized object list (may be NULL)
+
+     N_LIST: It will contain the size of the list.
+
+     URL: A PKCS 11 url identifying a set of objects
+
+     ATTRS: Attributes of type `gnutls_pkcs11_obj_attr_t'  that can be
+     used to limit output
+
+     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
+
+     This function will initialize and set values to an object list by
+     using all objects identified by the PKCS 11 URL. The output is
+     stored in  `p_list' , which will be initialized.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 3.1.0
+
+gnutls_pkcs11_obj_set_pin_function
+----------------------------------
+
+ -- Function: void gnutls_pkcs11_obj_set_pin_function
+          (gnutls_pkcs11_obj_t OBJ, gnutls_pin_callback_t FN, void *
+          USERDATA)
+     OBJ: The object structure
+
+     FN: the callback
+
+     USERDATA: data associated with the callback
+
+     This function will set a callback function to be used when
+     required to access the object. This function overrides the global
+     set using `gnutls_pkcs11_set_pin_function()' .
+
+     *Since:* 3.1.0
+
+gnutls_pkcs11_privkey_deinit
+----------------------------
+
+ -- Function: void gnutls_pkcs11_privkey_deinit
+          (gnutls_pkcs11_privkey_t KEY)
+     KEY: The structure to be initialized
+
+     This function will deinitialize a private key structure.
+
+gnutls_pkcs11_privkey_export_url
+--------------------------------
+
+ -- Function: int gnutls_pkcs11_privkey_export_url
+          (gnutls_pkcs11_privkey_t KEY, gnutls_pkcs11_url_type_t
+          DETAILED, char ** URL)
+     KEY: Holds the PKCS 11 key
+
+     DETAILED: non zero if a detailed URL is required
+
+     URL: will contain an allocated url
+
+     This function will export a URL identifying the given key.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs11_privkey_generate
+------------------------------
+
+ -- Function: int gnutls_pkcs11_privkey_generate (const char* URL,
+          gnutls_pk_algorithm_t PK, unsigned int BITS, const char*
+          LABEL, unsigned int FLAGS)
+     URL: a token URL
+
+     PK: the public key algorithm
+
+     BITS: the security bits
+
+     LABEL: a label
+
+     FLAGS: should be zero
+
+     This function will generate a private key in the specified by the
+     `url' token. The private key will be generate within the token and
+     will not be exportable.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 3.0
+
+gnutls_pkcs11_privkey_generate2
+-------------------------------
+
+ -- Function: int gnutls_pkcs11_privkey_generate2 (const char* URL,
+          gnutls_pk_algorithm_t PK, unsigned int BITS, const char*
+          LABEL, gnutls_x509_crt_fmt_t FMT, gnutls_datum_t * PUBKEY,
+          unsigned int FLAGS)
+     URL: a token URL
+
+     PK: the public key algorithm
+
+     BITS: the security bits
+
+     LABEL: a label
+
+     FMT: the format of output params. PEM or DER.
+
+     PUBKEY: will hold the public key (may be `NULL' )
+
+     FLAGS: should be zero
+
+     This function will generate a private key in the specified by the
+     `url' token. The private key will be generate within the token and
+     will not be exportable. This function will store the DER-encoded
+     public key in the SubjectPublicKeyInfo format in  `pubkey' . The
+     `pubkey' should be deinitialized using `gnutls_free()' .
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 3.1.5
+
+gnutls_pkcs11_privkey_get_info
+------------------------------
+
+ -- Function: int gnutls_pkcs11_privkey_get_info
+          (gnutls_pkcs11_privkey_t PKEY, gnutls_pkcs11_obj_info_t
+          ITYPE, void * OUTPUT, size_t * OUTPUT_SIZE)
+     PKEY: should contain a `gnutls_pkcs11_privkey_t'  structure
+
+     ITYPE: Denotes the type of information requested
+
+     OUTPUT: where output will be stored
+
+     OUTPUT_SIZE: contains the maximum size of the output and will be
+     overwritten with actual
+
+     This function will return information about the PKCS 11 private
+     key such as the label, id as well as token information where the
+     key is stored. When output is text it returns null terminated
+     string although `output_size'  contains the size of the actual
+     data only.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success or a negative error
+     code on error.
+
+gnutls_pkcs11_privkey_get_pk_algorithm
+--------------------------------------
+
+ -- Function: int gnutls_pkcs11_privkey_get_pk_algorithm
+          (gnutls_pkcs11_privkey_t KEY, unsigned int * BITS)
+     KEY: should contain a `gnutls_pkcs11_privkey_t'  structure
+
+     BITS: if bits is non null it will hold the size of the parameters'
+     in bits
+
+     This function will return the public key algorithm of a private
+     key.
+
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
+     success, or a negative error code on error.
+
+gnutls_pkcs11_privkey_import_url
+--------------------------------
+
+ -- Function: int gnutls_pkcs11_privkey_import_url
+          (gnutls_pkcs11_privkey_t PKEY, const char * URL, unsigned int
+          FLAGS)
+     PKEY: The structure to store the parsed key
+
+     URL: a PKCS 11 url identifying the key
+
+     FLAGS: sequence of GNUTLS_PKCS_PRIVKEY_*
+
+     This function will "import" a PKCS 11 URL identifying a private
+     key to the `gnutls_pkcs11_privkey_t'  structure. In reality since
+     in most cases keys cannot be exported, the private key structure
+     is being associated with the available operations on the token.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs11_privkey_init
+--------------------------
+
+ -- Function: int gnutls_pkcs11_privkey_init (gnutls_pkcs11_privkey_t *
+          KEY)
+     KEY: The structure to be initialized
+
+     This function will initialize an private key structure.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs11_privkey_set_pin_function
+--------------------------------------
+
+ -- Function: void gnutls_pkcs11_privkey_set_pin_function
+          (gnutls_pkcs11_privkey_t KEY, gnutls_pin_callback_t FN, void
+          * USERDATA)
+     KEY: The private key
+
+     FN: the callback
+
+     USERDATA: data associated with the callback
+
+     This function will set a callback function to be used when
+     required to access the object. This function overrides the global
+     set using `gnutls_pkcs11_set_pin_function()' .
+
+     *Since:* 3.1.0
+
+gnutls_pkcs11_privkey_status
+----------------------------
+
+ -- Function: int gnutls_pkcs11_privkey_status (gnutls_pkcs11_privkey_t
+          KEY)
+     KEY: Holds the key
+
+     Checks the status of the private key token.
+
+     *Returns:* this function will return non-zero if the token holding
+     the private key is still available (inserted), and zero otherwise.
+
+     *Since:* 3.1.9
+
+gnutls_pkcs11_reinit
+--------------------
+
+ -- Function: int gnutls_pkcs11_reinit ( VOID)
+     This function will reinitialize the PKCS 11 subsystem in gnutls.
+     This is required by PKCS 11 when an application uses `fork()' . The
+     reinitialization function must be called on the child.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 3.0
+
+gnutls_pkcs11_set_pin_function
+------------------------------
+
+ -- Function: void gnutls_pkcs11_set_pin_function
+          (gnutls_pin_callback_t FN, void * USERDATA)
+     FN: The PIN callback, a `gnutls_pin_callback_t()'  function.
+
+     USERDATA: data to be supplied to callback
+
+     This function will set a callback function to be used when a PIN is
+     required for PKCS 11 operations.  See `gnutls_pin_callback_t()'
+     on how the callback should behave.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_set_token_function
+--------------------------------
+
+ -- Function: void gnutls_pkcs11_set_token_function
+          (gnutls_pkcs11_token_callback_t FN, void * USERDATA)
+     FN: The token callback
+
+     USERDATA: data to be supplied to callback
+
+     This function will set a callback function to be used when a token
+     needs to be inserted to continue PKCS 11 operations.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_token_get_flags
+-----------------------------
+
+ -- Function: int gnutls_pkcs11_token_get_flags (const char * URL,
+          unsigned int * FLAGS)
+     URL: should contain a PKCS 11 URL
+
+     FLAGS: The output flags (GNUTLS_PKCS11_TOKEN_*)
+
+     This function will return information about the PKCS 11 token
+     flags.  The flags from the `gnutls_pkcs11_token_info_t'
+     enumeration.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success or a negative error
+     code on error.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_token_get_info
+----------------------------
+
+ -- Function: int gnutls_pkcs11_token_get_info (const char * URL,
+          gnutls_pkcs11_token_info_t TTYPE, void * OUTPUT, size_t *
+          OUTPUT_SIZE)
+     URL: should contain a PKCS 11 URL
+
+     TTYPE: Denotes the type of information requested
+
+     OUTPUT: where output will be stored
+
+     OUTPUT_SIZE: contains the maximum size of the output and will be
+     overwritten with actual
+
+     This function will return information about the PKCS 11 token such
+     as the label, id, etc.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success or a negative error
+     code on error.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_token_get_mechanism
+---------------------------------
+
+ -- Function: int gnutls_pkcs11_token_get_mechanism (const char * URL,
+          unsigned int IDX, unsigned long * MECHANISM)
+     URL: should contain a PKCS 11 URL
+
+     IDX: The index of the mechanism
+
+     MECHANISM: The PKCS `11'  mechanism ID
+
+     This function will return the names of the supported mechanisms by
+     the token. It should be called with an increasing index until it
+     return GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE.
+
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success or a negative error
+     code on error.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_token_get_url
+---------------------------
+
+ -- Function: int gnutls_pkcs11_token_get_url (unsigned int SEQ,
+          gnutls_pkcs11_url_type_t DETAILED, char ** URL)
+     SEQ: sequence number starting from 0
+
+     DETAILED: non zero if a detailed URL is required
+
+     URL: will contain an allocated url
+
+     This function will return the URL for each token available in
+     system. The url has to be released using `gnutls_free()'
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'  if the sequence number
+     exceeds the available tokens, otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_pkcs11_token_init
+------------------------
+
+ -- Function: int gnutls_pkcs11_token_init (const char * TOKEN_URL,
+          const char * SO_PIN, const char * LABEL)
+     TOKEN_URL: A PKCS `11'  URL specifying a token
+
+     SO_PIN: Security Officer's PIN
+
+     LABEL: A name to be used for the token
+
+     This function will initialize (format) a token. If the token is at
+     a factory defaults state the security officer's PIN given will be
+     set to be the default. Otherwise it should match the officer's PIN.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs11_token_set_pin
+---------------------------
+
+ -- Function: int gnutls_pkcs11_token_set_pin (const char * TOKEN_URL,
+          const char * OLDPIN, const char * NEWPIN, unsigned int FLAGS)
+     TOKEN_URL: A PKCS `11'  URL specifying a token
+
+     OLDPIN: old user's PIN
+
+     NEWPIN: new user's PIN
+
+     FLAGS: one of `gnutls_pin_flag_t' .
+
+     This function will modify or set a user's PIN for the given token.
+     If it is called to set a user pin for first time the oldpin must
+     be NULL.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+gnutls_pkcs11_type_get_name
+---------------------------
+
+ -- Function: const char * gnutls_pkcs11_type_get_name
+          (gnutls_pkcs11_obj_type_t TYPE)
+     TYPE: Holds the PKCS 11 object type, a `gnutls_pkcs11_obj_type_t' .
+
+     This function will return a human readable description of the
+     PKCS11 object type  `obj' .  It will return "Unknown" for unknown
+     types.
+
+     *Returns:* human readable string labeling the PKCS11 object type
+     `type' .
+
+     *Since:* 2.12.0
+
+gnutls_x509_crt_import_pkcs11
+-----------------------------
+
+ -- Function: int gnutls_x509_crt_import_pkcs11 (gnutls_x509_crt_t CRT,
+          gnutls_pkcs11_obj_t PKCS11_CRT)
+     CRT: A certificate of type `gnutls_x509_crt_t'
+
+     PKCS11_CRT: A PKCS 11 object that contains a certificate
+
+     This function will import a PKCS 11 certificate to a
+     `gnutls_x509_crt_t' structure.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_x509_crt_import_pkcs11_url
+---------------------------------
+
+ -- Function: int gnutls_x509_crt_import_pkcs11_url (gnutls_x509_crt_t
+          CRT, const char * URL, unsigned int FLAGS)
+     CRT: A certificate of type `gnutls_x509_crt_t'
+
+     URL: A PKCS 11 url
+
+     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
+
+     This function will import a PKCS 11 certificate directly from a
+     token without involving the `gnutls_pkcs11_obj_t'  structure. This
+     function will fail if the certificate stored is not of X.509 type.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
+gnutls_x509_crt_list_import_pkcs11
+----------------------------------
+
+ -- Function: int gnutls_x509_crt_list_import_pkcs11 (gnutls_x509_crt_t
+          * CERTS, unsigned int CERT_MAX, gnutls_pkcs11_obj_t * const
+          OBJS, unsigned int FLAGS)
+     CERTS: A list of certificates of type `gnutls_x509_crt_t'
+
+     CERT_MAX: The maximum size of the list
+
+     OBJS: A list of PKCS 11 objects
+
+     FLAGS: 0 for now
+
+     This function will import a PKCS 11 certificate list to a list of
+     `gnutls_x509_crt_t'  structure. These must not be initialized.
+
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
+
+     *Since:* 2.12.0
+
diff --git a/doc/gnutls.info-4 b/doc/gnutls.info-4
index f2b8f46..abca00a 100644
--- a/doc/gnutls.info-4
+++ b/doc/gnutls.info-4
@@ -1,4 +1,4 @@
-This is gnutls.info, produced by makeinfo version 5.1 from gnutls.texi.
+This is gnutls.info, produced by makeinfo version 4.13 from gnutls.texi.
 
 This manual is last updated 2 April 2013 for version 3.1.13 of GnuTLS.
 
@@ -11,3335 +11,21 @@ Copyright (C) 2001-2013 Free Software Foundation, Inc.\\ Copyright (C)
      Foundation; with no Invariant Sections, no Front-Cover Texts, and
      no Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
-INFO-DIR-SECTION Software libraries
-START-INFO-DIR-ENTRY
-* GnuTLS: (gnutls).		GNU Transport Layer Security Library.
-END-INFO-DIR-ENTRY
-
-INFO-DIR-SECTION System Administration
-START-INFO-DIR-ENTRY
-* certtool: (gnutls)Invoking certtool.	Manipulate certificates and keys.
-* gnutls-serv: (gnutls)Invoking gnutls-serv.	GnuTLS test server.
-* gnutls-cli: (gnutls)Invoking gnutls-cli.	GnuTLS test client.
-* gnutls-cli-debug: (gnutls)Invoking gnutls-cli-debug.	GnuTLS debug client.
-* psktool: (gnutls)Invoking psktool.	Simple TLS-Pre-Shared-Keys manager.
-* srptool: (gnutls)Invoking srptool.	Simple SRP password tool.
-END-INFO-DIR-ENTRY
-
-
-File: gnutls.info,  Node: OCSP API,  Next: OpenPGP API,  Prev: X509 certificate API,  Up: API reference
-
-E.5 OCSP API
-============
-
-The following functions are for OCSP certificate status checking.  Their
-prototypes lie in 'gnutls/ocsp.h'.
-
-gnutls_ocsp_req_add_cert
-------------------------
-
- -- Function: int gnutls_ocsp_req_add_cert (gnutls_ocsp_req_t REQ,
-          gnutls_digest_algorithm_t DIGEST, gnutls_x509_crt_t ISSUER,
-          gnutls_x509_crt_t CERT)
-     REQ: should contain a 'gnutls_ocsp_req_t' structure
-
-     DIGEST: hash algorithm, a 'gnutls_digest_algorithm_t' value
-
-     ISSUER: issuer of 'subject' certificate
-
-     CERT: certificate to request status for
-
-     This function will add another request to the OCSP request for a
-     particular certificate.  The issuer name hash, issuer key hash, and
-     serial number fields is populated as follows.  The issuer name and
-     the serial number is taken from 'cert' .  The issuer key is taken
-     from 'issuer' .  The hashed values will be hashed using the
-     'digest' algorithm, normally 'GNUTLS_DIG_SHA1' .
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_ocsp_req_add_cert_id
----------------------------
-
- -- Function: int gnutls_ocsp_req_add_cert_id (gnutls_ocsp_req_t REQ,
-          gnutls_digest_algorithm_t DIGEST, const gnutls_datum_t *
-          ISSUER_NAME_HASH, const gnutls_datum_t * ISSUER_KEY_HASH,
-          const gnutls_datum_t * SERIAL_NUMBER)
-     REQ: should contain a 'gnutls_ocsp_req_t' structure
-
-     DIGEST: hash algorithm, a 'gnutls_digest_algorithm_t' value
-
-     ISSUER_NAME_HASH: hash of issuer's DN
-
-     ISSUER_KEY_HASH: hash of issuer's public key
-
-     SERIAL_NUMBER: serial number of certificate to check
-
-     This function will add another request to the OCSP request for a
-     particular certificate having the issuer name hash of
-     'issuer_name_hash' and issuer key hash of 'issuer_key_hash' (both
-     hashed using 'digest' ) and serial number 'serial_number' .
-
-     The information needed corresponds to the CertID structure:
-
-     <informalexample><programlisting> CertID ::= SEQUENCE {
-     hashAlgorithm AlgorithmIdentifier, issuerNameHash OCTET STRING, -
-     Hash of Issuer's DN issuerKeyHash OCTET STRING, - Hash of Issuers
-     public key serialNumber CertificateSerialNumber }
-     </programlisting></informalexample>
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_ocsp_req_deinit
-----------------------
-
- -- Function: void gnutls_ocsp_req_deinit (gnutls_ocsp_req_t REQ)
-     REQ: The structure to be deinitialized
-
-     This function will deinitialize a OCSP request structure.
-
-gnutls_ocsp_req_export
-----------------------
-
- -- Function: int gnutls_ocsp_req_export (gnutls_ocsp_req_t REQ,
-          gnutls_datum_t * DATA)
-     REQ: Holds the OCSP request
-
-     DATA: newly allocate buffer holding DER encoded OCSP request
-
-     This function will export the OCSP request to DER format.
-
-     *Returns:* In case of failure a negative error code will be
-     returned, and 0 on success.
-
-gnutls_ocsp_req_get_cert_id
----------------------------
-
- -- Function: int gnutls_ocsp_req_get_cert_id (gnutls_ocsp_req_t REQ,
-          unsigned INDX, gnutls_digest_algorithm_t * DIGEST,
-          gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t *
-          ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER)
-     REQ: should contain a 'gnutls_ocsp_req_t' structure
-
-     INDX: Specifies which extension OID to get.  Use (0) to get the
-     first one.
-
-     DIGEST: output variable with 'gnutls_digest_algorithm_t' hash
-     algorithm
-
-     ISSUER_NAME_HASH: output buffer with hash of issuer's DN
-
-     ISSUER_KEY_HASH: output buffer with hash of issuer's public key
-
-     SERIAL_NUMBER: output buffer with serial number of certificate to
-     check
-
-     This function will return the certificate information of the 'indx'
-     'ed request in the OCSP request.  The information returned
-     corresponds to the CertID structure:
-
-     <informalexample><programlisting> CertID ::= SEQUENCE {
-     hashAlgorithm AlgorithmIdentifier, issuerNameHash OCTET STRING, -
-     Hash of Issuer's DN issuerKeyHash OCTET STRING, - Hash of Issuers
-     public key serialNumber CertificateSerialNumber }
-     </programlisting></informalexample>
-
-     Each of the pointers to output variables may be NULL to indicate
-     that the caller is not interested in that value.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.  If you have reached
-     the last CertID available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
-     will be returned.
-
-gnutls_ocsp_req_get_extension
------------------------------
-
- -- Function: int gnutls_ocsp_req_get_extension (gnutls_ocsp_req_t REQ,
-          unsigned INDX, gnutls_datum_t * OID, unsigned int * CRITICAL,
-          gnutls_datum_t * DATA)
-     REQ: should contain a 'gnutls_ocsp_req_t' structure
-
-     INDX: Specifies which extension OID to get.  Use (0) to get the
-     first one.
-
-     OID: will hold newly allocated buffer with OID of extension, may be
-     NULL
-
-     CRITICAL: output variable with critical flag, may be NULL.
-
-     DATA: will hold newly allocated buffer with extension data, may be
-     NULL
-
-     This function will return all information about the requested
-     extension in the OCSP request.  The information returned is the
-     OID, the critical flag, and the data itself.  The extension OID
-     will be stored as a string.  Any of 'oid' , 'critical' , and 'data'
-     may be NULL which means that the caller is not interested in
-     getting that information back.
-
-     The caller needs to deallocate memory by calling 'gnutls_free()' on
-     'oid' ->data and 'data' ->data.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.  If you have reached
-     the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
-
-gnutls_ocsp_req_get_nonce
--------------------------
-
- -- Function: int gnutls_ocsp_req_get_nonce (gnutls_ocsp_req_t REQ,
-          unsigned int * CRITICAL, gnutls_datum_t * NONCE)
-     REQ: should contain a 'gnutls_ocsp_req_t' structure
-
-     CRITICAL: whether nonce extension is marked critical, or NULL
-
-     NONCE: will hold newly allocated buffer with nonce data
-
-     This function will return the OCSP request nonce extension data.
-
-     The caller needs to deallocate memory by calling 'gnutls_free()' on
-     'nonce' ->data.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_ocsp_req_get_version
----------------------------
-
- -- Function: int gnutls_ocsp_req_get_version (gnutls_ocsp_req_t REQ)
-     REQ: should contain a 'gnutls_ocsp_req_t' structure
-
-     This function will return the version of the OCSP request.
-     Typically this is always 1 indicating version 1.
-
-     *Returns:* version of OCSP request, or a negative error code on
-     error.
-
-gnutls_ocsp_req_import
-----------------------
-
- -- Function: int gnutls_ocsp_req_import (gnutls_ocsp_req_t REQ, const
-          gnutls_datum_t * DATA)
-     REQ: The structure to store the parsed request.
-
-     DATA: DER encoded OCSP request.
-
-     This function will convert the given DER encoded OCSP request to
-     the native 'gnutls_ocsp_req_t' format.  The output will be stored
-     in 'req' .
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_req_init
---------------------
-
- -- Function: int gnutls_ocsp_req_init (gnutls_ocsp_req_t * REQ)
-     REQ: The structure to be initialized
-
-     This function will initialize an OCSP request structure.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_req_print
----------------------
-
- -- Function: int gnutls_ocsp_req_print (gnutls_ocsp_req_t REQ,
-          gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)
-     REQ: The structure to be printed
-
-     FORMAT: Indicate the format to use
-
-     OUT: Newly allocated datum with (0) terminated string.
-
-     This function will pretty print a OCSP request, suitable for
-     display to a human.
-
-     If the format is 'GNUTLS_OCSP_PRINT_FULL' then all fields of the
-     request will be output, on multiple lines.
-
-     The output 'out' ->data needs to be deallocate using
-     'gnutls_free()' .
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_req_randomize_nonce
--------------------------------
-
- -- Function: int gnutls_ocsp_req_randomize_nonce (gnutls_ocsp_req_t
-          REQ)
-     REQ: should contain a 'gnutls_ocsp_req_t' structure
-
-     This function will add or update an nonce extension to the OCSP
-     request with a newly generated random value.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_ocsp_req_set_extension
------------------------------
-
- -- Function: int gnutls_ocsp_req_set_extension (gnutls_ocsp_req_t REQ,
-          const char * OID, unsigned int CRITICAL, const gnutls_datum_t
-          * DATA)
-     REQ: should contain a 'gnutls_ocsp_req_t' structure
-
-     OID: buffer with OID of extension as a string.
-
-     CRITICAL: critical flag, normally false.
-
-     DATA: the extension data
-
-     This function will add an extension to the OCSP request.  Calling
-     this function multiple times for the same OID will overwrite values
-     from earlier calls.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_ocsp_req_set_nonce
--------------------------
-
- -- Function: int gnutls_ocsp_req_set_nonce (gnutls_ocsp_req_t REQ,
-          unsigned int CRITICAL, const gnutls_datum_t * NONCE)
-     REQ: should contain a 'gnutls_ocsp_req_t' structure
-
-     CRITICAL: critical flag, normally false.
-
-     NONCE: the nonce data
-
-     This function will add an nonce extension to the OCSP request.
-     Calling this function multiple times will overwrite values from
-     earlier calls.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_ocsp_resp_check_crt
---------------------------
-
- -- Function: int gnutls_ocsp_resp_check_crt (gnutls_ocsp_resp_t RESP,
-          unsigned int INDX, gnutls_x509_crt_t CRT)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     INDX: Specifies response number to get.  Use (0) to get the first
-     one.
-
-     CRT: The certificate to check
-
-     This function will check whether the OCSP response is about the
-     provided certificate.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-     *Since:* 3.1.3
-
-gnutls_ocsp_resp_deinit
------------------------
-
- -- Function: void gnutls_ocsp_resp_deinit (gnutls_ocsp_resp_t RESP)
-     RESP: The structure to be deinitialized
-
-     This function will deinitialize a OCSP response structure.
-
-gnutls_ocsp_resp_export
------------------------
-
- -- Function: int gnutls_ocsp_resp_export (gnutls_ocsp_resp_t RESP,
-          gnutls_datum_t * DATA)
-     RESP: Holds the OCSP response
-
-     DATA: newly allocate buffer holding DER encoded OCSP response
-
-     This function will export the OCSP response to DER format.
-
-     *Returns:* In case of failure a negative error code will be
-     returned, and 0 on success.
-
-gnutls_ocsp_resp_get_certs
---------------------------
-
- -- Function: int gnutls_ocsp_resp_get_certs (gnutls_ocsp_resp_t RESP,
-          gnutls_x509_crt_t ** CERTS, size_t * NCERTS)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     CERTS: newly allocated array with 'gnutls_x509_crt_t' certificates
-
-     NCERTS: output variable with number of allocated certs.
-
-     This function will extract the X.509 certificates found in the
-     Basic OCSP Response.  The 'certs' output variable will hold a newly
-     allocated zero-terminated array with X.509 certificates.
-
-     Every certificate in the array needs to be de-allocated with
-     'gnutls_x509_crt_deinit()' and the array itself must be freed using
-     'gnutls_free()' .
-
-     Both the 'certs' and 'ncerts' variables may be NULL. Then the
-     function will work as normal but will not return the NULL:d
-     information.  This can be used to get the number of certificates
-     only, or to just get the certificate array without its size.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_resp_get_extension
-------------------------------
-
- -- Function: int gnutls_ocsp_resp_get_extension (gnutls_ocsp_resp_t
-          RESP, unsigned INDX, gnutls_datum_t * OID, unsigned int *
-          CRITICAL, gnutls_datum_t * DATA)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     INDX: Specifies which extension OID to get.  Use (0) to get the
-     first one.
-
-     OID: will hold newly allocated buffer with OID of extension, may be
-     NULL
-
-     CRITICAL: output variable with critical flag, may be NULL.
-
-     DATA: will hold newly allocated buffer with extension data, may be
-     NULL
-
-     This function will return all information about the requested
-     extension in the OCSP response.  The information returned is the
-     OID, the critical flag, and the data itself.  The extension OID
-     will be stored as a string.  Any of 'oid' , 'critical' , and 'data'
-     may be NULL which means that the caller is not interested in
-     getting that information back.
-
-     The caller needs to deallocate memory by calling 'gnutls_free()' on
-     'oid' ->data and 'data' ->data.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.  If you have reached
-     the last extension available
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
-
-gnutls_ocsp_resp_get_nonce
---------------------------
-
- -- Function: int gnutls_ocsp_resp_get_nonce (gnutls_ocsp_resp_t RESP,
-          unsigned int * CRITICAL, gnutls_datum_t * NONCE)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     CRITICAL: whether nonce extension is marked critical
-
-     NONCE: will hold newly allocated buffer with nonce data
-
-     This function will return the Basic OCSP Response nonce extension
-     data.
-
-     The caller needs to deallocate memory by calling 'gnutls_free()' on
-     'nonce' ->data.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_ocsp_resp_get_produced
------------------------------
-
- -- Function: time_t gnutls_ocsp_resp_get_produced (gnutls_ocsp_resp_t
-          RESP)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     This function will return the time when the OCSP response was
-     signed.
-
-     *Returns:* signing time, or (time_t)-1 on error.
-
-gnutls_ocsp_resp_get_responder
-------------------------------
-
- -- Function: int gnutls_ocsp_resp_get_responder (gnutls_ocsp_resp_t
-          RESP, gnutls_datum_t * DN)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     DN: newly allocated buffer with name
-
-     This function will extract the name of the Basic OCSP Response in
-     the provided buffer.  The name will be in the form
-     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC2253.  The output string
-     will be ASCII or UTF-8 encoded, depending on the certificate data.
-
-     The caller needs to deallocate memory by calling 'gnutls_free()' on
-     'dn' ->data.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_ocsp_resp_get_response
------------------------------
-
- -- Function: int gnutls_ocsp_resp_get_response (gnutls_ocsp_resp_t
-          RESP, gnutls_datum_t * RESPONSE_TYPE_OID, gnutls_datum_t *
-          RESPONSE)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     RESPONSE_TYPE_OID: newly allocated output buffer with response type
-     OID
-
-     RESPONSE: newly allocated output buffer with DER encoded response
-
-     This function will extract the response type OID in and the
-     response data from an OCSP response.  Normally the
-     'response_type_oid' is always "1.3.6.1.5.5.7.48.1.1" which means
-     the 'response' should be decoded as a Basic OCSP Response, but
-     technically other response types could be used.
-
-     This function is typically only useful when you want to extract the
-     response type OID of an response for diagnostic purposes.
-     Otherwise 'gnutls_ocsp_resp_import()' will decode the basic OCSP
-     response part and the caller need not worry about that aspect.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_resp_get_signature
-------------------------------
-
- -- Function: int gnutls_ocsp_resp_get_signature (gnutls_ocsp_resp_t
-          RESP, gnutls_datum_t * SIG)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     SIG: newly allocated output buffer with signature data
-
-     This function will extract the signature field of a OCSP response.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_resp_get_signature_algorithm
-----------------------------------------
-
- -- Function: int gnutls_ocsp_resp_get_signature_algorithm
-          (gnutls_ocsp_resp_t RESP)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     This function will return a value of the 'gnutls_sign_algorithm_t'
-     enumeration that is the signature algorithm that has been used to
-     sign the OCSP response.
-
-     *Returns:* a 'gnutls_sign_algorithm_t' value, or a negative error
-     code on error.
-
-gnutls_ocsp_resp_get_single
----------------------------
-
- -- Function: int gnutls_ocsp_resp_get_single (gnutls_ocsp_resp_t RESP,
-          unsigned INDX, gnutls_digest_algorithm_t * DIGEST,
-          gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t *
-          ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER, unsigned int
-          * CERT_STATUS, time_t * THIS_UPDATE, time_t * NEXT_UPDATE,
-          time_t * REVOCATION_TIME, unsigned int * REVOCATION_REASON)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     INDX: Specifies response number to get.  Use (0) to get the first
-     one.
-
-     DIGEST: output variable with 'gnutls_digest_algorithm_t' hash
-     algorithm
-
-     ISSUER_NAME_HASH: output buffer with hash of issuer's DN
-
-     ISSUER_KEY_HASH: output buffer with hash of issuer's public key
-
-     SERIAL_NUMBER: output buffer with serial number of certificate to
-     check
-
-     CERT_STATUS: a certificate status, a 'gnutls_ocsp_cert_status_t'
-     enum.
-
-     THIS_UPDATE: time at which the status is known to be correct.
-
-     NEXT_UPDATE: when newer information will be available, or
-     (time_t)-1 if unspecified
-
-     REVOCATION_TIME: when 'cert_status' is 'GNUTLS_OCSP_CERT_REVOKED' ,
-     holds time of revocation.
-
-     REVOCATION_REASON: revocation reason, a 'gnutls_x509_crl_reason_t'
-     enum.
-
-     This function will return the certificate information of the 'indx'
-     'ed response in the Basic OCSP Response 'resp' .  The information
-     returned corresponds to the OCSP SingleResponse structure except
-     the final singleExtensions.
-
-     Each of the pointers to output variables may be NULL to indicate
-     that the caller is not interested in that value.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.  If you have reached
-     the last CertID available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
-     will be returned.
-
-gnutls_ocsp_resp_get_status
----------------------------
-
- -- Function: int gnutls_ocsp_resp_get_status (gnutls_ocsp_resp_t RESP)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     This function will return the status of a OCSP response, an
-     'gnutls_ocsp_resp_status_t' enumeration.
-
-     *Returns:* status of OCSP request as a 'gnutls_ocsp_resp_status_t'
-     , or a negative error code on error.
-
-gnutls_ocsp_resp_get_version
-----------------------------
-
- -- Function: int gnutls_ocsp_resp_get_version (gnutls_ocsp_resp_t RESP)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     This function will return the version of the Basic OCSP Response.
-     Typically this is always 1 indicating version 1.
-
-     *Returns:* version of Basic OCSP response, or a negative error code
-     on error.
-
-gnutls_ocsp_resp_import
------------------------
-
- -- Function: int gnutls_ocsp_resp_import (gnutls_ocsp_resp_t RESP,
-          const gnutls_datum_t * DATA)
-     RESP: The structure to store the parsed response.
-
-     DATA: DER encoded OCSP response.
-
-     This function will convert the given DER encoded OCSP response to
-     the native 'gnutls_ocsp_resp_t' format.  It also decodes the Basic
-     OCSP Response part, if any.  The output will be stored in 'resp' .
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_resp_init
----------------------
-
- -- Function: int gnutls_ocsp_resp_init (gnutls_ocsp_resp_t * RESP)
-     RESP: The structure to be initialized
-
-     This function will initialize an OCSP response structure.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_resp_print
-----------------------
-
- -- Function: int gnutls_ocsp_resp_print (gnutls_ocsp_resp_t RESP,
-          gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)
-     RESP: The structure to be printed
-
-     FORMAT: Indicate the format to use
-
-     OUT: Newly allocated datum with (0) terminated string.
-
-     This function will pretty print a OCSP response, suitable for
-     display to a human.
-
-     If the format is 'GNUTLS_OCSP_PRINT_FULL' then all fields of the
-     response will be output, on multiple lines.
-
-     The output 'out' ->data needs to be deallocate using
-     'gnutls_free()' .
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_resp_verify
------------------------
-
- -- Function: int gnutls_ocsp_resp_verify (gnutls_ocsp_resp_t RESP,
-          gnutls_x509_trust_list_t TRUSTLIST, unsigned int * VERIFY,
-          unsigned int FLAGS)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     TRUSTLIST: trust anchors as a 'gnutls_x509_trust_list_t' structure
-
-     VERIFY: output variable with verification status, an
-     'gnutls_ocsp_cert_status_t'
-
-     FLAGS: verification flags, 0 for now.
-
-     Verify signature of the Basic OCSP Response against the public key
-     in the certificate of a trusted signer.  The 'trustlist' should be
-     populated with trust anchors.  The function will extract the signer
-     certificate from the Basic OCSP Response and will verify it against
-     the 'trustlist' .  A trusted signer is a certificate that is either
-     in 'trustlist' , or it is signed directly by a certificate in
-     'trustlist' and has the id-ad-ocspSigning Extended Key Usage bit
-     set.
-
-     The output 'verify' variable will hold verification status codes
-     (e.g., 'GNUTLS_OCSP_VERIFY_SIGNER_NOT_FOUND' ,
-     'GNUTLS_OCSP_VERIFY_INSECURE_ALGORITHM' ) which are only valid if
-     the function returned 'GNUTLS_E_SUCCESS' .
-
-     Note that the function returns 'GNUTLS_E_SUCCESS' even when
-     verification failed.  The caller must always inspect the 'verify'
-     variable to find out the verification status.
-
-     The 'flags' variable should be 0 for now.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_ocsp_resp_verify_direct
-------------------------------
-
- -- Function: int gnutls_ocsp_resp_verify_direct (gnutls_ocsp_resp_t
-          RESP, gnutls_x509_crt_t ISSUER, unsigned int * VERIFY,
-          unsigned int FLAGS)
-     RESP: should contain a 'gnutls_ocsp_resp_t' structure
-
-     ISSUER: certificate believed to have signed the response
-
-     VERIFY: output variable with verification status, an
-     'gnutls_ocsp_cert_status_t'
-
-     FLAGS: verification flags, 0 for now.
-
-     Verify signature of the Basic OCSP Response against the public key
-     in the 'issuer' certificate.
-
-     The output 'verify' variable will hold verification status codes
-     (e.g., 'GNUTLS_OCSP_VERIFY_SIGNER_NOT_FOUND' ,
-     'GNUTLS_OCSP_VERIFY_INSECURE_ALGORITHM' ) which are only valid if
-     the function returned 'GNUTLS_E_SUCCESS' .
-
-     Note that the function returns 'GNUTLS_E_SUCCESS' even when
-     verification failed.  The caller must always inspect the 'verify'
-     variable to find out the verification status.
-
-     The 'flags' variable should be 0 for now.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-
-File: gnutls.info,  Node: OpenPGP API,  Next: PKCS 12 API,  Prev: OCSP API,  Up: API reference
-
-E.6 OpenPGP API
-===============
-
-The following functions are to be used for OpenPGP certificate handling.
-Their prototypes lie in 'gnutls/openpgp.h'.
-
-gnutls_certificate_set_openpgp_key
-----------------------------------
-
- -- Function: int gnutls_certificate_set_openpgp_key
-          (gnutls_certificate_credentials_t RES, gnutls_openpgp_crt_t
-          CRT, gnutls_openpgp_privkey_t PKEY)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
-
-     CRT: contains an openpgp public key
-
-     PKEY: is an openpgp private key
-
-     This function sets a certificate/private key pair in the
-     gnutls_certificate_credentials_t structure.  This function may be
-     called more than once (in case multiple keys/certificates exist for
-     the server).
-
-     Note that this function requires that the preferred key ids have
-     been set and be used.  See
-     'gnutls_openpgp_crt_set_preferred_key_id()' .  Otherwise the master
-     key will be used.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_certificate_set_openpgp_key_file
----------------------------------------
-
- -- Function: int gnutls_certificate_set_openpgp_key_file
-          (gnutls_certificate_credentials_t RES, const char * CERTFILE,
-          const char * KEYFILE, gnutls_openpgp_crt_fmt_t FORMAT)
-     RES: the destination context to save the data.
-
-     CERTFILE: the file that contains the public key.
-
-     KEYFILE: the file that contains the secret key.
-
-     FORMAT: the format of the keys
-
-     This funtion is used to load OpenPGP keys into the GnuTLS
-     credentials structure.  The file should contain at least one valid
-     non encrypted subkey.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_certificate_set_openpgp_key_file2
-----------------------------------------
-
- -- Function: int gnutls_certificate_set_openpgp_key_file2
-          (gnutls_certificate_credentials_t RES, const char * CERTFILE,
-          const char * KEYFILE, const char * SUBKEY_ID,
-          gnutls_openpgp_crt_fmt_t FORMAT)
-     RES: the destination context to save the data.
-
-     CERTFILE: the file that contains the public key.
-
-     KEYFILE: the file that contains the secret key.
-
-     SUBKEY_ID: a hex encoded subkey id
-
-     FORMAT: the format of the keys
-
-     This funtion is used to load OpenPGP keys into the GnuTLS
-     credential structure.  The file should contain at least one valid
-     non encrypted subkey.
-
-     The special keyword "auto" is also accepted as 'subkey_id' .  In
-     that case the 'gnutls_openpgp_crt_get_auth_subkey()' will be used
-     to retrieve the subkey.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.4.0
-
-gnutls_certificate_set_openpgp_key_mem
---------------------------------------
-
- -- Function: int gnutls_certificate_set_openpgp_key_mem
-          (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
-          CERT, const gnutls_datum_t * KEY, gnutls_openpgp_crt_fmt_t
-          FORMAT)
-     RES: the destination context to save the data.
-
-     CERT: the datum that contains the public key.
-
-     KEY: the datum that contains the secret key.
-
-     FORMAT: the format of the keys
-
-     This funtion is used to load OpenPGP keys into the GnuTLS
-     credential structure.  The datum should contain at least one valid
-     non encrypted subkey.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_certificate_set_openpgp_key_mem2
----------------------------------------
-
- -- Function: int gnutls_certificate_set_openpgp_key_mem2
-          (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
-          CERT, const gnutls_datum_t * KEY, const char * SUBKEY_ID,
-          gnutls_openpgp_crt_fmt_t FORMAT)
-     RES: the destination context to save the data.
-
-     CERT: the datum that contains the public key.
-
-     KEY: the datum that contains the secret key.
-
-     SUBKEY_ID: a hex encoded subkey id
-
-     FORMAT: the format of the keys
-
-     This funtion is used to load OpenPGP keys into the GnuTLS
-     credentials structure.  The datum should contain at least one valid
-     non encrypted subkey.
-
-     The special keyword "auto" is also accepted as 'subkey_id' .  In
-     that case the 'gnutls_openpgp_crt_get_auth_subkey()' will be used
-     to retrieve the subkey.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.4.0
-
-gnutls_certificate_set_openpgp_keyring_file
--------------------------------------------
-
- -- Function: int gnutls_certificate_set_openpgp_keyring_file
-          (gnutls_certificate_credentials_t C, const char * FILE,
-          gnutls_openpgp_crt_fmt_t FORMAT)
-     C: A certificate credentials structure
-
-     FILE: filename of the keyring.
-
-     FORMAT: format of keyring.
-
-     The function is used to set keyrings that will be used internally
-     by various OpenPGP functions.  For example to find a key when it is
-     needed for an operations.  The keyring will also be used at the
-     verification functions.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_certificate_set_openpgp_keyring_mem
-------------------------------------------
-
- -- Function: int gnutls_certificate_set_openpgp_keyring_mem
-          (gnutls_certificate_credentials_t C, const uint8_t * DATA,
-          size_t DLEN, gnutls_openpgp_crt_fmt_t FORMAT)
-     C: A certificate credentials structure
-
-     DATA: buffer with keyring data.
-
-     DLEN: length of data buffer.
-
-     FORMAT: the format of the keyring
-
-     The function is used to set keyrings that will be used internally
-     by various OpenPGP functions.  For example to find a key when it is
-     needed for an operations.  The keyring will also be used at the
-     verification functions.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_openpgp_crt_check_hostname
----------------------------------
-
- -- Function: int gnutls_openpgp_crt_check_hostname
-          (gnutls_openpgp_crt_t KEY, const char * HOSTNAME)
-     KEY: should contain a 'gnutls_openpgp_crt_t' structure
-
-     HOSTNAME: A null terminated string that contains a DNS name
-
-     This function will check if the given key's owner matches the given
-     hostname.  This is a basic implementation of the matching described
-     in RFC2818 (HTTPS), which takes into account wildcards.
-
-     *Returns:* non-zero for a successful match, and zero on failure.
-
-gnutls_openpgp_crt_deinit
--------------------------
-
- -- Function: void gnutls_openpgp_crt_deinit (gnutls_openpgp_crt_t KEY)
-     KEY: The structure to be initialized
-
-     This function will deinitialize a key structure.
-
-gnutls_openpgp_crt_export
--------------------------
-
- -- Function: int gnutls_openpgp_crt_export (gnutls_openpgp_crt_t KEY,
-          gnutls_openpgp_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
-          OUTPUT_DATA_SIZE)
-     KEY: Holds the key.
-
-     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
-
-     OUTPUT_DATA: will contain the raw or base64 encoded key
-
-     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
-     replaced by the actual size of parameters)
-
-     This function will convert the given key to RAW or Base64 format.
-     If the buffer provided is not long enough to hold the output, then
-     'GNUTLS_E_SHORT_MEMORY_BUFFER' will be returned.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_crt_export2
---------------------------
-
- -- Function: int gnutls_openpgp_crt_export2 (gnutls_openpgp_crt_t KEY,
-          gnutls_openpgp_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
-     KEY: Holds the key.
-
-     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
-
-     OUT: will contain the raw or base64 encoded key
-
-     This function will convert the given key to RAW or Base64 format.
-     The output buffer is allocated using 'gnutls_malloc()' .
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-     *Since:* 3.1.3
-
-gnutls_openpgp_crt_get_auth_subkey
-----------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_auth_subkey
-          (gnutls_openpgp_crt_t CRT, gnutls_openpgp_keyid_t KEYID,
-          unsigned int FLAG)
-     CRT: the structure that contains the OpenPGP public key.
-
-     KEYID: the struct to save the keyid.
-
-     FLAG: Non-zero indicates that a valid subkey is always returned.
-
-     Returns the 64-bit keyID of the first valid OpenPGP subkey marked
-     for authentication.  If flag is non-zero and no authentication
-     subkey exists, then a valid subkey will be returned even if it is
-     not marked for authentication.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_crt_get_creation_time
-------------------------------------
-
- -- Function: time_t gnutls_openpgp_crt_get_creation_time
-          (gnutls_openpgp_crt_t KEY)
-     KEY: the structure that contains the OpenPGP public key.
-
-     Get key creation time.
-
-     *Returns:* the timestamp when the OpenPGP key was created.
-
-gnutls_openpgp_crt_get_expiration_time
---------------------------------------
-
- -- Function: time_t gnutls_openpgp_crt_get_expiration_time
-          (gnutls_openpgp_crt_t KEY)
-     KEY: the structure that contains the OpenPGP public key.
-
-     Get key expiration time.  A value of '0' means that the key doesn't
-     expire at all.
-
-     *Returns:* the time when the OpenPGP key expires.
-
-gnutls_openpgp_crt_get_fingerprint
-----------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_fingerprint
-          (gnutls_openpgp_crt_t KEY, void * FPR, size_t * FPRLEN)
-     KEY: the raw data that contains the OpenPGP public key.
-
-     FPR: the buffer to save the fingerprint, must hold at least 20
-     bytes.
-
-     FPRLEN: the integer to save the length of the fingerprint.
-
-     Get key fingerprint.  Depending on the algorithm, the fingerprint
-     can be 16 or 20 bytes.
-
-     *Returns:* On success, 0 is returned.  Otherwise, an error code.
-
-gnutls_openpgp_crt_get_key_id
------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_key_id (gnutls_openpgp_crt_t
-          KEY, gnutls_openpgp_keyid_t KEYID)
-     KEY: the structure that contains the OpenPGP public key.
-
-     KEYID: the buffer to save the keyid.
-
-     Get key id string.
-
-     *Returns:* the 64-bit keyID of the OpenPGP key.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_key_usage
---------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_key_usage (gnutls_openpgp_crt_t
-          KEY, unsigned int * KEY_USAGE)
-     KEY: should contain a gnutls_openpgp_crt_t structure
-
-     KEY_USAGE: where the key usage bits will be stored
-
-     This function will return certificate's key usage, by checking the
-     key algorithm.  The key usage value will ORed values of the:
-     'GNUTLS_KEY_DIGITAL_SIGNATURE' , 'GNUTLS_KEY_KEY_ENCIPHERMENT' .
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_crt_get_name
----------------------------
-
- -- Function: int gnutls_openpgp_crt_get_name (gnutls_openpgp_crt_t KEY,
-          int IDX, char * BUF, size_t * SIZEOF_BUF)
-     KEY: the structure that contains the OpenPGP public key.
-
-     IDX: the index of the ID to extract
-
-     BUF: a pointer to a structure to hold the name, may be 'NULL' to
-     only get the 'sizeof_buf' .
-
-     SIZEOF_BUF: holds the maximum size of 'buf' , on return hold the
-     actual/required size of 'buf' .
-
-     Extracts the userID from the parsed OpenPGP key.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, and if the index of the
-     ID does not exist 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' , or an
-     error code.
-
-gnutls_openpgp_crt_get_pk_algorithm
------------------------------------
-
- -- Function: gnutls_pk_algorithm_t gnutls_openpgp_crt_get_pk_algorithm
-          (gnutls_openpgp_crt_t KEY, unsigned int * BITS)
-     KEY: is an OpenPGP key
-
-     BITS: if bits is non null it will hold the size of the parameters'
-     in bits
-
-     This function will return the public key algorithm of an OpenPGP
-     certificate.
-
-     If bits is non null, it should have enough size to hold the
-     parameters size in bits.  For RSA the bits returned is the modulus.
-     For DSA the bits returned are of the public exponent.
-
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
-     success, or GNUTLS_PK_UNKNOWN on error.
-
-gnutls_openpgp_crt_get_pk_dsa_raw
----------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_pk_dsa_raw
-          (gnutls_openpgp_crt_t CRT, gnutls_datum_t * P, gnutls_datum_t
-          * Q, gnutls_datum_t * G, gnutls_datum_t * Y)
-     CRT: Holds the certificate
-
-     P: will hold the p
-
-     Q: will hold the q
-
-     G: will hold the g
-
-     Y: will hold the y
-
-     This function will export the DSA public key's parameters found in
-     the given certificate.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_pk_rsa_raw
----------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_pk_rsa_raw
-          (gnutls_openpgp_crt_t CRT, gnutls_datum_t * M, gnutls_datum_t
-          * E)
-     CRT: Holds the certificate
-
-     M: will hold the modulus
-
-     E: will hold the public exponent
-
-     This function will export the RSA public key's parameters found in
-     the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_preferred_key_id
----------------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_preferred_key_id
-          (gnutls_openpgp_crt_t KEY, gnutls_openpgp_keyid_t KEYID)
-     KEY: the structure that contains the OpenPGP public key.
-
-     KEYID: the struct to save the keyid.
-
-     Get preferred key id.  If it hasn't been set it returns
-     'GNUTLS_E_INVALID_REQUEST' .
-
-     *Returns:* the 64-bit preferred keyID of the OpenPGP key.
-
-gnutls_openpgp_crt_get_revoked_status
--------------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_revoked_status
-          (gnutls_openpgp_crt_t KEY)
-     KEY: the structure that contains the OpenPGP public key.
-
-     Get revocation status of key.
-
-     *Returns:* true (1) if the key has been revoked, or false (0) if it
-     has not.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_count
------------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_subkey_count
-          (gnutls_openpgp_crt_t KEY)
-     KEY: is an OpenPGP key
-
-     This function will return the number of subkeys present in the
-     given OpenPGP certificate.
-
-     *Returns:* the number of subkeys, or a negative error code on
-     error.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_creation_time
--------------------------------------------
-
- -- Function: time_t gnutls_openpgp_crt_get_subkey_creation_time
-          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
-     KEY: the structure that contains the OpenPGP public key.
-
-     IDX: the subkey index
-
-     Get subkey creation time.
-
-     *Returns:* the timestamp when the OpenPGP sub-key was created.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_expiration_time
----------------------------------------------
-
- -- Function: time_t gnutls_openpgp_crt_get_subkey_expiration_time
-          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
-     KEY: the structure that contains the OpenPGP public key.
-
-     IDX: the subkey index
-
-     Get subkey expiration time.  A value of '0' means that the key
-     doesn't expire at all.
-
-     *Returns:* the time when the OpenPGP key expires.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_fingerprint
------------------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_subkey_fingerprint
-          (gnutls_openpgp_crt_t KEY, unsigned int IDX, void * FPR,
-          size_t * FPRLEN)
-     KEY: the raw data that contains the OpenPGP public key.
-
-     IDX: the subkey index
-
-     FPR: the buffer to save the fingerprint, must hold at least 20
-     bytes.
-
-     FPRLEN: the integer to save the length of the fingerprint.
-
-     Get key fingerprint of a subkey.  Depending on the algorithm, the
-     fingerprint can be 16 or 20 bytes.
-
-     *Returns:* On success, 0 is returned.  Otherwise, an error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_id
---------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_subkey_id (gnutls_openpgp_crt_t
-          KEY, unsigned int IDX, gnutls_openpgp_keyid_t KEYID)
-     KEY: the structure that contains the OpenPGP public key.
-
-     IDX: the subkey index
-
-     KEYID: the buffer to save the keyid.
-
-     Get the subkey's key-id.
-
-     *Returns:* the 64-bit keyID of the OpenPGP key.
-
-gnutls_openpgp_crt_get_subkey_idx
----------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_subkey_idx
-          (gnutls_openpgp_crt_t KEY, const gnutls_openpgp_keyid_t KEYID)
-     KEY: the structure that contains the OpenPGP public key.
-
-     KEYID: the keyid.
-
-     Get subkey's index.
-
-     *Returns:* the index of the subkey or a negative error value.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_pk_algorithm
-------------------------------------------
-
- -- Function: gnutls_pk_algorithm_t
-          gnutls_openpgp_crt_get_subkey_pk_algorithm
-          (gnutls_openpgp_crt_t KEY, unsigned int IDX, unsigned int *
-          BITS)
-     KEY: is an OpenPGP key
-
-     IDX: is the subkey index
-
-     BITS: if bits is non null it will hold the size of the parameters'
-     in bits
-
-     This function will return the public key algorithm of a subkey of
-     an OpenPGP certificate.
-
-     If bits is non null, it should have enough size to hold the
-     parameters size in bits.  For RSA the bits returned is the modulus.
-     For DSA the bits returned are of the public exponent.
-
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
-     success, or GNUTLS_PK_UNKNOWN on error.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_pk_dsa_raw
-----------------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_subkey_pk_dsa_raw
-          (gnutls_openpgp_crt_t CRT, unsigned int IDX, gnutls_datum_t *
-          P, gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y)
-     CRT: Holds the certificate
-
-     IDX: Is the subkey index
-
-     P: will hold the p
-
-     Q: will hold the q
-
-     G: will hold the g
-
-     Y: will hold the y
-
-     This function will export the DSA public key's parameters found in
-     the given certificate.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_pk_rsa_raw
-----------------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_subkey_pk_rsa_raw
-          (gnutls_openpgp_crt_t CRT, unsigned int IDX, gnutls_datum_t *
-          M, gnutls_datum_t * E)
-     CRT: Holds the certificate
-
-     IDX: Is the subkey index
-
-     M: will hold the modulus
-
-     E: will hold the public exponent
-
-     This function will export the RSA public key's parameters found in
-     the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_revoked_status
---------------------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_subkey_revoked_status
-          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
-     KEY: the structure that contains the OpenPGP public key.
-
-     IDX: is the subkey index
-
-     Get subkey revocation status.  A negative error code indicates an
-     error.
-
-     *Returns:* true (1) if the key has been revoked, or false (0) if it
-     has not.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_subkey_usage
------------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_subkey_usage
-          (gnutls_openpgp_crt_t KEY, unsigned int IDX, unsigned int *
-          KEY_USAGE)
-     KEY: should contain a gnutls_openpgp_crt_t structure
-
-     IDX: the subkey index
-
-     KEY_USAGE: where the key usage bits will be stored
-
-     This function will return certificate's key usage, by checking the
-     key algorithm.  The key usage value will ORed values of
-     'GNUTLS_KEY_DIGITAL_SIGNATURE' or 'GNUTLS_KEY_KEY_ENCIPHERMENT' .
-
-     A negative error code may be returned in case of parsing error.
-
-     *Returns:* key usage value.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_crt_get_version
-------------------------------
-
- -- Function: int gnutls_openpgp_crt_get_version (gnutls_openpgp_crt_t
-          KEY)
-     KEY: the structure that contains the OpenPGP public key.
-
-     Extract the version of the OpenPGP key.
-
-     *Returns:* the version number is returned, or a negative error code
-     on errors.
-
-gnutls_openpgp_crt_import
--------------------------
-
- -- Function: int gnutls_openpgp_crt_import (gnutls_openpgp_crt_t KEY,
-          const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t FORMAT)
-     KEY: The structure to store the parsed key.
-
-     DATA: The RAW or BASE64 encoded key.
-
-     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
-
-     This function will convert the given RAW or Base64 encoded key to
-     the native 'gnutls_openpgp_crt_t' format.  The output will be
-     stored in 'key'.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_crt_init
------------------------
-
- -- Function: int gnutls_openpgp_crt_init (gnutls_openpgp_crt_t * KEY)
-     KEY: The structure to be initialized
-
-     This function will initialize an OpenPGP key structure.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_crt_print
-------------------------
-
- -- Function: int gnutls_openpgp_crt_print (gnutls_openpgp_crt_t CERT,
-          gnutls_certificate_print_formats_t FORMAT, gnutls_datum_t *
-          OUT)
-     CERT: The structure to be printed
-
-     FORMAT: Indicate the format to use
-
-     OUT: Newly allocated datum with (0) terminated string.
-
-     This function will pretty print an OpenPGP certificate, suitable
-     for display to a human.
-
-     The format should be (0) for future compatibility.
-
-     The output 'out' needs to be deallocate using 'gnutls_free()' .
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_crt_set_preferred_key_id
----------------------------------------
-
- -- Function: int gnutls_openpgp_crt_set_preferred_key_id
-          (gnutls_openpgp_crt_t KEY, const gnutls_openpgp_keyid_t KEYID)
-     KEY: the structure that contains the OpenPGP public key.
-
-     KEYID: the selected keyid
-
-     This allows setting a preferred key id for the given certificate.
-     This key will be used by functions that involve key handling.
-
-     If the provided 'keyid' is 'NULL' then the master key is set as
-     preferred.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_openpgp_crt_verify_ring
-------------------------------
-
- -- Function: int gnutls_openpgp_crt_verify_ring (gnutls_openpgp_crt_t
-          KEY, gnutls_openpgp_keyring_t KEYRING, unsigned int FLAGS,
-          unsigned int * VERIFY)
-     KEY: the structure that holds the key.
-
-     KEYRING: holds the keyring to check against
-
-     FLAGS: unused (should be 0)
-
-     VERIFY: will hold the certificate verification output.
-
-     Verify all signatures in the key, using the given set of keys
-     (keyring).
-
-     The key verification output will be put in 'verify' and will be one
-     or more of the 'gnutls_certificate_status_t' enumerated elements
-     bitwise or'd.
-
-     Note that this function does not verify using any "web of trust".
-     You may use GnuPG for that purpose, or any other external PGP
-     application.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_crt_verify_self
-------------------------------
-
- -- Function: int gnutls_openpgp_crt_verify_self (gnutls_openpgp_crt_t
-          KEY, unsigned int FLAGS, unsigned int * VERIFY)
-     KEY: the structure that holds the key.
-
-     FLAGS: unused (should be 0)
-
-     VERIFY: will hold the key verification output.
-
-     Verifies the self signature in the key.  The key verification
-     output will be put in 'verify' and will be one or more of the
-     gnutls_certificate_status_t enumerated elements bitwise or'd.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_keyring_check_id
--------------------------------
-
- -- Function: int gnutls_openpgp_keyring_check_id
-          (gnutls_openpgp_keyring_t RING, const gnutls_openpgp_keyid_t
-          KEYID, unsigned int FLAGS)
-     RING: holds the keyring to check against
-
-     KEYID: will hold the keyid to check for.
-
-     FLAGS: unused (should be 0)
-
-     Check if a given key ID exists in the keyring.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success (if keyid exists) and a
-     negative error code on failure.
-
-gnutls_openpgp_keyring_deinit
------------------------------
-
- -- Function: void gnutls_openpgp_keyring_deinit
-          (gnutls_openpgp_keyring_t KEYRING)
-     KEYRING: The structure to be initialized
-
-     This function will deinitialize a keyring structure.
-
-gnutls_openpgp_keyring_get_crt
-------------------------------
-
- -- Function: int gnutls_openpgp_keyring_get_crt
-          (gnutls_openpgp_keyring_t RING, unsigned int IDX,
-          gnutls_openpgp_crt_t * CERT)
-     RING: Holds the keyring.
-
-     IDX: the index of the certificate to export
-
-     CERT: An uninitialized 'gnutls_openpgp_crt_t' structure
-
-     This function will extract an OpenPGP certificate from the given
-     keyring.  If the index given is out of range
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.  The
-     returned structure needs to be deinited.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_keyring_get_crt_count
-------------------------------------
-
- -- Function: int gnutls_openpgp_keyring_get_crt_count
-          (gnutls_openpgp_keyring_t RING)
-     RING: is an OpenPGP key ring
-
-     This function will return the number of OpenPGP certificates
-     present in the given keyring.
-
-     *Returns:* the number of subkeys, or a negative error code on
-     error.
-
-gnutls_openpgp_keyring_import
------------------------------
-
- -- Function: int gnutls_openpgp_keyring_import
-          (gnutls_openpgp_keyring_t KEYRING, const gnutls_datum_t *
-          DATA, gnutls_openpgp_crt_fmt_t FORMAT)
-     KEYRING: The structure to store the parsed key.
-
-     DATA: The RAW or BASE64 encoded keyring.
-
-     FORMAT: One of 'gnutls_openpgp_keyring_fmt' elements.
-
-     This function will convert the given RAW or Base64 encoded keyring
-     to the native 'gnutls_openpgp_keyring_t' format.  The output will
-     be stored in 'keyring'.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_keyring_init
----------------------------
-
- -- Function: int gnutls_openpgp_keyring_init (gnutls_openpgp_keyring_t
-          * KEYRING)
-     KEYRING: The structure to be initialized
-
-     This function will initialize an keyring structure.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_privkey_deinit
------------------------------
-
- -- Function: void gnutls_openpgp_privkey_deinit
-          (gnutls_openpgp_privkey_t KEY)
-     KEY: The structure to be initialized
-
-     This function will deinitialize a key structure.
-
-gnutls_openpgp_privkey_export
------------------------------
-
- -- Function: int gnutls_openpgp_privkey_export
-          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_crt_fmt_t
-          FORMAT, const char * PASSWORD, unsigned int FLAGS, void *
-          OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
-     KEY: Holds the key.
-
-     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
-
-     PASSWORD: the password that will be used to encrypt the key.
-     (unused for now)
-
-     FLAGS: (0) for future compatibility
-
-     OUTPUT_DATA: will contain the key base64 encoded or raw
-
-     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
-     replaced by the actual size of parameters)
-
-     This function will convert the given key to RAW or Base64 format.
-     If the buffer provided is not long enough to hold the output, then
-     GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_export2
-------------------------------
-
- -- Function: int gnutls_openpgp_privkey_export2
-          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_crt_fmt_t
-          FORMAT, const char * PASSWORD, unsigned int FLAGS,
-          gnutls_datum_t * OUT)
-     KEY: Holds the key.
-
-     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.
-
-     PASSWORD: the password that will be used to encrypt the key.
-     (unused for now)
-
-     FLAGS: (0) for future compatibility
-
-     OUT: will contain the raw or based64 encoded key
-
-     This function will convert the given key to RAW or Base64 format.
-     The output buffer is allocated using 'gnutls_malloc()' .
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-     *Since:* 3.1.3
-
-gnutls_openpgp_privkey_export_dsa_raw
--------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_export_dsa_raw
-          (gnutls_openpgp_privkey_t PKEY, gnutls_datum_t * P,
-          gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y,
-          gnutls_datum_t * X)
-     PKEY: Holds the certificate
-
-     P: will hold the p
-
-     Q: will hold the q
-
-     G: will hold the g
-
-     Y: will hold the y
-
-     X: will hold the x
-
-     This function will export the DSA private key's parameters found in
-     the given certificate.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_export_rsa_raw
--------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_export_rsa_raw
-          (gnutls_openpgp_privkey_t PKEY, gnutls_datum_t * M,
-          gnutls_datum_t * E, gnutls_datum_t * D, gnutls_datum_t * P,
-          gnutls_datum_t * Q, gnutls_datum_t * U)
-     PKEY: Holds the certificate
-
-     M: will hold the modulus
-
-     E: will hold the public exponent
-
-     D: will hold the private exponent
-
-     P: will hold the first prime (p)
-
-     Q: will hold the second prime (q)
-
-     U: will hold the coefficient
-
-     This function will export the RSA private key's parameters found in
-     the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_export_subkey_dsa_raw
---------------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_export_subkey_dsa_raw
-          (gnutls_openpgp_privkey_t PKEY, unsigned int IDX,
-          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
-          gnutls_datum_t * Y, gnutls_datum_t * X)
-     PKEY: Holds the certificate
-
-     IDX: Is the subkey index
-
-     P: will hold the p
-
-     Q: will hold the q
-
-     G: will hold the g
-
-     Y: will hold the y
-
-     X: will hold the x
-
-     This function will export the DSA private key's parameters found in
-     the given certificate.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_export_subkey_rsa_raw
---------------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_export_subkey_rsa_raw
-          (gnutls_openpgp_privkey_t PKEY, unsigned int IDX,
-          gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D,
-          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U)
-     PKEY: Holds the certificate
-
-     IDX: Is the subkey index
-
-     M: will hold the modulus
-
-     E: will hold the public exponent
-
-     D: will hold the private exponent
-
-     P: will hold the first prime (p)
-
-     Q: will hold the second prime (q)
-
-     U: will hold the coefficient
-
-     This function will export the RSA private key's parameters found in
-     the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_fingerprint
---------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_get_fingerprint
-          (gnutls_openpgp_privkey_t KEY, void * FPR, size_t * FPRLEN)
-     KEY: the raw data that contains the OpenPGP secret key.
-
-     FPR: the buffer to save the fingerprint, must hold at least 20
-     bytes.
-
-     FPRLEN: the integer to save the length of the fingerprint.
-
-     Get the fingerprint of the OpenPGP key.  Depends on the algorithm,
-     the fingerprint can be 16 or 20 bytes.
-
-     *Returns:* On success, 0 is returned, or an error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_key_id
----------------------------------
-
- -- Function: int gnutls_openpgp_privkey_get_key_id
-          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_keyid_t KEYID)
-     KEY: the structure that contains the OpenPGP secret key.
-
-     KEYID: the buffer to save the keyid.
-
-     Get key-id.
-
-     *Returns:* the 64-bit keyID of the OpenPGP key.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_pk_algorithm
----------------------------------------
-
- -- Function: gnutls_pk_algorithm_t
-          gnutls_openpgp_privkey_get_pk_algorithm
-          (gnutls_openpgp_privkey_t KEY, unsigned int * BITS)
-     KEY: is an OpenPGP key
-
-     BITS: if bits is non null it will hold the size of the parameters'
-     in bits
-
-     This function will return the public key algorithm of an OpenPGP
-     certificate.
-
-     If bits is non null, it should have enough size to hold the
-     parameters size in bits.  For RSA the bits returned is the modulus.
-     For DSA the bits returned are of the public exponent.
-
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
-     success, or a negative error code on error.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_preferred_key_id
--------------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_get_preferred_key_id
-          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_keyid_t KEYID)
-     KEY: the structure that contains the OpenPGP public key.
-
-     KEYID: the struct to save the keyid.
-
-     Get the preferred key-id for the key.
-
-     *Returns:* the 64-bit preferred keyID of the OpenPGP key, or if it
-     hasn't been set it returns 'GNUTLS_E_INVALID_REQUEST' .
-
-gnutls_openpgp_privkey_get_revoked_status
------------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_get_revoked_status
-          (gnutls_openpgp_privkey_t KEY)
-     KEY: the structure that contains the OpenPGP private key.
-
-     Get revocation status of key.
-
-     *Returns:* true (1) if the key has been revoked, or false (0) if it
-     has not, or a negative error code indicates an error.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_subkey_count
----------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_get_subkey_count
-          (gnutls_openpgp_privkey_t KEY)
-     KEY: is an OpenPGP key
-
-     This function will return the number of subkeys present in the
-     given OpenPGP certificate.
-
-     *Returns:* the number of subkeys, or a negative error code on
-     error.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_subkey_creation_time
------------------------------------------------
-
- -- Function: time_t gnutls_openpgp_privkey_get_subkey_creation_time
-          (gnutls_openpgp_privkey_t KEY, unsigned int IDX)
-     KEY: the structure that contains the OpenPGP private key.
-
-     IDX: the subkey index
-
-     Get subkey creation time.
-
-     *Returns:* the timestamp when the OpenPGP key was created.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_subkey_fingerprint
----------------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_get_subkey_fingerprint
-          (gnutls_openpgp_privkey_t KEY, unsigned int IDX, void * FPR,
-          size_t * FPRLEN)
-     KEY: the raw data that contains the OpenPGP secret key.
-
-     IDX: the subkey index
-
-     FPR: the buffer to save the fingerprint, must hold at least 20
-     bytes.
-
-     FPRLEN: the integer to save the length of the fingerprint.
-
-     Get the fingerprint of an OpenPGP subkey.  Depends on the
-     algorithm, the fingerprint can be 16 or 20 bytes.
-
-     *Returns:* On success, 0 is returned, or an error code.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_subkey_id
-------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_get_subkey_id
-          (gnutls_openpgp_privkey_t KEY, unsigned int IDX,
-          gnutls_openpgp_keyid_t KEYID)
-     KEY: the structure that contains the OpenPGP secret key.
-
-     IDX: the subkey index
-
-     KEYID: the buffer to save the keyid.
-
-     Get the key-id for the subkey.
-
-     *Returns:* the 64-bit keyID of the OpenPGP key.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_subkey_idx
--------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_get_subkey_idx
-          (gnutls_openpgp_privkey_t KEY, const gnutls_openpgp_keyid_t
-          KEYID)
-     KEY: the structure that contains the OpenPGP private key.
-
-     KEYID: the keyid.
-
-     Get index of subkey.
-
-     *Returns:* the index of the subkey or a negative error value.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_subkey_pk_algorithm
-----------------------------------------------
-
- -- Function: gnutls_pk_algorithm_t
-          gnutls_openpgp_privkey_get_subkey_pk_algorithm
-          (gnutls_openpgp_privkey_t KEY, unsigned int IDX, unsigned int
-          * BITS)
-     KEY: is an OpenPGP key
-
-     IDX: is the subkey index
-
-     BITS: if bits is non null it will hold the size of the parameters'
-     in bits
-
-     This function will return the public key algorithm of a subkey of
-     an OpenPGP certificate.
-
-     If bits is non null, it should have enough size to hold the
-     parameters size in bits.  For RSA the bits returned is the modulus.
-     For DSA the bits returned are of the public exponent.
-
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
-     success, or a negative error code on error.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_get_subkey_revoked_status
-------------------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_get_subkey_revoked_status
-          (gnutls_openpgp_privkey_t KEY, unsigned int IDX)
-     KEY: the structure that contains the OpenPGP private key.
-
-     IDX: is the subkey index
-
-     Get revocation status of key.
-
-     *Returns:* true (1) if the key has been revoked, or false (0) if it
-     has not, or a negative error code indicates an error.
-
-     *Since:* 2.4.0
-
-gnutls_openpgp_privkey_import
------------------------------
-
- -- Function: int gnutls_openpgp_privkey_import
-          (gnutls_openpgp_privkey_t KEY, const gnutls_datum_t * DATA,
-          gnutls_openpgp_crt_fmt_t FORMAT, const char * PASSWORD,
-          unsigned int FLAGS)
-     KEY: The structure to store the parsed key.
-
-     DATA: The RAW or BASE64 encoded key.
-
-     FORMAT: One of 'gnutls_openpgp_crt_fmt_t' elements.
-
-     PASSWORD: not used for now
-
-     FLAGS: should be (0)
-
-     This function will convert the given RAW or Base64 encoded key to
-     the native gnutls_openpgp_privkey_t format.  The output will be
-     stored in 'key'.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_privkey_init
----------------------------
-
- -- Function: int gnutls_openpgp_privkey_init (gnutls_openpgp_privkey_t
-          * KEY)
-     KEY: The structure to be initialized
-
-     This function will initialize an OpenPGP key structure.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
-
-gnutls_openpgp_privkey_sec_param
---------------------------------
-
- -- Function: gnutls_sec_param_t gnutls_openpgp_privkey_sec_param
-          (gnutls_openpgp_privkey_t KEY)
-     KEY: a key structure
-
-     This function will return the security parameter appropriate with
-     this private key.
-
-     *Returns:* On success, a valid security parameter is returned
-     otherwise 'GNUTLS_SEC_PARAM_UNKNOWN' is returned.
-
-     *Since:* 2.12.0
-
-gnutls_openpgp_privkey_set_preferred_key_id
--------------------------------------------
-
- -- Function: int gnutls_openpgp_privkey_set_preferred_key_id
-          (gnutls_openpgp_privkey_t KEY, const gnutls_openpgp_keyid_t
-          KEYID)
-     KEY: the structure that contains the OpenPGP public key.
-
-     KEYID: the selected keyid
-
-     This allows setting a preferred key id for the given certificate.
-     This key will be used by functions that involve key handling.
-
-     If the provided 'keyid' is 'NULL' then the master key is set as
-     preferred.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_openpgp_set_recv_key_function
-------------------------------------
-
- -- Function: void gnutls_openpgp_set_recv_key_function
-          (gnutls_session_t SESSION, gnutls_openpgp_recv_key_func FUNC)
-     SESSION: a TLS session
-
-     FUNC: the callback
-
-     This funtion will set a key retrieval function for OpenPGP keys.
-     This callback is only useful in server side, and will be used if
-     the peer sent a key fingerprint instead of a full key.
-
-     The retrieved key must be allocated using 'gnutls_malloc()' .
-
-
-File: gnutls.info,  Node: PKCS 12 API,  Next: PKCS 11 API,  Prev: OpenPGP API,  Up: API reference
-
-E.7 PKCS 12 API
-===============
-
-The following functions are to be used for PKCS 12 handling.  Their
-prototypes lie in 'gnutls/pkcs12.h'.
-
-gnutls_pkcs12_bag_decrypt
--------------------------
-
- -- Function: int gnutls_pkcs12_bag_decrypt (gnutls_pkcs12_bag_t BAG,
-          const char * PASS)
-     BAG: The bag
-
-     PASS: The password used for encryption, must be ASCII.
-
-     This function will decrypt the given encrypted bag and return 0 on
-     success.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_pkcs12_bag_deinit
-------------------------
-
- -- Function: void gnutls_pkcs12_bag_deinit (gnutls_pkcs12_bag_t BAG)
-     BAG: The structure to be initialized
-
-     This function will deinitialize a PKCS12 Bag structure.
-
-gnutls_pkcs12_bag_encrypt
--------------------------
-
- -- Function: int gnutls_pkcs12_bag_encrypt (gnutls_pkcs12_bag_t BAG,
-          const char * PASS, unsigned int FLAGS)
-     BAG: The bag
-
-     PASS: The password used for encryption, must be ASCII
-
-     FLAGS: should be one of 'gnutls_pkcs_encrypt_flags_t' elements
-     bitwise or'd
-
-     This function will encrypt the given bag.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error code is returned.
-
-gnutls_pkcs12_bag_get_count
----------------------------
-
- -- Function: int gnutls_pkcs12_bag_get_count (gnutls_pkcs12_bag_t BAG)
-     BAG: The bag
-
-     This function will return the number of the elements withing the
-     bag.
-
-     *Returns:* Number of elements in bag, or an negative error code on
-     error.
-
-gnutls_pkcs12_bag_get_data
---------------------------
-
- -- Function: int gnutls_pkcs12_bag_get_data (gnutls_pkcs12_bag_t BAG,
-          int INDX, gnutls_datum_t * DATA)
-     BAG: The bag
-
-     INDX: The element of the bag to get the data from
-
-     DATA: where the bag's data will be.  Should be treated as constant.
-
-     This function will return the bag's data.  The data is a constant
-     that is stored into the bag.  Should not be accessed after the bag
-     is deleted.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs12_bag_get_friendly_name
------------------------------------
-
- -- Function: int gnutls_pkcs12_bag_get_friendly_name
-          (gnutls_pkcs12_bag_t BAG, int INDX, char ** NAME)
-     BAG: The bag
-
-     INDX: The bag's element to add the id
-
-     NAME: will hold a pointer to the name (to be treated as const)
-
-     This function will return the friendly name, of the specified bag
-     element.  The key ID is usually used to distinguish the local
-     private key and the certificate pair.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  or a negative error code on
-     error.
-
-gnutls_pkcs12_bag_get_key_id
-----------------------------
-
- -- Function: int gnutls_pkcs12_bag_get_key_id (gnutls_pkcs12_bag_t BAG,
-          int INDX, gnutls_datum_t * ID)
-     BAG: The bag
-
-     INDX: The bag's element to add the id
-
-     ID: where the ID will be copied (to be treated as const)
-
-     This function will return the key ID, of the specified bag element.
-     The key ID is usually used to distinguish the local private key and
-     the certificate pair.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  or a negative error code on
-     error.
-
-gnutls_pkcs12_bag_get_type
---------------------------
-
- -- Function: gnutls_pkcs12_bag_type_t gnutls_pkcs12_bag_get_type
-          (gnutls_pkcs12_bag_t BAG, int INDX)
-     BAG: The bag
-
-     INDX: The element of the bag to get the type
-
-     This function will return the bag's type.
-
-     *Returns:* One of the 'gnutls_pkcs12_bag_type_t' enumerations.
-
-gnutls_pkcs12_bag_init
-----------------------
-
- -- Function: int gnutls_pkcs12_bag_init (gnutls_pkcs12_bag_t * BAG)
-     BAG: The structure to be initialized
-
-     This function will initialize a PKCS12 bag structure.  PKCS12 Bags
-     usually contain private keys, lists of X.509 Certificates and X.509
-     Certificate revocation lists.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs12_bag_set_crl
--------------------------
-
- -- Function: int gnutls_pkcs12_bag_set_crl (gnutls_pkcs12_bag_t BAG,
-          gnutls_x509_crl_t CRL)
-     BAG: The bag
-
-     CRL: the CRL to be copied.
-
-     This function will insert the given CRL into the bag.  This is just
-     a wrapper over 'gnutls_pkcs12_bag_set_data()' .
-
-     *Returns:* the index of the added bag on success, or a negative
-     error code on failure.
-
-gnutls_pkcs12_bag_set_crt
--------------------------
-
- -- Function: int gnutls_pkcs12_bag_set_crt (gnutls_pkcs12_bag_t BAG,
-          gnutls_x509_crt_t CRT)
-     BAG: The bag
-
-     CRT: the certificate to be copied.
-
-     This function will insert the given certificate into the bag.  This
-     is just a wrapper over 'gnutls_pkcs12_bag_set_data()' .
-
-     *Returns:* the index of the added bag on success, or a negative
-     value on failure.
-
-gnutls_pkcs12_bag_set_data
---------------------------
-
- -- Function: int gnutls_pkcs12_bag_set_data (gnutls_pkcs12_bag_t BAG,
-          gnutls_pkcs12_bag_type_t TYPE, const gnutls_datum_t * DATA)
-     BAG: The bag
-
-     TYPE: The data's type
-
-     DATA: the data to be copied.
-
-     This function will insert the given data of the given type into the
-     bag.
-
-     *Returns:* the index of the added bag on success, or a negative
-     value on error.
-
-gnutls_pkcs12_bag_set_friendly_name
------------------------------------
-
- -- Function: int gnutls_pkcs12_bag_set_friendly_name
-          (gnutls_pkcs12_bag_t BAG, int INDX, const char * NAME)
-     BAG: The bag
-
-     INDX: The bag's element to add the id
-
-     NAME: the name
-
-     This function will add the given key friendly name, to the
-     specified, by the index, bag element.  The name will be encoded as
-     a 'Friendly name' bag attribute, which is usually used to set a
-     user name to the local private key and the certificate pair.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  or a negative error code on
-     error.
-
-gnutls_pkcs12_bag_set_key_id
-----------------------------
-
- -- Function: int gnutls_pkcs12_bag_set_key_id (gnutls_pkcs12_bag_t BAG,
-          int INDX, const gnutls_datum_t * ID)
-     BAG: The bag
-
-     INDX: The bag's element to add the id
-
-     ID: the ID
-
-     This function will add the given key ID, to the specified, by the
-     index, bag element.  The key ID will be encoded as a 'Local key
-     identifier' bag attribute, which is usually used to distinguish the
-     local private key and the certificate pair.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.  or a negative error code on
-     error.
-
-gnutls_pkcs12_deinit
---------------------
-
- -- Function: void gnutls_pkcs12_deinit (gnutls_pkcs12_t PKCS12)
-     PKCS12: The structure to be initialized
-
-     This function will deinitialize a PKCS12 structure.
-
-gnutls_pkcs12_export
---------------------
-
- -- Function: int gnutls_pkcs12_export (gnutls_pkcs12_t PKCS12,
-          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
-          OUTPUT_DATA_SIZE)
-     PKCS12: Holds the pkcs12 structure
-
-     FORMAT: the format of output params.  One of PEM or DER.
-
-     OUTPUT_DATA: will contain a structure PEM or DER encoded
-
-     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
-     replaced by the actual size of parameters)
-
-     This function will export the pkcs12 structure to DER or PEM
-     format.
-
-     If the buffer provided is not long enough to hold the output, then
-     *output_data_size will be updated and GNUTLS_E_SHORT_MEMORY_BUFFER
-     will be returned.
-
-     If the structure is PEM encoded, it will have a header of "BEGIN
-     PKCS12".
-
-     *Returns:* In case of failure a negative error code will be
-     returned, and 0 on success.
-
-gnutls_pkcs12_export2
----------------------
-
- -- Function: int gnutls_pkcs12_export2 (gnutls_pkcs12_t PKCS12,
-          gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
-     PKCS12: Holds the pkcs12 structure
-
-     FORMAT: the format of output params.  One of PEM or DER.
-
-     OUT: will contain a structure PEM or DER encoded
-
-     This function will export the pkcs12 structure to DER or PEM
-     format.
-
-     The output buffer is allocated using 'gnutls_malloc()' .
-
-     If the structure is PEM encoded, it will have a header of "BEGIN
-     PKCS12".
-
-     *Returns:* In case of failure a negative error code will be
-     returned, and 0 on success.
-
-     *Since:* 3.1.3
-
-gnutls_pkcs12_generate_mac
---------------------------
-
- -- Function: int gnutls_pkcs12_generate_mac (gnutls_pkcs12_t PKCS12,
-          const char * PASS)
-     PKCS12: should contain a gnutls_pkcs12_t structure
-
-     PASS: The password for the MAC
-
-     This function will generate a MAC for the PKCS12 structure.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs12_get_bag
----------------------
-
- -- Function: int gnutls_pkcs12_get_bag (gnutls_pkcs12_t PKCS12, int
-          INDX, gnutls_pkcs12_bag_t BAG)
-     PKCS12: should contain a gnutls_pkcs12_t structure
-
-     INDX: contains the index of the bag to extract
-
-     BAG: An initialized bag, where the contents of the bag will be
-     copied
-
-     This function will return a Bag from the PKCS12 structure.
-
-     After the last Bag has been read
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs12_import
---------------------
-
- -- Function: int gnutls_pkcs12_import (gnutls_pkcs12_t PKCS12, const
-          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned
-          int FLAGS)
-     PKCS12: The structure to store the parsed PKCS12.
-
-     DATA: The DER or PEM encoded PKCS12.
-
-     FORMAT: One of DER or PEM
-
-     FLAGS: an ORed sequence of gnutls_privkey_pkcs8_flags
-
-     This function will convert the given DER or PEM encoded PKCS12 to
-     the native gnutls_pkcs12_t format.  The output will be stored in
-     'pkcs12'.
-
-     If the PKCS12 is PEM encoded it should have a header of "PKCS12".
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs12_init
-------------------
-
- -- Function: int gnutls_pkcs12_init (gnutls_pkcs12_t * PKCS12)
-     PKCS12: The structure to be initialized
-
-     This function will initialize a PKCS12 structure.  PKCS12
-     structures usually contain lists of X.509 Certificates and X.509
-     Certificate revocation lists.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs12_set_bag
----------------------
-
- -- Function: int gnutls_pkcs12_set_bag (gnutls_pkcs12_t PKCS12,
-          gnutls_pkcs12_bag_t BAG)
-     PKCS12: should contain a gnutls_pkcs12_t structure
-
-     BAG: An initialized bag
-
-     This function will insert a Bag into the PKCS12 structure.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs12_simple_parse
---------------------------
-
- -- Function: int gnutls_pkcs12_simple_parse (gnutls_pkcs12_t P12, const
-          char * PASSWORD, gnutls_x509_privkey_t * KEY,
-          gnutls_x509_crt_t ** CHAIN, unsigned int * CHAIN_LEN,
-          gnutls_x509_crt_t ** EXTRA_CERTS, unsigned int *
-          EXTRA_CERTS_LEN, gnutls_x509_crl_t * CRL, unsigned int FLAGS)
-     P12: the PKCS12 blob.
-
-     PASSWORD: optional password used to decrypt PKCS12 blob, bags and
-     keys.
-
-     KEY: a structure to store the parsed private key.
-
-     CHAIN: the corresponding to key certificate chain (may be 'NULL' )
-
-     CHAIN_LEN: will be updated with the number of additional (may be
-     'NULL' )
-
-     EXTRA_CERTS: optional pointer to receive an array of additional
-     certificates found in the PKCS12 blob (may be 'NULL' ).
-
-     EXTRA_CERTS_LEN: will be updated with the number of additional
-     certs (may be 'NULL' ).
-
-     CRL: an optional structure to store the parsed CRL (may be 'NULL'
-     ).
-
-     FLAGS: should be zero or one of GNUTLS_PKCS12_SP_*
-
-     This function parses a PKCS12 blob in 'p12blob' and extracts the
-     private key, the corresponding certificate chain, and any
-     additional certificates and a CRL.
-
-     The 'extra_certs_ret' and 'extra_certs_len' parameters are optional
-     and both may be set to 'NULL' .  If either is non-'NULL' , then
-     both must be set.
-
-     Encrypted PKCS12 bags and PKCS8 private keys are supported.
-     However, only password based security, and the same password for
-     all operations, are supported.
-
-     A PKCS12 file may contain many keys and/or certificates, and there
-     is no way to identify which key/certificate pair you want.  You
-     should make sure the PKCS12 file only contain one key/certificate
-     pair and/or one CRL.
-
-     It is believed that the limitations of this function are acceptable
-     for common usage, and that any more flexibility would introduce
-     complexity that would make it harder to use this functionality at
-     all.
-
-     If the provided structure has encrypted fields but no password is
-     provided then this function returns 'GNUTLS_E_DECRYPTION_FAILED' .
-
-     Note that normally the chain constructed does not include self
-     signed certificates, to comply with TLS' requirements.  If,
-     however, the flag 'GNUTLS_PKCS12_SP_INCLUDE_SELF_SIGNED' is
-     specified then self signed certificates will be included in the
-     chain.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 3.1
-
-gnutls_pkcs12_verify_mac
-------------------------
-
- -- Function: int gnutls_pkcs12_verify_mac (gnutls_pkcs12_t PKCS12,
-          const char * PASS)
-     PKCS12: should contain a gnutls_pkcs12_t structure
-
-     PASS: The password for the MAC
-
-     This function will verify the MAC for the PKCS12 structure.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-
-File: gnutls.info,  Node: PKCS 11 API,  Next: TPM API,  Prev: PKCS 12 API,  Up: API reference
-
-E.8 Hardware token via PKCS 11 API
-==================================
-
-The following functions are to be used for PKCS 11 handling.  Their
-prototypes lie in 'gnutls/pkcs11.h'.
-
-gnutls_pkcs11_add_provider
---------------------------
-
- -- Function: int gnutls_pkcs11_add_provider (const char * NAME, const
-          char * PARAMS)
-     NAME: The filename of the module
-
-     PARAMS: should be NULL
-
-     This function will load and add a PKCS 11 module to the module list
-     used in gnutls.  After this function is called the module will be
-     used for PKCS 11 operations.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_copy_secret_key
------------------------------
-
- -- Function: int gnutls_pkcs11_copy_secret_key (const char * TOKEN_URL,
-          gnutls_datum_t * KEY, const char * LABEL, unsigned int
-          KEY_USAGE, unsigned int FLAGS)
-     TOKEN_URL: A PKCS '11' URL specifying a token
-
-     KEY: The raw key
-
-     LABEL: A name to be used for the stored data
-
-     KEY_USAGE: One of GNUTLS_KEY_*
-
-     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*
-
-     This function will copy a raw secret (symmetric) key into a PKCS
-     '11' token specified by a URL. The key can be marked as sensitive
-     or not.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_copy_x509_crt
----------------------------
-
- -- Function: int gnutls_pkcs11_copy_x509_crt (const char * TOKEN_URL,
-          gnutls_x509_crt_t CRT, const char * LABEL, unsigned int FLAGS)
-     TOKEN_URL: A PKCS '11' URL specifying a token
-
-     CRT: A certificate
-
-     LABEL: A name to be used for the stored data
-
-     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*
-
-     This function will copy a certificate into a PKCS '11' token
-     specified by a URL. The certificate can be marked as trusted or
-     not.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_copy_x509_privkey
--------------------------------
-
- -- Function: int gnutls_pkcs11_copy_x509_privkey (const char *
-          TOKEN_URL, gnutls_x509_privkey_t KEY, const char * LABEL,
-          unsigned int KEY_USAGE, unsigned int FLAGS)
-     TOKEN_URL: A PKCS '11' URL specifying a token
-
-     KEY: A private key
-
-     LABEL: A name to be used for the stored data
-
-     KEY_USAGE: One of GNUTLS_KEY_*
-
-     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
-
-     This function will copy a private key into a PKCS '11' token
-     specified by a URL. It is highly recommended flags to contain
-     'GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE' unless there is a strong
-     reason not to.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_deinit
---------------------
-
- -- Function: void gnutls_pkcs11_deinit ( VOID)
-
-     This function will deinitialize the PKCS 11 subsystem in gnutls.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_delete_url
-------------------------
-
- -- Function: int gnutls_pkcs11_delete_url (const char * OBJECT_URL,
-          unsigned int FLAGS)
-     OBJECT_URL: The URL of the object to delete.
-
-     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
-
-     This function will delete objects matching the given URL. Note that
-     not all tokens support the delete operation.
-
-     *Returns:* On success, the number of objects deleted is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_get_pin_function
-------------------------------
-
- -- Function: gnutls_pin_callback_t gnutls_pkcs11_get_pin_function (void
-          ** USERDATA)
-     USERDATA: data to be supplied to callback
-
-     This function will return the callback function set using
-     'gnutls_pkcs11_set_pin_function()' .
-
-     *Returns:* The function set or NULL otherwise.
-
-     *Since:* 3.1.0
-
-gnutls_pkcs11_init
-------------------
-
- -- Function: int gnutls_pkcs11_init (unsigned int FLAGS, const char *
-          DEPRECATED_CONFIG_FILE)
-     FLAGS: 'GNUTLS_PKCS11_FLAG_MANUAL' or 'GNUTLS_PKCS11_FLAG_AUTO'
-
-     DEPRECATED_CONFIG_FILE: either NULL or the location of a deprecated
-     configuration file
-
-     This function will initialize the PKCS 11 subsystem in gnutls.  It
-     will read configuration files if 'GNUTLS_PKCS11_FLAG_AUTO' is used
-     or allow you to independently load PKCS 11 modules using
-     'gnutls_pkcs11_add_provider()' if 'GNUTLS_PKCS11_FLAG_MANUAL' is
-     specified.
-
-     Normally you don't need to call this function since it is being
-     called by 'gnutls_global_init()' using the
-     'GNUTLS_PKCS11_FLAG_AUTO' .  If other option is required then it
-     must be called before it.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_obj_deinit
-------------------------
-
- -- Function: void gnutls_pkcs11_obj_deinit (gnutls_pkcs11_obj_t OBJ)
-     OBJ: The structure to be initialized
-
-     This function will deinitialize a certificate structure.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_obj_export
-------------------------
-
- -- Function: int gnutls_pkcs11_obj_export (gnutls_pkcs11_obj_t OBJ,
-          void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
-     OBJ: Holds the object
-
-     OUTPUT_DATA: will contain a certificate PEM or DER encoded
-
-     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
-     replaced by the actual size of parameters)
-
-     This function will export the PKCS11 object data.  It is normal for
-     data to be inaccesible and in that case 'GNUTLS_E_INVALID_REQUEST'
-     will be returned.
-
-     If the buffer provided is not long enough to hold the output, then
-     *output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
-     be returned.
-
-     If the structure is PEM encoded, it will have a header of "BEGIN
-     CERTIFICATE".
-
-     *Returns:* In case of failure a negative error code will be
-     returned, and 'GNUTLS_E_SUCCESS' (0) on success.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_obj_export2
--------------------------
-
- -- Function: int gnutls_pkcs11_obj_export2 (gnutls_pkcs11_obj_t OBJ,
-          gnutls_datum_t * OUT)
-     OBJ: Holds the object
-
-     OUT: will contain a certificate PEM or DER encoded
-
-     This function will export the PKCS11 object data.  It is normal for
-     data to be inaccesible and in that case 'GNUTLS_E_INVALID_REQUEST'
-     will be returned.
-
-     The output buffer is allocated using 'gnutls_malloc()' .
-
-     If the structure is PEM encoded, it will have a header of "BEGIN
-     CERTIFICATE".
-
-     *Returns:* In case of failure a negative error code will be
-     returned, and 'GNUTLS_E_SUCCESS' (0) on success.
-
-     *Since:* 3.1.3
-
-gnutls_pkcs11_obj_export_url
-----------------------------
-
- -- Function: int gnutls_pkcs11_obj_export_url (gnutls_pkcs11_obj_t OBJ,
-          gnutls_pkcs11_url_type_t DETAILED, char ** URL)
-     OBJ: Holds the PKCS 11 certificate
-
-     DETAILED: non zero if a detailed URL is required
-
-     URL: will contain an allocated url
-
-     This function will export a URL identifying the given certificate.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_obj_get_info
---------------------------
-
- -- Function: int gnutls_pkcs11_obj_get_info (gnutls_pkcs11_obj_t CRT,
-          gnutls_pkcs11_obj_info_t ITYPE, void * OUTPUT, size_t *
-          OUTPUT_SIZE)
-     CRT: should contain a 'gnutls_pkcs11_obj_t' structure
-
-     ITYPE: Denotes the type of information requested
-
-     OUTPUT: where output will be stored
-
-     OUTPUT_SIZE: contains the maximum size of the output and will be
-     overwritten with actual
-
-     This function will return information about the PKCS11 certificate
-     such as the label, id as well as token information where the key is
-     stored.  When output is text it returns null terminated string
-     although 'output_size' contains the size of the actual data only.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
-     code on error.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_obj_get_type
---------------------------
-
- -- Function: gnutls_pkcs11_obj_type_t gnutls_pkcs11_obj_get_type
-          (gnutls_pkcs11_obj_t OBJ)
-     OBJ: Holds the PKCS 11 object
-
-     This function will return the type of the certificate being stored
-     in the structure.
-
-     *Returns:* The type of the certificate.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_obj_import_url
-----------------------------
-
- -- Function: int gnutls_pkcs11_obj_import_url (gnutls_pkcs11_obj_t OBJ,
-          const char * URL, unsigned int FLAGS)
-     OBJ: The structure to store the object
-
-     URL: a PKCS 11 url identifying the key
-
-     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
-
-     This function will "import" a PKCS 11 URL identifying an object
-     (e.g.  certificate) to the 'gnutls_pkcs11_obj_t' structure.  This
-     does not involve any parsing (such as X.509 or OpenPGP) since the
-     'gnutls_pkcs11_obj_t' is format agnostic.  Only data are
-     transferred.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_obj_init
-----------------------
-
- -- Function: int gnutls_pkcs11_obj_init (gnutls_pkcs11_obj_t * OBJ)
-     OBJ: The structure to be initialized
-
-     This function will initialize a pkcs11 certificate structure.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_obj_list_import_url
----------------------------------
-
- -- Function: int gnutls_pkcs11_obj_list_import_url (gnutls_pkcs11_obj_t
-          * P_LIST, unsigned int * N_LIST, const char * URL,
-          gnutls_pkcs11_obj_attr_t ATTRS, unsigned int FLAGS)
-     P_LIST: An uninitialized object list (may be NULL)
-
-     N_LIST: initially should hold the maximum size of the list.  Will
-     contain the actual size.
-
-     URL: A PKCS 11 url identifying a set of objects
-
-     ATTRS: Attributes of type 'gnutls_pkcs11_obj_attr_t' that can be
-     used to limit output
-
-     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
-
-     This function will initialize and set values to an object list by
-     using all objects identified by a PKCS 11 URL.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_obj_list_import_url2
-----------------------------------
-
- -- Function: int gnutls_pkcs11_obj_list_import_url2
-          (gnutls_pkcs11_obj_t ** P_LIST, unsigned int * N_LIST, const
-          char * URL, gnutls_pkcs11_obj_attr_t ATTRS, unsigned int
-          FLAGS)
-     P_LIST: An uninitialized object list (may be NULL)
-
-     N_LIST: It will contain the size of the list.
-
-     URL: A PKCS 11 url identifying a set of objects
-
-     ATTRS: Attributes of type 'gnutls_pkcs11_obj_attr_t' that can be
-     used to limit output
-
-     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
-
-     This function will initialize and set values to an object list by
-     using all objects identified by the PKCS 11 URL. The output is
-     stored in 'p_list' , which will be initialized.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 3.1.0
-
-gnutls_pkcs11_obj_set_pin_function
-----------------------------------
-
- -- Function: void gnutls_pkcs11_obj_set_pin_function
-          (gnutls_pkcs11_obj_t OBJ, gnutls_pin_callback_t FN, void *
-          USERDATA)
-     OBJ: The object structure
-
-     FN: the callback
-
-     USERDATA: data associated with the callback
-
-     This function will set a callback function to be used when required
-     to access the object.  This function overrides the global set using
-     'gnutls_pkcs11_set_pin_function()' .
-
-     *Since:* 3.1.0
-
-gnutls_pkcs11_privkey_deinit
-----------------------------
-
- -- Function: void gnutls_pkcs11_privkey_deinit (gnutls_pkcs11_privkey_t
-          KEY)
-     KEY: The structure to be initialized
-
-     This function will deinitialize a private key structure.
-
-gnutls_pkcs11_privkey_export_url
---------------------------------
-
- -- Function: int gnutls_pkcs11_privkey_export_url
-          (gnutls_pkcs11_privkey_t KEY, gnutls_pkcs11_url_type_t
-          DETAILED, char ** URL)
-     KEY: Holds the PKCS 11 key
-
-     DETAILED: non zero if a detailed URL is required
-
-     URL: will contain an allocated url
-
-     This function will export a URL identifying the given key.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs11_privkey_generate
-------------------------------
-
- -- Function: int gnutls_pkcs11_privkey_generate (const char* URL,
-          gnutls_pk_algorithm_t PK, unsigned int BITS, const char*
-          LABEL, unsigned int FLAGS)
-     URL: a token URL
-
-     PK: the public key algorithm
-
-     BITS: the security bits
-
-     LABEL: a label
-
-     FLAGS: should be zero
-
-     This function will generate a private key in the specified by the
-     'url' token.  The private key will be generate within the token and
-     will not be exportable.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 3.0
-
-gnutls_pkcs11_privkey_generate2
--------------------------------
-
- -- Function: int gnutls_pkcs11_privkey_generate2 (const char* URL,
-          gnutls_pk_algorithm_t PK, unsigned int BITS, const char*
-          LABEL, gnutls_x509_crt_fmt_t FMT, gnutls_datum_t * PUBKEY,
-          unsigned int FLAGS)
-     URL: a token URL
-
-     PK: the public key algorithm
-
-     BITS: the security bits
-
-     LABEL: a label
-
-     FMT: the format of output params.  PEM or DER.
-
-     PUBKEY: will hold the public key (may be 'NULL' )
-
-     FLAGS: should be zero
-
-     This function will generate a private key in the specified by the
-     'url' token.  The private key will be generate within the token and
-     will not be exportable.  This function will store the DER-encoded
-     public key in the SubjectPublicKeyInfo format in 'pubkey' .  The
-     'pubkey' should be deinitialized using 'gnutls_free()' .
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 3.1.5
-
-gnutls_pkcs11_privkey_get_info
-------------------------------
-
- -- Function: int gnutls_pkcs11_privkey_get_info
-          (gnutls_pkcs11_privkey_t PKEY, gnutls_pkcs11_obj_info_t ITYPE,
-          void * OUTPUT, size_t * OUTPUT_SIZE)
-     PKEY: should contain a 'gnutls_pkcs11_privkey_t' structure
-
-     ITYPE: Denotes the type of information requested
-
-     OUTPUT: where output will be stored
-
-     OUTPUT_SIZE: contains the maximum size of the output and will be
-     overwritten with actual
-
-     This function will return information about the PKCS 11 private key
-     such as the label, id as well as token information where the key is
-     stored.  When output is text it returns null terminated string
-     although 'output_size' contains the size of the actual data only.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
-     code on error.
-
-gnutls_pkcs11_privkey_get_pk_algorithm
---------------------------------------
-
- -- Function: int gnutls_pkcs11_privkey_get_pk_algorithm
-          (gnutls_pkcs11_privkey_t KEY, unsigned int * BITS)
-     KEY: should contain a 'gnutls_pkcs11_privkey_t' structure
-
-     BITS: if bits is non null it will hold the size of the parameters'
-     in bits
-
-     This function will return the public key algorithm of a private
-     key.
-
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
-     success, or a negative error code on error.
-
-gnutls_pkcs11_privkey_import_url
---------------------------------
-
- -- Function: int gnutls_pkcs11_privkey_import_url
-          (gnutls_pkcs11_privkey_t PKEY, const char * URL, unsigned int
-          FLAGS)
-     PKEY: The structure to store the parsed key
-
-     URL: a PKCS 11 url identifying the key
-
-     FLAGS: sequence of GNUTLS_PKCS_PRIVKEY_*
-
-     This function will "import" a PKCS 11 URL identifying a private key
-     to the 'gnutls_pkcs11_privkey_t' structure.  In reality since in
-     most cases keys cannot be exported, the private key structure is
-     being associated with the available operations on the token.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs11_privkey_init
---------------------------
-
- -- Function: int gnutls_pkcs11_privkey_init (gnutls_pkcs11_privkey_t *
-          KEY)
-     KEY: The structure to be initialized
-
-     This function will initialize an private key structure.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs11_privkey_set_pin_function
---------------------------------------
-
- -- Function: void gnutls_pkcs11_privkey_set_pin_function
-          (gnutls_pkcs11_privkey_t KEY, gnutls_pin_callback_t FN, void *
-          USERDATA)
-     KEY: The private key
-
-     FN: the callback
-
-     USERDATA: data associated with the callback
-
-     This function will set a callback function to be used when required
-     to access the object.  This function overrides the global set using
-     'gnutls_pkcs11_set_pin_function()' .
-
-     *Since:* 3.1.0
-
-gnutls_pkcs11_privkey_status
-----------------------------
-
- -- Function: int gnutls_pkcs11_privkey_status (gnutls_pkcs11_privkey_t
-          KEY)
-     KEY: Holds the key
-
-     Checks the status of the private key token.
-
-     *Returns:* this function will return non-zero if the token holding
-     the private key is still available (inserted), and zero otherwise.
-
-     *Since:* 3.1.9
-
-gnutls_pkcs11_reinit
---------------------
-
- -- Function: int gnutls_pkcs11_reinit ( VOID)
-
-     This function will reinitialize the PKCS 11 subsystem in gnutls.
-     This is required by PKCS 11 when an application uses 'fork()' .
-     The reinitialization function must be called on the child.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 3.0
-
-gnutls_pkcs11_set_pin_function
-------------------------------
-
- -- Function: void gnutls_pkcs11_set_pin_function (gnutls_pin_callback_t
-          FN, void * USERDATA)
-     FN: The PIN callback, a 'gnutls_pin_callback_t()' function.
-
-     USERDATA: data to be supplied to callback
-
-     This function will set a callback function to be used when a PIN is
-     required for PKCS 11 operations.  See 'gnutls_pin_callback_t()' on
-     how the callback should behave.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_set_token_function
---------------------------------
-
- -- Function: void gnutls_pkcs11_set_token_function
-          (gnutls_pkcs11_token_callback_t FN, void * USERDATA)
-     FN: The token callback
-
-     USERDATA: data to be supplied to callback
-
-     This function will set a callback function to be used when a token
-     needs to be inserted to continue PKCS 11 operations.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_token_get_flags
------------------------------
-
- -- Function: int gnutls_pkcs11_token_get_flags (const char * URL,
-          unsigned int * FLAGS)
-     URL: should contain a PKCS 11 URL
-
-     FLAGS: The output flags (GNUTLS_PKCS11_TOKEN_*)
-
-     This function will return information about the PKCS 11 token
-     flags.  The flags from the 'gnutls_pkcs11_token_info_t'
-     enumeration.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
-     code on error.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_token_get_info
-----------------------------
-
- -- Function: int gnutls_pkcs11_token_get_info (const char * URL,
-          gnutls_pkcs11_token_info_t TTYPE, void * OUTPUT, size_t *
-          OUTPUT_SIZE)
-     URL: should contain a PKCS 11 URL
-
-     TTYPE: Denotes the type of information requested
-
-     OUTPUT: where output will be stored
-
-     OUTPUT_SIZE: contains the maximum size of the output and will be
-     overwritten with actual
-
-     This function will return information about the PKCS 11 token such
-     as the label, id, etc.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
-     code on error.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_token_get_mechanism
----------------------------------
-
- -- Function: int gnutls_pkcs11_token_get_mechanism (const char * URL,
-          unsigned int IDX, unsigned long * MECHANISM)
-     URL: should contain a PKCS 11 URL
-
-     IDX: The index of the mechanism
-
-     MECHANISM: The PKCS '11' mechanism ID
-
-     This function will return the names of the supported mechanisms by
-     the token.  It should be called with an increasing index until it
-     return GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE.
-
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
-     code on error.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_token_get_url
----------------------------
-
- -- Function: int gnutls_pkcs11_token_get_url (unsigned int SEQ,
-          gnutls_pkcs11_url_type_t DETAILED, char ** URL)
-     SEQ: sequence number starting from 0
-
-     DETAILED: non zero if a detailed URL is required
-
-     URL: will contain an allocated url
-
-     This function will return the URL for each token available in
-     system.  The url has to be released using 'gnutls_free()'
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the sequence number
-     exceeds the available tokens, otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_pkcs11_token_init
-------------------------
-
- -- Function: int gnutls_pkcs11_token_init (const char * TOKEN_URL,
-          const char * SO_PIN, const char * LABEL)
-     TOKEN_URL: A PKCS '11' URL specifying a token
-
-     SO_PIN: Security Officer's PIN
-
-     LABEL: A name to be used for the token
-
-     This function will initialize (format) a token.  If the token is at
-     a factory defaults state the security officer's PIN given will be
-     set to be the default.  Otherwise it should match the officer's
-     PIN.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs11_token_set_pin
----------------------------
-
- -- Function: int gnutls_pkcs11_token_set_pin (const char * TOKEN_URL,
-          const char * OLDPIN, const char * NEWPIN, unsigned int FLAGS)
-     TOKEN_URL: A PKCS '11' URL specifying a token
-
-     OLDPIN: old user's PIN
-
-     NEWPIN: new user's PIN
-
-     FLAGS: one of 'gnutls_pin_flag_t' .
-
-     This function will modify or set a user's PIN for the given token.
-     If it is called to set a user pin for first time the oldpin must be
-     NULL.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-gnutls_pkcs11_type_get_name
----------------------------
-
- -- Function: const char * gnutls_pkcs11_type_get_name
-          (gnutls_pkcs11_obj_type_t TYPE)
-     TYPE: Holds the PKCS 11 object type, a 'gnutls_pkcs11_obj_type_t' .
-
-     This function will return a human readable description of the
-     PKCS11 object type 'obj' .  It will return "Unknown" for unknown
-     types.
-
-     *Returns:* human readable string labeling the PKCS11 object type
-     'type' .
 
-     *Since:* 2.12.0
-
-gnutls_x509_crt_import_pkcs11
------------------------------
-
- -- Function: int gnutls_x509_crt_import_pkcs11 (gnutls_x509_crt_t CRT,
-          gnutls_pkcs11_obj_t PKCS11_CRT)
-     CRT: A certificate of type 'gnutls_x509_crt_t'
-
-     PKCS11_CRT: A PKCS 11 object that contains a certificate
-
-     This function will import a PKCS 11 certificate to a
-     'gnutls_x509_crt_t' structure.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_x509_crt_import_pkcs11_url
----------------------------------
-
- -- Function: int gnutls_x509_crt_import_pkcs11_url (gnutls_x509_crt_t
-          CRT, const char * URL, unsigned int FLAGS)
-     CRT: A certificate of type 'gnutls_x509_crt_t'
-
-     URL: A PKCS 11 url
-
-     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
-
-     This function will import a PKCS 11 certificate directly from a
-     token without involving the 'gnutls_pkcs11_obj_t' structure.  This
-     function will fail if the certificate stored is not of X.509 type.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
-
-     *Since:* 2.12.0
-
-gnutls_x509_crt_list_import_pkcs11
-----------------------------------
-
- -- Function: int gnutls_x509_crt_list_import_pkcs11 (gnutls_x509_crt_t
-          * CERTS, unsigned int CERT_MAX, gnutls_pkcs11_obj_t * const
-          OBJS, unsigned int FLAGS)
-     CERTS: A list of certificates of type 'gnutls_x509_crt_t'
-
-     CERT_MAX: The maximum size of the list
-
-     OBJS: A list of PKCS 11 objects
-
-     FLAGS: 0 for now
-
-     This function will import a PKCS 11 certificate list to a list of
-     'gnutls_x509_crt_t' structure.  These must not be initialized.
-
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
-     otherwise a negative error value.
+INFO-DIR-SECTION Software libraries
+START-INFO-DIR-ENTRY
+* GnuTLS: (gnutls).		GNU Transport Layer Security Library.
+END-INFO-DIR-ENTRY
 
-     *Since:* 2.12.0
+INFO-DIR-SECTION System Administration
+START-INFO-DIR-ENTRY
+* certtool: (gnutls)Invoking certtool.	Manipulate certificates and keys.
+* gnutls-serv: (gnutls)Invoking gnutls-serv.	GnuTLS test server.
+* gnutls-cli: (gnutls)Invoking gnutls-cli.	GnuTLS test client.
+* gnutls-cli-debug: (gnutls)Invoking gnutls-cli-debug.	GnuTLS debug client.
+* psktool: (gnutls)Invoking psktool.	Simple TLS-Pre-Shared-Keys manager.
+* srptool: (gnutls)Invoking srptool.	Simple SRP password tool.
+END-INFO-DIR-ENTRY
 
 
 File: gnutls.info,  Node: TPM API,  Next: Abstract key API,  Prev: PKCS 11 API,  Up: API reference
@@ -3348,7 +34,7 @@ E.9 TPM API
 ===========
 
 The following functions are to be used for TPM handling.  Their
-prototypes lie in 'gnutls/tpm.h'.
+prototypes lie in `gnutls/tpm.h'.
 
 gnutls_tpm_get_registered
 -------------------------
@@ -3360,7 +46,7 @@ gnutls_tpm_get_registered
      This function will get a list of stored keys in the TPM. The uuid
      of those keys
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -3391,9 +77,9 @@ gnutls_tpm_key_list_get_url
 
      This function will return for each given index a URL of the
      corresponding key.  If the provided index is out of bounds then
-     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
+     `GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -3409,7 +95,7 @@ gnutls_tpm_privkey_delete
 
      This function will unregister the private key from the TPM chip.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -3417,8 +103,8 @@ gnutls_tpm_privkey_delete
 gnutls_tpm_privkey_generate
 ---------------------------
 
- -- Function: int gnutls_tpm_privkey_generate (gnutls_pk_algorithm_t PK,
-          unsigned int BITS, const char* SRK_PASSWORD, const char*
+ -- Function: int gnutls_tpm_privkey_generate (gnutls_pk_algorithm_t
+          PK, unsigned int BITS, const char* SRK_PASSWORD, const char*
           KEY_PASSWORD, gnutls_tpmkey_fmt_t FORMAT,
           gnutls_x509_crt_fmt_t PUB_FORMAT, gnutls_datum_t* PRIVKEY,
           gnutls_datum_t* PUBKEY, unsigned int FLAGS)
@@ -3440,18 +126,18 @@ gnutls_tpm_privkey_generate
 
      FLAGS: should be a list of GNUTLS_TPM_* flags
 
-     This function will generate a private key in the TPM chip.  The
+     This function will generate a private key in the TPM chip. The
      private key will be generated within the chip and will be exported
-     in a wrapped with TPM's master key form.  Furthermore the wrapped
-     key can be protected with the provided 'password' .
+     in a wrapped with TPM's master key form. Furthermore the wrapped
+     key can be protected with the provided  `password' .
 
-     Note that bits in TPM is quantized value.  If the input value is
+     Note that bits in TPM is quantized value. If the input value is
      not one of the allowed values, then it will be quantized to one of
      512, 1024, 2048, 4096, 8192 and 16384.
 
      Allowed flags are:
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -3462,17 +148,17 @@ File: gnutls.info,  Node: Abstract key API,  Next: DANE API,  Prev: TPM API,  Up
 E.10 Abstract key API
 =====================
 
-The following functions are to be used for abstract key handling.  Their
-prototypes lie in 'gnutls/abstract.h'.
+The following functions are to be used for abstract key handling.
+Their prototypes lie in `gnutls/abstract.h'.
 
 gnutls_certificate_set_key
 --------------------------
 
  -- Function: int gnutls_certificate_set_key
-          (gnutls_certificate_credentials_t RES, const char** NAMES, int
-          NAMES_SIZE, gnutls_pcert_st * PCERT_LIST, int PCERT_LIST_SIZE,
-          gnutls_privkey_t KEY)
-     RES: is a 'gnutls_certificate_credentials_t' structure.
+          (gnutls_certificate_credentials_t RES, const char** NAMES,
+          int NAMES_SIZE, gnutls_pcert_st * PCERT_LIST, int
+          PCERT_LIST_SIZE, gnutls_privkey_t KEY)
+     RES: is a `gnutls_certificate_credentials_t'  structure.
 
      NAMES: is an array of DNS name of the certificate (NULL if none)
 
@@ -3483,19 +169,19 @@ gnutls_certificate_set_key
 
      PCERT_LIST_SIZE: holds the size of the certificate list
 
-     KEY: is a 'gnutls_privkey_t' key
+     KEY: is a `gnutls_privkey_t'  key
 
      This function sets a certificate/private key pair in the
      gnutls_certificate_credentials_t structure.  This function may be
      called more than once, in case multiple keys/certificates exist for
      the server.  For clients that wants to send more than its own end
      entity certificate (e.g., also an intermediate CA cert) then put
-     the certificate chain in 'pcert_list' .  The 'pcert_list' and 'key'
-     will become part of the credentials structure and must not be
-     deallocated.  They will be automatically deallocated when 'res' is
-     deinitialized.
+     the certificate chain in  `pcert_list' . The  `pcert_list' and
+     `key' will become part of the credentials structure and must not
+     be deallocated. They will be automatically deallocated when  `res'
+     is deinitialized.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
      *Since:* 3.0
@@ -3506,7 +192,7 @@ gnutls_certificate_set_retrieve_function2
  -- Function: void gnutls_certificate_set_retrieve_function2
           (gnutls_certificate_credentials_t CRED,
           gnutls_certificate_retrieve_function2 * FUNC)
-     CRED: is a 'gnutls_certificate_credentials_t' structure.
+     CRED: is a `gnutls_certificate_credentials_t'  structure.
 
      FUNC: is the callback function
 
@@ -3519,22 +205,22 @@ gnutls_certificate_set_retrieve_function2
      gnutls_pcert_st** pcert, unsigned int *pcert_length,
      gnutls_privkey_t * pkey);
 
-     'req_ca_cert' is only used in X.509 certificates.  Contains a list
+     `req_ca_cert' is only used in X.509 certificates.  Contains a list
      with the CA names that the server considers trusted.  Normally we
      should send a certificate that is signed by one of these CAs.
-     These names are DER encoded.  To get a more meaningful value use
-     the function 'gnutls_x509_rdn_get()' .
+     These names are DER encoded. To get a more meaningful value use
+     the function `gnutls_x509_rdn_get()' .
 
-     'pk_algos' contains a list with server's acceptable signature
+     `pk_algos' contains a list with server's acceptable signature
      algorithms.  The certificate returned should support the server's
      given algorithms.
 
-     'pcert' should contain a single certificate and public or a list of
-     them.
+     `pcert' should contain a single certificate and public or a list
+     of them.
 
-     'pcert_length' is the size of the previous list.
+     `pcert_length' is the size of the previous list.
 
-     'pkey' is the private key.
+     `pkey' is the private key.
 
      If the callback function is provided then gnutls will call it, in
      the handshake, after the certificate request message has been
@@ -3543,8 +229,8 @@ gnutls_certificate_set_retrieve_function2
      In server side pk_algos and req_ca_dn are NULL.
 
      The callback function should set the certificate list to be sent,
-     and return 0 on success.  If no certificate was selected then the
-     number of certificates should be set to zero.  The value (-1)
+     and return 0 on success. If no certificate was selected then the
+     number of certificates should be set to zero. The value (-1)
      indicates error and the handshake will be terminated.
 
      *Since:* 3.0
@@ -3571,10 +257,10 @@ gnutls_pcert_import_openpgp
      FLAGS: zero for now
 
      This convenience function will import the given certificate to a
-     'gnutls_pcert_st' structure.  The structure must be deinitialized
-     afterwards using 'gnutls_pcert_deinit()' ;
+     `gnutls_pcert_st'  structure. The structure must be deinitialized
+     afterwards using `gnutls_pcert_deinit()' ;
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -3596,10 +282,10 @@ gnutls_pcert_import_openpgp_raw
      FLAGS: zero for now
 
      This convenience function will import the given certificate to a
-     'gnutls_pcert_st' structure.  The structure must be deinitialized
-     afterwards using 'gnutls_pcert_deinit()' ;
+     `gnutls_pcert_st'  structure. The structure must be deinitialized
+     afterwards using `gnutls_pcert_deinit()' ;
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -3616,10 +302,10 @@ gnutls_pcert_import_x509
      FLAGS: zero for now
 
      This convenience function will import the given certificate to a
-     'gnutls_pcert_st' structure.  The structure must be deinitialized
-     afterwards using 'gnutls_pcert_deinit()' ;
+     `gnutls_pcert_st'  structure. The structure must be deinitialized
+     afterwards using `gnutls_pcert_deinit()' ;
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -3627,9 +313,9 @@ gnutls_pcert_import_x509
 gnutls_pcert_import_x509_raw
 ----------------------------
 
- -- Function: int gnutls_pcert_import_x509_raw (gnutls_pcert_st * PCERT,
-          const gnutls_datum_t* CERT, gnutls_x509_crt_fmt_t FORMAT,
-          unsigned int FLAGS)
+ -- Function: int gnutls_pcert_import_x509_raw (gnutls_pcert_st *
+          PCERT, const gnutls_datum_t* CERT, gnutls_x509_crt_fmt_t
+          FORMAT, unsigned int FLAGS)
      PCERT: The pcert structure
 
      CERT: The raw certificate to be imported
@@ -3639,10 +325,10 @@ gnutls_pcert_import_x509_raw
      FLAGS: zero for now
 
      This convenience function will import the given certificate to a
-     'gnutls_pcert_st' structure.  The structure must be deinitialized
-     afterwards using 'gnutls_pcert_deinit()' ;
+     `gnutls_pcert_st'  structure. The structure must be deinitialized
+     afterwards using `gnutls_pcert_deinit()' ;
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -3651,12 +337,12 @@ gnutls_pcert_list_import_x509_raw
 ---------------------------------
 
  -- Function: int gnutls_pcert_list_import_x509_raw (gnutls_pcert_st *
-          PCERTS, unsigned int * PCERT_MAX, const gnutls_datum_t * DATA,
-          gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
-     PCERTS: The structures to store the parsed certificate.  Must not
+          PCERTS, unsigned int * PCERT_MAX, const gnutls_datum_t *
+          DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
+     PCERTS: The structures to store the parsed certificate. Must not
      be initialized.
 
-     PCERT_MAX: Initially must hold the maximum number of certs.  It
+     PCERT_MAX: Initially must hold the maximum number of certs. It
      will be updated with the number of certs available.
 
      DATA: The certificates.
@@ -3667,8 +353,8 @@ gnutls_pcert_list_import_x509_raw
      gnutls_certificate_import_flags.
 
      This function will convert the given PEM encoded certificate list
-     to the native gnutls_x509_crt_t format.  The output will be stored
-     in 'certs' .  They will be automatically initialized.
+     to the native gnutls_x509_crt_t format. The output will be stored
+     in  `certs' .  They will be automatically initialized.
 
      If the Certificate is PEM encoded it should have a header of "X509
      CERTIFICATE", or "CERTIFICATE".
@@ -3691,12 +377,12 @@ gnutls_privkey_decrypt_data
      CIPHERTEXT: holds the data to be decrypted
 
      PLAINTEXT: will contain the decrypted data, allocated with
-     'gnutls_malloc()'
+     `gnutls_malloc()'
 
      This function will decrypt the given data using the algorithm
      supported by the private key.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -3714,18 +400,18 @@ gnutls_privkey_deinit
 gnutls_privkey_get_pk_algorithm
 -------------------------------
 
- -- Function: int gnutls_privkey_get_pk_algorithm (gnutls_privkey_t KEY,
-          unsigned int * BITS)
-     KEY: should contain a 'gnutls_privkey_t' structure
+ -- Function: int gnutls_privkey_get_pk_algorithm (gnutls_privkey_t
+          KEY, unsigned int * BITS)
+     KEY: should contain a `gnutls_privkey_t'  structure
 
      BITS: If set will return the number of bits of the parameters (may
      be NULL)
 
-     This function will return the public key algorithm of a private key
-     and if possible will return a number of bits that indicates the
-     security parameter of the key.
+     This function will return the public key algorithm of a private
+     key and if possible will return a number of bits that indicates
+     the security parameter of the key.
 
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
      success, or a negative error code on error.
 
      *Since:* 2.12.0
@@ -3735,12 +421,12 @@ gnutls_privkey_get_type
 
  -- Function: gnutls_privkey_type_t gnutls_privkey_get_type
           (gnutls_privkey_t KEY)
-     KEY: should contain a 'gnutls_privkey_t' structure
+     KEY: should contain a `gnutls_privkey_t'  structure
 
-     This function will return the type of the private key.  This is
+     This function will return the type of the private key. This is
      actually the type of the subsystem used to set this private key.
 
-     *Returns:* a member of the 'gnutls_privkey_type_t' enumeration on
+     *Returns:* a member of the `gnutls_privkey_type_t'  enumeration on
      success, or a negative error code on error.
 
      *Since:* 2.12.0
@@ -3765,13 +451,13 @@ gnutls_privkey_import_ext
      FLAGS: Flags for the import
 
      This function will associate the given callbacks with the
-     'gnutls_privkey_t' structure.  At least one of the two callbacks
+     `gnutls_privkey_t'  structure. At least one of the two callbacks
      must be non-null.
 
      Note that the signing function is supposed to "raw" sign data,
      i.e., without any hashing or preprocessing.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -3799,14 +485,14 @@ gnutls_privkey_import_ext2
      FLAGS: Flags for the import
 
      This function will associate the given callbacks with the
-     'gnutls_privkey_t' structure.  At least one of the two callbacks
-     must be non-null.  If a deinitialization function is provided then
-     flags is assumed to contain 'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' .
+     `gnutls_privkey_t'  structure. At least one of the two callbacks
+     must be non-null. If a deinitialization function is provided then
+     flags is assumed to contain `GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' .
 
      Note that the signing function is supposed to "raw" sign data,
      i.e., without any hashing or preprocessing.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1
@@ -3823,17 +509,17 @@ gnutls_privkey_import_openpgp
      FLAGS: Flags for the import
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     The 'gnutls_openpgp_privkey_t' object must not be deallocated
-     during the lifetime of this structure.  The subkey set as preferred
+     The `gnutls_openpgp_privkey_t'  object must not be deallocated
+     during the lifetime of this structure. The subkey set as preferred
      will be used, or the master key otherwise.
 
-     'flags' might be zero or one of
-     'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
-     'GNUTLS_PRIVKEY_IMPORT_COPY' .
+     `flags' might be zero or one of
+     `GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
+     `GNUTLS_PRIVKEY_IMPORT_COPY' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -3856,9 +542,9 @@ gnutls_privkey_import_openpgp_raw
      PASSWORD: A password (optional)
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -3875,16 +561,16 @@ gnutls_privkey_import_pkcs11
      FLAGS: Flags for the import
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     The 'gnutls_pkcs11_privkey_t' object must not be deallocated during
-     the lifetime of this structure.
+     The `gnutls_pkcs11_privkey_t'  object must not be deallocated
+     during the lifetime of this structure.
 
-     'flags' might be zero or one of
-     'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
-     'GNUTLS_PRIVKEY_IMPORT_COPY' .
+     `flags' might be zero or one of
+     `GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
+     `GNUTLS_PRIVKEY_IMPORT_COPY' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -3894,14 +580,14 @@ gnutls_privkey_import_pkcs11_url
 
  -- Function: int gnutls_privkey_import_pkcs11_url (gnutls_privkey_t
           KEY, const char * URL)
-     KEY: A key of type 'gnutls_pubkey_t'
+     KEY: A key of type `gnutls_pubkey_t'
 
      URL: A PKCS 11 url
 
      This function will import a PKCS 11 private key to a
-     'gnutls_private_key_t' structure.
+     `gnutls_private_key_t' structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -3911,8 +597,8 @@ gnutls_privkey_import_tpm_raw
 
  -- Function: int gnutls_privkey_import_tpm_raw (gnutls_privkey_t PKEY,
           const gnutls_datum_t * FDATA, gnutls_tpmkey_fmt_t FORMAT,
-          const char * SRK_PASSWORD, const char * KEY_PASSWORD, unsigned
-          int FLAGS)
+          const char * SRK_PASSWORD, const char * KEY_PASSWORD,
+          unsigned int FLAGS)
      PKEY: The private key
 
      FDATA: The TPM key to be imported
@@ -3926,12 +612,12 @@ gnutls_privkey_import_tpm_raw
      FLAGS: should be zero
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
      With respect to passwords the same as in
-     'gnutls_privkey_import_tpm_url()' apply.
+     `gnutls_privkey_import_tpm_url()'  apply.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -3953,16 +639,16 @@ gnutls_privkey_import_tpm_url
      FLAGS: One of the GNUTLS_PRIVKEY_* flags
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     Note that unless 'GNUTLS_PRIVKEY_DISABLE_CALLBACKS' is specified,
+     Note that unless `GNUTLS_PRIVKEY_DISABLE_CALLBACKS' is specified,
      if incorrect (or NULL) passwords are given the PKCS11 callback
-     functions will be used to obtain the correct passwords.  Otherwise
-     if the SRK password is wrong 'GNUTLS_E_TPM_SRK_PASSWORD_ERROR' is
+     functions will be used to obtain the correct passwords. Otherwise
+     if the SRK password is wrong `GNUTLS_E_TPM_SRK_PASSWORD_ERROR'  is
      returned and if the key password is wrong or not provided then
-     'GNUTLS_E_TPM_KEY_PASSWORD_ERROR' is returned.
+     `GNUTLS_E_TPM_KEY_PASSWORD_ERROR' is returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -3970,9 +656,9 @@ gnutls_privkey_import_tpm_url
 gnutls_privkey_import_url
 -------------------------
 
- -- Function: int gnutls_privkey_import_url (gnutls_privkey_t KEY, const
-          char * URL, unsigned int FLAGS)
-     KEY: A key of type 'gnutls_privkey_t'
+ -- Function: int gnutls_privkey_import_url (gnutls_privkey_t KEY,
+          const char * URL, unsigned int FLAGS)
+     KEY: A key of type `gnutls_privkey_t'
 
      URL: A PKCS 11 url
 
@@ -3980,9 +666,9 @@ gnutls_privkey_import_url
 
      This function will import a PKCS11 or TPM URL as a private key.
      The supported URL types can be checked using
-     'gnutls_url_is_supported()' .
+     `gnutls_url_is_supported()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -3999,16 +685,16 @@ gnutls_privkey_import_x509
      FLAGS: Flags for the import
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     The 'gnutls_x509_privkey_t' object must not be deallocated during
+     The `gnutls_x509_privkey_t'  object must not be deallocated during
      the lifetime of this structure.
 
-     'flags' might be zero or one of
-     'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
-     'GNUTLS_PRIVKEY_IMPORT_COPY' .
+     `flags' might be zero or one of
+     `GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
+     `GNUTLS_PRIVKEY_IMPORT_COPY' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4016,9 +702,9 @@ gnutls_privkey_import_x509
 gnutls_privkey_import_x509_raw
 ------------------------------
 
- -- Function: int gnutls_privkey_import_x509_raw (gnutls_privkey_t PKEY,
-          const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT,
-          const char* PASSWORD, unsigned int FLAGS)
+ -- Function: int gnutls_privkey_import_x509_raw (gnutls_privkey_t
+          PKEY, const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t
+          FORMAT, const char* PASSWORD, unsigned int FLAGS)
      PKEY: The private key
 
      DATA: The private key data to be imported
@@ -4030,12 +716,12 @@ gnutls_privkey_import_x509_raw
      FLAGS: an ORed sequence of gnutls_pkcs_encrypt_flags_t
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     The supported formats are basic unencrypted key, PKCS8, PKCS12, and
-     the openssl format.
+     The supported formats are basic unencrypted key, PKCS8, PKCS12,
+     and the openssl format.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -4048,7 +734,7 @@ gnutls_privkey_init
 
      This function will initialize an private key structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4058,15 +744,15 @@ gnutls_privkey_set_pin_function
 
  -- Function: void gnutls_privkey_set_pin_function (gnutls_privkey_t
           KEY, gnutls_pin_callback_t FN, void * USERDATA)
-     KEY: A key of type 'gnutls_privkey_t'
+     KEY: A key of type `gnutls_privkey_t'
 
      FN: the callback
 
      USERDATA: data associated with the callback
 
-     This function will set a callback function to be used when required
-     to access the object.  This function overrides any other global PIN
-     functions.
+     This function will set a callback function to be used when
+     required to access the object. This function overrides any other
+     global PIN functions.
 
      Note that this function must be called right after initialization
      to have effect.
@@ -4083,23 +769,23 @@ gnutls_privkey_sign_data
 
      HASH: should be a digest algorithm
 
-     FLAGS: Zero or on of 'gnutls_privkey_flags_t'
+     FLAGS: Zero or on of `gnutls_privkey_flags_t'
 
      DATA: holds the data to be signed
 
      SIGNATURE: will contain the signature allocate with
-     'gnutls_malloc()'
+     `gnutls_malloc()'
 
      This function will sign the given data using a signature algorithm
-     supported by the private key.  Signature algorithms are always used
+     supported by the private key. Signature algorithms are always used
      together with a hash functions.  Different hash functions may be
      used for the RSA algorithm, but only the SHA family for the DSA
      keys.
 
-     You may use 'gnutls_pubkey_get_preferred_hash_algorithm()' to
+     You may use `gnutls_pubkey_get_preferred_hash_algorithm()'  to
      determine the hash algorithm.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4108,32 +794,32 @@ gnutls_privkey_sign_hash
 ------------------------
 
  -- Function: int gnutls_privkey_sign_hash (gnutls_privkey_t SIGNER,
-          gnutls_digest_algorithm_t HASH_ALGO, unsigned int FLAGS, const
-          gnutls_datum_t * HASH_DATA, gnutls_datum_t * SIGNATURE)
+          gnutls_digest_algorithm_t HASH_ALGO, unsigned int FLAGS,
+          const gnutls_datum_t * HASH_DATA, gnutls_datum_t * SIGNATURE)
      SIGNER: Holds the signer's key
 
      HASH_ALGO: The hash algorithm used
 
-     FLAGS: Zero or one of 'gnutls_privkey_flags_t'
+     FLAGS: Zero or one of `gnutls_privkey_flags_t'
 
      HASH_DATA: holds the data to be signed
 
      SIGNATURE: will contain newly allocated signature
 
      This function will sign the given hashed data using a signature
-     algorithm supported by the private key.  Signature algorithms are
+     algorithm supported by the private key. Signature algorithms are
      always used together with a hash functions.  Different hash
      functions may be used for the RSA algorithm, but only SHA-XXX for
      the DSA keys.
 
-     You may use 'gnutls_pubkey_get_preferred_hash_algorithm()' to
+     You may use `gnutls_pubkey_get_preferred_hash_algorithm()'  to
      determine the hash algorithm.
 
-     Note that if 'GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA' flag is specified
-     this function will ignore 'hash_algo' and perform a raw PKCS1
-     signature.
+     Note that if `GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA'  flag is
+     specified this function will ignore  `hash_algo' and perform a raw
+     PKCS1 signature.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4151,20 +837,20 @@ gnutls_privkey_sign_raw_data
      DATA: holds the data to be signed
 
      SIGNATURE: will contain the signature allocate with
-     'gnutls_malloc()'
+     `gnutls_malloc()'
 
      This function will sign the given data using a signature algorithm
-     supported by the private key.  Note that this is a low-level
-     function and does not apply any preprocessing or hash on the signed
-     data.  For example on an RSA key the input 'data' should be of the
-     DigestInfo PKCS '1' 1.5 format.  Use it only if you know what are
-     you doing.
+     supported by the private key. Note that this is a low-level
+     function and does not apply any preprocessing or hash on the
+     signed data.  For example on an RSA key the input  `data' should
+     be of the DigestInfo PKCS `1'  1.5 format. Use it only if you know
+     what are you doing.
 
      Note this function is equivalent to using the
-     'GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA' flag with
-     'gnutls_privkey_sign_hash()' .
+     `GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA' flag with
+     `gnutls_privkey_sign_hash()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.10
@@ -4175,9 +861,9 @@ gnutls_privkey_status
  -- Function: int gnutls_privkey_status (gnutls_privkey_t KEY)
      KEY: Holds the key
 
-     Checks the status of the private key token.  This function is an
-     actual wrapper over 'gnutls_pkcs11_privkey_status()' , and if the
-     private key is a PKCS '11' token it will check whether it is
+     Checks the status of the private key token. This function is an
+     actual wrapper over `gnutls_pkcs11_privkey_status()' , and if the
+     private key is a PKCS `11'  token it will check whether it is
      inserted or not.
 
      *Returns:* this function will return non-zero if the token holding
@@ -4211,7 +897,7 @@ gnutls_pubkey_encrypt_data
 
      This function will encrypt the given data, using the public key.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -4224,19 +910,19 @@ gnutls_pubkey_export
           OUTPUT_DATA_SIZE)
      KEY: Holds the certificate
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUTPUT_DATA: will contain a certificate PEM or DER encoded
 
      OUTPUT_DATA_SIZE: holds the size of output_data (and will be
      replaced by the actual size of parameters)
 
-     This function will export the public key to DER or PEM format.  The
-     contents of the exported data is the SubjectPublicKeyInfo X.509
-     structure.
+     This function will export the public key to DER or PEM format.
+     The contents of the exported data is the SubjectPublicKeyInfo
+     X.509 structure.
 
      If the buffer provided is not long enough to hold the output, then
-     *output_data_size is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
+     *output_data_size is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
      will be returned.
 
      If the structure is PEM encoded, it will have a header of "BEGIN
@@ -4254,15 +940,15 @@ gnutls_pubkey_export2
           gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
      KEY: Holds the certificate
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      OUT: will contain a certificate PEM or DER encoded
 
-     This function will export the public key to DER or PEM format.  The
-     contents of the exported data is the SubjectPublicKeyInfo X.509
-     structure.
+     This function will export the public key to DER or PEM format.
+     The contents of the exported data is the SubjectPublicKeyInfo
+     X.509 structure.
 
-     The output buffer will be allocated using 'gnutls_malloc()' .
+     The output buffer will be allocated using `gnutls_malloc()' .
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      CERTIFICATE".
@@ -4288,11 +974,11 @@ gnutls_pubkey_get_key_id
      replaced by the actual size of parameters)
 
      This function will return a unique ID that depends on the public
-     key parameters.  This ID can be used in checking whether a
+     key parameters. This ID can be used in checking whether a
      certificate corresponds to the given public key.
 
      If the buffer provided is not long enough to hold the output, then
-     *output_data_size is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
+     *output_data_size is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
      will be returned.  The output will normally be a SHA-1 hash output,
      which is 20 bytes.
 
@@ -4306,14 +992,14 @@ gnutls_pubkey_get_key_usage
 
  -- Function: int gnutls_pubkey_get_key_usage (gnutls_pubkey_t KEY,
           unsigned int * USAGE)
-     KEY: should contain a 'gnutls_pubkey_t' structure
+     KEY: should contain a `gnutls_pubkey_t'  structure
 
-     USAGE: If set will return the number of bits of the parameters (may
-     be NULL)
+     USAGE: If set will return the number of bits of the parameters
+     (may be NULL)
 
      This function will return the key usage of the public key.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4321,12 +1007,12 @@ gnutls_pubkey_get_key_usage
 gnutls_pubkey_get_openpgp_key_id
 --------------------------------
 
- -- Function: int gnutls_pubkey_get_openpgp_key_id (gnutls_pubkey_t KEY,
-          unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
-          OUTPUT_DATA_SIZE, unsigned int * SUBKEY)
+ -- Function: int gnutls_pubkey_get_openpgp_key_id (gnutls_pubkey_t
+          KEY, unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t
+          * OUTPUT_DATA_SIZE, unsigned int * SUBKEY)
      KEY: Holds the public key
 
-     FLAGS: should be 0 or 'GNUTLS_PUBKEY_GET_OPENPGP_FINGERPRINT'
+     FLAGS: should be 0 or `GNUTLS_PUBKEY_GET_OPENPGP_FINGERPRINT'
 
      OUTPUT_DATA: will contain the key ID
 
@@ -4338,13 +1024,13 @@ gnutls_pubkey_get_openpgp_key_id
      This function returns the OpenPGP key ID of the corresponding key.
      The key is a unique ID that depends on the public key parameters.
 
-     If the flag 'GNUTLS_PUBKEY_GET_OPENPGP_FINGERPRINT' is specified
+     If the flag `GNUTLS_PUBKEY_GET_OPENPGP_FINGERPRINT'  is specified
      this function returns the fingerprint of the master key.
 
      If the buffer provided is not long enough to hold the output, then
-     *output_data_size is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
-     will be returned.  The output is 'GNUTLS_OPENPGP_KEYID_SIZE' bytes
-     long.
+     *output_data_size is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
+     will be returned.  The output is `GNUTLS_OPENPGP_KEYID_SIZE'
+     bytes long.
 
      *Returns:* In case of failure a negative error code will be
      returned, and 0 on success.
@@ -4356,7 +1042,7 @@ gnutls_pubkey_get_pk_algorithm
 
  -- Function: int gnutls_pubkey_get_pk_algorithm (gnutls_pubkey_t KEY,
           unsigned int * BITS)
-     KEY: should contain a 'gnutls_pubkey_t' structure
+     KEY: should contain a `gnutls_pubkey_t'  structure
 
      BITS: If set will return the number of bits of the parameters (may
      be NULL)
@@ -4365,7 +1051,7 @@ gnutls_pubkey_get_pk_algorithm
      and if possible will return a number of bits that indicates the
      security parameter of the key.
 
-     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
+     *Returns:* a member of the `gnutls_pk_algorithm_t'  enumeration on
      success, or a negative error code on error.
 
      *Since:* 2.12.0
@@ -4388,9 +1074,9 @@ gnutls_pubkey_get_pk_dsa_raw
 
      This function will export the DSA public key's parameters found in
      the given certificate.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
      *Since:* 2.12.0
@@ -4399,8 +1085,8 @@ gnutls_pubkey_get_pk_ecc_raw
 ----------------------------
 
  -- Function: int gnutls_pubkey_get_pk_ecc_raw (gnutls_pubkey_t KEY,
-          gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X, gnutls_datum_t
-          * Y)
+          gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X,
+          gnutls_datum_t * Y)
      KEY: Holds the public key
 
      CURVE: will hold the curve
@@ -4411,9 +1097,9 @@ gnutls_pubkey_get_pk_ecc_raw
 
      This function will export the ECC public key's parameters found in
      the given certificate.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
      *Since:* 3.0
@@ -4431,9 +1117,9 @@ gnutls_pubkey_get_pk_ecc_x962
 
      This function will export the ECC public key's parameters found in
      the given certificate.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
      *Since:* 3.0
@@ -4451,9 +1137,9 @@ gnutls_pubkey_get_pk_rsa_raw
 
      This function will export the RSA public key's parameters found in
      the given structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
      error code.
 
      *Since:* 2.12.0
@@ -4473,15 +1159,15 @@ gnutls_pubkey_get_preferred_hash_algorithm
      May be NULL.
 
      This function will read the certifcate and return the appropriate
-     digest algorithm to use for signing with this certificate.  Some
+     digest algorithm to use for signing with this certificate. Some
      certificates (i.e.  DSA might not be able to sign without the
      preferred algorithm).
 
      To get the signature algorithm instead of just the hash use
-     'gnutls_pk_to_sign()' with the algorithm of the certificate/key and
-     the provided 'hash' .
+     `gnutls_pk_to_sign()' with the algorithm of the certificate/key
+     and the provided  `hash' .
 
-     *Returns:* the 0 if the hash algorithm is found.  A negative error
+     *Returns:* the 0 if the hash algorithm is found. A negative error
      code is returned on error.
 
      *Since:* 2.12.0
@@ -4502,7 +1188,7 @@ gnutls_pubkey_get_verify_algorithm
      This function will read the certifcate and the signed data to
      determine the hash algorithm used to generate the signature.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4519,11 +1205,11 @@ gnutls_pubkey_import
      FORMAT: One of DER or PEM
 
      This function will import the provided public key in a
-     SubjectPublicKeyInfo X.509 structure to a native 'gnutls_pubkey_t'
-     structure.  The output will be stored in 'key' .  If the public key
+     SubjectPublicKeyInfo X.509 structure to a native `gnutls_pubkey_t'
+     structure. The output will be stored in  `key' . If the public key
      is PEM encoded it should have a header of "PUBLIC KEY".
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4545,10 +1231,10 @@ gnutls_pubkey_import_dsa_raw
      Y: holds the y
 
      This function will convert the given DSA raw parameters to the
-     native 'gnutls_pubkey_t' format.  The output will be stored in
-     'key' .
+     native `gnutls_pubkey_t'  format.  The output will be stored in
+     `key' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4568,9 +1254,9 @@ gnutls_pubkey_import_ecc_raw
      Y: holds the y
 
      This function will convert the given elliptic curve parameters to a
-     'gnutls_pubkey_t' .  The output will be stored in 'key' .
+     `gnutls_pubkey_t' .  The output will be stored in  `key' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -4588,9 +1274,9 @@ gnutls_pubkey_import_ecc_x962
      ECPOINT: DER encoding of ANSI X9.62 ECPoint
 
      This function will convert the given elliptic curve parameters to a
-     'gnutls_pubkey_t' .  The output will be stored in 'key' .
+     `gnutls_pubkey_t' .  The output will be stored in  `key' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.0
@@ -4606,12 +1292,12 @@ gnutls_pubkey_import_openpgp
 
      FLAGS: should be zero
 
-     Imports a public key from an openpgp key.  This function will
-     import the given public key to the abstract 'gnutls_pubkey_t'
-     structure.  The subkey set as preferred will be imported or the
-     master key otherwise.
+     Imports a public key from an openpgp key. This function will import
+     the given public key to the abstract `gnutls_pubkey_t' structure.
+     The subkey set as preferred will be imported or the master key
+     otherwise.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4634,9 +1320,9 @@ gnutls_pubkey_import_openpgp_raw
      FLAGS: Should be zero
 
      This function will import the given public key to the abstract
-     'gnutls_pubkey_t' structure.
+     `gnutls_pubkey_t'  structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.3
@@ -4652,10 +1338,10 @@ gnutls_pubkey_import_pkcs11
 
      FLAGS: should be zero
 
-     Imports a public key from a pkcs11 key.  This function will import
-     the given public key to the abstract 'gnutls_pubkey_t' structure.
+     Imports a public key from a pkcs11 key. This function will import
+     the given public key to the abstract `gnutls_pubkey_t'  structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4665,16 +1351,16 @@ gnutls_pubkey_import_pkcs11_url
 
  -- Function: int gnutls_pubkey_import_pkcs11_url (gnutls_pubkey_t KEY,
           const char * URL, unsigned int FLAGS)
-     KEY: A key of type 'gnutls_pubkey_t'
+     KEY: A key of type `gnutls_pubkey_t'
 
      URL: A PKCS 11 url
 
      FLAGS: One of GNUTLS_PKCS11_OBJ_* flags
 
      This function will import a PKCS 11 certificate to a
-     'gnutls_pubkey_t' structure.
+     `gnutls_pubkey_t' structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4693,9 +1379,9 @@ gnutls_pubkey_import_privkey
      FLAGS: should be zero
 
      Imports the public key from a private.  This function will import
-     the given public key to the abstract 'gnutls_pubkey_t' structure.
+     the given public key to the abstract `gnutls_pubkey_t'  structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4715,7 +1401,7 @@ gnutls_pubkey_import_rsa_raw
      The new parameters should be stored in the appropriate
      gnutls_datum.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an negative error
      code.
 
      *Since:* 2.12.0
@@ -4740,9 +1426,9 @@ gnutls_pubkey_import_tpm_raw
      structure.
 
      With respect to passwords the same as in
-     'gnutls_pubkey_import_tpm_url()' apply.
+     `gnutls_pubkey_import_tpm_url()'  apply.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -4762,15 +1448,15 @@ gnutls_pubkey_import_tpm_url
      FLAGS: should be zero
 
      This function will import the given private key to the abstract
-     'gnutls_privkey_t' structure.
+     `gnutls_privkey_t'  structure.
 
-     Note that unless 'GNUTLS_PUBKEY_DISABLE_CALLBACKS' is specified, if
-     incorrect (or NULL) passwords are given the PKCS11 callback
-     functions will be used to obtain the correct passwords.  Otherwise
-     if the SRK password is wrong 'GNUTLS_E_TPM_SRK_PASSWORD_ERROR' is
+     Note that unless `GNUTLS_PUBKEY_DISABLE_CALLBACKS' is specified,
+     if incorrect (or NULL) passwords are given the PKCS11 callback
+     functions will be used to obtain the correct passwords. Otherwise
+     if the SRK password is wrong `GNUTLS_E_TPM_SRK_PASSWORD_ERROR'  is
      returned.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -4780,7 +1466,7 @@ gnutls_pubkey_import_url
 
  -- Function: int gnutls_pubkey_import_url (gnutls_pubkey_t KEY, const
           char * URL, unsigned int FLAGS)
-     KEY: A key of type 'gnutls_pubkey_t'
+     KEY: A key of type `gnutls_pubkey_t'
 
      URL: A PKCS 11 url
 
@@ -4789,7 +1475,7 @@ gnutls_pubkey_import_url
      This function will import a PKCS11 certificate or a TPM key as a
      public key.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.0
@@ -4806,9 +1492,9 @@ gnutls_pubkey_import_x509
      FLAGS: should be zero
 
      This function will import the given public key to the abstract
-     'gnutls_pubkey_t' structure.
+     `gnutls_pubkey_t'  structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4825,9 +1511,9 @@ gnutls_pubkey_import_x509_crq
      FLAGS: should be zero
 
      This function will import the given public key to the abstract
-     'gnutls_pubkey_t' structure.
+     `gnutls_pubkey_t'  structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.5
@@ -4847,9 +1533,9 @@ gnutls_pubkey_import_x509_raw
      FLAGS: should be zero
 
      This function will import the given public key to the abstract
-     'gnutls_pubkey_t' structure.
+     `gnutls_pubkey_t'  structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.3
@@ -4862,7 +1548,7 @@ gnutls_pubkey_init
 
      This function will initialize an public key structure.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4882,12 +1568,12 @@ gnutls_pubkey_print
      This function will pretty print public key information, suitable
      for display to a human.
 
-     Only 'GNUTLS_CRT_PRINT_FULL' and 'GNUTLS_CRT_PRINT_FULL_NUMBERS'
+     Only `GNUTLS_CRT_PRINT_FULL'  and `GNUTLS_CRT_PRINT_FULL_NUMBERS'
      are implemented.
 
-     The output 'out' needs to be deallocated using 'gnutls_free()' .
+     The output  `out' needs to be deallocated using `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 3.1.5
@@ -4897,15 +1583,15 @@ gnutls_pubkey_set_key_usage
 
  -- Function: int gnutls_pubkey_set_key_usage (gnutls_pubkey_t KEY,
           unsigned int USAGE)
-     KEY: a certificate of type 'gnutls_x509_crt_t'
+     KEY: a certificate of type `gnutls_x509_crt_t'
 
      USAGE: an ORed sequence of the GNUTLS_KEY_* elements.
 
-     This function will set the key usage flags of the public key.  This
+     This function will set the key usage flags of the public key. This
      is only useful if the key is to be exported to a certificate or
      certificate request.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -4915,15 +1601,15 @@ gnutls_pubkey_set_pin_function
 
  -- Function: void gnutls_pubkey_set_pin_function (gnutls_pubkey_t KEY,
           gnutls_pin_callback_t FN, void * USERDATA)
-     KEY: A key of type 'gnutls_pubkey_t'
+     KEY: A key of type `gnutls_pubkey_t'
 
      FN: the callback
 
      USERDATA: data associated with the callback
 
-     This function will set a callback function to be used when required
-     to access the object.  This function overrides any other global PIN
-     functions.
+     This function will set a callback function to be used when
+     required to access the object. This function overrides any other
+     global PIN functions.
 
      Note that this function must be called right after initialization
      to have effect.
@@ -4938,7 +1624,7 @@ gnutls_pubkey_verify_data
           gnutls_datum_t * SIGNATURE)
      PUBKEY: Holds the public key
 
-     FLAGS: Zero or on of 'gnutls_pubkey_flags_t'
+     FLAGS: Zero or on of `gnutls_pubkey_flags_t'
 
      DATA: holds the signed data
 
@@ -4947,11 +1633,11 @@ gnutls_pubkey_verify_data
      This function will verify the given signed data, using the
      parameters from the certificate.
 
-     Deprecated.  This function cannot be easily used securely.  Use
-     'gnutls_pubkey_verify_data2()' instead.
+     Deprecated. This function cannot be easily used securely.  Use
+     `gnutls_pubkey_verify_data2()'  instead.
 
      *Returns:* In case of a verification failure
-     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
+     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
      code on success.
 
      *Since:* 2.12.0
@@ -4966,7 +1652,7 @@ gnutls_pubkey_verify_data2
 
      ALGO: The signature algorithm used
 
-     FLAGS: Zero or on of 'gnutls_pubkey_flags_t'
+     FLAGS: Zero or on of `gnutls_pubkey_flags_t'
 
      DATA: holds the signed data
 
@@ -4976,7 +1662,7 @@ gnutls_pubkey_verify_data2
      parameters from the certificate.
 
      *Returns:* In case of a verification failure
-     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
+     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
      code on success.
 
      *Since:* 3.0
@@ -4989,7 +1675,7 @@ gnutls_pubkey_verify_hash
           gnutls_datum_t * SIGNATURE)
      KEY: Holds the public key
 
-     FLAGS: Zero or on of 'gnutls_pubkey_flags_t'
+     FLAGS: Zero or on of `gnutls_pubkey_flags_t'
 
      HASH: holds the hash digest to be verified
 
@@ -4998,11 +1684,11 @@ gnutls_pubkey_verify_hash
      This function will verify the given signed digest, using the
      parameters from the public key.
 
-     Deprecated.  This function cannot be easily used securely.  Use
-     'gnutls_pubkey_verify_hash2()' instead.
+     Deprecated. This function cannot be easily used securely.  Use
+     `gnutls_pubkey_verify_hash2()'  instead.
 
      *Returns:* In case of a verification failure
-     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
+     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
      code on success.
 
      *Since:* 2.12.0
@@ -5017,7 +1703,7 @@ gnutls_pubkey_verify_hash2
 
      ALGO: The signature algorithm used
 
-     FLAGS: Zero or on of 'gnutls_pubkey_flags_t'
+     FLAGS: Zero or on of `gnutls_pubkey_flags_t'
 
      HASH: holds the hash digest to be verified
 
@@ -5027,7 +1713,7 @@ gnutls_pubkey_verify_hash2
      parameters from the public key.
 
      *Returns:* In case of a verification failure
-     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
+     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
      code on success.
 
      *Since:* 3.0
@@ -5044,7 +1730,7 @@ gnutls_x509_crl_privkey_sign
 
      ISSUER_KEY: holds the issuer's private key
 
-     DIG: The message digest to use.  GNUTLS_DIG_SHA1 is the safe choice
+     DIG: The message digest to use. GNUTLS_DIG_SHA1 is the safe choice
      unless you know what you're doing.
 
      FLAGS: must be 0
@@ -5055,7 +1741,7 @@ gnutls_x509_crl_privkey_sign
      This must be the last step in a certificate CRL since all the
      previously set parameters are now signed.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      Since 2.12.0
@@ -5066,26 +1752,26 @@ gnutls_x509_crq_privkey_sign
  -- Function: int gnutls_x509_crq_privkey_sign (gnutls_x509_crq_t CRQ,
           gnutls_privkey_t KEY, gnutls_digest_algorithm_t DIG, unsigned
           int FLAGS)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      KEY: holds a private key
 
-     DIG: The message digest to use, i.e., 'GNUTLS_DIG_SHA1'
+     DIG: The message digest to use, i.e., `GNUTLS_DIG_SHA1'
 
      FLAGS: must be 0
 
      This function will sign the certificate request with a private key.
      This must be the same key as the one used in
-     'gnutls_x509_crt_set_key()' since a certificate request is self
+     `gnutls_x509_crt_set_key()'  since a certificate request is self
      signed.
 
      This must be the last step in a certificate request generation
      since all the previously set parameters are now signed.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
-     error code.  'GNUTLS_E_ASN1_VALUE_NOT_FOUND' is returned if you
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, otherwise a negative
+     error code.  `GNUTLS_E_ASN1_VALUE_NOT_FOUND'  is returned if you
      didn't set all information in the certificate request (e.g., the
-     version using 'gnutls_x509_crq_set_version()' ).
+     version using `gnutls_x509_crq_set_version()' ).
 
      *Since:* 2.12.0
 
@@ -5094,14 +1780,14 @@ gnutls_x509_crq_set_pubkey
 
  -- Function: int gnutls_x509_crq_set_pubkey (gnutls_x509_crq_t CRQ,
           gnutls_pubkey_t KEY)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      KEY: holds a public key
 
      This function will set the public parameters from the given public
      key to the request.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -5112,13 +1798,13 @@ gnutls_x509_crt_privkey_sign
  -- Function: int gnutls_x509_crt_privkey_sign (gnutls_x509_crt_t CRT,
           gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY,
           gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
-     CRT: a certificate of type 'gnutls_x509_crt_t'
+     CRT: a certificate of type `gnutls_x509_crt_t'
 
      ISSUER: is the certificate of the certificate issuer
 
      ISSUER_KEY: holds the issuer's private key
 
-     DIG: The message digest to use, 'GNUTLS_DIG_SHA1' is a safe choice
+     DIG: The message digest to use, `GNUTLS_DIG_SHA1'  is a safe choice
 
      FLAGS: must be 0
 
@@ -5128,7 +1814,7 @@ gnutls_x509_crt_privkey_sign
      This must be the last step in a certificate generation since all
      the previously set parameters are now signed.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 gnutls_x509_crt_set_pubkey
@@ -5136,14 +1822,14 @@ gnutls_x509_crt_set_pubkey
 
  -- Function: int gnutls_x509_crt_set_pubkey (gnutls_x509_crt_t CRT,
           gnutls_pubkey_t KEY)
-     CRT: should contain a 'gnutls_x509_crt_t' structure
+     CRT: should contain a `gnutls_x509_crt_t'  structure
 
      KEY: holds a public key
 
      This function will set the public parameters from the given public
      key to the request.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      *Since:* 2.12.0
@@ -5155,8 +1841,8 @@ E.11 DANE API
 =============
 
 The following functions are to be used for DANE certificate
-verification.  Their prototypes lie in 'gnutls/dane.h'.  Note that you
-need to link with the 'libgnutls-dane' library to use them.
+verification.  Their prototypes lie in `gnutls/dane.h'. Note that you
+need to link with the `libgnutls-dane' library to use them.
 
 dane_cert_type_name
 -------------------
@@ -5164,10 +1850,10 @@ dane_cert_type_name
  -- Function: const char* dane_cert_type_name (dane_cert_type_t TYPE)
      TYPE: is a DANE match type
 
-     Convert a 'dane_cert_type_t' value to a string.
+     Convert a `dane_cert_type_t'  value to a string.
 
      *Returns:* a string that contains the name of the specified type,
-     or 'NULL' .
+     or `NULL' .
 
 dane_cert_usage_name
 --------------------
@@ -5175,10 +1861,10 @@ dane_cert_usage_name
  -- Function: const char* dane_cert_usage_name (dane_cert_usage_t USAGE)
      USAGE: - undescribed -
 
-     Convert a 'dane_cert_usage_t' value to a string.
+     Convert a `dane_cert_usage_t'  value to a string.
 
      *Returns:* a string that contains the name of the specified type,
-     or 'NULL' .
+     or `NULL' .
 
 dane_match_type_name
 --------------------
@@ -5186,10 +1872,10 @@ dane_match_type_name
  -- Function: const char* dane_match_type_name (dane_match_type_t TYPE)
      TYPE: is a DANE match type
 
-     Convert a 'dane_match_type_t' value to a string.
+     Convert a `dane_match_type_t'  value to a string.
 
      *Returns:* a string that contains the name of the specified type,
-     or 'NULL' .
+     or `NULL' .
 
 dane_query_data
 ---------------
@@ -5201,18 +1887,18 @@ dane_query_data
 
      IDX: The index of the query response.
 
-     USAGE: The certificate usage (see 'dane_cert_usage_t' )
+     USAGE: The certificate usage (see `dane_cert_usage_t' )
 
-     TYPE: The certificate type (see 'dane_cert_type_t' )
+     TYPE: The certificate type (see `dane_cert_type_t' )
 
-     MATCH: The DANE matching type (see 'dane_match_type_t' )
+     MATCH: The DANE matching type (see `dane_match_type_t' )
 
      DATA: The DANE data.
 
      This function will provide the DANE data from the query response.
 
-     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
-     a negative error value.
+     *Returns:* On success, `DANE_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
 
 dane_query_deinit
 -----------------
@@ -5239,7 +1925,7 @@ dane_query_status
      Q: The query result structure
 
      This function will return the status of the query response.  See
-     'dane_query_status_t' for the possible types.
+     `dane_query_status_t'  for the possible types.
 
      *Returns:* The status type.
 
@@ -5256,13 +1942,13 @@ dane_query_tlsa
 
      PROTO: The protocol type (tcp, udp, etc.)
 
-     PORT: The service port number (eg.  443).
+     PORT: The service port number (eg. 443).
 
      This function will query the DNS server for the TLSA (DANE) data
      for the given host.
 
-     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
-     a negative error value.
+     *Returns:* On success, `DANE_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
 
 dane_state_deinit
 -----------------
@@ -5278,12 +1964,12 @@ dane_state_init
  -- Function: int dane_state_init (dane_state_t* S, unsigned int FLAGS)
      S: The structure to be initialized
 
-     FLAGS: flags from the 'dane_state_flags' enumeration
+     FLAGS: flags from the `dane_state_flags'  enumeration
 
      This function will initialize a DANE query structure.
 
-     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
-     a negative error value.
+     *Returns:* On success, `DANE_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
 
 dane_state_set_dlv_file
 -----------------------
@@ -5294,8 +1980,8 @@ dane_state_set_dlv_file
 
      FILE: The file holding the DLV keys.
 
-     This function will set a file with trusted keys for DLV (DNSSEC
-     Lookaside Validation).
+     This function will set a file with trusted keys for DLV  (DNSSEC
+     Lookaside  Validation).
 
 dane_strerror
 -------------
@@ -5305,7 +1991,7 @@ dane_strerror
 
      This function is similar to strerror.  The difference is that it
      accepts an error number returned by a gnutls function; In case of
-     an unknown error a descriptive string is sent instead of 'NULL' .
+     an unknown error a descriptive string is sent instead of `NULL' .
 
      Error codes are always a negative error code.
 
@@ -5323,11 +2009,11 @@ dane_verification_status_print
      FLAGS: should be zero
 
      This function will pretty print the status of a verification
-     process - eg.  the one obtained by 'dane_verify_crt()' .
+     process - eg. the one obtained by `dane_verify_crt()' .
 
-     The output 'out' needs to be deallocated using 'gnutls_free()' .
+     The output  `out' needs to be deallocated using `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
 dane_verify_crt
@@ -5335,9 +2021,9 @@ dane_verify_crt
 
  -- Function: int dane_verify_crt (dane_state_t S, const gnutls_datum_t
           * CHAIN, unsigned CHAIN_SIZE, gnutls_certificate_type_t
-          CHAIN_TYPE, const char * HOSTNAME, const char* PROTO, unsigned
-          int PORT, unsigned int SFLAGS, unsigned int VFLAGS, unsigned
-          int * VERIFY)
+          CHAIN_TYPE, const char * HOSTNAME, const char* PROTO,
+          unsigned int PORT, unsigned int SFLAGS, unsigned int VFLAGS,
+          unsigned int * VERIFY)
      S: A DANE state structure (may be NULL)
 
      CHAIN: A certificate chain
@@ -5348,38 +2034,38 @@ dane_verify_crt
 
      HOSTNAME: The hostname associated with the chain
 
-     PROTO: The protocol of the service connecting (e.g.  tcp)
+     PROTO: The protocol of the service connecting (e.g. tcp)
 
-     PORT: The port of the service connecting (e.g.  443)
+     PORT: The port of the service connecting (e.g. 443)
 
-     SFLAGS: Flags for the the initialization of 's' (if NULL)
+     SFLAGS: Flags for the the initialization of  `s' (if NULL)
 
-     VFLAGS: Verification flags; an OR'ed list of 'dane_verify_flags_t'
+     VFLAGS: Verification flags; an OR'ed list of `dane_verify_flags_t'
      .
 
-     VERIFY: An OR'ed list of 'dane_verify_status_t' .
+     VERIFY: An OR'ed list of `dane_verify_status_t' .
 
      This function will verify the given certificate chain against the
-     CA constrains and/or the certificate available via DANE. If no
+     CA constrains and/or the certificate available via DANE.  If no
      information via DANE can be obtained the flag
-     'DANE_VERIFY_NO_DANE_INFO' is set.  If a DNSSEC signature is not
+     `DANE_VERIFY_NO_DANE_INFO' is set. If a DNSSEC signature is not
      available for the DANE record then the verify flag
-     'DANE_VERIFY_NO_DNSSEC_DATA' is set.
+     `DANE_VERIFY_NO_DNSSEC_DATA'  is set.
 
      Note that the CA constraint only applies for the directly
      certifying CA and does not account for long CA chains.
 
      Due to the many possible options of DANE, there is no single threat
-     model countered.  When notifying the user about DANE verification
+     model countered. When notifying the user about DANE verification
      results it may be better to mention: DANE verification did not
      reject the certificate, rather than mentioning a successful DANE
      verication.
 
-     If the 'q' parameter is provided it will be used for caching
+     If the  `q' parameter is provided it will be used for caching
      entries.
 
-     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
-     a negative error value.
+     *Returns:* On success, `DANE_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
 
 dane_verify_session_crt
 -----------------------
@@ -5394,22 +2080,22 @@ dane_verify_session_crt
 
      HOSTNAME: The hostname associated with the chain
 
-     PROTO: The protocol of the service connecting (e.g.  tcp)
+     PROTO: The protocol of the service connecting (e.g. tcp)
 
-     PORT: The port of the service connecting (e.g.  443)
+     PORT: The port of the service connecting (e.g. 443)
 
-     SFLAGS: Flags for the the initialization of 's' (if NULL)
+     SFLAGS: Flags for the the initialization of  `s' (if NULL)
 
      VFLAGS: Verification flags; should be zero
 
-     VERIFY: An OR'ed list of 'dane_verify_status_t' .
+     VERIFY: An OR'ed list of `dane_verify_status_t' .
 
      This function will verify session's certificate chain against the
-     CA constrains and/or the certificate available via DANE. See
-     'dane_verify_crt()' for more information.
+     CA constrains and/or the certificate available via DANE.  See
+     `dane_verify_crt()'  for more information.
 
-     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
-     a negative error value.
+     *Returns:* On success, `DANE_E_SUCCESS'  (0) is returned,
+     otherwise a negative error value.
 
 
 File: gnutls.info,  Node: Cryptographic API,  Next: Compatibility API,  Prev: DANE API,  Up: API reference
@@ -5418,21 +2104,21 @@ E.12 Cryptographic API
 ======================
 
 The following functions are to be used for low-level cryptographic
-operations.  Their prototypes lie in 'gnutls/crypto.h'.
+operations.  Their prototypes lie in `gnutls/crypto.h'.
 
 gnutls_cipher_add_auth
 ----------------------
 
  -- Function: int gnutls_cipher_add_auth (gnutls_cipher_hd_t HANDLE,
           const void * TEXT, size_t TEXT_SIZE)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      TEXT: the data to be authenticated
 
      TEXT_SIZE: The length of the data
 
      This function operates on authenticated encryption with associated
-     data (AEAD) ciphers and authenticate the input data.  This function
+     data (AEAD) ciphers and authenticate the input data. This function
      can only be called once and before any encryption operations.
 
      *Returns:* Zero or a negative error code on error.
@@ -5442,9 +2128,9 @@ gnutls_cipher_add_auth
 gnutls_cipher_decrypt
 ---------------------
 
- -- Function: int gnutls_cipher_decrypt (gnutls_cipher_hd_t HANDLE, void
-          * CIPHERTEXT, size_t CIPHERTEXTLEN)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+ -- Function: int gnutls_cipher_decrypt (gnutls_cipher_hd_t HANDLE,
+          void * CIPHERTEXT, size_t CIPHERTEXTLEN)
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      CIPHERTEXT: the data to encrypt
 
@@ -5463,7 +2149,7 @@ gnutls_cipher_decrypt2
  -- Function: int gnutls_cipher_decrypt2 (gnutls_cipher_hd_t HANDLE,
           const void * CIPHERTEXT, size_t CIPHERTEXTLEN, void * TEXT,
           size_t TEXTLEN)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      CIPHERTEXT: the data to encrypt
 
@@ -5484,7 +2170,7 @@ gnutls_cipher_deinit
 --------------------
 
  -- Function: void gnutls_cipher_deinit (gnutls_cipher_hd_t HANDLE)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      This function will deinitialize all resources occupied by the given
      encryption context.
@@ -5494,9 +2180,9 @@ gnutls_cipher_deinit
 gnutls_cipher_encrypt
 ---------------------
 
- -- Function: int gnutls_cipher_encrypt (gnutls_cipher_hd_t HANDLE, void
-          * TEXT, size_t TEXTLEN)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+ -- Function: int gnutls_cipher_encrypt (gnutls_cipher_hd_t HANDLE,
+          void * TEXT, size_t TEXTLEN)
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      TEXT: the data to encrypt
 
@@ -5515,7 +2201,7 @@ gnutls_cipher_encrypt2
  -- Function: int gnutls_cipher_encrypt2 (gnutls_cipher_hd_t HANDLE,
           const void * TEXT, size_t TEXTLEN, void * CIPHERTEXT, size_t
           CIPHERTEXTLEN)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      TEXT: the data to encrypt
 
@@ -5551,7 +2237,7 @@ gnutls_cipher_init
  -- Function: int gnutls_cipher_init (gnutls_cipher_hd_t * HANDLE,
           gnutls_cipher_algorithm_t CIPHER, const gnutls_datum_t * KEY,
           const gnutls_datum_t * IV)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      CIPHER: the encryption algorithm to use
 
@@ -5560,7 +2246,7 @@ gnutls_cipher_init
      IV: The IV to use (if not applicable set NULL)
 
      This function will initialize an context that can be used for
-     encryption/decryption of data.  This will effectively use the
+     encryption/decryption of data. This will effectively use the
      current crypto backend in use by gnutls or the cryptographic
      accelerator in use.
 
@@ -5571,9 +2257,9 @@ gnutls_cipher_init
 gnutls_cipher_set_iv
 --------------------
 
- -- Function: void gnutls_cipher_set_iv (gnutls_cipher_hd_t HANDLE, void
-          * IV, size_t IVLEN)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+ -- Function: void gnutls_cipher_set_iv (gnutls_cipher_hd_t HANDLE,
+          void * IV, size_t IVLEN)
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      IV: the IV to set
 
@@ -5589,7 +2275,7 @@ gnutls_cipher_tag
 
  -- Function: int gnutls_cipher_tag (gnutls_cipher_hd_t HANDLE, void *
           TAG, size_t TAG_SIZE)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      TAG: will hold the tag
 
@@ -5607,7 +2293,7 @@ gnutls_hash
 
  -- Function: int gnutls_hash (gnutls_hash_hd_t HANDLE, const void *
           TEXT, size_t TEXTLEN)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      TEXT: the data to hash
 
@@ -5625,20 +2311,20 @@ gnutls_hash_deinit
 
  -- Function: void gnutls_hash_deinit (gnutls_hash_hd_t HANDLE, void *
           DIGEST)
-     HANDLE: is a 'gnutls_hash_hd_t' structure.
+     HANDLE: is a `gnutls_hash_hd_t'  structure.
 
      DIGEST: is the output value of the hash
 
-     This function will deinitialize all resources occupied by the given
-     hash context.
+     This function will deinitialize all resources occupied by the
+     given hash context.
 
      *Since:* 2.10.0
 
 gnutls_hash_fast
 ----------------
 
- -- Function: int gnutls_hash_fast (gnutls_digest_algorithm_t ALGORITHM,
-          const void * TEXT, size_t TEXTLEN, void * DIGEST)
+ -- Function: int gnutls_hash_fast (gnutls_digest_algorithm_t
+          ALGORITHM, const void * TEXT, size_t TEXTLEN, void * DIGEST)
      ALGORITHM: the hash algorithm to use
 
      TEXT: the data to hash
@@ -5673,7 +2359,7 @@ gnutls_hash_init
 
  -- Function: int gnutls_hash_init (gnutls_hash_hd_t * DIG,
           gnutls_digest_algorithm_t ALGORITHM)
-     DIG: is a 'gnutls_hash_hd_t' structure.
+     DIG: is a `gnutls_hash_hd_t'  structure.
 
      ALGORITHM: the hash algorithm to use
 
@@ -5691,7 +2377,7 @@ gnutls_hash_output
 
  -- Function: void gnutls_hash_output (gnutls_hash_hd_t HANDLE, void *
           DIGEST)
-     HANDLE: is a 'gnutls_hash_hd_t' structure.
+     HANDLE: is a `gnutls_hash_hd_t'  structure.
 
      DIGEST: is the output value of the hash
 
@@ -5704,7 +2390,7 @@ gnutls_hmac
 
  -- Function: int gnutls_hmac (gnutls_hmac_hd_t HANDLE, const void *
           TEXT, size_t TEXTLEN)
-     HANDLE: is a 'gnutls_cipher_hd_t' structure.
+     HANDLE: is a `gnutls_cipher_hd_t'  structure.
 
      TEXT: the data to hash
 
@@ -5722,12 +2408,12 @@ gnutls_hmac_deinit
 
  -- Function: void gnutls_hmac_deinit (gnutls_hmac_hd_t HANDLE, void *
           DIGEST)
-     HANDLE: is a 'gnutls_hmac_hd_t' structure.
+     HANDLE: is a `gnutls_hmac_hd_t'  structure.
 
      DIGEST: is the output value of the MAC
 
-     This function will deinitialize all resources occupied by the given
-     hmac context.
+     This function will deinitialize all resources occupied by the
+     given hmac context.
 
      *Since:* 2.10.0
 
@@ -5775,7 +2461,7 @@ gnutls_hmac_init
  -- Function: int gnutls_hmac_init (gnutls_hmac_hd_t * DIG,
           gnutls_mac_algorithm_t ALGORITHM, const void * KEY, size_t
           KEYLEN)
-     DIG: is a 'gnutls_hmac_hd_t' structure.
+     DIG: is a `gnutls_hmac_hd_t'  structure.
 
      ALGORITHM: the HMAC algorithm to use
 
@@ -5797,7 +2483,7 @@ gnutls_hmac_output
 
  -- Function: void gnutls_hmac_output (gnutls_hmac_hd_t HANDLE, void *
           DIGEST)
-     HANDLE: is a 'gnutls_hmac_hd_t' structure.
+     HANDLE: is a `gnutls_hmac_hd_t'  structure.
 
      DIGEST: is the output value of the MAC
 
@@ -5827,7 +2513,6 @@ gnutls_rnd_refresh
 ------------------
 
  -- Function: void gnutls_rnd_refresh ()
-
      This function refreshes the random generator state.  That is the
      current precise time, CPU usage, and other values are input into
      its state.
@@ -5842,9 +2527,9 @@ File: gnutls.info,  Node: Compatibility API,  Prev: Cryptographic API,  Up: API
 E.13 Compatibility API
 ======================
 
-The following functions are carried over from old GnuTLS released.  They
+The following functions are carried over from old GnuTLS released. They
 might be removed at a later version.  Their prototypes lie in
-'gnutls/compat.h'.
+`gnutls/compat.h'.
 
 gnutls_certificate_set_rsa_export_params
 ----------------------------------------
@@ -5863,9 +2548,9 @@ gnutls_certificate_set_rsa_export_params
 gnutls_certificate_type_set_priority
 ------------------------------------
 
- -- Function: int gnutls_certificate_type_set_priority (gnutls_session_t
-          SESSION, const int * LIST)
-     SESSION: is a 'gnutls_session_t' structure.
+ -- Function: int gnutls_certificate_type_set_priority
+          (gnutls_session_t SESSION, const int * LIST)
+     SESSION: is a `gnutls_session_t'  structure.
 
      LIST: is a 0 terminated list of gnutls_certificate_type_t elements.
 
@@ -5873,27 +2558,27 @@ gnutls_certificate_type_set_priority
      Priority is higher for elements specified before others.  After
      specifying the types you want, you must append a 0.  Note that the
      certificate type priority is set on the client.  The server does
-     not use the cert type priority except for disabling types that were
-     not specified.
+     not use the cert type priority except for disabling types that
+     were not specified.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_cipher_set_priority
 --------------------------
 
  -- Function: int gnutls_cipher_set_priority (gnutls_session_t SESSION,
           const int * LIST)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      LIST: is a 0 terminated list of gnutls_cipher_algorithm_t elements.
 
      Sets the priority on the ciphers supported by gnutls.  Priority is
      higher for elements specified before others.  After specifying the
      ciphers you want, you must append a 0.  Note that the priority is
-     set on the client.  The server does not use the algorithm's
+     set on the client. The server does not use the algorithm's
      priority except for disabling algorithms that were not specified.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  (0) on success, or a negative error
      code.
 
 gnutls_compression_set_priority
@@ -5901,7 +2586,7 @@ gnutls_compression_set_priority
 
  -- Function: int gnutls_compression_set_priority (gnutls_session_t
           SESSION, const int * LIST)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      LIST: is a 0 terminated list of gnutls_compression_method_t
      elements.
@@ -5909,7 +2594,7 @@ gnutls_compression_set_priority
      Sets the priority on the compression algorithms supported by
      gnutls.  Priority is higher for elements specified before others.
      After specifying the algorithms you want, you must append a 0.
-     Note that the priority is set on the client.  The server does not
+     Note that the priority is set on the client. The server does not
      use the algorithm's priority except for disabling algorithms that
      were not specified.
 
@@ -5917,43 +2602,43 @@ gnutls_compression_set_priority
      Other compression algorithms are to be considered as gnutls
      extensions.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_kx_set_priority
 ----------------------
 
  -- Function: int gnutls_kx_set_priority (gnutls_session_t SESSION,
           const int * LIST)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      LIST: is a 0 terminated list of gnutls_kx_algorithm_t elements.
 
      Sets the priority on the key exchange algorithms supported by
      gnutls.  Priority is higher for elements specified before others.
      After specifying the algorithms you want, you must append a 0.
-     Note that the priority is set on the client.  The server does not
+     Note that the priority is set on the client. The server does not
      use the algorithm's priority except for disabling algorithms that
      were not specified.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_mac_set_priority
 -----------------------
 
  -- Function: int gnutls_mac_set_priority (gnutls_session_t SESSION,
           const int * LIST)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      LIST: is a 0 terminated list of gnutls_mac_algorithm_t elements.
 
      Sets the priority on the mac algorithms supported by gnutls.
      Priority is higher for elements specified before others.  After
-     specifying the algorithms you want, you must append a 0.  Note that
-     the priority is set on the client.  The server does not use the
-     algorithm's priority except for disabling algorithms that were not
-     specified.
+     specifying the algorithms you want, you must append a 0.  Note
+     that the priority is set on the client. The server does not use
+     the algorithm's priority except for disabling algorithms that were
+     not specified.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_openpgp_privkey_sign_hash
 --------------------------------
@@ -5968,28 +2653,28 @@ gnutls_openpgp_privkey_sign_hash
      SIGNATURE: will contain newly allocated signature
 
      This function will sign the given hash using the private key.  You
-     should use 'gnutls_openpgp_privkey_set_preferred_key_id()' before
+     should use `gnutls_openpgp_privkey_set_preferred_key_id()'  before
      calling this function to set the subkey to use.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
-     *Deprecated:* Use 'gnutls_privkey_sign_hash()' instead.
+     *Deprecated:* Use `gnutls_privkey_sign_hash()'  instead.
 
 gnutls_protocol_set_priority
 ----------------------------
 
  -- Function: int gnutls_protocol_set_priority (gnutls_session_t
           SESSION, const int * LIST)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      LIST: is a 0 terminated list of gnutls_protocol_t elements.
 
      Sets the priority on the protocol versions supported by gnutls.
-     This function actually enables or disables protocols.  Newer
+     This function actually enables or disables protocols. Newer
      protocol versions always have highest priority.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_rsa_export_get_modulus_bits
 ----------------------------------
@@ -6016,9 +2701,9 @@ gnutls_rsa_export_get_pubkey
 
      This function will return the peer's public key exponent and
      modulus used in the last RSA-EXPORT authentication.  The output
-     parameters must be freed with 'gnutls_free()' .
+     parameters must be freed with `gnutls_free()' .
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise an error code is returned.
 
 gnutls_rsa_params_cpy
@@ -6030,10 +2715,10 @@ gnutls_rsa_params_cpy
 
      SRC: Is the source structure
 
-     This function will copy the RSA parameters structure from source to
-     destination.
+     This function will copy the RSA parameters structure from source
+     to destination.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an negative error
      code.
 
 gnutls_rsa_params_deinit
@@ -6053,7 +2738,7 @@ gnutls_rsa_params_export_pkcs1
           PARAMS_DATA, size_t * PARAMS_DATA_SIZE)
      PARAMS: Holds the RSA parameters
 
-     FORMAT: the format of output params.  One of PEM or DER.
+     FORMAT: the format of output params. One of PEM or DER.
 
      PARAMS_DATA: will contain a PKCS1 RSAPrivateKey structure PEM or
      DER encoded
@@ -6062,23 +2747,23 @@ gnutls_rsa_params_export_pkcs1
      replaced by the actual size of parameters)
 
      This function will export the given RSA parameters to a PKCS1
-     RSAPrivateKey structure.  If the buffer provided is not long enough
+     RSAPrivateKey structure. If the buffer provided is not long enough
      to hold the output, then GNUTLS_E_SHORT_MEMORY_BUFFER will be
      returned.
 
      If the structure is PEM encoded, it will have a header of "BEGIN
      RSA PRIVATE KEY".
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an negative error
      code.
 
 gnutls_rsa_params_export_raw
 ----------------------------
 
- -- Function: int gnutls_rsa_params_export_raw (gnutls_rsa_params_t RSA,
-          gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D,
-          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U,
-          unsigned int * BITS)
+ -- Function: int gnutls_rsa_params_export_raw (gnutls_rsa_params_t
+          RSA, gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t *
+          D, gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t *
+          U, unsigned int * BITS)
      RSA: a structure that holds the rsa parameters
 
      M: will hold the modulus
@@ -6096,10 +2781,10 @@ gnutls_rsa_params_export_raw
      BITS: if non null will hold the prime's number of bits
 
      This function will export the RSA parameters found in the given
-     structure.  The new parameters will be allocated using
-     'gnutls_malloc()' and will be stored in the appropriate datum.
+     structure. The new parameters will be allocated using
+     `gnutls_malloc()'  and will be stored in the appropriate datum.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an negative error
      code.
 
 gnutls_rsa_params_generate2
@@ -6120,7 +2805,7 @@ gnutls_rsa_params_generate2
      Clients use the parameters sent by the server, thus it's no use
      calling this in client side.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an negative error
      code.
 
 gnutls_rsa_params_import_pkcs1
@@ -6131,10 +2816,10 @@ gnutls_rsa_params_import_pkcs1
           gnutls_x509_crt_fmt_t FORMAT)
      PARAMS: A structure where the parameters will be copied to
 
-     PKCS1_PARAMS: should contain a PKCS1 RSAPrivateKey structure PEM or
-     DER encoded
+     PKCS1_PARAMS: should contain a PKCS1 RSAPrivateKey structure PEM
+     or DER encoded
 
-     FORMAT: the format of params.  PEM or DER.
+     FORMAT: the format of params. PEM or DER.
 
      This function will extract the RSAPrivateKey found in a PKCS1
      formatted structure.
@@ -6142,7 +2827,7 @@ gnutls_rsa_params_import_pkcs1
      If the structure is PEM encoded, it should have a header of "BEGIN
      RSA PRIVATE KEY".
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an negative error
      code.
 
 gnutls_rsa_params_import_raw
@@ -6170,7 +2855,7 @@ gnutls_rsa_params_import_raw
      The new parameters should be stored in the appropriate
      gnutls_datum.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an negative error
      code.
 
 gnutls_rsa_params_init
@@ -6183,7 +2868,7 @@ gnutls_rsa_params_init
      This function will initialize the temporary RSA parameters
      structure.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an negative error
      code.
 
 gnutls_set_default_export_priority
@@ -6191,7 +2876,7 @@ gnutls_set_default_export_priority
 
  -- Function: int gnutls_set_default_export_priority (gnutls_session_t
           SESSION)
-     SESSION: is a 'gnutls_session_t' structure.
+     SESSION: is a `gnutls_session_t'  structure.
 
      Sets some default priority on the ciphers, key exchange methods,
      macs and compression methods.  This function also includes weak
@@ -6205,9 +2890,10 @@ gnutls_set_default_export_priority
      because of its wide use it is still fully supported.  If you wish
      to allow users to provide a string that specify which ciphers to
      use (which is recommended), you should use
-     'gnutls_priority_set_direct()' or 'gnutls_priority_set()' instead.
+     `gnutls_priority_set_direct()'  or `gnutls_priority_set()'
+     instead.
 
-     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.
+     *Returns:* `GNUTLS_E_SUCCESS'  on success, or an error code.
 
 gnutls_sign_callback_get
 ------------------------
@@ -6216,12 +2902,12 @@ gnutls_sign_callback_get
           (gnutls_session_t SESSION, void ** USERDATA)
      SESSION: is a gnutls session
 
-     USERDATA: if non-'NULL' , will be set to abstract callback pointer.
+     USERDATA: if non-`NULL' , will be set to abstract callback pointer.
 
      Retrieve the callback function, and its userdata pointer.
 
-     *Returns:* The function pointer set by 'gnutls_sign_callback_set()'
-     , or if not set, 'NULL' .
+     *Returns:* The function pointer set by
+     `gnutls_sign_callback_set()' , or if not set, `NULL' .
 
      *Deprecated:* Use the PKCS 11 interfaces instead.
 
@@ -6243,12 +2929,12 @@ gnutls_sign_callback_set
      gnutls_datum_t * cert, const gnutls_datum_t * hash, gnutls_datum_t
      * signature);
 
-     The 'userdata' parameter is passed to the 'sign_func' verbatim, and
-     can be used to store application-specific data needed in the
-     callback function.  See also 'gnutls_sign_callback_get()' .
+     The  `userdata' parameter is passed to the  `sign_func' verbatim,
+     and can be used to store application-specific data needed in the
+     callback function.  See also `gnutls_sign_callback_get()' .
 
-     *Deprecated:* Use the PKCS 11 or 'gnutls_privkey_t' interfacess
-     like 'gnutls_privkey_import_ext()' instead.
+     *Deprecated:* Use the PKCS 11 or `gnutls_privkey_t'  interfacess
+     like `gnutls_privkey_import_ext()'  instead.
 
 gnutls_x509_crl_sign
 --------------------
@@ -6261,30 +2947,30 @@ gnutls_x509_crl_sign
 
      ISSUER_KEY: holds the issuer's private key
 
-     This function is the same a 'gnutls_x509_crl_sign2()' with no
+     This function is the same a `gnutls_x509_crl_sign2()'  with no
      flags, and SHA1 as the hash algorithm.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
-     *Deprecated:* Use 'gnutls_x509_crl_privkey_sign()' .
+     *Deprecated:* Use `gnutls_x509_crl_privkey_sign()' .
 
 gnutls_x509_crq_sign
 --------------------
 
  -- Function: int gnutls_x509_crq_sign (gnutls_x509_crq_t CRQ,
           gnutls_x509_privkey_t KEY)
-     CRQ: should contain a 'gnutls_x509_crq_t' structure
+     CRQ: should contain a `gnutls_x509_crq_t'  structure
 
      KEY: holds a private key
 
-     This function is the same a 'gnutls_x509_crq_sign2()' with no
+     This function is the same a `gnutls_x509_crq_sign2()'  with no
      flags, and SHA1 as the hash algorithm.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
-     *Deprecated:* Use 'gnutls_x509_crq_privkey_sign()' instead.
+     *Deprecated:* Use `gnutls_x509_crq_privkey_sign()'  instead.
 
 gnutls_x509_crt_get_preferred_hash_algorithm
 --------------------------------------------
@@ -6301,14 +2987,14 @@ gnutls_x509_crt_get_preferred_hash_algorithm
      May be NULL.
 
      This function will read the certifcate and return the appropriate
-     digest algorithm to use for signing with this certificate.  Some
+     digest algorithm to use for signing with this certificate. Some
      certificates (i.e.  DSA might not be able to sign without the
      preferred algorithm).
 
      *Deprecated:* Please use
-     'gnutls_pubkey_get_preferred_hash_algorithm()' .
+     `gnutls_pubkey_get_preferred_hash_algorithm()' .
 
-     *Returns:* the 0 if the hash algorithm is found.  A negative error
+     *Returns:* the 0 if the hash algorithm is found. A negative error
      code is returned on error.
 
      *Since:* 2.12.0
@@ -6329,9 +3015,9 @@ gnutls_x509_crt_get_verify_algorithm
      This function will read the certifcate and the signed data to
      determine the hash algorithm used to generate the signature.
 
-     *Deprecated:* Use 'gnutls_pubkey_get_verify_algorithm()' instead.
+     *Deprecated:* Use `gnutls_pubkey_get_verify_algorithm()'  instead.
 
-     *Returns:* the 0 if the hash algorithm is found.  A negative error
+     *Returns:* the 0 if the hash algorithm is found. A negative error
      code is returned on error.
 
      *Since:* 2.8.0
@@ -6353,11 +3039,11 @@ gnutls_x509_crt_verify_data
      This function will verify the given signed data, using the
      parameters from the certificate.
 
-     Deprecated.  This function cannot be easily used securely.  Use
-     'gnutls_pubkey_verify_data2()' instead.
+     Deprecated. This function cannot be easily used securely.  Use
+     `gnutls_pubkey_verify_data2()'  instead.
 
      *Returns:* In case of a verification failure
-     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
+     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
      code on success.
 
 gnutls_x509_crt_verify_hash
@@ -6377,11 +3063,11 @@ gnutls_x509_crt_verify_hash
      This function will verify the given signed digest, using the
      parameters from the certificate.
 
-     Deprecated.  This function cannot be easily used securely.  Use
-     'gnutls_pubkey_verify_hash2()' instead.
+     Deprecated. This function cannot be easily used securely.  Use
+     `gnutls_pubkey_verify_hash2()'  instead.
 
      *Returns:* In case of a verification failure
-     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
+     `GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
      code on success.
 
 gnutls_x509_privkey_sign_data
@@ -6405,21 +3091,21 @@ gnutls_x509_privkey_sign_data
      by the new size)
 
      This function will sign the given data using a signature algorithm
-     supported by the private key.  Signature algorithms are always used
+     supported by the private key. Signature algorithms are always used
      together with a hash functions.  Different hash functions may be
      used for the RSA algorithm, but only SHA-1 for the DSA keys.
 
      If the buffer provided is not long enough to hold the output, then
-     * 'signature_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
+     * `signature_size' is updated and `GNUTLS_E_SHORT_MEMORY_BUFFER'
      will be returned.
 
-     Use 'gnutls_x509_crt_get_preferred_hash_algorithm()' to determine
+     Use `gnutls_x509_crt_get_preferred_hash_algorithm()'  to determine
      the hash algorithm.
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
-     *Deprecated:* Use 'gnutls_privkey_sign_data()' .
+     *Deprecated:* Use `gnutls_privkey_sign_data()' .
 
 gnutls_x509_privkey_sign_hash
 -----------------------------
@@ -6432,12 +3118,12 @@ gnutls_x509_privkey_sign_hash
 
      SIGNATURE: will contain newly allocated signature
 
-     This function will sign the given hash using the private key.  Do
-     not use this function directly unless you know what it is.  Typical
+     This function will sign the given hash using the private key. Do
+     not use this function directly unless you know what it is. Typical
      signing requires the data to be hashed and stored in special
-     formats (e.g.  BER Digest-Info for RSA).
+     formats (e.g. BER Digest-Info for RSA).
 
-     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
+     *Returns:* On success, `GNUTLS_E_SUCCESS'  (0) is returned,
      otherwise a negative error value.
 
      Deprecated in: 2.12.0
@@ -6453,11 +3139,11 @@ GNU Free Documentation License
 
                      Version 1.3, 3 November 2008
 
-     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
-     <http://fsf.org/>
+    Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
+    `http://fsf.org/'
 
-     Everyone is permitted to copy and distribute verbatim copies
-     of this license document, but changing it is not allowed.
+    Everyone is permitted to copy and distribute verbatim copies
+    of this license document, but changing it is not allowed.
 
   0. PREAMBLE
 
@@ -6479,21 +3165,21 @@ GNU Free Documentation License
      free program should come with manuals providing the same freedoms
      that the software does.  But this License is not limited to
      software manuals; it can be used for any textual work, regardless
-     of subject matter or whether it is published as a printed book.  We
-     recommend this License principally for works whose purpose is
+     of subject matter or whether it is published as a printed book.
+     We recommend this License principally for works whose purpose is
      instruction or reference.
 
   1. APPLICABILITY AND DEFINITIONS
 
      This License applies to any manual or other work, in any medium,
-     that contains a notice placed by the copyright holder saying it can
-     be distributed under the terms of this License.  Such a notice
+     that contains a notice placed by the copyright holder saying it
+     can be distributed under the terms of this License.  Such a notice
      grants a world-wide, royalty-free license, unlimited in duration,
      to use that work under the conditions stated herein.  The
      "Document", below, refers to any such manual or work.  Any member
-     of the public is a licensee, and is addressed as "you".  You accept
-     the license if you copy, modify or distribute the work in a way
-     requiring permission under copyright law.
+     of the public is a licensee, and is addressed as "you".  You
+     accept the license if you copy, modify or distribute the work in a
+     way requiring permission under copyright law.
 
      A "Modified Version" of the Document means any work containing the
      Document or a portion of it, either copied verbatim, or with
@@ -6511,12 +3197,12 @@ GNU Free Documentation License
      regarding them.
 
      The "Invariant Sections" are certain Secondary Sections whose
-     titles are designated, as being those of Invariant Sections, in the
-     notice that says that the Document is released under this License.
-     If a section does not fit the above definition of Secondary then it
-     is not allowed to be designated as Invariant.  The Document may
-     contain zero Invariant Sections.  If the Document does not identify
-     any Invariant Sections then there are none.
+     titles are designated, as being those of Invariant Sections, in
+     the notice that says that the Document is released under this
+     License.  If a section does not fit the above definition of
+     Secondary then it is not allowed to be designated as Invariant.
+     The Document may contain zero Invariant Sections.  If the Document
+     does not identify any Invariant Sections then there are none.
 
      The "Cover Texts" are certain short passages of text that are
      listed, as Front-Cover Texts or Back-Cover Texts, in the notice
@@ -6527,27 +3213,27 @@ GNU Free Documentation License
      A "Transparent" copy of the Document means a machine-readable copy,
      represented in a format whose specification is available to the
      general public, that is suitable for revising the document
-     straightforwardly with generic text editors or (for images composed
-     of pixels) generic paint programs or (for drawings) some widely
-     available drawing editor, and that is suitable for input to text
-     formatters or for automatic translation to a variety of formats
-     suitable for input to text formatters.  A copy made in an otherwise
-     Transparent file format whose markup, or absence of markup, has
-     been arranged to thwart or discourage subsequent modification by
-     readers is not Transparent.  An image format is not Transparent if
-     used for any substantial amount of text.  A copy that is not
-     "Transparent" is called "Opaque".
+     straightforwardly with generic text editors or (for images
+     composed of pixels) generic paint programs or (for drawings) some
+     widely available drawing editor, and that is suitable for input to
+     text formatters or for automatic translation to a variety of
+     formats suitable for input to text formatters.  A copy made in an
+     otherwise Transparent file format whose markup, or absence of
+     markup, has been arranged to thwart or discourage subsequent
+     modification by readers is not Transparent.  An image format is
+     not Transparent if used for any substantial amount of text.  A
+     copy that is not "Transparent" is called "Opaque".
 
      Examples of suitable formats for Transparent copies include plain
      ASCII without markup, Texinfo input format, LaTeX input format,
-     SGML or XML using a publicly available DTD, and standard-conforming
-     simple HTML, PostScript or PDF designed for human modification.
-     Examples of transparent image formats include PNG, XCF and JPG.
-     Opaque formats include proprietary formats that can be read and
-     edited only by proprietary word processors, SGML or XML for which
-     the DTD and/or processing tools are not generally available, and
-     the machine-generated HTML, PostScript or PDF produced by some word
-     processors for output purposes only.
+     SGML or XML using a publicly available DTD, and
+     standard-conforming simple HTML, PostScript or PDF designed for
+     human modification.  Examples of transparent image formats include
+     PNG, XCF and JPG.  Opaque formats include proprietary formats that
+     can be read and edited only by proprietary word processors, SGML or
+     XML for which the DTD and/or processing tools are not generally
+     available, and the machine-generated HTML, PostScript or PDF
+     produced by some word processors for output purposes only.
 
      The "Title Page" means, for a printed book, the title page itself,
      plus such following pages as are needed to hold, legibly, the
@@ -6585,8 +3271,8 @@ GNU Free Documentation License
      may not use technical measures to obstruct or control the reading
      or further copying of the copies you make or distribute.  However,
      you may accept compensation in exchange for copies.  If you
-     distribute a large enough number of copies you must also follow the
-     conditions in section 3.
+     distribute a large enough number of copies you must also follow
+     the conditions in section 3.
 
      You may also lend copies, under the same conditions stated above,
      and you may publicly display copies.
@@ -6600,11 +3286,12 @@ GNU Free Documentation License
      these Cover Texts: Front-Cover Texts on the front cover, and
      Back-Cover Texts on the back cover.  Both covers must also clearly
      and legibly identify you as the publisher of these copies.  The
-     front cover must present the full title with all words of the title
-     equally prominent and visible.  You may add other material on the
-     covers in addition.  Copying with changes limited to the covers, as
-     long as they preserve the title of the Document and satisfy these
-     conditions, can be treated as verbatim copying in other respects.
+     front cover must present the full title with all words of the
+     title equally prominent and visible.  You may add other material
+     on the covers in addition.  Copying with changes limited to the
+     covers, as long as they preserve the title of the Document and
+     satisfy these conditions, can be treated as verbatim copying in
+     other respects.
 
      If the required texts for either cover are too voluminous to fit
      legibly, you should put the first ones listed (as many as fit
@@ -6612,39 +3299,40 @@ GNU Free Documentation License
      adjacent pages.
 
      If you publish or distribute Opaque copies of the Document
-     numbering more than 100, you must either include a machine-readable
-     Transparent copy along with each Opaque copy, or state in or with
-     each Opaque copy a computer-network location from which the general
-     network-using public has access to download using public-standard
-     network protocols a complete Transparent copy of the Document, free
-     of added material.  If you use the latter option, you must take
-     reasonably prudent steps, when you begin distribution of Opaque
-     copies in quantity, to ensure that this Transparent copy will
-     remain thus accessible at the stated location until at least one
-     year after the last time you distribute an Opaque copy (directly or
-     through your agents or retailers) of that edition to the public.
+     numbering more than 100, you must either include a
+     machine-readable Transparent copy along with each Opaque copy, or
+     state in or with each Opaque copy a computer-network location from
+     which the general network-using public has access to download
+     using public-standard network protocols a complete Transparent
+     copy of the Document, free of added material.  If you use the
+     latter option, you must take reasonably prudent steps, when you
+     begin distribution of Opaque copies in quantity, to ensure that
+     this Transparent copy will remain thus accessible at the stated
+     location until at least one year after the last time you
+     distribute an Opaque copy (directly or through your agents or
+     retailers) of that edition to the public.
 
      It is requested, but not required, that you contact the authors of
-     the Document well before redistributing any large number of copies,
-     to give them a chance to provide you with an updated version of the
-     Document.
+     the Document well before redistributing any large number of
+     copies, to give them a chance to provide you with an updated
+     version of the Document.
 
   4. MODIFICATIONS
 
      You may copy and distribute a Modified Version of the Document
      under the conditions of sections 2 and 3 above, provided that you
-     release the Modified Version under precisely this License, with the
-     Modified Version filling the role of the Document, thus licensing
-     distribution and modification of the Modified Version to whoever
-     possesses a copy of it.  In addition, you must do these things in
-     the Modified Version:
+     release the Modified Version under precisely this License, with
+     the Modified Version filling the role of the Document, thus
+     licensing distribution and modification of the Modified Version to
+     whoever possesses a copy of it.  In addition, you must do these
+     things in the Modified Version:
 
        A. Use in the Title Page (and on the covers, if any) a title
-          distinct from that of the Document, and from those of previous
-          versions (which should, if there were any, be listed in the
-          History section of the Document).  You may use the same title
-          as a previous version if the original publisher of that
-          version gives permission.
+          distinct from that of the Document, and from those of
+          previous versions (which should, if there were any, be listed
+          in the History section of the Document).  You may use the
+          same title as a previous version if the original publisher of
+          that version gives permission.
 
        B. List on the Title Page, as authors, one or more persons or
           entities responsible for authorship of the modifications in
@@ -6674,30 +3362,31 @@ GNU Free Documentation License
 
        I. Preserve the section Entitled "History", Preserve its Title,
           and add to it an item stating at least the title, year, new
-          authors, and publisher of the Modified Version as given on the
-          Title Page.  If there is no section Entitled "History" in the
-          Document, create one stating the title, year, authors, and
-          publisher of the Document as given on its Title Page, then add
-          an item describing the Modified Version as stated in the
-          previous sentence.
+          authors, and publisher of the Modified Version as given on
+          the Title Page.  If there is no section Entitled "History" in
+          the Document, create one stating the title, year, authors,
+          and publisher of the Document as given on its Title Page,
+          then add an item describing the Modified Version as stated in
+          the previous sentence.
 
        J. Preserve the network location, if any, given in the Document
           for public access to a Transparent copy of the Document, and
           likewise the network locations given in the Document for
-          previous versions it was based on.  These may be placed in the
-          "History" section.  You may omit a network location for a work
-          that was published at least four years before the Document
-          itself, or if the original publisher of the version it refers
-          to gives permission.
+          previous versions it was based on.  These may be placed in
+          the "History" section.  You may omit a network location for a
+          work that was published at least four years before the
+          Document itself, or if the original publisher of the version
+          it refers to gives permission.
 
        K. For any section Entitled "Acknowledgements" or "Dedications",
-          Preserve the Title of the section, and preserve in the section
-          all the substance and tone of each of the contributor
+          Preserve the Title of the section, and preserve in the
+          section all the substance and tone of each of the contributor
           acknowledgements and/or dedications given therein.
 
-       L. Preserve all the Invariant Sections of the Document, unaltered
-          in their text and in their titles.  Section numbers or the
-          equivalent are not considered part of the section titles.
+       L. Preserve all the Invariant Sections of the Document,
+          unaltered in their text and in their titles.  Section numbers
+          or the equivalent are not considered part of the section
+          titles.
 
        M. Delete any section Entitled "Endorsements".  Such a section
           may not be included in the Modified Version.
@@ -6710,11 +3399,11 @@ GNU Free Documentation License
 
      If the Modified Version includes new front-matter sections or
      appendices that qualify as Secondary Sections and contain no
-     material copied from the Document, you may at your option designate
-     some or all of these sections as invariant.  To do this, add their
-     titles to the list of Invariant Sections in the Modified Version's
-     license notice.  These titles must be distinct from any other
-     section titles.
+     material copied from the Document, you may at your option
+     designate some or all of these sections as invariant.  To do this,
+     add their titles to the list of Invariant Sections in the Modified
+     Version's license notice.  These titles must be distinct from any
+     other section titles.
 
      You may add a section Entitled "Endorsements", provided it contains
      nothing but endorsements of your Modified Version by various
@@ -6723,15 +3412,15 @@ GNU Free Documentation License
      definition of a standard.
 
      You may add a passage of up to five words as a Front-Cover Text,
-     and a passage of up to 25 words as a Back-Cover Text, to the end of
-     the list of Cover Texts in the Modified Version.  Only one passage
-     of Front-Cover Text and one of Back-Cover Text may be added by (or
-     through arrangements made by) any one entity.  If the Document
-     already includes a cover text for the same cover, previously added
-     by you or by arrangement made by the same entity you are acting on
-     behalf of, you may not add another; but you may replace the old
-     one, on explicit permission from the previous publisher that added
-     the old one.
+     and a passage of up to 25 words as a Back-Cover Text, to the end
+     of the list of Cover Texts in the Modified Version.  Only one
+     passage of Front-Cover Text and one of Back-Cover Text may be
+     added by (or through arrangements made by) any one entity.  If the
+     Document already includes a cover text for the same cover,
+     previously added by you or by arrangement made by the same entity
+     you are acting on behalf of, you may not add another; but you may
+     replace the old one, on explicit permission from the previous
+     publisher that added the old one.
 
      The author(s) and publisher(s) of the Document do not by this
      License give permission to use their names for publicity for or to
@@ -6741,8 +3430,8 @@ GNU Free Documentation License
 
      You may combine the Document with other documents released under
      this License, under the terms defined in section 4 above for
-     modified versions, provided that you include in the combination all
-     of the Invariant Sections of all of the original documents,
+     modified versions, provided that you include in the combination
+     all of the Invariant Sections of all of the original documents,
      unmodified, and list them all as Invariant Sections of your
      combined work in its license notice, and that you preserve all
      their Warranty Disclaimers.
@@ -6769,20 +3458,20 @@ GNU Free Documentation License
      documents released under this License, and replace the individual
      copies of this License in the various documents with a single copy
      that is included in the collection, provided that you follow the
-     rules of this License for verbatim copying of each of the documents
-     in all other respects.
+     rules of this License for verbatim copying of each of the
+     documents in all other respects.
 
      You may extract a single document from such a collection, and
      distribute it individually under this License, provided you insert
-     a copy of this License into the extracted document, and follow this
-     License in all other respects regarding verbatim copying of that
-     document.
+     a copy of this License into the extracted document, and follow
+     this License in all other respects regarding verbatim copying of
+     that document.
 
   7. AGGREGATION WITH INDEPENDENT WORKS
 
      A compilation of the Document or its derivatives with other
-     separate and independent documents or works, in or on a volume of a
-     storage or distribution medium, is called an "aggregate" if the
+     separate and independent documents or works, in or on a volume of
+     a storage or distribution medium, is called an "aggregate" if the
      copyright resulting from the compilation is not used to limit the
      legal rights of the compilation's users beyond what the individual
      works permit.  When the Document is included in an aggregate, this
@@ -6827,8 +3516,8 @@ GNU Free Documentation License
 
      However, if you cease all violation of this License, then your
      license from a particular copyright holder is reinstated (a)
-     provisionally, unless and until the copyright holder explicitly and
-     finally terminates your license, and (b) permanently, if the
+     provisionally, unless and until the copyright holder explicitly
+     and finally terminates your license, and (b) permanently, if the
      copyright holder fails to notify you of the violation by some
      reasonable means prior to 60 days after the cessation.
 
@@ -6840,33 +3529,33 @@ GNU Free Documentation License
      after your receipt of the notice.
 
      Termination of your rights under this section does not terminate
-     the licenses of parties who have received copies or rights from you
-     under this License.  If your rights have been terminated and not
-     permanently reinstated, receipt of a copy of some or all of the
-     same material does not give you any rights to use it.
+     the licenses of parties who have received copies or rights from
+     you under this License.  If your rights have been terminated and
+     not permanently reinstated, receipt of a copy of some or all of
+     the same material does not give you any rights to use it.
 
-  10. FUTURE REVISIONS OF THIS LICENSE
+ 10. FUTURE REVISIONS OF THIS LICENSE
 
      The Free Software Foundation may publish new, revised versions of
      the GNU Free Documentation License from time to time.  Such new
      versions will be similar in spirit to the present version, but may
      differ in detail to address new problems or concerns.  See
-     <http://www.gnu.org/copyleft/>.
+     `http://www.gnu.org/copyleft/'.
 
      Each version of the License is given a distinguishing version
      number.  If the Document specifies that a particular numbered
      version of this License "or any later version" applies to it, you
      have the option of following the terms and conditions either of
      that specified version or of any later version that has been
-     published (not as a draft) by the Free Software Foundation.  If the
-     Document does not specify a version number of this License, you may
-     choose any version ever published (not as a draft) by the Free
-     Software Foundation.  If the Document specifies that a proxy can
-     decide which future versions of this License can be used, that
+     published (not as a draft) by the Free Software Foundation.  If
+     the Document does not specify a version number of this License,
+     you may choose any version ever published (not as a draft) by the
+     Free Software Foundation.  If the Document specifies that a proxy
+     can decide which future versions of this License can be used, that
      proxy's public statement of acceptance of a version permanently
      authorizes you to choose that version for the Document.
 
-  11. RELICENSING
+ 11. RELICENSING
 
      "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
      World Wide Web server that publishes copyrightable works and also
@@ -6896,6 +3585,7 @@ GNU Free Documentation License
      site under CC-BY-SA on the same site at any time before August 1,
      2009, provided the MMC is eligible for relicensing.
 
+
 ADDENDUM: How to use this License for your documents
 ====================================================
 
@@ -6903,29 +3593,29 @@ To use this License in a document you have written, include a copy of
 the License in the document and put the following copyright and license
 notices just after the title page:
 
-       Copyright (C)  YEAR  YOUR NAME.
-       Permission is granted to copy, distribute and/or modify this document
-       under the terms of the GNU Free Documentation License, Version 1.3
-       or any later version published by the Free Software Foundation;
-       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
-       Texts.  A copy of the license is included in the section entitled ``GNU
-       Free Documentation License''.
+      Copyright (C)  YEAR  YOUR NAME.
+      Permission is granted to copy, distribute and/or modify this document
+      under the terms of the GNU Free Documentation License, Version 1.3
+      or any later version published by the Free Software Foundation;
+      with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
+      Texts.  A copy of the license is included in the section entitled ``GNU
+      Free Documentation License''.
 
 If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
 replace the "with...Texts." line with this:
 
-         with the Invariant Sections being LIST THEIR TITLES, with
-         the Front-Cover Texts being LIST, and with the Back-Cover Texts
-         being LIST.
+        with the Invariant Sections being LIST THEIR TITLES, with
+        the Front-Cover Texts being LIST, and with the Back-Cover Texts
+        being LIST.
 
 If you have Invariant Sections without Cover Texts, or some other
 combination of the three, merge those two alternatives to suit the
 situation.
 
 If your document contains nontrivial examples of program code, we
-recommend releasing these examples in parallel under your choice of free
-software license, such as the GNU General Public License, to permit
-their use in free software.
+recommend releasing these examples in parallel under your choice of
+free software license, such as the GNU General Public License, to
+permit their use in free software.
 
 
 File: gnutls.info,  Node: Bibliography,  Next: Function and Data Index,  Prev: Copying Information,  Up: Top
@@ -6936,133 +3626,133 @@ Bibliography
 [CBCATT]
      Bodo Moeller, "Security of CBC Ciphersuites in SSL/TLS: Problems
      and Countermeasures", 2002, available from
-     <http://www.openssl.org/~bodo/tls-cbc.txt>.
+     `http://www.openssl.org/~bodo/tls-cbc.txt'.
 
 [GPGH]
      Mike Ashley, "The GNU Privacy Handbook", 2002, available from
-     <http://www.gnupg.org/gph/en/manual.pdf>.
+     `http://www.gnupg.org/gph/en/manual.pdf'.
 
 [GUTPKI]
      Peter Gutmann, "Everything you never wanted to know about PKI but
      were forced to find out", Available from
-     <http://www.cs.auckland.ac.nz/~pgut001/>.
+     `http://www.cs.auckland.ac.nz/~pgut001/'.
 
 [KEYPIN]
      Chris Evans and Chris Palmer, "Public Key Pinning Extension for
      HTTP", Available from
-     <http://tools.ietf.org/html/draft-ietf-websec-key-pinning-01>.
+     `http://tools.ietf.org/html/draft-ietf-websec-key-pinning-01'.
 
 [NISTSP80057]
-     NIST Special Publication 800-57, "Recommendation for Key Management
-     - Part 1: General (Revised)", March 2007, available from
-     <http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57-Part1-revised2_Mar08-2007.pdf>.
+     NIST Special Publication 800-57, "Recommendation for Key
+     Management - Part 1: General (Revised)", March 2007, available from
+     `http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57-Part1-revised2_Mar08-2007.pdf'.
 
 [RFC2246]
      Tim Dierks and Christopher Allen, "The TLS Protocol Version 1.0",
-     January 1999, Available from <http://www.ietf.org/rfc/rfc2246.txt>.
+     January 1999, Available from `http://www.ietf.org/rfc/rfc2246.txt'.
 
 [RFC4680]
      S. Santesson, "TLS Handshake Message for Supplemental Data",
      September 2006, Available from
-     <http://www.ietf.org/rfc/rfc4680.txt>.
+     `http://www.ietf.org/rfc/rfc4680.txt'.
 
 [RFC4514]
-     Kurt D. Zeilenga, "Lightweight Directory Access Protocol (LDAP):
-     String Representation of Distinguished Names", June 2006, Available
-     from <http://www.ietf.org/rfc/rfc4513.txt>.
+     Kurt D.  Zeilenga, "Lightweight Directory Access Protocol (LDAP):
+     String Representation of Distinguished Names", June 2006,
+     Available from `http://www.ietf.org/rfc/rfc4513.txt'.
 
 [RFC4346]
      Tim Dierks and Eric Rescorla, "The TLS Protocol Version 1.1", Match
-     2006, Available from <http://www.ietf.org/rfc/rfc4346.txt>.
+     2006, Available from `http://www.ietf.org/rfc/rfc4346.txt'.
 
 [RFC4347]
      Eric Rescorla and Nagendra Modadugu, "Datagram Transport Layer
      Security", April 2006, Available from
-     <http://www.ietf.org/rfc/rfc4347.txt>.
+     `http://www.ietf.org/rfc/rfc4347.txt'.
 
 [RFC5246]
      Tim Dierks and Eric Rescorla, "The TLS Protocol Version 1.2",
-     August 2008, Available from <http://www.ietf.org/rfc/rfc5246.txt>.
+     August 2008, Available from `http://www.ietf.org/rfc/rfc5246.txt'.
 
 [RFC2440]
      Jon Callas, Lutz Donnerhacke, Hal Finney and Rodney Thayer,
      "OpenPGP Message Format", November 1998, Available from
-     <http://www.ietf.org/rfc/rfc2440.txt>.
+     `http://www.ietf.org/rfc/rfc2440.txt'.
 
 [RFC4880]
      Jon Callas, Lutz Donnerhacke, Hal Finney, David Shaw and Rodney
      Thayer, "OpenPGP Message Format", November 2007, Available from
-     <http://www.ietf.org/rfc/rfc4880.txt>.
+     `http://www.ietf.org/rfc/rfc4880.txt'.
 
 [RFC4211]
      J. Schaad, "Internet X.509 Public Key Infrastructure Certificate
      Request Message Format (CRMF)", September 2005, Available from
-     <http://www.ietf.org/rfc/rfc4211.txt>.
+     `http://www.ietf.org/rfc/rfc4211.txt'.
 
 [RFC2817]
      Rohit Khare and Scott Lawrence, "Upgrading to TLS Within HTTP/1.1",
-     May 2000, Available from <http://www.ietf.org/rfc/rfc2817.txt>
+     May 2000, Available from `http://www.ietf.org/rfc/rfc2817.txt'
 
 [RFC2818]
      Eric Rescorla, "HTTP Over TLS", May 2000, Available from
-     <http://www.ietf/rfc/rfc2818.txt>.
+     `http://www.ietf/rfc/rfc2818.txt'.
 
 [RFC2945]
      Tom Wu, "The SRP Authentication and Key Exchange System", September
-     2000, Available from <http://www.ietf.org/rfc/rfc2945.txt>.
+     2000, Available from `http://www.ietf.org/rfc/rfc2945.txt'.
 
 [RFC2986]
      Magnus Nystrom and Burt Kaliski, "PKCS 10 v1.7: Certification
      Request Syntax Specification", November 2000, Available from
-     <http://www.ietf.org/rfc/rfc2986.txt>.
+     `http://www.ietf.org/rfc/rfc2986.txt'.
 
 [PKIX]
      D. Cooper, S. Santesson, S. Farrel, S. Boeyen, R. Housley, W. Polk,
      "Internet X.509 Public Key Infrastructure Certificate and
      Certificate Revocation List (CRL) Profile", May 2008, available
-     from <http://www.ietf.org/rfc/rfc5280.txt>.
+     from `http://www.ietf.org/rfc/rfc5280.txt'.
 
 [RFC3749]
      Scott Hollenbeck, "Transport Layer Security Protocol Compression
      Methods", May 2004, available from
-     <http://www.ietf.org/rfc/rfc3749.txt>.
+     `http://www.ietf.org/rfc/rfc3749.txt'.
 
 [RFC3820]
      Steven Tuecke, Von Welch, Doug Engert, Laura Pearlman, and Mary
      Thompson, "Internet X.509 Public Key Infrastructure (PKI) Proxy
      Certificate Profile", June 2004, available from
-     <http://www.ietf.org/rfc/rfc3820>.
+     `http://www.ietf.org/rfc/rfc3820'.
 
 [RFC6520]
      R. Seggelmann, M. Tuexen, and M. Williams, "Transport Layer
      Security (TLS) and Datagram Transport Layer Security (DTLS)
      Heartbeat Extension", February 2012, available from
-     <http://www.ietf.org/rfc/rfc6520>.
+     `http://www.ietf.org/rfc/rfc6520'.
 
 [RFC5746]
      E. Rescorla, M. Ray, S. Dispensa, and N. Oskov, "Transport Layer
      Security (TLS) Renegotiation Indication Extension", February 2010,
-     available from <http://www.ietf.org/rfc/rfc5746>.
+     available from `http://www.ietf.org/rfc/rfc5746'.
 
 [RFC5280]
      D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W.
      Polk, "Internet X.509 Public Key Infrastructure Certificate and
      Certificate Revocation List (CRL) Profile", May 2008, available
-     from <http://www.ietf.org/rfc/rfc5280>.
+     from `http://www.ietf.org/rfc/rfc5280'.
 
 [TLSTKT]
      Joseph Salowey, Hao Zhou, Pasi Eronen, Hannes Tschofenig,
      "Transport Layer Security (TLS) Session Resumption without
      Server-Side State", January 2008, available from
-     <http://www.ietf.org/rfc/rfc5077>.
+     `http://www.ietf.org/rfc/rfc5077'.
 
 [PKCS12]
      RSA Laboratories, "PKCS 12 v1.0: Personal Information Exchange
-     Syntax", June 1999, Available from <http://www.rsa.com>.
+     Syntax", June 1999, Available from `http://www.rsa.com'.
 
 [PKCS11]
      RSA Laboratories, "PKCS #11 Base Functionality v2.30: Cryptoki –
-     Draft 4", July 2009, Available from <http://www.rsa.com>.
+     Draft 4", July 2009, Available from `http://www.rsa.com'.
 
 [RESCORLA]
      Eric Rescorla, "SSL and TLS: Designing and Building Secure
@@ -7071,12 +3761,12 @@ Bibliography
 [SELKEY]
      Arjen Lenstra and Eric Verheul, "Selecting Cryptographic Key
      Sizes", 2003, available from
-     <http://www.win.tue.nl/~klenstra/key.pdf>.
+     `http://www.win.tue.nl/~klenstra/key.pdf'.
 
 [SSL3]
      Alan Freier, Philip Karlton and Paul Kocher, "The Secure Sockets
      Layer (SSL) Protocol Version 3.0", August 2011, Available from
-     <http://www.ietf.org/rfc/rfc6101.txt>.
+     `http://www.ietf.org/rfc/rfc6101.txt'.
 
 [STEVENS]
      Richard Stevens, "UNIX Network Programming, Volume 1", Prentice
@@ -7085,54 +3775,54 @@ Bibliography
 [TLSEXT]
      Simon Blake-Wilson, Magnus Nystrom, David Hopwood, Jan Mikkelsen
      and Tim Wright, "Transport Layer Security (TLS) Extensions", June
-     2003, Available from <http://www.ietf.org/rfc/rfc3546.txt>.
+     2003, Available from `http://www.ietf.org/rfc/rfc3546.txt'.
 
 [TLSPGP]
      Nikos Mavrogiannopoulos, "Using OpenPGP keys for TLS
-     authentication", January 2011.  Available from
-     <http://www.ietf.org/rfc/rfc6091.txt>.
+     authentication", January 2011. Available from
+     `http://www.ietf.org/rfc/rfc6091.txt'.
 
 [TLSSRP]
      David Taylor, Trevor Perrin, Tom Wu and Nikos Mavrogiannopoulos,
-     "Using SRP for TLS Authentication", November 2007.  Available from
-     <http://www.ietf.org/rfc/rfc5054.txt>.
+     "Using SRP for TLS Authentication", November 2007. Available from
+     `http://www.ietf.org/rfc/rfc5054.txt'.
 
 [TLSPSK]
      Pasi Eronen and Hannes Tschofenig, "Pre-shared key Ciphersuites for
      TLS", December 2005, Available from
-     <http://www.ietf.org/rfc/rfc4279.txt>.
+     `http://www.ietf.org/rfc/rfc4279.txt'.
 
 [TOMSRP]
      Tom Wu, "The Stanford SRP Authentication Project", Available at
-     <http://srp.stanford.edu/>.
+     `http://srp.stanford.edu/'.
 
 [WEGER]
      Arjen Lenstra and Xiaoyun Wang and Benne de Weger, "Colliding X.509
      Certificates", Cryptology ePrint Archive, Report 2005/067,
-     Available at <http://eprint.iacr.org/>.
+     Available at `http://eprint.iacr.org/'.
 
 [ECRYPT]
      European Network of Excellence in Cryptology II, "ECRYPT II Yearly
      Report on Algorithms and Keysizes (2009-2010)", Available at
-     <http://www.ecrypt.eu.org/documents/D.SPA.13.pdf>.
+     `http://www.ecrypt.eu.org/documents/D.SPA.13.pdf'.
 
 [RFC5056]
      N. Williams, "On the Use of Channel Bindings to Secure Channels",
-     November 2007, available from <http://www.ietf.org/rfc/rfc5056>.
+     November 2007, available from `http://www.ietf.org/rfc/rfc5056'.
 
 [RFC5929]
      J. Altman, N. Williams, L. Zhu, "Channel Bindings for TLS", July
-     2010, available from <http://www.ietf.org/rfc/rfc5929>.
+     2010, available from `http://www.ietf.org/rfc/rfc5929'.
 
 [PKCS11URI]
      J. Pechanec, D. Moffat, "The PKCS#11 URI Scheme", January 2013,
      Work in progress, available from
-     <http://tools.ietf.org/html/draft-pechanec-pkcs11uri-08>.
+     `http://tools.ietf.org/html/draft-pechanec-pkcs11uri-08'.
 
 [TPMURI]
      C. Latze, N. Mavrogiannopoulos, "The TPMKEY URI Scheme", January
      2013, Work in progress, available from
-     <http://tools.ietf.org/html/draft-mavrogiannopoulos-tpmuri-01>.
+     `http://tools.ietf.org/html/draft-mavrogiannopoulos-tpmuri-01'.
 
 [ANDERSON]
      R. J. Anderson, "Security Engineering: A Guide to Building
@@ -7140,19 +3830,20 @@ Bibliography
 
 [RFC4821]
      M. Mathis, J. Heffner, "Packetization Layer Path MTU Discovery",
-     March 2007, available from <http://www.ietf.org/rfc/rfc4821.txt>.
+     March 2007, available from `http://www.ietf.org/rfc/rfc4821.txt'.
 
 [RFC2560]
      M. Myers et al, "X.509 Internet Public Key Infrastructure Online
      Certificate Status Protocol - OCSP", June 1999, Available from
-     <http://www.ietf.org/rfc/rfc2560.txt>.
+     `http://www.ietf.org/rfc/rfc2560.txt'.
 
 [RIVESTCRL]
      R. L. Rivest, "Can We Eliminate Certificate Revocation Lists?",
      Proceedings of Financial Cryptography '98; Springer Lecture Notes
-     in Computer Science No.  1465 (Rafael Hirschfeld, ed.), February
+     in Computer Science No. 1465 (Rafael Hirschfeld, ed.), February
      1998), pages 178-183, available from
-     <http://people.csail.mit.edu/rivest/Rivest-CanWeEliminateCertificateRevocationLists.pdf>.
+     `http://people.csail.mit.edu/rivest/Rivest-CanWeEliminateCertificateRevocationLists.pdf'.
+
 
 
 File: gnutls.info,  Node: Function and Data Index,  Next: Concept Index,  Prev: Bibliography,  Up: Top
@@ -7163,1283 +3854,1499 @@ Function and Data Index
  [index ]
 * Menu:
 
-* dane_cert_type_name:                   DANE API.           (line   13)
-* dane_cert_usage_name:                  DANE API.           (line   24)
-* dane_match_type_name:                  DANE API.           (line   35)
-* dane_query_data:                       DANE API.           (line   46)
-* dane_query_deinit:                     DANE API.           (line   69)
-* dane_query_entries:                    DANE API.           (line   77)
-* dane_query_status:                     DANE API.           (line   87)
-* dane_query_tlsa:                       DANE API.           (line   98)
-* dane_state_deinit:                     DANE API.           (line  119)
-* dane_state_init:                       DANE API.           (line  127)
-* dane_state_set_dlv_file:               DANE API.           (line  140)
-* dane_strerror:                         DANE API.           (line  152)
-* dane_verification_status_print:        DANE API.           (line  166)
+* dane_cert_type_name:                   DANE API.           (line   14)
+* dane_cert_usage_name:                  DANE API.           (line   25)
+* dane_match_type_name:                  DANE API.           (line   36)
+* dane_query_data:                       DANE API.           (line   49)
+* dane_query_deinit:                     DANE API.           (line   70)
+* dane_query_entries:                    DANE API.           (line   78)
+* dane_query_status:                     DANE API.           (line   88)
+* dane_query_tlsa:                       DANE API.           (line  100)
+* dane_state_deinit:                     DANE API.           (line  120)
+* dane_state_init:                       DANE API.           (line  128)
+* dane_state_set_dlv_file:               DANE API.           (line  142)
+* dane_strerror:                         DANE API.           (line  153)
+* dane_verification_status_print:        DANE API.           (line  168)
+* dane_verify_crt <1>:                   DANE API.           (line  190)
 * dane_verify_crt:                       Certificate verification.
-                                                             (line  165)
-* dane_verify_crt <1>:                   DANE API.           (line  185)
-* dane_verify_session_crt:               DANE API.           (line  236)
-* gnutls_alert_get:                      Handling alerts.    (line   18)
-* gnutls_alert_get <1>:                  Core TLS API.       (line   11)
-* gnutls_alert_get_name:                 Handling alerts.    (line   31)
-* gnutls_alert_get_name <1>:             Core TLS API.       (line   27)
-* gnutls_alert_get_strname:              Core TLS API.       (line   40)
-* gnutls_alert_send:                     Handling alerts.    (line   45)
-* gnutls_alert_send <1>:                 Core TLS API.       (line   54)
-* gnutls_alert_send_appropriate:         Core TLS API.       (line   78)
-* gnutls_anon_allocate_client_credentials: Core TLS API.     (line  101)
-* gnutls_anon_allocate_server_credentials: Core TLS API.     (line  113)
-* gnutls_anon_free_client_credentials:   Core TLS API.       (line  125)
-* gnutls_anon_free_server_credentials:   Core TLS API.       (line  135)
-* gnutls_anon_set_params_function:       Core TLS API.       (line  145)
-* gnutls_anon_set_server_dh_params:      Core TLS API.       (line  159)
-* gnutls_anon_set_server_params_function: Core TLS API.      (line  173)
-* gnutls_auth_client_get_type:           Core TLS API.       (line  187)
-* gnutls_auth_get_type:                  Core TLS API.       (line  201)
-* gnutls_auth_server_get_type:           Core TLS API.       (line  219)
-* gnutls_bye:                            Data transfer and termination.
-                                                             (line  141)
-* gnutls_bye <1>:                        Core TLS API.       (line  233)
-* gnutls_certificate_activation_time_peers: Core TLS API.    (line  269)
-* gnutls_certificate_allocate_credentials: Core TLS API.     (line  284)
+                                                             (line  176)
+* dane_verify_session_crt:               DANE API.           (line  240)
+* gnutls_alert_get <1>:                  Core TLS API.       (line   13)
+* gnutls_alert_get:                      Handling alerts.    (line   20)
+* gnutls_alert_get_name <1>:             Handling alerts.    (line   33)
+* gnutls_alert_get_name:                 Core TLS API.       (line   29)
+* gnutls_alert_get_strname:              Core TLS API.       (line   42)
+* gnutls_alert_send <1>:                 Core TLS API.       (line   56)
+* gnutls_alert_send:                     Handling alerts.    (line   47)
+* gnutls_alert_send_appropriate:         Core TLS API.       (line   80)
+* gnutls_anon_allocate_client_credentials: Core TLS API.     (line  103)
+* gnutls_anon_allocate_server_credentials: Core TLS API.     (line  116)
+* gnutls_anon_free_client_credentials:   Core TLS API.       (line  129)
+* gnutls_anon_free_server_credentials:   Core TLS API.       (line  139)
+* gnutls_anon_set_params_function:       Core TLS API.       (line  150)
+* gnutls_anon_set_server_dh_params:      Core TLS API.       (line  164)
+* gnutls_anon_set_server_params_function: Core TLS API.      (line  178)
+* gnutls_auth_client_get_type:           Core TLS API.       (line  191)
+* gnutls_auth_get_type:                  Core TLS API.       (line  205)
+* gnutls_auth_server_get_type:           Core TLS API.       (line  223)
+* gnutls_bye <1>:                        Data transfer and termination.
+                                                             (line  145)
+* gnutls_bye:                            Core TLS API.       (line  237)
+* gnutls_certificate_activation_time_peers: Core TLS API.    (line  273)
+* gnutls_certificate_allocate_credentials: Core TLS API.     (line  288)
 * gnutls_certificate_client_get_request_status: Core TLS API.
-                                                             (line  297)
-* gnutls_certificate_expiration_time_peers: Core TLS API.    (line  310)
-* gnutls_certificate_free_cas:           Core TLS API.       (line  341)
-* gnutls_certificate_free_ca_names:      Core TLS API.       (line  324)
-* gnutls_certificate_free_credentials:   Core TLS API.       (line  353)
-* gnutls_certificate_free_crls:          Core TLS API.       (line  367)
-* gnutls_certificate_free_keys:          Core TLS API.       (line  377)
-* gnutls_certificate_get_issuer:         Core TLS API.       (line  389)
-* gnutls_certificate_get_ours:           Core TLS API.       (line  411)
-* gnutls_certificate_get_peers:          Core TLS API.       (line  426)
-* gnutls_certificate_get_peers_subkey_id: Core TLS API.      (line  448)
-* gnutls_certificate_send_x509_rdn_sequence: Certificate credentials.
-                                                             (line  172)
-* gnutls_certificate_send_x509_rdn_sequence <1>: Core TLS API.
-                                                             (line  465)
-* gnutls_certificate_server_set_request: Certificate credentials.
-                                                             (line  160)
-* gnutls_certificate_server_set_request <1>: Core TLS API.   (line  483)
-* gnutls_certificate_set_dh_params:      Core TLS API.       (line  498)
-* gnutls_certificate_set_key:            Certificate credentials.
-                                                             (line   67)
-* gnutls_certificate_set_key <1>:        Abstract key API.   (line   12)
+                                                             (line  301)
+* gnutls_certificate_expiration_time_peers: Core TLS API.    (line  314)
+* gnutls_certificate_free_ca_names:      Core TLS API.       (line  328)
+* gnutls_certificate_free_cas:           Core TLS API.       (line  345)
+* gnutls_certificate_free_credentials:   Core TLS API.       (line  357)
+* gnutls_certificate_free_crls:          Core TLS API.       (line  371)
+* gnutls_certificate_free_keys:          Core TLS API.       (line  381)
+* gnutls_certificate_get_issuer:         Core TLS API.       (line  394)
+* gnutls_certificate_get_ours:           Core TLS API.       (line  414)
+* gnutls_certificate_get_peers:          Core TLS API.       (line  429)
+* gnutls_certificate_get_peers_subkey_id: Core TLS API.      (line  451)
+* gnutls_certificate_send_x509_rdn_sequence <1>: Certificate credentials.
+                                                             (line  186)
+* gnutls_certificate_send_x509_rdn_sequence: Core TLS API.   (line  468)
+* gnutls_certificate_server_set_request <1>: Certificate credentials.
+                                                             (line  174)
+* gnutls_certificate_server_set_request: Core TLS API.       (line  486)
+* gnutls_certificate_set_dh_params:      Core TLS API.       (line  502)
+* gnutls_certificate_set_key <1>:        Certificate credentials.
+                                                             (line   77)
+* gnutls_certificate_set_key:            Abstract key API.   (line   16)
 * gnutls_certificate_set_ocsp_status_request_file: Core TLS API.
-                                                             (line  515)
+                                                             (line  519)
 * gnutls_certificate_set_ocsp_status_request_function: Core TLS API.
-                                                             (line  539)
-* gnutls_certificate_set_openpgp_key:    OpenPGP API.        (line   12)
-* gnutls_certificate_set_openpgp_keyring_file: OpenPGP certificates.
-                                                             (line  159)
-* gnutls_certificate_set_openpgp_keyring_file <1>: OpenPGP API.
-                                                             (line  140)
-* gnutls_certificate_set_openpgp_keyring_mem: OpenPGP API.   (line  160)
-* gnutls_certificate_set_openpgp_key_file: OpenPGP API.      (line   37)
-* gnutls_certificate_set_openpgp_key_file2: OpenPGP API.     (line   58)
-* gnutls_certificate_set_openpgp_key_mem: OpenPGP API.       (line   88)
-* gnutls_certificate_set_openpgp_key_mem2: OpenPGP API.      (line  110)
-* gnutls_certificate_set_params_function: Parameter generation.
-                                                             (line   52)
-* gnutls_certificate_set_params_function <1>: Core TLS API.  (line  573)
+                                                             (line  543)
+* gnutls_certificate_set_openpgp_key:    OpenPGP API.        (line   15)
+* gnutls_certificate_set_openpgp_key_file: OpenPGP API.      (line   40)
+* gnutls_certificate_set_openpgp_key_file2: OpenPGP API.     (line   62)
+* gnutls_certificate_set_openpgp_key_mem: OpenPGP API.       (line   92)
+* gnutls_certificate_set_openpgp_key_mem2: OpenPGP API.      (line  114)
+* gnutls_certificate_set_openpgp_keyring_file <1>: OpenPGP certificates.
+                                                             (line  151)
+* gnutls_certificate_set_openpgp_keyring_file: OpenPGP API.  (line  143)
+* gnutls_certificate_set_openpgp_keyring_mem: OpenPGP API.   (line  163)
+* gnutls_certificate_set_params_function <1>: Parameter generation.
+                                                             (line   61)
+* gnutls_certificate_set_params_function: Core TLS API.      (line  577)
+* gnutls_certificate_set_pin_function <1>: Core TLS API.     (line  592)
 * gnutls_certificate_set_pin_function:   Certificate credentials.
-                                                             (line   43)
-* gnutls_certificate_set_pin_function <1>: Core TLS API.     (line  588)
-* gnutls_certificate_set_retrieve_function: Core TLS API.    (line  609)
+                                                             (line   52)
+* gnutls_certificate_set_retrieve_function: Core TLS API.    (line  613)
 * gnutls_certificate_set_retrieve_function2: Abstract key API.
-                                                             (line   47)
+                                                             (line   50)
 * gnutls_certificate_set_rsa_export_params: Compatibility API.
-                                                             (line   13)
-* gnutls_certificate_set_verify_flags:   Core TLS API.       (line  654)
+                                                             (line   16)
+* gnutls_certificate_set_verify_flags:   Core TLS API.       (line  657)
+* gnutls_certificate_set_verify_function <1>: Core TLS API.  (line  671)
 * gnutls_certificate_set_verify_function: Certificate credentials.
-                                                             (line  244)
-* gnutls_certificate_set_verify_function <1>: Core TLS API.  (line  667)
-* gnutls_certificate_set_verify_limits:  Core TLS API.       (line  696)
-* gnutls_certificate_set_x509_crl:       Core TLS API.       (line  715)
-* gnutls_certificate_set_x509_crl_file:  Core TLS API.       (line  739)
-* gnutls_certificate_set_x509_crl_mem:   Core TLS API.       (line  761)
-* gnutls_certificate_set_x509_key:       Core TLS API.       (line  783)
-* gnutls_certificate_set_x509_key_file:  Core TLS API.       (line  810)
-* gnutls_certificate_set_x509_key_file2: Core TLS API.       (line  841)
-* gnutls_certificate_set_x509_key_mem:   Core TLS API.       (line  877)
-* gnutls_certificate_set_x509_key_mem2:  Core TLS API.       (line  911)
+                                                             (line  261)
+* gnutls_certificate_set_verify_limits:  Core TLS API.       (line  700)
+* gnutls_certificate_set_x509_crl:       Core TLS API.       (line  719)
+* gnutls_certificate_set_x509_crl_file:  Core TLS API.       (line  743)
+* gnutls_certificate_set_x509_crl_mem:   Core TLS API.       (line  765)
+* gnutls_certificate_set_x509_key:       Core TLS API.       (line  787)
+* gnutls_certificate_set_x509_key_file:  Core TLS API.       (line  814)
+* gnutls_certificate_set_x509_key_file2: Core TLS API.       (line  846)
+* gnutls_certificate_set_x509_key_mem:   Core TLS API.       (line  881)
+* gnutls_certificate_set_x509_key_mem2:  Core TLS API.       (line  916)
 * gnutls_certificate_set_x509_simple_pkcs12_file: Core TLS API.
-                                                             (line  950)
+                                                             (line  954)
 * gnutls_certificate_set_x509_simple_pkcs12_mem: Core TLS API.
-                                                             (line  987)
-* gnutls_certificate_set_x509_system_trust: Using a PKCS11 token with TLS.
-                                                             (line   14)
+                                                             (line  991)
 * gnutls_certificate_set_x509_system_trust <1>: Core TLS API.
-                                                             (line 1026)
-* gnutls_certificate_set_x509_trust:     Core TLS API.       (line 1044)
-* gnutls_certificate_set_x509_trust_file: Core TLS API.      (line 1071)
-* gnutls_certificate_set_x509_trust_mem: Core TLS API.       (line 1102)
-* gnutls_certificate_type_get:           Core TLS API.       (line 1127)
-* gnutls_certificate_type_get_id:        Core TLS API.       (line 1140)
-* gnutls_certificate_type_get_name:      Core TLS API.       (line 1152)
-* gnutls_certificate_type_list:          Core TLS API.       (line 1164)
-* gnutls_certificate_type_set_priority:  Compatibility API.  (line   27)
+                                                             (line 1029)
+* gnutls_certificate_set_x509_system_trust: Using a PKCS11 token with TLS.
+                                                             (line   17)
+* gnutls_certificate_set_x509_trust:     Core TLS API.       (line 1048)
+* gnutls_certificate_set_x509_trust_file: Core TLS API.      (line 1075)
+* gnutls_certificate_set_x509_trust_mem: Core TLS API.       (line 1106)
+* gnutls_certificate_type_get:           Core TLS API.       (line 1130)
+* gnutls_certificate_type_get_id:        Core TLS API.       (line 1143)
+* gnutls_certificate_type_get_name:      Core TLS API.       (line 1155)
+* gnutls_certificate_type_list:          Core TLS API.       (line 1167)
+* gnutls_certificate_type_set_priority:  Compatibility API.  (line   29)
 * gnutls_certificate_verification_status_print: Core TLS API.
-                                                             (line 1175)
-* gnutls_certificate_verify_flags:       Verifying a certificate in the context of TLS session.
+                                                             (line 1178)
+* gnutls_certificate_verify_flags <1>:   Verifying a certificate in the context of TLS session.
                                                              (line    6)
-* gnutls_certificate_verify_flags <1>:   Certificate verification.
+* gnutls_certificate_verify_flags:       Certificate verification.
                                                              (line    6)
-* gnutls_certificate_verify_peers2:      Core TLS API.       (line 1200)
-* gnutls_certificate_verify_peers3:      Certificate credentials.
-                                                             (line  212)
-* gnutls_certificate_verify_peers3 <1>:  Core TLS API.       (line 1231)
-* gnutls_check_version:                  Core TLS API.       (line 1266)
-* gnutls_cipher_add_auth:                Cryptographic API.  (line   12)
-* gnutls_cipher_decrypt:                 Cryptographic API.  (line   31)
-* gnutls_cipher_decrypt2:                Cryptographic API.  (line   49)
-* gnutls_cipher_deinit:                  Cryptographic API.  (line   72)
-* gnutls_cipher_encrypt:                 Cryptographic API.  (line   83)
-* gnutls_cipher_encrypt2:                Cryptographic API.  (line  101)
-* gnutls_cipher_get:                     Core TLS API.       (line 1283)
-* gnutls_cipher_get_block_size:          Cryptographic API.  (line  124)
-* gnutls_cipher_get_id:                  Core TLS API.       (line 1295)
-* gnutls_cipher_get_key_size:            Core TLS API.       (line 1307)
-* gnutls_cipher_get_name:                Core TLS API.       (line 1319)
-* gnutls_cipher_init:                    Cryptographic API.  (line  137)
-* gnutls_cipher_list:                    Core TLS API.       (line 1331)
-* gnutls_cipher_set_iv:                  Cryptographic API.  (line  160)
-* gnutls_cipher_set_priority:            Compatibility API.  (line   45)
-* gnutls_cipher_suite_get_name:          Core TLS API.       (line 1347)
-* gnutls_cipher_suite_info:              Core TLS API.       (line 1365)
-* gnutls_cipher_tag:                     Cryptographic API.  (line  176)
-* gnutls_compression_get:                Core TLS API.       (line 1395)
-* gnutls_compression_get_id:             Core TLS API.       (line 1407)
-* gnutls_compression_get_name:           Core TLS API.       (line 1419)
-* gnutls_compression_list:               Core TLS API.       (line 1431)
-* gnutls_compression_set_priority:       Compatibility API.  (line   63)
-* gnutls_credentials_clear:              Core TLS API.       (line 1442)
-* gnutls_credentials_set:                Session initialization.
-                                                             (line   46)
-* gnutls_credentials_set <1>:            Core TLS API.       (line 1450)
-* gnutls_db_check_entry:                 Core TLS API.       (line 1485)
-* gnutls_db_check_entry_time:            Core TLS API.       (line 1499)
-* gnutls_db_get_ptr:                     Core TLS API.       (line 1510)
-* gnutls_db_remove_session:              Core TLS API.       (line 1521)
-* gnutls_db_set_cache_expiration:        Core TLS API.       (line 1535)
-* gnutls_db_set_ptr:                     Core TLS API.       (line 1547)
-* gnutls_db_set_remove_function:         Core TLS API.       (line 1559)
-* gnutls_db_set_retrieve_function:       Core TLS API.       (line 1574)
-* gnutls_db_set_store_function:          Core TLS API.       (line 1594)
+* gnutls_certificate_verify_peers2:      Core TLS API.       (line 1202)
+* gnutls_certificate_verify_peers3 <1>:  Certificate credentials.
+                                                             (line  228)
+* gnutls_certificate_verify_peers3:      Core TLS API.       (line 1233)
+* gnutls_check_version:                  Core TLS API.       (line 1268)
+* gnutls_cipher_add_auth:                Cryptographic API.  (line   14)
+* gnutls_cipher_decrypt:                 Cryptographic API.  (line   33)
+* gnutls_cipher_decrypt2:                Cryptographic API.  (line   52)
+* gnutls_cipher_deinit:                  Cryptographic API.  (line   73)
+* gnutls_cipher_encrypt:                 Cryptographic API.  (line   85)
+* gnutls_cipher_encrypt2:                Cryptographic API.  (line  104)
+* gnutls_cipher_get:                     Core TLS API.       (line 1285)
+* gnutls_cipher_get_block_size:          Cryptographic API.  (line  126)
+* gnutls_cipher_get_id:                  Core TLS API.       (line 1297)
+* gnutls_cipher_get_key_size:            Core TLS API.       (line 1310)
+* gnutls_cipher_get_name:                Core TLS API.       (line 1322)
+* gnutls_cipher_init:                    Cryptographic API.  (line  140)
+* gnutls_cipher_list:                    Core TLS API.       (line 1334)
+* gnutls_cipher_set_iv:                  Cryptographic API.  (line  162)
+* gnutls_cipher_set_priority:            Compatibility API.  (line   47)
+* gnutls_cipher_suite_get_name:          Core TLS API.       (line 1351)
+* gnutls_cipher_suite_info:              Core TLS API.       (line 1370)
+* gnutls_cipher_tag:                     Cryptographic API.  (line  178)
+* gnutls_compression_get:                Core TLS API.       (line 1398)
+* gnutls_compression_get_id:             Core TLS API.       (line 1410)
+* gnutls_compression_get_name:           Core TLS API.       (line 1422)
+* gnutls_compression_list:               Core TLS API.       (line 1434)
+* gnutls_compression_set_priority:       Compatibility API.  (line   65)
+* gnutls_credentials_clear:              Core TLS API.       (line 1443)
+* gnutls_credentials_set <1>:            Session initialization.
+                                                             (line   48)
+* gnutls_credentials_set:                Core TLS API.       (line 1452)
+* gnutls_db_check_entry:                 Core TLS API.       (line 1487)
+* gnutls_db_check_entry_time:            Core TLS API.       (line 1500)
+* gnutls_db_get_ptr:                     Core TLS API.       (line 1511)
+* gnutls_db_remove_session:              Core TLS API.       (line 1522)
+* gnutls_db_set_cache_expiration:        Core TLS API.       (line 1537)
+* gnutls_db_set_ptr:                     Core TLS API.       (line 1549)
+* gnutls_db_set_remove_function:         Core TLS API.       (line 1561)
+* gnutls_db_set_retrieve_function:       Core TLS API.       (line 1576)
+* gnutls_db_set_store_function:          Core TLS API.       (line 1596)
+* gnutls_deinit <1>:                     Core TLS API.       (line 1610)
 * gnutls_deinit:                         Data transfer and termination.
-                                                             (line  174)
-* gnutls_deinit <1>:                     Core TLS API.       (line 1609)
-* gnutls_dh_get_group:                   Core TLS API.       (line 1619)
-* gnutls_dh_get_peers_public_bits:       Core TLS API.       (line 1639)
-* gnutls_dh_get_prime_bits:              Core TLS API.       (line 1653)
-* gnutls_dh_get_pubkey:                  Core TLS API.       (line 1669)
-* gnutls_dh_get_secret_bits:             Core TLS API.       (line 1686)
-* gnutls_dh_params_cpy:                  Core TLS API.       (line 1699)
-* gnutls_dh_params_deinit:               Core TLS API.       (line 1714)
-* gnutls_dh_params_export2_pkcs3:        Core TLS API.       (line 1723)
-* gnutls_dh_params_export_pkcs3:         Core TLS API.       (line 1747)
-* gnutls_dh_params_export_raw:           Core TLS API.       (line 1774)
-* gnutls_dh_params_generate2:            Core TLS API.       (line 1796)
-* gnutls_dh_params_import_pkcs3:         Core TLS API.       (line 1819)
-* gnutls_dh_params_import_raw:           Core TLS API.       (line 1841)
-* gnutls_dh_params_init:                 Core TLS API.       (line 1860)
-* gnutls_dh_set_prime_bits:              Core TLS API.       (line 1871)
-* gnutls_dtls_cookie_send:               Datagram TLS API.   (line   11)
-* gnutls_dtls_cookie_verify:             Datagram TLS API.   (line   41)
-* gnutls_dtls_get_data_mtu:              Datagram TLS API.   (line   68)
-* gnutls_dtls_get_mtu:                   Datagram TLS API.   (line   83)
-* gnutls_dtls_get_timeout:               Setting up the transport layer.
-                                                             (line  160)
-* gnutls_dtls_get_timeout <1>:           Datagram TLS API.   (line   98)
-* gnutls_dtls_prestate_set:              Datagram TLS API.   (line  115)
-* gnutls_dtls_set_data_mtu:              Datagram TLS API.   (line  129)
-* gnutls_dtls_set_mtu:                   Datagram TLS API.   (line  152)
-* gnutls_dtls_set_timeouts:              Datagram TLS API.   (line  169)
-* gnutls_ecc_curve_get:                  Core TLS API.       (line 1899)
-* gnutls_ecc_curve_get_name:             Core TLS API.       (line 1913)
-* gnutls_ecc_curve_get_size:             Core TLS API.       (line 1927)
-* gnutls_ecc_curve_list:                 Core TLS API.       (line 1939)
-* gnutls_error_is_fatal:                 Data transfer and termination.
-                                                             (line   69)
-* gnutls_error_is_fatal <1>:             Core TLS API.       (line 1951)
-* gnutls_error_to_alert:                 Handling alerts.    (line   66)
-* gnutls_error_to_alert <1>:             Core TLS API.       (line 1969)
-* gnutls_fingerprint:                    Core TLS API.       (line 1988)
-* gnutls_global_deinit:                  Core TLS API.       (line 2015)
-* gnutls_global_init:                    Core TLS API.       (line 2026)
+                                                             (line  177)
+* gnutls_dh_get_group:                   Core TLS API.       (line 1621)
+* gnutls_dh_get_peers_public_bits:       Core TLS API.       (line 1641)
+* gnutls_dh_get_prime_bits:              Core TLS API.       (line 1654)
+* gnutls_dh_get_pubkey:                  Core TLS API.       (line 1671)
+* gnutls_dh_get_secret_bits:             Core TLS API.       (line 1687)
+* gnutls_dh_params_cpy:                  Core TLS API.       (line 1701)
+* gnutls_dh_params_deinit:               Core TLS API.       (line 1716)
+* gnutls_dh_params_export2_pkcs3:        Core TLS API.       (line 1725)
+* gnutls_dh_params_export_pkcs3:         Core TLS API.       (line 1750)
+* gnutls_dh_params_export_raw:           Core TLS API.       (line 1777)
+* gnutls_dh_params_generate2:            Core TLS API.       (line 1798)
+* gnutls_dh_params_import_pkcs3:         Core TLS API.       (line 1822)
+* gnutls_dh_params_import_raw:           Core TLS API.       (line 1844)
+* gnutls_dh_params_init:                 Core TLS API.       (line 1861)
+* gnutls_dh_set_prime_bits:              Core TLS API.       (line 1873)
+* gnutls_dtls_cookie_send:               Datagram TLS API.   (line   15)
+* gnutls_dtls_cookie_verify:             Datagram TLS API.   (line   44)
+* gnutls_dtls_get_data_mtu:              Datagram TLS API.   (line   70)
+* gnutls_dtls_get_mtu:                   Datagram TLS API.   (line   85)
+* gnutls_dtls_get_timeout <1>:           Setting up the transport layer.
+                                                             (line  166)
+* gnutls_dtls_get_timeout:               Datagram TLS API.   (line  100)
+* gnutls_dtls_prestate_set:              Datagram TLS API.   (line  117)
+* gnutls_dtls_set_data_mtu:              Datagram TLS API.   (line  131)
+* gnutls_dtls_set_mtu:                   Datagram TLS API.   (line  154)
+* gnutls_dtls_set_timeouts:              Datagram TLS API.   (line  171)
+* gnutls_ecc_curve_get:                  Core TLS API.       (line 1902)
+* gnutls_ecc_curve_get_name:             Core TLS API.       (line 1916)
+* gnutls_ecc_curve_get_size:             Core TLS API.       (line 1929)
+* gnutls_ecc_curve_list:                 Core TLS API.       (line 1941)
+* gnutls_error_is_fatal <1>:             Data transfer and termination.
+                                                             (line   70)
+* gnutls_error_is_fatal:                 Core TLS API.       (line 1952)
+* gnutls_error_to_alert <1>:             Core TLS API.       (line 1971)
+* gnutls_error_to_alert:                 Handling alerts.    (line   67)
+* gnutls_fingerprint:                    Core TLS API.       (line 1992)
+* gnutls_global_deinit:                  Core TLS API.       (line 2017)
+* gnutls_global_init:                    Core TLS API.       (line 2027)
+* gnutls_global_set_audit_log_function <1>: Core TLS API.    (line 2057)
 * gnutls_global_set_audit_log_function:  Debugging and auditing.
-                                                             (line   23)
-* gnutls_global_set_audit_log_function <1>: Core TLS API.    (line 2056)
-* gnutls_global_set_log_function:        Core TLS API.       (line 2074)
+                                                             (line   26)
+* gnutls_global_set_log_function:        Core TLS API.       (line 2075)
 * gnutls_global_set_log_level:           Core TLS API.       (line 2089)
-* gnutls_global_set_mem_functions:       Core TLS API.       (line 2102)
-* gnutls_global_set_mutex:               Thread safety.      (line   37)
-* gnutls_global_set_mutex <1>:           Core TLS API.       (line 2134)
-* gnutls_global_set_time_function:       Core TLS API.       (line 2159)
-* gnutls_handshake:                      TLS handshake.      (line   10)
-* gnutls_handshake <1>:                  Core TLS API.       (line 2173)
-* gnutls_handshake_get_last_in:          Core TLS API.       (line 2204)
-* gnutls_handshake_get_last_out:         Core TLS API.       (line 2221)
-* gnutls_handshake_set_max_packet_length: Core TLS API.      (line 2238)
+* gnutls_global_set_mem_functions:       Core TLS API.       (line 2106)
+* gnutls_global_set_mutex <1>:           Core TLS API.       (line 2136)
+* gnutls_global_set_mutex:               Thread safety.      (line   40)
+* gnutls_global_set_time_function:       Core TLS API.       (line 2160)
+* gnutls_handshake <1>:                  TLS handshake.      (line   11)
+* gnutls_handshake:                      Core TLS API.       (line 2173)
+* gnutls_handshake_get_last_in:          Core TLS API.       (line 2206)
+* gnutls_handshake_get_last_out:         Core TLS API.       (line 2223)
+* gnutls_handshake_set_max_packet_length: Core TLS API.      (line 2240)
 * gnutls_handshake_set_post_client_hello_function: Core TLS API.
-                                                             (line 2256)
-* gnutls_handshake_set_private_extensions: Core TLS API.     (line 2282)
-* gnutls_handshake_set_random:           Core TLS API.       (line 2301)
-* gnutls_handshake_set_timeout:          TLS handshake.      (line   38)
-* gnutls_handshake_set_timeout <1>:      Core TLS API.       (line 2323)
-* gnutls_hash:                           Cryptographic API.  (line  194)
-* gnutls_hash_deinit:                    Cryptographic API.  (line  212)
-* gnutls_hash_fast:                      Cryptographic API.  (line  226)
-* gnutls_hash_get_len:                   Cryptographic API.  (line  246)
-* gnutls_hash_init:                      Cryptographic API.  (line  260)
-* gnutls_hash_output:                    Cryptographic API.  (line  278)
-* gnutls_heartbeat_allowed:              Core TLS API.       (line 2339)
-* gnutls_heartbeat_enable:               Core TLS API.       (line 2356)
-* gnutls_heartbeat_get_timeout:          Core TLS API.       (line 2369)
-* gnutls_heartbeat_ping:                 Core TLS API.       (line 2385)
-* gnutls_heartbeat_pong:                 Core TLS API.       (line 2413)
-* gnutls_heartbeat_set_timeouts:         Core TLS API.       (line 2429)
-* gnutls_hex2bin:                        Core TLS API.       (line 2457)
-* gnutls_hex_decode:                     Core TLS API.       (line 2478)
-* gnutls_hex_encode:                     Core TLS API.       (line 2497)
-* gnutls_hmac:                           Cryptographic API.  (line  291)
-* gnutls_hmac_deinit:                    Cryptographic API.  (line  309)
-* gnutls_hmac_fast:                      Cryptographic API.  (line  323)
-* gnutls_hmac_get_len:                   Cryptographic API.  (line  348)
-* gnutls_hmac_init:                      Cryptographic API.  (line  361)
-* gnutls_hmac_output:                    Cryptographic API.  (line  384)
-* gnutls_init:                           Session initialization.
-                                                             (line   14)
-* gnutls_init <1>:                       Core TLS API.       (line 2516)
-* gnutls_key_generate:                   Core TLS API.       (line 2543)
-* gnutls_kx_get:                         Core TLS API.       (line 2560)
+                                                             (line 2259)
+* gnutls_handshake_set_private_extensions: Core TLS API.     (line 2284)
+* gnutls_handshake_set_random:           Core TLS API.       (line 2303)
+* gnutls_handshake_set_timeout <1>:      Core TLS API.       (line 2325)
+* gnutls_handshake_set_timeout:          TLS handshake.      (line   41)
+* gnutls_hash:                           Cryptographic API.  (line  196)
+* gnutls_hash_deinit:                    Cryptographic API.  (line  214)
+* gnutls_hash_fast:                      Cryptographic API.  (line  228)
+* gnutls_hash_get_len:                   Cryptographic API.  (line  248)
+* gnutls_hash_init:                      Cryptographic API.  (line  262)
+* gnutls_hash_output:                    Cryptographic API.  (line  280)
+* gnutls_heartbeat_allowed:              Core TLS API.       (line 2341)
+* gnutls_heartbeat_enable:               Core TLS API.       (line 2358)
+* gnutls_heartbeat_get_timeout:          Core TLS API.       (line 2371)
+* gnutls_heartbeat_ping:                 Core TLS API.       (line 2387)
+* gnutls_heartbeat_pong:                 Core TLS API.       (line 2414)
+* gnutls_heartbeat_set_timeouts:         Core TLS API.       (line 2431)
+* gnutls_hex2bin:                        Core TLS API.       (line 2458)
+* gnutls_hex_decode:                     Core TLS API.       (line 2479)
+* gnutls_hex_encode:                     Core TLS API.       (line 2498)
+* gnutls_hmac:                           Cryptographic API.  (line  293)
+* gnutls_hmac_deinit:                    Cryptographic API.  (line  311)
+* gnutls_hmac_fast:                      Cryptographic API.  (line  326)
+* gnutls_hmac_get_len:                   Cryptographic API.  (line  349)
+* gnutls_hmac_init:                      Cryptographic API.  (line  364)
+* gnutls_hmac_output:                    Cryptographic API.  (line  386)
+* gnutls_init <1>:                       Session initialization.
+                                                             (line   16)
+* gnutls_init:                           Core TLS API.       (line 2517)
+* gnutls_key_generate:                   Core TLS API.       (line 2544)
+* gnutls_kx_get:                         Core TLS API.       (line 2561)
 * gnutls_kx_get_id:                      Core TLS API.       (line 2572)
-* gnutls_kx_get_name:                    Core TLS API.       (line 2584)
+* gnutls_kx_get_name:                    Core TLS API.       (line 2585)
 * gnutls_kx_list:                        Core TLS API.       (line 2596)
-* gnutls_kx_set_priority:                Compatibility API.  (line   86)
+* gnutls_kx_set_priority:                Compatibility API.  (line   88)
 * gnutls_load_file:                      Core TLS API.       (line 2608)
 * gnutls_mac_get:                        Core TLS API.       (line 2626)
 * gnutls_mac_get_id:                     Core TLS API.       (line 2638)
 * gnutls_mac_get_key_size:               Core TLS API.       (line 2651)
 * gnutls_mac_get_name:                   Core TLS API.       (line 2663)
-* gnutls_mac_list:                       Core TLS API.       (line 2675)
-* gnutls_mac_set_priority:               Compatibility API.  (line  104)
-* gnutls_ocsp_req_add_cert:              OCSP API.           (line   12)
-* gnutls_ocsp_req_add_cert_id:           OCSP API.           (line   36)
-* gnutls_ocsp_req_deinit:                OCSP API.           (line   69)
-* gnutls_ocsp_req_export:                OCSP API.           (line   77)
-* gnutls_ocsp_req_get_cert_id:           OCSP API.           (line   91)
-* gnutls_ocsp_req_get_extension:         OCSP API.           (line  131)
-* gnutls_ocsp_req_get_nonce:             OCSP API.           (line  165)
-* gnutls_ocsp_req_get_version:           OCSP API.           (line  184)
-* gnutls_ocsp_req_import:                OCSP API.           (line  196)
-* gnutls_ocsp_req_init:                  OCSP API.           (line  212)
-* gnutls_ocsp_req_print:                 OCSP API.           (line  223)
-* gnutls_ocsp_req_randomize_nonce:       OCSP API.           (line  246)
-* gnutls_ocsp_req_set_extension:         OCSP API.           (line  259)
-* gnutls_ocsp_req_set_nonce:             OCSP API.           (line  280)
-* gnutls_ocsp_resp_check_crt:            OCSP API.           (line  298)
-* gnutls_ocsp_resp_deinit:               OCSP API.           (line  318)
-* gnutls_ocsp_resp_export:               OCSP API.           (line  326)
-* gnutls_ocsp_resp_get_certs:            OCSP API.           (line  340)
-* gnutls_ocsp_resp_get_extension:        OCSP API.           (line  367)
-* gnutls_ocsp_resp_get_nonce:            OCSP API.           (line  401)
-* gnutls_ocsp_resp_get_produced:         OCSP API.           (line  421)
-* gnutls_ocsp_resp_get_responder:        OCSP API.           (line  433)
-* gnutls_ocsp_resp_get_response:         OCSP API.           (line  453)
-* gnutls_ocsp_resp_get_signature:        OCSP API.           (line  480)
-* gnutls_ocsp_resp_get_signature_algorithm: OCSP API.        (line  494)
-* gnutls_ocsp_resp_get_single:           OCSP certificate status checking.
-                                                             (line  155)
-* gnutls_ocsp_resp_get_single <1>:       OCSP API.           (line  508)
-* gnutls_ocsp_resp_get_status:           OCSP API.           (line  559)
-* gnutls_ocsp_resp_get_version:          OCSP API.           (line  571)
-* gnutls_ocsp_resp_import:               OCSP API.           (line  583)
-* gnutls_ocsp_resp_init:                 OCSP API.           (line  599)
-* gnutls_ocsp_resp_print:                OCSP API.           (line  610)
-* gnutls_ocsp_resp_verify:               OCSP API.           (line  633)
-* gnutls_ocsp_resp_verify_direct:        OCSP API.           (line  671)
+* gnutls_mac_list:                       Core TLS API.       (line 2674)
+* gnutls_mac_set_priority:               Compatibility API.  (line  106)
+* gnutls_ocsp_req_add_cert:              OCSP API.           (line   15)
+* gnutls_ocsp_req_add_cert_id:           OCSP API.           (line   40)
+* gnutls_ocsp_req_deinit:                OCSP API.           (line   70)
+* gnutls_ocsp_req_export:                OCSP API.           (line   79)
+* gnutls_ocsp_req_get_cert_id:           OCSP API.           (line   95)
+* gnutls_ocsp_req_get_extension:         OCSP API.           (line  134)
+* gnutls_ocsp_req_get_nonce:             OCSP API.           (line  167)
+* gnutls_ocsp_req_get_version:           OCSP API.           (line  185)
+* gnutls_ocsp_req_import:                OCSP API.           (line  198)
+* gnutls_ocsp_req_init:                  OCSP API.           (line  213)
+* gnutls_ocsp_req_print:                 OCSP API.           (line  225)
+* gnutls_ocsp_req_randomize_nonce:       OCSP API.           (line  248)
+* gnutls_ocsp_req_set_extension:         OCSP API.           (line  262)
+* gnutls_ocsp_req_set_nonce:             OCSP API.           (line  282)
+* gnutls_ocsp_resp_check_crt:            OCSP API.           (line  300)
+* gnutls_ocsp_resp_deinit:               OCSP API.           (line  319)
+* gnutls_ocsp_resp_export:               OCSP API.           (line  328)
+* gnutls_ocsp_resp_get_certs:            OCSP API.           (line  342)
+* gnutls_ocsp_resp_get_extension:        OCSP API.           (line  370)
+* gnutls_ocsp_resp_get_nonce:            OCSP API.           (line  403)
+* gnutls_ocsp_resp_get_produced:         OCSP API.           (line  423)
+* gnutls_ocsp_resp_get_responder:        OCSP API.           (line  435)
+* gnutls_ocsp_resp_get_response:         OCSP API.           (line  456)
+* gnutls_ocsp_resp_get_signature:        OCSP API.           (line  482)
+* gnutls_ocsp_resp_get_signature_algorithm: OCSP API.        (line  496)
+* gnutls_ocsp_resp_get_single <1>:       OCSP certificate status checking.
+                                                             (line  165)
+* gnutls_ocsp_resp_get_single:           OCSP API.           (line  514)
+* gnutls_ocsp_resp_get_status:           OCSP API.           (line  560)
+* gnutls_ocsp_resp_get_version:          OCSP API.           (line  572)
+* gnutls_ocsp_resp_import:               OCSP API.           (line  585)
+* gnutls_ocsp_resp_init:                 OCSP API.           (line  600)
+* gnutls_ocsp_resp_print:                OCSP API.           (line  612)
+* gnutls_ocsp_resp_verify:               OCSP API.           (line  636)
+* gnutls_ocsp_resp_verify_direct:        OCSP API.           (line  674)
 * gnutls_ocsp_status_request_enable_client: Core TLS API.    (line 2690)
 * gnutls_ocsp_status_request_get:        Core TLS API.       (line 2715)
 * gnutls_ocsp_status_request_is_checked: Core TLS API.       (line 2734)
-* gnutls_openpgp_crt_check_hostname:     OpenPGP API.        (line  182)
-* gnutls_openpgp_crt_deinit:             OpenPGP API.        (line  197)
-* gnutls_openpgp_crt_export:             OpenPGP API.        (line  205)
-* gnutls_openpgp_crt_export2:            OpenPGP API.        (line  226)
-* gnutls_openpgp_crt_get_auth_subkey:    OpenPGP API.        (line  244)
-* gnutls_openpgp_crt_get_creation_time:  OpenPGP API.        (line  263)
-* gnutls_openpgp_crt_get_expiration_time: OpenPGP API.       (line  274)
-* gnutls_openpgp_crt_get_fingerprint:    OpenPGP API.        (line  286)
-* gnutls_openpgp_crt_get_key_id:         OpenPGP API.        (line  303)
-* gnutls_openpgp_crt_get_key_usage:      OpenPGP API.        (line  318)
-* gnutls_openpgp_crt_get_name:           OpenPGP API.        (line  333)
-* gnutls_openpgp_crt_get_pk_algorithm:   OpenPGP API.        (line  354)
-* gnutls_openpgp_crt_get_pk_dsa_raw:     OpenPGP API.        (line  374)
-* gnutls_openpgp_crt_get_pk_rsa_raw:     OpenPGP API.        (line  399)
-* gnutls_openpgp_crt_get_preferred_key_id: OpenPGP API.      (line  420)
-* gnutls_openpgp_crt_get_revoked_status: OpenPGP API.        (line  434)
-* gnutls_openpgp_crt_get_subkey_count:   OpenPGP API.        (line  448)
-* gnutls_openpgp_crt_get_subkey_creation_time: OpenPGP API.  (line  463)
+* gnutls_openpgp_crt_check_hostname:     OpenPGP API.        (line  184)
+* gnutls_openpgp_crt_deinit:             OpenPGP API.        (line  198)
+* gnutls_openpgp_crt_export:             OpenPGP API.        (line  208)
+* gnutls_openpgp_crt_export2:            OpenPGP API.        (line  228)
+* gnutls_openpgp_crt_get_auth_subkey:    OpenPGP API.        (line  247)
+* gnutls_openpgp_crt_get_creation_time:  OpenPGP API.        (line  265)
+* gnutls_openpgp_crt_get_expiration_time: OpenPGP API.       (line  276)
+* gnutls_openpgp_crt_get_fingerprint:    OpenPGP API.        (line  288)
+* gnutls_openpgp_crt_get_key_id:         OpenPGP API.        (line  305)
+* gnutls_openpgp_crt_get_key_usage:      OpenPGP API.        (line  320)
+* gnutls_openpgp_crt_get_name:           OpenPGP API.        (line  335)
+* gnutls_openpgp_crt_get_pk_algorithm:   OpenPGP API.        (line  356)
+* gnutls_openpgp_crt_get_pk_dsa_raw:     OpenPGP API.        (line  377)
+* gnutls_openpgp_crt_get_pk_rsa_raw:     OpenPGP API.        (line  402)
+* gnutls_openpgp_crt_get_preferred_key_id: OpenPGP API.      (line  422)
+* gnutls_openpgp_crt_get_revoked_status: OpenPGP API.        (line  436)
+* gnutls_openpgp_crt_get_subkey_count:   OpenPGP API.        (line  450)
+* gnutls_openpgp_crt_get_subkey_creation_time: OpenPGP API.  (line  465)
 * gnutls_openpgp_crt_get_subkey_expiration_time: OpenPGP API.
-                                                             (line  478)
-* gnutls_openpgp_crt_get_subkey_fingerprint: OpenPGP API.    (line  494)
-* gnutls_openpgp_crt_get_subkey_id:      OpenPGP API.        (line  516)
-* gnutls_openpgp_crt_get_subkey_idx:     OpenPGP API.        (line  531)
-* gnutls_openpgp_crt_get_subkey_pk_algorithm: OpenPGP API.   (line  546)
-* gnutls_openpgp_crt_get_subkey_pk_dsa_raw: OpenPGP API.     (line  572)
-* gnutls_openpgp_crt_get_subkey_pk_rsa_raw: OpenPGP API.     (line  599)
-* gnutls_openpgp_crt_get_subkey_revoked_status: OpenPGP API. (line  622)
-* gnutls_openpgp_crt_get_subkey_usage:   OpenPGP API.        (line  639)
-* gnutls_openpgp_crt_get_version:        OpenPGP API.        (line  661)
-* gnutls_openpgp_crt_import:             OpenPGP API.        (line  673)
-* gnutls_openpgp_crt_init:               OpenPGP API.        (line  690)
-* gnutls_openpgp_crt_print:              OpenPGP API.        (line  700)
-* gnutls_openpgp_crt_set_preferred_key_id: OpenPGP API.      (line  721)
+                                                             (line  480)
+* gnutls_openpgp_crt_get_subkey_fingerprint: OpenPGP API.    (line  497)
+* gnutls_openpgp_crt_get_subkey_id:      OpenPGP API.        (line  519)
+* gnutls_openpgp_crt_get_subkey_idx:     OpenPGP API.        (line  534)
+* gnutls_openpgp_crt_get_subkey_pk_algorithm: OpenPGP API.   (line  550)
+* gnutls_openpgp_crt_get_subkey_pk_dsa_raw: OpenPGP API.     (line  575)
+* gnutls_openpgp_crt_get_subkey_pk_rsa_raw: OpenPGP API.     (line  602)
+* gnutls_openpgp_crt_get_subkey_revoked_status: OpenPGP API. (line  624)
+* gnutls_openpgp_crt_get_subkey_usage:   OpenPGP API.        (line  642)
+* gnutls_openpgp_crt_get_version:        OpenPGP API.        (line  663)
+* gnutls_openpgp_crt_import:             OpenPGP API.        (line  675)
+* gnutls_openpgp_crt_init:               OpenPGP API.        (line  691)
+* gnutls_openpgp_crt_print:              OpenPGP API.        (line  703)
+* gnutls_openpgp_crt_set_preferred_key_id: OpenPGP API.      (line  723)
+* gnutls_openpgp_crt_verify_ring <1>:    OpenPGP API.        (line  742)
 * gnutls_openpgp_crt_verify_ring:        OpenPGP certificates.
-                                                             (line  113)
-* gnutls_openpgp_crt_verify_ring <1>:    OpenPGP API.        (line  739)
-* gnutls_openpgp_crt_verify_self:        OpenPGP certificates.
-                                                             (line  137)
-* gnutls_openpgp_crt_verify_self <1>:    OpenPGP API.        (line  766)
-* gnutls_openpgp_keyring_check_id:       OpenPGP API.        (line  783)
-* gnutls_openpgp_keyring_deinit:         OpenPGP API.        (line  800)
-* gnutls_openpgp_keyring_get_crt:        OpenPGP API.        (line  809)
-* gnutls_openpgp_keyring_get_crt_count:  OpenPGP API.        (line  828)
-* gnutls_openpgp_keyring_import:         OpenPGP API.        (line  841)
-* gnutls_openpgp_keyring_init:           OpenPGP API.        (line  859)
-* gnutls_openpgp_privkey_deinit:         OpenPGP API.        (line  870)
-* gnutls_openpgp_privkey_export:         OpenPGP API.        (line  879)
-* gnutls_openpgp_privkey_export2:        OpenPGP API.        (line  908)
-* gnutls_openpgp_privkey_export_dsa_raw: OpenPGP API.        (line  933)
-* gnutls_openpgp_privkey_export_rsa_raw: OpenPGP API.        (line  961)
-* gnutls_openpgp_privkey_export_subkey_dsa_raw: OpenPGP API. (line  991)
-* gnutls_openpgp_privkey_export_subkey_rsa_raw: OpenPGP API. (line 1021)
-* gnutls_openpgp_privkey_get_fingerprint: OpenPGP API.       (line 1053)
-* gnutls_openpgp_privkey_get_key_id:     OpenPGP API.        (line 1072)
-* gnutls_openpgp_privkey_get_pk_algorithm: OpenPGP API.      (line 1087)
-* gnutls_openpgp_privkey_get_preferred_key_id: OpenPGP API.  (line 1110)
-* gnutls_openpgp_privkey_get_revoked_status: OpenPGP API.    (line 1124)
-* gnutls_openpgp_privkey_get_subkey_count: OpenPGP API.      (line 1138)
+                                                             (line  105)
+* gnutls_openpgp_crt_verify_self <1>:    OpenPGP certificates.
+                                                             (line  128)
+* gnutls_openpgp_crt_verify_self:        OpenPGP API.        (line  768)
+* gnutls_openpgp_keyring_check_id:       OpenPGP API.        (line  786)
+* gnutls_openpgp_keyring_deinit:         OpenPGP API.        (line  802)
+* gnutls_openpgp_keyring_get_crt:        OpenPGP API.        (line  812)
+* gnutls_openpgp_keyring_get_crt_count:  OpenPGP API.        (line  830)
+* gnutls_openpgp_keyring_import:         OpenPGP API.        (line  844)
+* gnutls_openpgp_keyring_init:           OpenPGP API.        (line  861)
+* gnutls_openpgp_privkey_deinit:         OpenPGP API.        (line  872)
+* gnutls_openpgp_privkey_export:         OpenPGP API.        (line  883)
+* gnutls_openpgp_privkey_export2:        OpenPGP API.        (line  912)
+* gnutls_openpgp_privkey_export_dsa_raw: OpenPGP API.        (line  937)
+* gnutls_openpgp_privkey_export_rsa_raw: OpenPGP API.        (line  965)
+* gnutls_openpgp_privkey_export_subkey_dsa_raw: OpenPGP API. (line  995)
+* gnutls_openpgp_privkey_export_subkey_rsa_raw: OpenPGP API. (line 1026)
+* gnutls_openpgp_privkey_get_fingerprint: OpenPGP API.       (line 1056)
+* gnutls_openpgp_privkey_get_key_id:     OpenPGP API.        (line 1075)
+* gnutls_openpgp_privkey_get_pk_algorithm: OpenPGP API.      (line 1091)
+* gnutls_openpgp_privkey_get_preferred_key_id: OpenPGP API.  (line 1113)
+* gnutls_openpgp_privkey_get_revoked_status: OpenPGP API.    (line 1127)
+* gnutls_openpgp_privkey_get_subkey_count: OpenPGP API.      (line 1141)
 * gnutls_openpgp_privkey_get_subkey_creation_time: OpenPGP API.
-                                                             (line 1153)
+                                                             (line 1156)
 * gnutls_openpgp_privkey_get_subkey_fingerprint: OpenPGP API.
-                                                             (line 1168)
-* gnutls_openpgp_privkey_get_subkey_id:  OpenPGP API.        (line 1190)
-* gnutls_openpgp_privkey_get_subkey_idx: OpenPGP API.        (line 1208)
+                                                             (line 1172)
+* gnutls_openpgp_privkey_get_subkey_id:  OpenPGP API.        (line 1194)
+* gnutls_openpgp_privkey_get_subkey_idx: OpenPGP API.        (line 1212)
 * gnutls_openpgp_privkey_get_subkey_pk_algorithm: OpenPGP API.
-                                                             (line 1224)
+                                                             (line 1229)
 * gnutls_openpgp_privkey_get_subkey_revoked_status: OpenPGP API.
-                                                             (line 1250)
-* gnutls_openpgp_privkey_import:         OpenPGP API.        (line 1266)
-* gnutls_openpgp_privkey_init:           OpenPGP API.        (line 1289)
-* gnutls_openpgp_privkey_sec_param:      OpenPGP API.        (line 1300)
-* gnutls_openpgp_privkey_set_preferred_key_id: OpenPGP API.  (line 1315)
-* gnutls_openpgp_privkey_sign_hash:      Compatibility API.  (line  122)
+                                                             (line 1253)
+* gnutls_openpgp_privkey_import:         OpenPGP API.        (line 1271)
+* gnutls_openpgp_privkey_init:           OpenPGP API.        (line 1292)
+* gnutls_openpgp_privkey_sec_param:      OpenPGP API.        (line 1303)
+* gnutls_openpgp_privkey_set_preferred_key_id: OpenPGP API.  (line 1319)
+* gnutls_openpgp_privkey_sign_hash:      Compatibility API.  (line  125)
 * gnutls_openpgp_send_cert:              Core TLS API.       (line 2752)
-* gnutls_openpgp_set_recv_key_function:  OpenPGP API.        (line 1334)
-* gnutls_pcert_deinit:                   Abstract key API.   (line   96)
-* gnutls_pcert_import_openpgp:           Abstract key API.   (line  106)
-* gnutls_pcert_import_openpgp_raw:       Abstract key API.   (line  126)
-* gnutls_pcert_import_x509:              Abstract key API.   (line  151)
-* gnutls_pcert_import_x509_raw:          Abstract key API.   (line  171)
-* gnutls_pcert_list_import_x509_raw:     Abstract key API.   (line  194)
-* gnutls_pem_base64_decode:              Core TLS API.       (line 2767)
+* gnutls_openpgp_set_recv_key_function:  OpenPGP API.        (line 1337)
+* gnutls_pcert_deinit:                   Abstract key API.   (line   97)
+* gnutls_pcert_import_openpgp:           Abstract key API.   (line  108)
+* gnutls_pcert_import_openpgp_raw:       Abstract key API.   (line  129)
+* gnutls_pcert_import_x509:              Abstract key API.   (line  153)
+* gnutls_pcert_import_x509_raw:          Abstract key API.   (line  174)
+* gnutls_pcert_list_import_x509_raw:     Abstract key API.   (line  197)
+* gnutls_pem_base64_decode:              Core TLS API.       (line 2768)
 * gnutls_pem_base64_decode_alloc:        Core TLS API.       (line 2791)
 * gnutls_pem_base64_encode:              Core TLS API.       (line 2813)
 * gnutls_pem_base64_encode_alloc:        Core TLS API.       (line 2836)
-* gnutls_perror:                         Core TLS API.       (line 2857)
-* gnutls_pkcs11_add_provider:            PKCS 11 API.        (line   12)
-* gnutls_pkcs11_copy_secret_key:         PKCS 11 API.        (line   30)
-* gnutls_pkcs11_copy_x509_crt:           Writing objects.    (line   36)
-* gnutls_pkcs11_copy_x509_crt <1>:       PKCS 11 API.        (line   55)
-* gnutls_pkcs11_copy_x509_privkey:       Writing objects.    (line   13)
-* gnutls_pkcs11_copy_x509_privkey <1>:   PKCS 11 API.        (line   77)
-* gnutls_pkcs11_deinit:                  PKCS 11 API.        (line  103)
-* gnutls_pkcs11_delete_url:              Writing objects.    (line   55)
-* gnutls_pkcs11_delete_url <1>:          PKCS 11 API.        (line  112)
-* gnutls_pkcs11_get_pin_function:        PKCS 11 API.        (line  129)
+* gnutls_perror:                         Core TLS API.       (line 2856)
+* gnutls_pk_algorithm_get_name:          Core TLS API.       (line 2866)
+* gnutls_pk_bits_to_sec_param <1>:       Selecting cryptographic key sizes.
+                                                             (line   74)
+* gnutls_pk_bits_to_sec_param:           Core TLS API.       (line 2878)
+* gnutls_pk_get_id:                      Core TLS API.       (line 2894)
+* gnutls_pk_get_name:                    Core TLS API.       (line 2910)
+* gnutls_pk_list:                        Core TLS API.       (line 2923)
+* gnutls_pk_to_sign:                     Core TLS API.       (line 2937)
+* gnutls_pkcs11_add_provider:            PKCS 11 API.        (line   14)
+* gnutls_pkcs11_copy_secret_key:         PKCS 11 API.        (line   33)
+* gnutls_pkcs11_copy_x509_crt <1>:       PKCS 11 API.        (line   57)
+* gnutls_pkcs11_copy_x509_crt:           Writing objects.    (line   38)
+* gnutls_pkcs11_copy_x509_privkey <1>:   PKCS 11 API.        (line   80)
+* gnutls_pkcs11_copy_x509_privkey:       Writing objects.    (line   16)
+* gnutls_pkcs11_deinit:                  PKCS 11 API.        (line  104)
+* gnutls_pkcs11_delete_url <1>:          Writing objects.    (line   57)
+* gnutls_pkcs11_delete_url:              PKCS 11 API.        (line  113)
+* gnutls_pkcs11_get_pin_function:        PKCS 11 API.        (line  130)
+* gnutls_pkcs11_init <1>:                PKCS 11 API.        (line  144)
 * gnutls_pkcs11_init:                    PKCS11 Initialization.
-                                                             (line   25)
-* gnutls_pkcs11_init <1>:                PKCS 11 API.        (line  143)
+                                                             (line   27)
 * gnutls_pkcs11_obj_deinit:              PKCS 11 API.        (line  169)
-* gnutls_pkcs11_obj_export:              PKCS 11 API.        (line  179)
-* gnutls_pkcs11_obj_export2:             PKCS 11 API.        (line  207)
-* gnutls_pkcs11_obj_export_url:          PKCS 11 API.        (line  230)
-* gnutls_pkcs11_obj_get_info:            Reading objects.    (line   27)
-* gnutls_pkcs11_obj_get_info <1>:        PKCS 11 API.        (line  248)
-* gnutls_pkcs11_obj_get_type:            PKCS 11 API.        (line  273)
-* gnutls_pkcs11_obj_import_url:          PKCS 11 API.        (line  287)
+* gnutls_pkcs11_obj_export:              PKCS 11 API.        (line  180)
+* gnutls_pkcs11_obj_export2:             PKCS 11 API.        (line  208)
+* gnutls_pkcs11_obj_export_url:          PKCS 11 API.        (line  231)
+* gnutls_pkcs11_obj_get_info <1>:        PKCS 11 API.        (line  250)
+* gnutls_pkcs11_obj_get_info:            Reading objects.    (line   31)
+* gnutls_pkcs11_obj_get_type:            PKCS 11 API.        (line  274)
+* gnutls_pkcs11_obj_import_url:          PKCS 11 API.        (line  288)
 * gnutls_pkcs11_obj_init:                PKCS 11 API.        (line  309)
-* gnutls_pkcs11_obj_list_import_url:     PKCS 11 API.        (line  322)
-* gnutls_pkcs11_obj_list_import_url2:    PKCS 11 API.        (line  348)
-* gnutls_pkcs11_obj_set_pin_function:    PKCS 11 API.        (line  375)
-* gnutls_pkcs11_privkey_deinit:          PKCS 11 API.        (line  393)
-* gnutls_pkcs11_privkey_export_url:      PKCS 11 API.        (line  402)
-* gnutls_pkcs11_privkey_generate:        PKCS 11 API.        (line  419)
-* gnutls_pkcs11_privkey_generate2:       PKCS 11 API.        (line  444)
-* gnutls_pkcs11_privkey_get_info:        PKCS 11 API.        (line  476)
-* gnutls_pkcs11_privkey_get_pk_algorithm: PKCS 11 API.       (line  499)
-* gnutls_pkcs11_privkey_import_url:      PKCS 11 API.        (line  515)
-* gnutls_pkcs11_privkey_init:            PKCS 11 API.        (line  535)
-* gnutls_pkcs11_privkey_set_pin_function: PKCS 11 API.       (line  547)
-* gnutls_pkcs11_privkey_status:          PKCS 11 API.        (line  565)
-* gnutls_pkcs11_reinit:                  PKCS11 Initialization.
-                                                             (line   52)
-* gnutls_pkcs11_reinit <1>:              PKCS 11 API.        (line  579)
-* gnutls_pkcs11_set_pin_function:        PKCS 11 API.        (line  593)
-* gnutls_pkcs11_set_token_function:      PKCS 11 API.        (line  608)
-* gnutls_pkcs11_token_get_flags:         PKCS 11 API.        (line  622)
-* gnutls_pkcs11_token_get_info:          PKCS 11 API.        (line  640)
-* gnutls_pkcs11_token_get_mechanism:     PKCS 11 API.        (line  663)
-* gnutls_pkcs11_token_get_url:           PKCS 11 API.        (line  683)
-* gnutls_pkcs11_token_init:              PKCS 11 API.        (line  703)
-* gnutls_pkcs11_token_set_pin:           PKCS 11 API.        (line  722)
-* gnutls_pkcs11_type_get_name:           PKCS 11 API.        (line  742)
-* gnutls_pkcs12_bag_decrypt:             PKCS 12 API.        (line   12)
-* gnutls_pkcs12_bag_deinit:              PKCS 12 API.        (line   27)
-* gnutls_pkcs12_bag_encrypt:             PKCS 12 API.        (line   35)
-* gnutls_pkcs12_bag_get_count:           PKCS 12 API.        (line   52)
-* gnutls_pkcs12_bag_get_data:            PKCS 12 API.        (line   64)
-* gnutls_pkcs12_bag_get_friendly_name:   PKCS 12 API.        (line   82)
-* gnutls_pkcs12_bag_get_key_id:          PKCS 12 API.        (line  101)
-* gnutls_pkcs12_bag_get_type:            PKCS 12 API.        (line  120)
-* gnutls_pkcs12_bag_init:                PKCS 12 API.        (line  133)
-* gnutls_pkcs12_bag_set_crl:             PKCS 12 API.        (line  146)
-* gnutls_pkcs12_bag_set_crt:             PKCS 12 API.        (line  161)
-* gnutls_pkcs12_bag_set_data:            PKCS 12 API.        (line  176)
-* gnutls_pkcs12_bag_set_friendly_name:   PKCS 12 API.        (line  193)
-* gnutls_pkcs12_bag_set_key_id:          PKCS 12 API.        (line  213)
-* gnutls_pkcs12_deinit:                  PKCS 12 API.        (line  233)
-* gnutls_pkcs12_export:                  PKCS 12 API.        (line  241)
-* gnutls_pkcs12_export2:                 PKCS 12 API.        (line  269)
-* gnutls_pkcs12_generate_mac:            PKCS 12 API.        (line  293)
-* gnutls_pkcs12_get_bag:                 PKCS 12 API.        (line  307)
-* gnutls_pkcs12_import:                  PKCS 12 API.        (line  327)
-* gnutls_pkcs12_init:                    PKCS 12 API.        (line  350)
-* gnutls_pkcs12_set_bag:                 PKCS 12 API.        (line  363)
+* gnutls_pkcs11_obj_list_import_url:     PKCS 11 API.        (line  325)
+* gnutls_pkcs11_obj_list_import_url2:    PKCS 11 API.        (line  352)
+* gnutls_pkcs11_obj_set_pin_function:    PKCS 11 API.        (line  378)
+* gnutls_pkcs11_privkey_deinit:          PKCS 11 API.        (line  395)
+* gnutls_pkcs11_privkey_export_url:      PKCS 11 API.        (line  405)
+* gnutls_pkcs11_privkey_generate:        PKCS 11 API.        (line  422)
+* gnutls_pkcs11_privkey_generate2:       PKCS 11 API.        (line  448)
+* gnutls_pkcs11_privkey_get_info:        PKCS 11 API.        (line  479)
+* gnutls_pkcs11_privkey_get_pk_algorithm: PKCS 11 API.       (line  502)
+* gnutls_pkcs11_privkey_import_url:      PKCS 11 API.        (line  519)
+* gnutls_pkcs11_privkey_init:            PKCS 11 API.        (line  538)
+* gnutls_pkcs11_privkey_set_pin_function: PKCS 11 API.       (line  551)
+* gnutls_pkcs11_privkey_status:          PKCS 11 API.        (line  568)
+* gnutls_pkcs11_reinit <1>:              PKCS11 Initialization.
+                                                             (line   53)
+* gnutls_pkcs11_reinit:                  PKCS 11 API.        (line  581)
+* gnutls_pkcs11_set_pin_function:        PKCS 11 API.        (line  595)
+* gnutls_pkcs11_set_token_function:      PKCS 11 API.        (line  610)
+* gnutls_pkcs11_token_get_flags:         PKCS 11 API.        (line  624)
+* gnutls_pkcs11_token_get_info:          PKCS 11 API.        (line  643)
+* gnutls_pkcs11_token_get_mechanism:     PKCS 11 API.        (line  665)
+* gnutls_pkcs11_token_get_url:           PKCS 11 API.        (line  685)
+* gnutls_pkcs11_token_init:              PKCS 11 API.        (line  705)
+* gnutls_pkcs11_token_set_pin:           PKCS 11 API.        (line  723)
+* gnutls_pkcs11_type_get_name:           PKCS 11 API.        (line  743)
+* gnutls_pkcs12_bag_decrypt:             PKCS 12 API.        (line   14)
+* gnutls_pkcs12_bag_deinit:              PKCS 12 API.        (line   28)
+* gnutls_pkcs12_bag_encrypt:             PKCS 12 API.        (line   37)
+* gnutls_pkcs12_bag_get_count:           PKCS 12 API.        (line   53)
+* gnutls_pkcs12_bag_get_data:            PKCS 12 API.        (line   66)
+* gnutls_pkcs12_bag_get_friendly_name:   PKCS 12 API.        (line   84)
+* gnutls_pkcs12_bag_get_key_id:          PKCS 12 API.        (line  103)
+* gnutls_pkcs12_bag_get_type:            PKCS 12 API.        (line  122)
+* gnutls_pkcs12_bag_init:                PKCS 12 API.        (line  134)
+* gnutls_pkcs12_bag_set_crl:             PKCS 12 API.        (line  148)
+* gnutls_pkcs12_bag_set_crt:             PKCS 12 API.        (line  163)
+* gnutls_pkcs12_bag_set_data:            PKCS 12 API.        (line  178)
+* gnutls_pkcs12_bag_set_friendly_name:   PKCS 12 API.        (line  195)
+* gnutls_pkcs12_bag_set_key_id:          PKCS 12 API.        (line  215)
+* gnutls_pkcs12_deinit:                  PKCS 12 API.        (line  234)
+* gnutls_pkcs12_export:                  PKCS 12 API.        (line  244)
+* gnutls_pkcs12_export2:                 PKCS 12 API.        (line  271)
+* gnutls_pkcs12_generate_mac:            PKCS 12 API.        (line  295)
+* gnutls_pkcs12_get_bag:                 PKCS 12 API.        (line  309)
+* gnutls_pkcs12_import:                  PKCS 12 API.        (line  330)
+* gnutls_pkcs12_init:                    PKCS 12 API.        (line  351)
+* gnutls_pkcs12_set_bag:                 PKCS 12 API.        (line  365)
+* gnutls_pkcs12_simple_parse <1>:        PKCS 12 API.        (line  382)
 * gnutls_pkcs12_simple_parse:            Managing encrypted keys.
-                                                             (line  143)
-* gnutls_pkcs12_simple_parse <1>:        PKCS 12 API.        (line  377)
-* gnutls_pkcs12_verify_mac:              PKCS 12 API.        (line  444)
+                                                             (line  161)
+* gnutls_pkcs12_verify_mac:              PKCS 12 API.        (line  446)
 * gnutls_pkcs7_deinit:                   X509 certificate API.
-                                                             (line   12)
+                                                             (line   13)
 * gnutls_pkcs7_delete_crl:               X509 certificate API.
-                                                             (line   20)
+                                                             (line   22)
 * gnutls_pkcs7_delete_crt:               X509 certificate API.
-                                                             (line   35)
+                                                             (line   37)
 * gnutls_pkcs7_export:                   X509 certificate API.
-                                                             (line   50)
+                                                             (line   53)
 * gnutls_pkcs7_export2:                  X509 certificate API.
-                                                             (line   77)
+                                                             (line   79)
 * gnutls_pkcs7_get_crl_count:            X509 certificate API.
-                                                             (line  100)
+                                                             (line  101)
 * gnutls_pkcs7_get_crl_raw:              X509 certificate API.
-                                                             (line  112)
+                                                             (line  114)
 * gnutls_pkcs7_get_crt_count:            X509 certificate API.
-                                                             (line  133)
+                                                             (line  135)
 * gnutls_pkcs7_get_crt_raw:              X509 certificate API.
-                                                             (line  145)
+                                                             (line  148)
 * gnutls_pkcs7_import:                   X509 certificate API.
-                                                             (line  170)
+                                                             (line  173)
 * gnutls_pkcs7_init:                     X509 certificate API.
-                                                             (line  190)
+                                                             (line  192)
 * gnutls_pkcs7_set_crl:                  X509 certificate API.
-                                                             (line  203)
+                                                             (line  206)
 * gnutls_pkcs7_set_crl_raw:              X509 certificate API.
-                                                             (line  218)
+                                                             (line  221)
 * gnutls_pkcs7_set_crt:                  X509 certificate API.
-                                                             (line  232)
+                                                             (line  235)
 * gnutls_pkcs7_set_crt_raw:              X509 certificate API.
-                                                             (line  248)
-* gnutls_pk_algorithm_get_name:          Core TLS API.       (line 2866)
-* gnutls_pk_bits_to_sec_param:           Selecting cryptographic key sizes.
-                                                             (line   80)
-* gnutls_pk_bits_to_sec_param <1>:       Core TLS API.       (line 2878)
-* gnutls_pk_get_id:                      Core TLS API.       (line 2895)
-* gnutls_pk_get_name:                    Core TLS API.       (line 2910)
-* gnutls_pk_list:                        Core TLS API.       (line 2924)
-* gnutls_pk_to_sign:                     Core TLS API.       (line 2938)
-* gnutls_prf:                            Core TLS API.       (line 2953)
-* gnutls_prf_raw:                        Core TLS API.       (line 2995)
-* gnutls_priority_certificate_type_list: Core TLS API.       (line 3034)
-* gnutls_priority_compression_list:      Core TLS API.       (line 3050)
-* gnutls_priority_deinit:                Core TLS API.       (line 3066)
-* gnutls_priority_ecc_curve_list:        Core TLS API.       (line 3075)
-* gnutls_priority_get_cipher_suite_index: Core TLS API.      (line 3090)
-* gnutls_priority_init:                  Core TLS API.       (line 3113)
-* gnutls_priority_protocol_list:         Core TLS API.       (line 3185)
-* gnutls_priority_set:                   Core TLS API.       (line 3201)
-* gnutls_priority_set_direct:            Core TLS API.       (line 3215)
-* gnutls_priority_sign_list:             Core TLS API.       (line 3236)
-* gnutls_privkey_decrypt_data:           Operations.         (line  130)
-* gnutls_privkey_decrypt_data <1>:       Abstract key API.   (line  225)
-* gnutls_privkey_deinit:                 Abstract key API.   (line  248)
-* gnutls_privkey_get_pk_algorithm:       Abstract key API.   (line  258)
-* gnutls_privkey_get_type:               Abstract key API.   (line  277)
-* gnutls_privkey_import_ext:             Abstract key API.   (line  292)
+                                                             (line  251)
+* gnutls_prf:                            Core TLS API.       (line 2954)
+* gnutls_prf_raw:                        Core TLS API.       (line 2997)
+* gnutls_priority_certificate_type_list: Core TLS API.       (line 3036)
+* gnutls_priority_compression_list:      Core TLS API.       (line 3052)
+* gnutls_priority_deinit:                Core TLS API.       (line 3068)
+* gnutls_priority_ecc_curve_list:        Core TLS API.       (line 3077)
+* gnutls_priority_get_cipher_suite_index: Core TLS API.      (line 3093)
+* gnutls_priority_init:                  Core TLS API.       (line 3116)
+* gnutls_priority_protocol_list:         Core TLS API.       (line 3187)
+* gnutls_priority_set:                   Core TLS API.       (line 3203)
+* gnutls_priority_set_direct:            Core TLS API.       (line 3217)
+* gnutls_priority_sign_list:             Core TLS API.       (line 3238)
+* gnutls_privkey_decrypt_data <1>:       Abstract key API.   (line  228)
+* gnutls_privkey_decrypt_data:           Operations.         (line  133)
+* gnutls_privkey_deinit:                 Abstract key API.   (line  249)
+* gnutls_privkey_get_pk_algorithm:       Abstract key API.   (line  260)
+* gnutls_privkey_get_type:               Abstract key API.   (line  279)
+* gnutls_privkey_import_ext:             Abstract key API.   (line  296)
+* gnutls_privkey_import_ext2 <1>:        Abstract key API.   (line  328)
 * gnutls_privkey_import_ext2:            Abstract private keys.
-                                                             (line   48)
-* gnutls_privkey_import_ext2 <1>:        Abstract key API.   (line  323)
-* gnutls_privkey_import_openpgp:         Abstract key API.   (line  358)
-* gnutls_privkey_import_openpgp_raw:     Abstract key API.   (line  385)
-* gnutls_privkey_import_pkcs11:          Abstract key API.   (line  410)
-* gnutls_privkey_import_pkcs11_url:      Abstract key API.   (line  436)
-* gnutls_privkey_import_tpm_raw:         Abstract key API.   (line  453)
-* gnutls_privkey_import_tpm_url:         Using keys.         (line   16)
-* gnutls_privkey_import_tpm_url <1>:     Abstract key API.   (line  483)
+                                                             (line   58)
+* gnutls_privkey_import_openpgp:         Abstract key API.   (line  360)
+* gnutls_privkey_import_openpgp_raw:     Abstract key API.   (line  389)
+* gnutls_privkey_import_pkcs11:          Abstract key API.   (line  412)
+* gnutls_privkey_import_pkcs11_url:      Abstract key API.   (line  438)
+* gnutls_privkey_import_tpm_raw:         Abstract key API.   (line  457)
+* gnutls_privkey_import_tpm_url <1>:     Abstract key API.   (line  486)
+* gnutls_privkey_import_tpm_url:         Using keys.         (line   20)
+* gnutls_privkey_import_url <1>:         Abstract key API.   (line  516)
 * gnutls_privkey_import_url:             Abstract private keys.
-                                                             (line   23)
-* gnutls_privkey_import_url <1>:         Abstract key API.   (line  514)
-* gnutls_privkey_import_x509:            Abstract key API.   (line  534)
+                                                             (line   28)
+* gnutls_privkey_import_x509:            Abstract key API.   (line  536)
+* gnutls_privkey_import_x509_raw <1>:    Abstract key API.   (line  563)
 * gnutls_privkey_import_x509_raw:        Managing encrypted keys.
-                                                             (line   27)
-* gnutls_privkey_import_x509_raw <1>:    Abstract key API.   (line  560)
-* gnutls_privkey_init:                   Abstract key API.   (line  587)
-* gnutls_privkey_set_pin_function:       Abstract key API.   (line  600)
-* gnutls_privkey_sign_data:              Operations.         (line   71)
-* gnutls_privkey_sign_data <1>:          Abstract key API.   (line  620)
-* gnutls_privkey_sign_hash:              Operations.         (line   99)
-* gnutls_privkey_sign_hash <1>:          Abstract key API.   (line  651)
-* gnutls_privkey_sign_raw_data:          Abstract key API.   (line  685)
-* gnutls_privkey_status:                 Abstract key API.   (line  716)
-* gnutls_protocol_get_id:                Core TLS API.       (line 3252)
-* gnutls_protocol_get_name:              Core TLS API.       (line 3264)
-* gnutls_protocol_get_version:           Core TLS API.       (line 3276)
-* gnutls_protocol_list:                  Core TLS API.       (line 3287)
-* gnutls_protocol_set_priority:          Compatibility API.  (line  143)
-* gnutls_psk_allocate_client_credentials: Core TLS API.      (line 3299)
-* gnutls_psk_allocate_server_credentials: Core TLS API.      (line 3312)
-* gnutls_psk_client_get_hint:            Core TLS API.       (line 3325)
-* gnutls_psk_free_client_credentials:    Core TLS API.       (line 3341)
-* gnutls_psk_free_server_credentials:    Core TLS API.       (line 3351)
-* gnutls_psk_server_get_username:        Core TLS API.       (line 3361)
-* gnutls_psk_set_client_credentials:     Core TLS API.       (line 3373)
-* gnutls_psk_set_client_credentials_function: PSK credentials.
-                                                             (line   22)
+                                                             (line   30)
+* gnutls_privkey_init:                   Abstract key API.   (line  588)
+* gnutls_privkey_set_pin_function:       Abstract key API.   (line  602)
+* gnutls_privkey_sign_data <1>:          Abstract key API.   (line  623)
+* gnutls_privkey_sign_data:              Operations.         (line   74)
+* gnutls_privkey_sign_hash <1>:          Operations.         (line  102)
+* gnutls_privkey_sign_hash:              Abstract key API.   (line  654)
+* gnutls_privkey_sign_raw_data:          Abstract key API.   (line  688)
+* gnutls_privkey_status:                 Abstract key API.   (line  717)
+* gnutls_protocol_get_id:                Core TLS API.       (line 3254)
+* gnutls_protocol_get_name:              Core TLS API.       (line 3266)
+* gnutls_protocol_get_version:           Core TLS API.       (line 3278)
+* gnutls_protocol_list:                  Core TLS API.       (line 3288)
+* gnutls_protocol_set_priority:          Compatibility API.  (line  145)
+* gnutls_psk_allocate_client_credentials: Core TLS API.      (line 3300)
+* gnutls_psk_allocate_server_credentials: Core TLS API.      (line 3313)
+* gnutls_psk_client_get_hint:            Core TLS API.       (line 3326)
+* gnutls_psk_free_client_credentials:    Core TLS API.       (line 3342)
+* gnutls_psk_free_server_credentials:    Core TLS API.       (line 3352)
+* gnutls_psk_server_get_username:        Core TLS API.       (line 3362)
+* gnutls_psk_set_client_credentials:     Core TLS API.       (line 3376)
 * gnutls_psk_set_client_credentials_function <1>: Core TLS API.
-                                                             (line 3398)
-* gnutls_psk_set_params_function:        Core TLS API.       (line 3422)
-* gnutls_psk_set_server_credentials_file: PSK credentials.   (line   58)
-* gnutls_psk_set_server_credentials_file <1>: Core TLS API.  (line 3436)
-* gnutls_psk_set_server_credentials_function: Core TLS API.  (line 3453)
-* gnutls_psk_set_server_credentials_hint: Core TLS API.      (line 3478)
-* gnutls_psk_set_server_dh_params:       Core TLS API.       (line 3497)
-* gnutls_psk_set_server_params_function: Core TLS API.       (line 3511)
-* gnutls_pubkey_deinit:                  Abstract key API.   (line  732)
-* gnutls_pubkey_encrypt_data:            Operations.         (line   53)
-* gnutls_pubkey_encrypt_data <1>:        Abstract key API.   (line  742)
-* gnutls_pubkey_export:                  Abstract key API.   (line  763)
-* gnutls_pubkey_export2:                 Abstract public keys.
-                                                             (line   20)
-* gnutls_pubkey_export2 <1>:             Abstract key API.   (line  794)
-* gnutls_pubkey_get_key_id:              Abstract key API.   (line  819)
-* gnutls_pubkey_get_key_usage:           Abstract key API.   (line  848)
-* gnutls_pubkey_get_openpgp_key_id:      Abstract key API.   (line  865)
-* gnutls_pubkey_get_pk_algorithm:        Abstract key API.   (line  898)
-* gnutls_pubkey_get_pk_dsa_raw:          Abstract key API.   (line  917)
-* gnutls_pubkey_get_pk_ecc_raw:          Abstract key API.   (line  942)
-* gnutls_pubkey_get_pk_ecc_x962:         Abstract key API.   (line  965)
-* gnutls_pubkey_get_pk_rsa_raw:          Abstract key API.   (line  985)
+                                                             (line 3401)
+* gnutls_psk_set_client_credentials_function: PSK credentials.
+                                                             (line   28)
+* gnutls_psk_set_params_function:        Core TLS API.       (line 3425)
+* gnutls_psk_set_server_credentials_file <1>: PSK credentials.
+                                                             (line   64)
+* gnutls_psk_set_server_credentials_file: Core TLS API.      (line 3439)
+* gnutls_psk_set_server_credentials_function: Core TLS API.  (line 3456)
+* gnutls_psk_set_server_credentials_hint: Core TLS API.      (line 3480)
+* gnutls_psk_set_server_dh_params:       Core TLS API.       (line 3500)
+* gnutls_psk_set_server_params_function: Core TLS API.       (line 3514)
+* gnutls_pubkey_deinit:                  Abstract key API.   (line  733)
+* gnutls_pubkey_encrypt_data <1>:        Abstract key API.   (line  745)
+* gnutls_pubkey_encrypt_data:            Operations.         (line   56)
+* gnutls_pubkey_export:                  Abstract key API.   (line  766)
+* gnutls_pubkey_export2 <1>:             Abstract public keys.
+                                                             (line   27)
+* gnutls_pubkey_export2:                 Abstract key API.   (line  796)
+* gnutls_pubkey_get_key_id:              Abstract key API.   (line  822)
+* gnutls_pubkey_get_key_usage:           Abstract key API.   (line  850)
+* gnutls_pubkey_get_openpgp_key_id:      Abstract key API.   (line  868)
+* gnutls_pubkey_get_pk_algorithm:        Abstract key API.   (line  900)
+* gnutls_pubkey_get_pk_dsa_raw:          Abstract key API.   (line  920)
+* gnutls_pubkey_get_pk_ecc_raw:          Abstract key API.   (line  945)
+* gnutls_pubkey_get_pk_ecc_x962:         Abstract key API.   (line  967)
+* gnutls_pubkey_get_pk_rsa_raw:          Abstract key API.   (line  987)
 * gnutls_pubkey_get_preferred_hash_algorithm: Abstract key API.
-                                                             (line 1005)
-* gnutls_pubkey_get_verify_algorithm:    Abstract key API.   (line 1033)
-* gnutls_pubkey_import:                  Abstract key API.   (line 1054)
-* gnutls_pubkey_import_dsa_raw:          Abstract key API.   (line 1075)
-* gnutls_pubkey_import_ecc_raw:          Abstract key API.   (line 1100)
-* gnutls_pubkey_import_ecc_x962:         Abstract key API.   (line 1122)
-* gnutls_pubkey_import_openpgp:          Abstract key API.   (line 1142)
-* gnutls_pubkey_import_openpgp_raw:      Abstract key API.   (line 1163)
-* gnutls_pubkey_import_pkcs11:           Abstract key API.   (line 1188)
-* gnutls_pubkey_import_pkcs11_url:       Abstract key API.   (line 1207)
-* gnutls_pubkey_import_privkey:          Abstract key API.   (line 1226)
-* gnutls_pubkey_import_rsa_raw:          Abstract key API.   (line 1247)
-* gnutls_pubkey_import_tpm_raw:          Abstract key API.   (line 1267)
-* gnutls_pubkey_import_tpm_url:          Using keys.         (line   44)
-* gnutls_pubkey_import_tpm_url <1>:      Abstract key API.   (line 1294)
-* gnutls_pubkey_import_url:              Abstract key API.   (line 1322)
-* gnutls_pubkey_import_x509:             Abstract key API.   (line 1341)
-* gnutls_pubkey_import_x509_crq:         Abstract key API.   (line 1360)
-* gnutls_pubkey_import_x509_raw:         Abstract key API.   (line 1379)
-* gnutls_pubkey_init:                    Abstract key API.   (line 1401)
-* gnutls_pubkey_print:                   Abstract key API.   (line 1414)
-* gnutls_pubkey_set_key_usage:           Abstract key API.   (line 1439)
-* gnutls_pubkey_set_pin_function:        Abstract key API.   (line 1457)
-* gnutls_pubkey_verify_data:             Abstract key API.   (line 1477)
-* gnutls_pubkey_verify_data2:            Operations.         (line    9)
-* gnutls_pubkey_verify_data2 <1>:        Abstract key API.   (line 1503)
-* gnutls_pubkey_verify_hash:             Abstract key API.   (line 1528)
-* gnutls_pubkey_verify_hash2:            Operations.         (line   31)
-* gnutls_pubkey_verify_hash2 <1>:        Abstract key API.   (line 1554)
-* gnutls_random_art:                     Core TLS API.       (line 3525)
-* gnutls_range_split:                    Core TLS API.       (line 3549)
-* gnutls_record_can_use_length_hiding:   Core TLS API.       (line 3575)
+                                                             (line 1008)
+* gnutls_pubkey_get_verify_algorithm:    Abstract key API.   (line 1036)
+* gnutls_pubkey_import:                  Abstract key API.   (line 1056)
+* gnutls_pubkey_import_dsa_raw:          Abstract key API.   (line 1078)
+* gnutls_pubkey_import_ecc_raw:          Abstract key API.   (line 1103)
+* gnutls_pubkey_import_ecc_x962:         Abstract key API.   (line 1125)
+* gnutls_pubkey_import_openpgp:          Abstract key API.   (line 1144)
+* gnutls_pubkey_import_openpgp_raw:      Abstract key API.   (line 1167)
+* gnutls_pubkey_import_pkcs11:           Abstract key API.   (line 1190)
+* gnutls_pubkey_import_pkcs11_url:       Abstract key API.   (line 1209)
+* gnutls_pubkey_import_privkey:          Abstract key API.   (line 1228)
+* gnutls_pubkey_import_rsa_raw:          Abstract key API.   (line 1249)
+* gnutls_pubkey_import_tpm_raw:          Abstract key API.   (line 1270)
+* gnutls_pubkey_import_tpm_url <1>:      Using keys.         (line   48)
+* gnutls_pubkey_import_tpm_url:          Abstract key API.   (line 1297)
+* gnutls_pubkey_import_url:              Abstract key API.   (line 1324)
+* gnutls_pubkey_import_x509:             Abstract key API.   (line 1343)
+* gnutls_pubkey_import_x509_crq:         Abstract key API.   (line 1362)
+* gnutls_pubkey_import_x509_raw:         Abstract key API.   (line 1382)
+* gnutls_pubkey_init:                    Abstract key API.   (line 1402)
+* gnutls_pubkey_print:                   Abstract key API.   (line 1417)
+* gnutls_pubkey_set_key_usage:           Abstract key API.   (line 1441)
+* gnutls_pubkey_set_pin_function:        Abstract key API.   (line 1459)
+* gnutls_pubkey_verify_data:             Abstract key API.   (line 1480)
+* gnutls_pubkey_verify_data2 <1>:        Abstract key API.   (line 1506)
+* gnutls_pubkey_verify_data2:            Operations.         (line   12)
+* gnutls_pubkey_verify_hash:             Abstract key API.   (line 1531)
+* gnutls_pubkey_verify_hash2 <1>:        Operations.         (line   34)
+* gnutls_pubkey_verify_hash2:            Abstract key API.   (line 1557)
+* gnutls_random_art:                     Core TLS API.       (line 3528)
+* gnutls_range_split:                    Core TLS API.       (line 3552)
+* gnutls_record_can_use_length_hiding:   Core TLS API.       (line 3577)
+* gnutls_record_check_pending <1>:       Core TLS API.       (line 3595)
 * gnutls_record_check_pending:           Data transfer and termination.
-                                                             (line  124)
-* gnutls_record_check_pending <1>:       Core TLS API.       (line 3593)
-* gnutls_record_cork:                    Buffered data transfer.
-                                                             (line   12)
-* gnutls_record_cork <1>:                Core TLS API.       (line 3606)
-* gnutls_record_disable_padding:         Core TLS API.       (line 3618)
+                                                             (line  127)
+* gnutls_record_cork <1>:                Buffered data transfer.
+                                                             (line   13)
+* gnutls_record_cork:                    Core TLS API.       (line 3607)
+* gnutls_record_disable_padding:         Core TLS API.       (line 3620)
+* gnutls_record_get_direction <1>:       Core TLS API.       (line 3634)
 * gnutls_record_get_direction:           Asynchronous operation.
-                                                             (line   40)
-* gnutls_record_get_direction <1>:       Core TLS API.       (line 3633)
-* gnutls_record_get_discarded:           Datagram TLS API.   (line  196)
-* gnutls_record_get_max_size:            Core TLS API.       (line 3653)
+                                                             (line   41)
+* gnutls_record_get_discarded:           Datagram TLS API.   (line  198)
+* gnutls_record_get_max_size:            Core TLS API.       (line 3655)
+* gnutls_record_recv <1>:                Core TLS API.       (line 3667)
 * gnutls_record_recv:                    Data transfer and termination.
-                                                             (line   40)
-* gnutls_record_recv <1>:                Core TLS API.       (line 3665)
+                                                             (line   42)
+* gnutls_record_recv_seq <1>:            Core TLS API.       (line 3699)
 * gnutls_record_recv_seq:                Data transfer and termination.
-                                                             (line   93)
-* gnutls_record_recv_seq <1>:            Core TLS API.       (line 3697)
-* gnutls_record_send:                    Data transfer and termination.
-                                                             (line   12)
-* gnutls_record_send <1>:                Core TLS API.       (line 3724)
-* gnutls_record_send_range:              Core TLS API.       (line 3755)
-* gnutls_record_set_max_empty_records:   Core TLS API.       (line 3785)
-* gnutls_record_set_max_size:            Core TLS API.       (line 3805)
-* gnutls_record_set_timeout:             Core TLS API.       (line 3829)
+                                                             (line   96)
+* gnutls_record_send <1>:                Data transfer and termination.
+                                                             (line   14)
+* gnutls_record_send:                    Core TLS API.       (line 3726)
+* gnutls_record_send_range:              Core TLS API.       (line 3758)
+* gnutls_record_set_max_empty_records:   Core TLS API.       (line 3787)
+* gnutls_record_set_max_size:            Core TLS API.       (line 3807)
+* gnutls_record_set_timeout:             Core TLS API.       (line 3831)
+* gnutls_record_uncork <1>:              Core TLS API.       (line 3850)
 * gnutls_record_uncork:                  Buffered data transfer.
-                                                             (line   21)
-* gnutls_record_uncork <1>:              Core TLS API.       (line 3848)
-* gnutls_rehandshake:                    Core TLS API.       (line 3868)
-* gnutls_rnd:                            Random number generation.
-                                                             (line   21)
-* gnutls_rnd <1>:                        Cryptographic API.  (line  397)
-* gnutls_rnd_refresh:                    Cryptographic API.  (line  415)
-* gnutls_rsa_export_get_modulus_bits:    Compatibility API.  (line  158)
-* gnutls_rsa_export_get_pubkey:          Compatibility API.  (line  170)
-* gnutls_rsa_params_cpy:                 Compatibility API.  (line  188)
-* gnutls_rsa_params_deinit:              Compatibility API.  (line  203)
-* gnutls_rsa_params_export_pkcs1:        Compatibility API.  (line  212)
-* gnutls_rsa_params_export_raw:          Compatibility API.  (line  239)
-* gnutls_rsa_params_generate2:           Compatibility API.  (line  269)
-* gnutls_rsa_params_import_pkcs1:        Compatibility API.  (line  290)
-* gnutls_rsa_params_import_raw:          Compatibility API.  (line  312)
-* gnutls_rsa_params_init:                Compatibility API.  (line  340)
-* gnutls_safe_renegotiation_status:      Core TLS API.       (line 3899)
-* gnutls_sec_param_get_name:             Core TLS API.       (line 3914)
-* gnutls_sec_param_to_pk_bits:           Selecting cryptographic key sizes.
-                                                             (line   64)
-* gnutls_sec_param_to_pk_bits <1>:       Core TLS API.       (line 3928)
-* gnutls_server_name_get:                Core TLS API.       (line 3947)
-* gnutls_server_name_set:                Core TLS API.       (line 3984)
-* gnutls_session_channel_binding:        Core TLS API.       (line 4011)
-* gnutls_session_enable_compatibility_mode: Core TLS API.    (line 4032)
-* gnutls_session_force_valid:            Core TLS API.       (line 4047)
-* gnutls_session_get_data:               Core TLS API.       (line 4058)
-* gnutls_session_get_data2:              Core TLS API.       (line 4079)
-* gnutls_session_get_desc:               Core TLS API.       (line 4098)
-* gnutls_session_get_id:                 Core TLS API.       (line 4112)
-* gnutls_session_get_id2:                Core TLS API.       (line 4136)
-* gnutls_session_get_ptr:                Core TLS API.       (line 4153)
-* gnutls_session_get_random:             Core TLS API.       (line 4165)
-* gnutls_session_is_resumed:             Session resumption. (line   27)
-* gnutls_session_is_resumed <1>:         Core TLS API.       (line 4185)
-* gnutls_session_resumption_requested:   Session resumption. (line   88)
-* gnutls_session_resumption_requested <1>: Core TLS API.     (line 4196)
-* gnutls_session_set_data:               Core TLS API.       (line 4209)
-* gnutls_session_set_premaster:          Core TLS API.       (line 4232)
-* gnutls_session_set_ptr:                Core TLS API.       (line 4267)
-* gnutls_session_ticket_enable_client:   Core TLS API.       (line 4280)
-* gnutls_session_ticket_enable_server:   Session resumption. (line   60)
-* gnutls_session_ticket_enable_server <1>: Core TLS API.     (line 4295)
-* gnutls_session_ticket_key_generate:    Session resumption. (line   75)
-* gnutls_session_ticket_key_generate <1>: Core TLS API.      (line 4313)
-* gnutls_set_default_export_priority:    Compatibility API.  (line  353)
-* gnutls_set_default_priority:           Core TLS API.       (line 4329)
-* gnutls_sign_algorithm_get:             Core TLS API.       (line 4350)
-* gnutls_sign_algorithm_get_client:      Core TLS API.       (line 4363)
-* gnutls_sign_algorithm_get_requested:   Core TLS API.       (line 4377)
-* gnutls_sign_callback_get:              Compatibility API.  (line  376)
-* gnutls_sign_callback_set:              Compatibility API.  (line  392)
-* gnutls_sign_get_hash_algorithm:        Core TLS API.       (line 4404)
-* gnutls_sign_get_id:                    Core TLS API.       (line 4419)
-* gnutls_sign_get_name:                  Core TLS API.       (line 4431)
-* gnutls_sign_get_pk_algorithm:          Core TLS API.       (line 4443)
-* gnutls_sign_is_secure:                 Core TLS API.       (line 4458)
-* gnutls_sign_list:                      Core TLS API.       (line 4468)
-* gnutls_srp_allocate_client_credentials: Core TLS API.      (line 4478)
-* gnutls_srp_allocate_server_credentials: Core TLS API.      (line 4491)
-* gnutls_srp_base64_decode:              Core TLS API.       (line 4504)
-* gnutls_srp_base64_decode_alloc:        Core TLS API.       (line 4526)
-* gnutls_srp_base64_encode:              Core TLS API.       (line 4546)
-* gnutls_srp_base64_encode_alloc:        Core TLS API.       (line 4568)
-* gnutls_srp_free_client_credentials:    Core TLS API.       (line 4589)
-* gnutls_srp_free_server_credentials:    Core TLS API.       (line 4599)
-* gnutls_srp_server_get_username:        Core TLS API.       (line 4609)
-* gnutls_srp_set_client_credentials:     Core TLS API.       (line 4622)
-* gnutls_srp_set_client_credentials_function: SRP credentials.
-                                                             (line   19)
-* gnutls_srp_set_client_credentials_function <1>: Core TLS API.
-                                                             (line 4643)
-* gnutls_srp_set_prime_bits:             Core TLS API.       (line 4673)
-* gnutls_srp_set_server_credentials_file: SRP credentials.   (line   53)
-* gnutls_srp_set_server_credentials_file <1>: Core TLS API.  (line 4694)
-* gnutls_srp_set_server_credentials_function: SRP credentials.
-                                                             (line   70)
+                                                             (line   23)
+* gnutls_rehandshake:                    Core TLS API.       (line 3869)
+* gnutls_rnd <1>:                        Random number generation.
+                                                             (line   25)
+* gnutls_rnd:                            Cryptographic API.  (line  399)
+* gnutls_rnd_refresh:                    Cryptographic API.  (line  416)
+* gnutls_rsa_export_get_modulus_bits:    Compatibility API.  (line  160)
+* gnutls_rsa_export_get_pubkey:          Compatibility API.  (line  172)
+* gnutls_rsa_params_cpy:                 Compatibility API.  (line  190)
+* gnutls_rsa_params_deinit:              Compatibility API.  (line  205)
+* gnutls_rsa_params_export_pkcs1:        Compatibility API.  (line  215)
+* gnutls_rsa_params_export_raw:          Compatibility API.  (line  243)
+* gnutls_rsa_params_generate2:           Compatibility API.  (line  271)
+* gnutls_rsa_params_import_pkcs1:        Compatibility API.  (line  293)
+* gnutls_rsa_params_import_raw:          Compatibility API.  (line  316)
+* gnutls_rsa_params_init:                Compatibility API.  (line  342)
+* gnutls_safe_renegotiation_status:      Core TLS API.       (line 3902)
+* gnutls_sec_param_get_name:             Core TLS API.       (line 3917)
+* gnutls_sec_param_to_pk_bits <1>:       Selecting cryptographic key sizes.
+                                                             (line   58)
+* gnutls_sec_param_to_pk_bits:           Core TLS API.       (line 3931)
+* gnutls_server_name_get:                Core TLS API.       (line 3951)
+* gnutls_server_name_set:                Core TLS API.       (line 3988)
+* gnutls_session_channel_binding:        Core TLS API.       (line 4014)
+* gnutls_session_enable_compatibility_mode: Core TLS API.    (line 4035)
+* gnutls_session_force_valid:            Core TLS API.       (line 4049)
+* gnutls_session_get_data:               Core TLS API.       (line 4061)
+* gnutls_session_get_data2:              Core TLS API.       (line 4082)
+* gnutls_session_get_desc:               Core TLS API.       (line 4100)
+* gnutls_session_get_id:                 Core TLS API.       (line 4116)
+* gnutls_session_get_id2:                Core TLS API.       (line 4140)
+* gnutls_session_get_ptr:                Core TLS API.       (line 4156)
+* gnutls_session_get_random:             Core TLS API.       (line 4169)
+* gnutls_session_is_resumed <1>:         Core TLS API.       (line 4188)
+* gnutls_session_is_resumed:             Session resumption. (line   30)
+* gnutls_session_resumption_requested <1>: Core TLS API.     (line 4200)
+* gnutls_session_resumption_requested:   Session resumption. (line   96)
+* gnutls_session_set_data:               Core TLS API.       (line 4213)
+* gnutls_session_set_premaster:          Core TLS API.       (line 4240)
+* gnutls_session_set_ptr:                Core TLS API.       (line 4271)
+* gnutls_session_ticket_enable_client:   Core TLS API.       (line 4284)
+* gnutls_session_ticket_enable_server <1>: Core TLS API.     (line 4299)
+* gnutls_session_ticket_enable_server:   Session resumption. (line   68)
+* gnutls_session_ticket_key_generate <1>: Core TLS API.      (line 4317)
+* gnutls_session_ticket_key_generate:    Session resumption. (line   83)
+* gnutls_set_default_export_priority:    Compatibility API.  (line  355)
+* gnutls_set_default_priority:           Core TLS API.       (line 4332)
+* gnutls_sign_algorithm_get:             Core TLS API.       (line 4354)
+* gnutls_sign_algorithm_get_client:      Core TLS API.       (line 4368)
+* gnutls_sign_algorithm_get_requested:   Core TLS API.       (line 4382)
+* gnutls_sign_callback_get:              Compatibility API.  (line  379)
+* gnutls_sign_callback_set:              Compatibility API.  (line  395)
+* gnutls_sign_get_hash_algorithm:        Core TLS API.       (line 4408)
+* gnutls_sign_get_id:                    Core TLS API.       (line 4423)
+* gnutls_sign_get_name:                  Core TLS API.       (line 4435)
+* gnutls_sign_get_pk_algorithm:          Core TLS API.       (line 4447)
+* gnutls_sign_is_secure:                 Core TLS API.       (line 4462)
+* gnutls_sign_list:                      Core TLS API.       (line 4471)
+* gnutls_srp_allocate_client_credentials: Core TLS API.      (line 4481)
+* gnutls_srp_allocate_server_credentials: Core TLS API.      (line 4494)
+* gnutls_srp_base64_decode:              Core TLS API.       (line 4507)
+* gnutls_srp_base64_decode_alloc:        Core TLS API.       (line 4529)
+* gnutls_srp_base64_encode:              Core TLS API.       (line 4549)
+* gnutls_srp_base64_encode_alloc:        Core TLS API.       (line 4571)
+* gnutls_srp_free_client_credentials:    Core TLS API.       (line 4592)
+* gnutls_srp_free_server_credentials:    Core TLS API.       (line 4602)
+* gnutls_srp_server_get_username:        Core TLS API.       (line 4612)
+* gnutls_srp_set_client_credentials:     Core TLS API.       (line 4626)
+* gnutls_srp_set_client_credentials_function <1>: SRP credentials.
+                                                             (line   26)
+* gnutls_srp_set_client_credentials_function: Core TLS API.  (line 4647)
+* gnutls_srp_set_prime_bits:             Core TLS API.       (line 4676)
+* gnutls_srp_set_server_credentials_file <1>: Core TLS API.  (line 4698)
+* gnutls_srp_set_server_credentials_file: SRP credentials.   (line   60)
 * gnutls_srp_set_server_credentials_function <1>: Core TLS API.
-                                                             (line 4714)
+                                                             (line 4718)
+* gnutls_srp_set_server_credentials_function: SRP credentials.
+                                                             (line   77)
+* gnutls_srp_verifier <1>:               Core TLS API.       (line 4753)
 * gnutls_srp_verifier:                   Authentication using SRP.
-                                                             (line   43)
-* gnutls_srp_verifier <1>:               Core TLS API.       (line 4748)
-* gnutls_srtp_get_keys:                  SRTP.               (line   31)
-* gnutls_srtp_get_keys <1>:              Core TLS API.       (line 4777)
-* gnutls_srtp_get_mki:                   Core TLS API.       (line 4815)
-* gnutls_srtp_get_profile_id:            Core TLS API.       (line 4833)
-* gnutls_srtp_get_profile_name:          Core TLS API.       (line 4849)
-* gnutls_srtp_get_selected_profile:      Core TLS API.       (line 4864)
-* gnutls_srtp_set_mki:                   Core TLS API.       (line 4880)
-* gnutls_srtp_set_profile:               Core TLS API.       (line 4897)
-* gnutls_srtp_set_profile_direct:        Core TLS API.       (line 4914)
-* gnutls_store_commitment:               Certificate verification.
-                                                             (line   99)
-* gnutls_store_commitment <1>:           Core TLS API.       (line 4935)
+                                                             (line   49)
+* gnutls_srtp_get_keys <1>:              SRTP.               (line   39)
+* gnutls_srtp_get_keys:                  Core TLS API.       (line 4782)
+* gnutls_srtp_get_mki:                   Core TLS API.       (line 4818)
+* gnutls_srtp_get_profile_id:            Core TLS API.       (line 4836)
+* gnutls_srtp_get_profile_name:          Core TLS API.       (line 4852)
+* gnutls_srtp_get_selected_profile:      Core TLS API.       (line 4867)
+* gnutls_srtp_set_mki:                   Core TLS API.       (line 4883)
+* gnutls_srtp_set_profile:               Core TLS API.       (line 4900)
+* gnutls_srtp_set_profile_direct:        Core TLS API.       (line 4917)
+* gnutls_store_commitment <1>:           Certificate verification.
+                                                             (line  104)
+* gnutls_store_commitment:               Core TLS API.       (line 4940)
+* gnutls_store_pubkey <1>:               Core TLS API.       (line 4980)
 * gnutls_store_pubkey:                   Certificate verification.
-                                                             (line   61)
-* gnutls_store_pubkey <1>:               Core TLS API.       (line 4975)
-* gnutls_strerror:                       Core TLS API.       (line 5012)
-* gnutls_strerror_name:                  Core TLS API.       (line 5026)
-* gnutls_supplemental_get_name:          Core TLS API.       (line 5041)
-* gnutls_tdb_deinit:                     Core TLS API.       (line 5054)
-* gnutls_tdb_init:                       Core TLS API.       (line 5063)
-* gnutls_tdb_set_store_commitment_func:  Core TLS API.       (line 5074)
-* gnutls_tdb_set_store_func:             Core TLS API.       (line 5091)
-* gnutls_tdb_set_verify_func:            Core TLS API.       (line 5106)
-* gnutls_tpm_get_registered:             TPM API.            (line   12)
-* gnutls_tpm_key_list_deinit:            TPM API.            (line   27)
-* gnutls_tpm_key_list_get_url:           TPM API.            (line   38)
-* gnutls_tpm_privkey_delete:             Key generation.     (line   52)
-* gnutls_tpm_privkey_delete <1>:         Using keys.         (line   82)
-* gnutls_tpm_privkey_delete <2>:         TPM API.            (line   60)
-* gnutls_tpm_privkey_generate:           Key generation.     (line    9)
-* gnutls_tpm_privkey_generate <1>:       TPM API.            (line   76)
-* gnutls_transport_get_int:              Core TLS API.       (line 5121)
-* gnutls_transport_get_int2:             Core TLS API.       (line 5135)
-* gnutls_transport_get_ptr:              Core TLS API.       (line 5152)
-* gnutls_transport_get_ptr2:             Core TLS API.       (line 5165)
+                                                             (line   65)
+* gnutls_strerror:                       Core TLS API.       (line 5014)
+* gnutls_strerror_name:                  Core TLS API.       (line 5028)
+* gnutls_supplemental_get_name:          Core TLS API.       (line 5044)
+* gnutls_tdb_deinit:                     Core TLS API.       (line 5056)
+* gnutls_tdb_init:                       Core TLS API.       (line 5065)
+* gnutls_tdb_set_store_commitment_func:  Core TLS API.       (line 5077)
+* gnutls_tdb_set_store_func:             Core TLS API.       (line 5094)
+* gnutls_tdb_set_verify_func:            Core TLS API.       (line 5109)
+* gnutls_tpm_get_registered:             TPM API.            (line   14)
+* gnutls_tpm_key_list_deinit:            TPM API.            (line   29)
+* gnutls_tpm_key_list_get_url:           TPM API.            (line   40)
+* gnutls_tpm_privkey_delete <1>:         Using keys.         (line   87)
+* gnutls_tpm_privkey_delete <2>:         TPM API.            (line   62)
+* gnutls_tpm_privkey_delete:             Key generation.     (line   56)
+* gnutls_tpm_privkey_generate <1>:       TPM API.            (line   81)
+* gnutls_tpm_privkey_generate:           Key generation.     (line   14)
+* gnutls_transport_get_int:              Core TLS API.       (line 5123)
+* gnutls_transport_get_int2:             Core TLS API.       (line 5138)
+* gnutls_transport_get_ptr:              Core TLS API.       (line 5155)
+* gnutls_transport_get_ptr2:             Core TLS API.       (line 5169)
+* gnutls_transport_set_errno <1>:        Core TLS API.       (line 5184)
 * gnutls_transport_set_errno:            Setting up the transport layer.
-                                                             (line  101)
-* gnutls_transport_set_errno <1>:        Core TLS API.       (line 5181)
-* gnutls_transport_set_errno_function:   Core TLS API.       (line 5201)
-* gnutls_transport_set_int:              Core TLS API.       (line 5219)
-* gnutls_transport_set_int2:             Core TLS API.       (line 5233)
-* gnutls_transport_set_ptr:              Core TLS API.       (line 5251)
-* gnutls_transport_set_ptr2:             Core TLS API.       (line 5264)
-* gnutls_transport_set_pull_function:    Setting up the transport layer.
-                                                             (line   56)
-* gnutls_transport_set_pull_function <1>: Core TLS API.      (line 5281)
-* gnutls_transport_set_pull_timeout_function: Setting up the transport layer.
-                                                             (line   71)
+                                                             (line  105)
+* gnutls_transport_set_errno_function:   Core TLS API.       (line 5204)
+* gnutls_transport_set_int:              Core TLS API.       (line 5222)
+* gnutls_transport_set_int2:             Core TLS API.       (line 5236)
+* gnutls_transport_set_ptr:              Core TLS API.       (line 5254)
+* gnutls_transport_set_ptr2:             Core TLS API.       (line 5268)
+* gnutls_transport_set_pull_function <1>: Setting up the transport layer.
+                                                             (line   60)
+* gnutls_transport_set_pull_function:    Core TLS API.       (line 5284)
 * gnutls_transport_set_pull_timeout_function <1>: Setting up the transport layer.
-                                                             (line  138)
-* gnutls_transport_set_pull_timeout_function <2>: Core TLS API.
-                                                             (line 5299)
+                                                             (line  144)
+* gnutls_transport_set_pull_timeout_function: Core TLS API.  (line 5302)
+* gnutls_transport_set_push_function <1>: Core TLS API.      (line 5327)
 * gnutls_transport_set_push_function:    Setting up the transport layer.
-                                                             (line   23)
-* gnutls_transport_set_push_function <1>: Core TLS API.      (line 5324)
+                                                             (line   27)
+* gnutls_transport_set_vec_push_function <1>: Core TLS API.  (line 5347)
 * gnutls_transport_set_vec_push_function: Setting up the transport layer.
-                                                             (line   40)
-* gnutls_transport_set_vec_push_function <1>: Core TLS API.  (line 5344)
+                                                             (line   44)
+* gnutls_url_is_supported <1>:           Core TLS API.       (line 5365)
 * gnutls_url_is_supported:               Abstract public keys.
-                                                             (line   54)
-* gnutls_url_is_supported <1>:           Core TLS API.       (line 5363)
+                                                             (line   61)
+* gnutls_verify_stored_pubkey <1>:       Core TLS API.       (line 5382)
 * gnutls_verify_stored_pubkey:           Certificate verification.
-                                                             (line   18)
-* gnutls_verify_stored_pubkey <1>:       Core TLS API.       (line 5377)
+                                                             (line   22)
 * gnutls_x509_crl_check_issuer:          X509 certificate API.
-                                                             (line  263)
+                                                             (line  266)
 * gnutls_x509_crl_deinit:                X509 certificate API.
-                                                             (line  278)
+                                                             (line  280)
 * gnutls_x509_crl_export:                X509 certificate API.
-                                                             (line  286)
+                                                             (line  290)
 * gnutls_x509_crl_export2:               X509 certificate API.
-                                                             (line  313)
+                                                             (line  316)
 * gnutls_x509_crl_get_authority_key_gn_serial: X509 certificate API.
-                                                             (line  337)
+                                                             (line  342)
 * gnutls_x509_crl_get_authority_key_id:  X509 certificate API.
-                                                             (line  374)
+                                                             (line  378)
 * gnutls_x509_crl_get_crt_count:         X509 certificate API.
-                                                             (line  402)
-* gnutls_x509_crl_get_crt_serial:        PKIX certificate revocation lists.
-                                                             (line   55)
+                                                             (line  404)
 * gnutls_x509_crl_get_crt_serial <1>:    X509 certificate API.
-                                                             (line  414)
+                                                             (line  418)
+* gnutls_x509_crl_get_crt_serial:        PKIX certificate revocation lists.
+                                                             (line   53)
 * gnutls_x509_crl_get_dn_oid:            X509 certificate API.
-                                                             (line  437)
+                                                             (line  440)
 * gnutls_x509_crl_get_extension_data:    X509 certificate API.
-                                                             (line  460)
+                                                             (line  462)
 * gnutls_x509_crl_get_extension_info:    X509 certificate API.
-                                                             (line  490)
+                                                             (line  493)
 * gnutls_x509_crl_get_extension_oid:     X509 certificate API.
-                                                             (line  524)
+                                                             (line  526)
 * gnutls_x509_crl_get_issuer_dn:         X509 certificate API.
-                                                             (line  549)
+                                                             (line  551)
 * gnutls_x509_crl_get_issuer_dn2:        X509 certificate API.
-                                                             (line  571)
+                                                             (line  573)
 * gnutls_x509_crl_get_issuer_dn_by_oid:  X509 certificate API.
-                                                             (line  591)
+                                                             (line  594)
 * gnutls_x509_crl_get_next_update:       X509 certificate API.
-                                                             (line  627)
+                                                             (line  629)
 * gnutls_x509_crl_get_number:            X509 certificate API.
-                                                             (line  641)
+                                                             (line  643)
 * gnutls_x509_crl_get_raw_issuer_dn:     X509 certificate API.
-                                                             (line  663)
+                                                             (line  665)
 * gnutls_x509_crl_get_signature:         X509 certificate API.
-                                                             (line  679)
+                                                             (line  681)
 * gnutls_x509_crl_get_signature_algorithm: X509 certificate API.
-                                                             (line  697)
+                                                             (line  699)
 * gnutls_x509_crl_get_this_update:       X509 certificate API.
-                                                             (line  710)
+                                                             (line  712)
 * gnutls_x509_crl_get_version:           X509 certificate API.
-                                                             (line  721)
+                                                             (line  722)
 * gnutls_x509_crl_import:                X509 certificate API.
-                                                             (line  731)
+                                                             (line  733)
 * gnutls_x509_crl_init:                  X509 certificate API.
-                                                             (line  751)
+                                                             (line  752)
 * gnutls_x509_crl_list_import:           X509 certificate API.
-                                                             (line  766)
+                                                             (line  769)
 * gnutls_x509_crl_list_import2:          X509 certificate API.
-                                                             (line  797)
+                                                             (line  800)
 * gnutls_x509_crl_print:                 X509 certificate API.
-                                                             (line  827)
+                                                             (line  830)
+* gnutls_x509_crl_privkey_sign <1>:      Abstract key API.   (line 1582)
 * gnutls_x509_crl_privkey_sign:          PKIX certificate revocation lists.
-                                                             (line  121)
-* gnutls_x509_crl_privkey_sign <1>:      Abstract key API.   (line 1579)
+                                                             (line  128)
 * gnutls_x509_crl_set_authority_key_id:  X509 certificate API.
-                                                             (line  847)
+                                                             (line  849)
 * gnutls_x509_crl_set_crt:               X509 certificate API.
-                                                             (line  868)
+                                                             (line  870)
 * gnutls_x509_crl_set_crt_serial:        X509 certificate API.
-                                                             (line  886)
+                                                             (line  889)
 * gnutls_x509_crl_set_next_update:       X509 certificate API.
-                                                             (line  906)
+                                                             (line  908)
 * gnutls_x509_crl_set_number:            X509 certificate API.
-                                                             (line  920)
+                                                             (line  922)
 * gnutls_x509_crl_set_this_update:       X509 certificate API.
-                                                             (line  940)
+                                                             (line  942)
 * gnutls_x509_crl_set_version:           X509 certificate API.
-                                                             (line  954)
-* gnutls_x509_crl_sign:                  Compatibility API.  (line  417)
-* gnutls_x509_crl_sign2:                 PKIX certificate revocation lists.
-                                                             (line   98)
+                                                             (line  956)
+* gnutls_x509_crl_sign:                  Compatibility API.  (line  420)
 * gnutls_x509_crl_sign2 <1>:             X509 certificate API.
-                                                             (line  970)
+                                                             (line  973)
+* gnutls_x509_crl_sign2:                 PKIX certificate revocation lists.
+                                                             (line  105)
 * gnutls_x509_crl_verify:                X509 certificate API.
-                                                             (line  996)
+                                                             (line  999)
 * gnutls_x509_crq_deinit:                X509 certificate API.
-                                                             (line 1026)
+                                                             (line 1028)
 * gnutls_x509_crq_export:                X509 certificate API.
-                                                             (line 1035)
+                                                             (line 1039)
 * gnutls_x509_crq_export2:               X509 certificate API.
-                                                             (line 1063)
+                                                             (line 1066)
 * gnutls_x509_crq_get_attribute_by_oid:  X509 certificate API.
-                                                             (line 1087)
+                                                             (line 1091)
 * gnutls_x509_crq_get_attribute_data:    X509 certificate API.
-                                                             (line 1116)
+                                                             (line 1119)
 * gnutls_x509_crq_get_attribute_info:    X509 certificate API.
-                                                             (line 1145)
+                                                             (line 1148)
 * gnutls_x509_crq_get_basic_constraints: X509 certificate API.
-                                                             (line 1176)
+                                                             (line 1180)
 * gnutls_x509_crq_get_challenge_password: X509 certificate API.
-                                                             (line 1206)
+                                                             (line 1209)
 * gnutls_x509_crq_get_dn:                X509 certificate API.
-                                                             (line 1224)
+                                                             (line 1227)
 * gnutls_x509_crq_get_dn2:               X509 certificate API.
-                                                             (line 1245)
+                                                             (line 1248)
 * gnutls_x509_crq_get_dn_by_oid:         X509 certificate API.
-                                                             (line 1265)
+                                                             (line 1269)
 * gnutls_x509_crq_get_dn_oid:            X509 certificate API.
-                                                             (line 1299)
+                                                             (line 1302)
 * gnutls_x509_crq_get_extension_by_oid:  X509 certificate API.
-                                                             (line 1319)
+                                                             (line 1323)
 * gnutls_x509_crq_get_extension_data:    X509 certificate API.
-                                                             (line 1349)
+                                                             (line 1352)
 * gnutls_x509_crq_get_extension_info:    X509 certificate API.
-                                                             (line 1379)
+                                                             (line 1383)
 * gnutls_x509_crq_get_key_id:            X509 certificate API.
-                                                             (line 1413)
+                                                             (line 1417)
 * gnutls_x509_crq_get_key_purpose_oid:   X509 certificate API.
-                                                             (line 1442)
+                                                             (line 1446)
 * gnutls_x509_crq_get_key_rsa_raw:       X509 certificate API.
-                                                             (line 1470)
+                                                             (line 1473)
 * gnutls_x509_crq_get_key_usage:         X509 certificate API.
-                                                             (line 1490)
+                                                             (line 1493)
 * gnutls_x509_crq_get_pk_algorithm:      X509 certificate API.
-                                                             (line 1516)
+                                                             (line 1519)
 * gnutls_x509_crq_get_private_key_usage_period: X509 certificate API.
-                                                             (line 1536)
+                                                             (line 1540)
 * gnutls_x509_crq_get_subject_alt_name:  X509 certificate API.
-                                                             (line 1557)
+                                                             (line 1561)
 * gnutls_x509_crq_get_subject_alt_othername_oid: X509 certificate API.
-                                                             (line 1594)
+                                                             (line 1598)
 * gnutls_x509_crq_get_version:           X509 certificate API.
-                                                             (line 1630)
+                                                             (line 1632)
 * gnutls_x509_crq_import:                X509 certificate API.
-                                                             (line 1642)
+                                                             (line 1645)
 * gnutls_x509_crq_init:                  X509 certificate API.
-                                                             (line 1663)
+                                                             (line 1665)
 * gnutls_x509_crq_print:                 X509 certificate API.
-                                                             (line 1675)
-* gnutls_x509_crq_privkey_sign:          Abstract key API.   (line 1607)
+                                                             (line 1679)
+* gnutls_x509_crq_privkey_sign:          Abstract key API.   (line 1610)
 * gnutls_x509_crq_set_attribute_by_oid:  X509 certificate API.
-                                                             (line 1697)
+                                                             (line 1701)
 * gnutls_x509_crq_set_basic_constraints: X509 certificate API.
-                                                             (line 1722)
+                                                             (line 1726)
 * gnutls_x509_crq_set_challenge_password: X509 certificate API.
-                                                             (line 1744)
+                                                             (line 1747)
 * gnutls_x509_crq_set_dn:                X509 certificate API.
-                                                             (line 1759)
+                                                             (line 1762)
 * gnutls_x509_crq_set_dn_by_oid:         X509 certificate API.
-                                                             (line 1776)
-* gnutls_x509_crq_set_key:               PKCS 10 certificate requests.
-                                                             (line   30)
-* gnutls_x509_crq_set_key <1>:           X509 certificate API.
-                                                             (line 1805)
+                                                             (line 1780)
+* gnutls_x509_crq_set_key <1>:           PKCS 10 certificate requests.
+                                                             (line   37)
+* gnutls_x509_crq_set_key:               X509 certificate API.
+                                                             (line 1808)
 * gnutls_x509_crq_set_key_purpose_oid:   X509 certificate API.
-                                                             (line 1820)
+                                                             (line 1824)
 * gnutls_x509_crq_set_key_rsa_raw:       X509 certificate API.
-                                                             (line 1842)
+                                                             (line 1846)
 * gnutls_x509_crq_set_key_usage:         X509 certificate API.
-                                                             (line 1861)
+                                                             (line 1865)
 * gnutls_x509_crq_set_private_key_usage_period: X509 certificate API.
-                                                             (line 1877)
-* gnutls_x509_crq_set_pubkey:            Operations.         (line  154)
-* gnutls_x509_crq_set_pubkey <1>:        Abstract key API.   (line 1636)
+                                                             (line 1881)
+* gnutls_x509_crq_set_pubkey <1>:        Abstract key API.   (line 1638)
+* gnutls_x509_crq_set_pubkey:            Operations.         (line  156)
 * gnutls_x509_crq_set_subject_alt_name:  X509 certificate API.
-                                                             (line 1894)
+                                                             (line 1899)
 * gnutls_x509_crq_set_version:           X509 certificate API.
-                                                             (line 1919)
-* gnutls_x509_crq_sign:                  Compatibility API.  (line  436)
-* gnutls_x509_crq_sign2:                 PKCS 10 certificate requests.
-                                                             (line   42)
-* gnutls_x509_crq_sign2 <1>:             X509 certificate API.
-                                                             (line 1934)
+                                                             (line 1923)
+* gnutls_x509_crq_sign:                  Compatibility API.  (line  439)
+* gnutls_x509_crq_sign2 <1>:             PKCS 10 certificate requests.
+                                                             (line   50)
+* gnutls_x509_crq_sign2:                 X509 certificate API.
+                                                             (line 1939)
 * gnutls_x509_crq_verify:                X509 certificate API.
-                                                             (line 1961)
+                                                             (line 1965)
 * gnutls_x509_crt_check_hostname:        X509 certificate API.
-                                                             (line 1980)
+                                                             (line 1985)
 * gnutls_x509_crt_check_issuer:          X509 certificate API.
-                                                             (line 1996)
+                                                             (line 2001)
 * gnutls_x509_crt_check_revocation:      X509 certificate API.
-                                                             (line 2012)
+                                                             (line 2017)
 * gnutls_x509_crt_cpy_crl_dist_points:   X509 certificate API.
-                                                             (line 2029)
+                                                             (line 2034)
 * gnutls_x509_crt_deinit:                X509 certificate API.
-                                                             (line 2045)
+                                                             (line 2049)
 * gnutls_x509_crt_export:                X509 certificate API.
-                                                             (line 2053)
+                                                             (line 2059)
 * gnutls_x509_crt_export2:               X509 certificate API.
-                                                             (line 2080)
+                                                             (line 2085)
 * gnutls_x509_crt_get_activation_time:   X509 certificate API.
-                                                             (line 2102)
+                                                             (line 2107)
 * gnutls_x509_crt_get_authority_info_access: X509 certificate API.
-                                                             (line 2114)
+                                                             (line 2120)
 * gnutls_x509_crt_get_authority_key_gn_serial: X509 certificate API.
-                                                             (line 2191)
+                                                             (line 2200)
 * gnutls_x509_crt_get_authority_key_id:  X509 certificate API.
-                                                             (line 2230)
+                                                             (line 2238)
 * gnutls_x509_crt_get_basic_constraints: X509 certificate API.
-                                                             (line 2257)
+                                                             (line 2265)
 * gnutls_x509_crt_get_ca_status:         X509 certificate API.
-                                                             (line 2285)
+                                                             (line 2292)
 * gnutls_x509_crt_get_crl_dist_points:   X509 certificate API.
-                                                             (line 2306)
+                                                             (line 2316)
 * gnutls_x509_crt_get_dn:                X509 certificate API.
-                                                             (line 2339)
-* gnutls_x509_crt_get_dn2:               X.509 distinguished names.
-                                                             (line   14)
-* gnutls_x509_crt_get_dn2 <1>:           X509 certificate API.
-                                                             (line 2361)
+                                                             (line 2348)
+* gnutls_x509_crt_get_dn2 <1>:           X.509 distinguished names.
+                                                             (line   16)
+* gnutls_x509_crt_get_dn2:               X509 certificate API.
+                                                             (line 2370)
 * gnutls_x509_crt_get_dn_by_oid:         X509 certificate API.
-                                                             (line 2381)
+                                                             (line 2391)
 * gnutls_x509_crt_get_dn_oid:            X509 certificate API.
-                                                             (line 2420)
+                                                             (line 2430)
 * gnutls_x509_crt_get_expiration_time:   X509 certificate API.
-                                                             (line 2446)
+                                                             (line 2457)
 * gnutls_x509_crt_get_extension_by_oid:  X509 certificate API.
-                                                             (line 2458)
+                                                             (line 2470)
 * gnutls_x509_crt_get_extension_data:    X509 certificate API.
-                                                             (line 2486)
+                                                             (line 2497)
 * gnutls_x509_crt_get_extension_info:    X509 certificate API.
-                                                             (line 2514)
+                                                             (line 2526)
 * gnutls_x509_crt_get_extension_oid:     X509 certificate API.
-                                                             (line 2547)
+                                                             (line 2558)
 * gnutls_x509_crt_get_fingerprint:       X509 certificate API.
-                                                             (line 2573)
+                                                             (line 2585)
 * gnutls_x509_crt_get_issuer:            X509 certificate API.
-                                                             (line 2596)
+                                                             (line 2607)
 * gnutls_x509_crt_get_issuer_alt_name:   X509 certificate API.
-                                                             (line 2614)
+                                                             (line 2626)
 * gnutls_x509_crt_get_issuer_alt_name2:  X509 certificate API.
-                                                             (line 2657)
+                                                             (line 2669)
 * gnutls_x509_crt_get_issuer_alt_othername_oid: X509 certificate API.
-                                                             (line 2695)
+                                                             (line 2707)
 * gnutls_x509_crt_get_issuer_dn:         X509 certificate API.
-                                                             (line 2735)
+                                                             (line 2746)
 * gnutls_x509_crt_get_issuer_dn2:        X509 certificate API.
-                                                             (line 2757)
+                                                             (line 2768)
 * gnutls_x509_crt_get_issuer_dn_by_oid:  X509 certificate API.
-                                                             (line 2777)
+                                                             (line 2789)
 * gnutls_x509_crt_get_issuer_dn_oid:     X509 certificate API.
-                                                             (line 2816)
+                                                             (line 2828)
 * gnutls_x509_crt_get_issuer_unique_id:  X509 certificate API.
-                                                             (line 2842)
-* gnutls_x509_crt_get_key_id:            X.509 public and private keys.
-                                                             (line   13)
-* gnutls_x509_crt_get_key_id <1>:        X509 certificate API.
-                                                             (line 2866)
+                                                             (line 2855)
+* gnutls_x509_crt_get_key_id <1>:        X.509 public and private keys.
+                                                             (line   16)
+* gnutls_x509_crt_get_key_id:            X509 certificate API.
+                                                             (line 2880)
 * gnutls_x509_crt_get_key_purpose_oid:   X509 certificate API.
-                                                             (line 2893)
+                                                             (line 2907)
 * gnutls_x509_crt_get_key_usage:         X509 certificate API.
-                                                             (line 2923)
+                                                             (line 2936)
 * gnutls_x509_crt_get_pk_algorithm:      X509 certificate API.
-                                                             (line 2947)
+                                                             (line 2960)
 * gnutls_x509_crt_get_pk_dsa_raw:        X509 certificate API.
-                                                             (line 2967)
+                                                             (line 2981)
 * gnutls_x509_crt_get_pk_rsa_raw:        X509 certificate API.
-                                                             (line 2990)
+                                                             (line 3003)
 * gnutls_x509_crt_get_policy:            X509 certificate API.
-                                                             (line 3008)
+                                                             (line 3022)
 * gnutls_x509_crt_get_preferred_hash_algorithm: Compatibility API.
-                                                             (line  453)
+                                                             (line  457)
 * gnutls_x509_crt_get_private_key_usage_period: X509 certificate API.
-                                                             (line 3035)
+                                                             (line 3049)
 * gnutls_x509_crt_get_proxy:             X509 certificate API.
-                                                             (line 3057)
+                                                             (line 3071)
 * gnutls_x509_crt_get_raw_dn:            X509 certificate API.
-                                                             (line 3084)
+                                                             (line 3097)
 * gnutls_x509_crt_get_raw_issuer_dn:     X509 certificate API.
-                                                             (line 3101)
+                                                             (line 3114)
 * gnutls_x509_crt_get_serial:            X509 certificate API.
-                                                             (line 3117)
+                                                             (line 3130)
 * gnutls_x509_crt_get_signature:         X509 certificate API.
-                                                             (line 3137)
+                                                             (line 3149)
 * gnutls_x509_crt_get_signature_algorithm: X509 certificate API.
-                                                             (line 3155)
+                                                             (line 3167)
 * gnutls_x509_crt_get_subject:           X509 certificate API.
-                                                             (line 3169)
+                                                             (line 3181)
 * gnutls_x509_crt_get_subject_alt_name:  X509 certificate API.
-                                                             (line 3187)
+                                                             (line 3200)
 * gnutls_x509_crt_get_subject_alt_name2: X509 certificate API.
-                                                             (line 3227)
+                                                             (line 3240)
 * gnutls_x509_crt_get_subject_alt_othername_oid: X509 certificate API.
-                                                             (line 3263)
+                                                             (line 3276)
 * gnutls_x509_crt_get_subject_key_id:    X509 certificate API.
-                                                             (line 3301)
+                                                             (line 3313)
 * gnutls_x509_crt_get_subject_unique_id: X509 certificate API.
-                                                             (line 3323)
-* gnutls_x509_crt_get_verify_algorithm:  Compatibility API.  (line  480)
+                                                             (line 3335)
+* gnutls_x509_crt_get_verify_algorithm:  Compatibility API.  (line  484)
 * gnutls_x509_crt_get_version:           X509 certificate API.
-                                                             (line 3345)
-* gnutls_x509_crt_import:                X509 certificate API.
                                                              (line 3356)
-* gnutls_x509_crt_import_pkcs11:         PKCS 11 API.        (line  758)
-* gnutls_x509_crt_import_pkcs11_url:     PKCS 11 API.        (line  775)
+* gnutls_x509_crt_import:                X509 certificate API.
+                                                             (line 3368)
+* gnutls_x509_crt_import_pkcs11:         PKCS 11 API.        (line  759)
+* gnutls_x509_crt_import_pkcs11_url:     PKCS 11 API.        (line  776)
 * gnutls_x509_crt_init:                  X509 certificate API.
-                                                             (line 3377)
-* gnutls_x509_crt_list_import:           X509 certificate API.
                                                              (line 3388)
+* gnutls_x509_crt_list_import:           X509 certificate API.
+                                                             (line 3401)
 * gnutls_x509_crt_list_import2:          X509 certificate API.
-                                                             (line 3424)
-* gnutls_x509_crt_list_import_pkcs11:    PKCS 11 API.        (line  795)
+                                                             (line 3437)
+* gnutls_x509_crt_list_import_pkcs11:    PKCS 11 API.        (line  797)
 * gnutls_x509_crt_list_verify:           X509 certificate API.
-                                                             (line 3454)
+                                                             (line 3469)
 * gnutls_x509_crt_print:                 X509 certificate API.
-                                                             (line 3496)
-* gnutls_x509_crt_privkey_sign:          Abstract key API.   (line 1653)
+                                                             (line 3510)
+* gnutls_x509_crt_privkey_sign:          Abstract key API.   (line 1656)
 * gnutls_x509_crt_set_activation_time:   X509 certificate API.
-                                                             (line 3521)
+                                                             (line 3534)
 * gnutls_x509_crt_set_authority_info_access: X509 certificate API.
-                                                             (line 3536)
+                                                             (line 3549)
 * gnutls_x509_crt_set_authority_key_id:  X509 certificate API.
-                                                             (line 3562)
+                                                             (line 3575)
 * gnutls_x509_crt_set_basic_constraints: X509 certificate API.
-                                                             (line 3580)
+                                                             (line 3594)
 * gnutls_x509_crt_set_ca_status:         X509 certificate API.
-                                                             (line 3600)
+                                                             (line 3613)
 * gnutls_x509_crt_set_crl_dist_points:   X509 certificate API.
-                                                             (line 3617)
+                                                             (line 3631)
 * gnutls_x509_crt_set_crl_dist_points2:  X509 certificate API.
-                                                             (line 3637)
+                                                             (line 3652)
 * gnutls_x509_crt_set_crq:               X509 certificate API.
-                                                             (line 3662)
+                                                             (line 3675)
 * gnutls_x509_crt_set_crq_extensions:    X509 certificate API.
-                                                             (line 3678)
+                                                             (line 3691)
 * gnutls_x509_crt_set_dn:                X509 certificate API.
-                                                             (line 3695)
+                                                             (line 3708)
 * gnutls_x509_crt_set_dn_by_oid:         X509 certificate API.
-                                                             (line 3712)
+                                                             (line 3726)
 * gnutls_x509_crt_set_expiration_time:   X509 certificate API.
-                                                             (line 3741)
+                                                             (line 3754)
 * gnutls_x509_crt_set_extension_by_oid:  X509 certificate API.
-                                                             (line 3755)
+                                                             (line 3769)
 * gnutls_x509_crt_set_issuer_dn:         X509 certificate API.
-                                                             (line 3779)
+                                                             (line 3792)
 * gnutls_x509_crt_set_issuer_dn_by_oid:  X509 certificate API.
-                                                             (line 3796)
+                                                             (line 3810)
 * gnutls_x509_crt_set_key:               X509 certificate API.
-                                                             (line 3829)
+                                                             (line 3842)
 * gnutls_x509_crt_set_key_purpose_oid:   X509 certificate API.
-                                                             (line 3844)
+                                                             (line 3859)
 * gnutls_x509_crt_set_key_usage:         X509 certificate API.
-                                                             (line 3864)
+                                                             (line 3879)
 * gnutls_x509_crt_set_pin_function:      X509 certificate API.
-                                                             (line 3878)
+                                                             (line 3893)
 * gnutls_x509_crt_set_policy:            X509 certificate API.
-                                                             (line 3899)
+                                                             (line 3914)
 * gnutls_x509_crt_set_private_key_usage_period: X509 certificate API.
-                                                             (line 3922)
+                                                             (line 3937)
 * gnutls_x509_crt_set_proxy:             X509 certificate API.
-                                                             (line 3939)
+                                                             (line 3955)
 * gnutls_x509_crt_set_proxy_dn:          X509 certificate API.
-                                                             (line 3962)
-* gnutls_x509_crt_set_pubkey:            Operations.         (line  168)
-* gnutls_x509_crt_set_pubkey <1>:        Abstract key API.   (line 1678)
+                                                             (line 3978)
+* gnutls_x509_crt_set_pubkey <1>:        Abstract key API.   (line 1680)
+* gnutls_x509_crt_set_pubkey:            Operations.         (line  170)
 * gnutls_x509_crt_set_serial:            X509 certificate API.
-                                                             (line 3988)
-* gnutls_x509_crt_set_subject_alternative_name: X509 certificate API.
-                                                             (line 4035)
+                                                             (line 4004)
 * gnutls_x509_crt_set_subject_alt_name:  X509 certificate API.
-                                                             (line 4010)
+                                                             (line 4026)
+* gnutls_x509_crt_set_subject_alternative_name: X509 certificate API.
+                                                             (line 4051)
 * gnutls_x509_crt_set_subject_key_id:    X509 certificate API.
-                                                             (line 4057)
+                                                             (line 4072)
 * gnutls_x509_crt_set_version:           X509 certificate API.
-                                                             (line 4074)
+                                                             (line 4089)
 * gnutls_x509_crt_sign:                  X509 certificate API.
-                                                             (line 4096)
+                                                             (line 4111)
 * gnutls_x509_crt_sign2:                 X509 certificate API.
-                                                             (line 4113)
+                                                             (line 4129)
 * gnutls_x509_crt_verify:                X509 certificate API.
-                                                             (line 4138)
-* gnutls_x509_crt_verify_data:           Compatibility API.  (line  503)
-* gnutls_x509_crt_verify_hash:           Compatibility API.  (line  527)
+                                                             (line 4154)
+* gnutls_x509_crt_verify_data:           Compatibility API.  (line  507)
+* gnutls_x509_crt_verify_hash:           Compatibility API.  (line  531)
 * gnutls_x509_dn_deinit:                 X509 certificate API.
-                                                             (line 4162)
+                                                             (line 4177)
 * gnutls_x509_dn_export:                 X509 certificate API.
-                                                             (line 4173)
+                                                             (line 4190)
 * gnutls_x509_dn_export2:                X509 certificate API.
-                                                             (line 4200)
-* gnutls_x509_dn_get_rdn_ava:            X.509 distinguished names.
-                                                             (line   50)
+                                                             (line 4216)
 * gnutls_x509_dn_get_rdn_ava <1>:        X509 certificate API.
-                                                             (line 4223)
+                                                             (line 4239)
+* gnutls_x509_dn_get_rdn_ava:            X.509 distinguished names.
+                                                             (line   60)
 * gnutls_x509_dn_import:                 X509 certificate API.
-                                                             (line 4254)
+                                                             (line 4270)
 * gnutls_x509_dn_init:                   X509 certificate API.
-                                                             (line 4273)
+                                                             (line 4288)
 * gnutls_x509_dn_oid_known:              X509 certificate API.
-                                                             (line 4289)
+                                                             (line 4304)
 * gnutls_x509_dn_oid_name:               X509 certificate API.
-                                                             (line 4305)
+                                                             (line 4321)
 * gnutls_x509_policy_release:            X509 certificate API.
-                                                             (line 4322)
+                                                             (line 4338)
 * gnutls_x509_privkey_cpy:               X509 certificate API.
-                                                             (line 4335)
+                                                             (line 4351)
 * gnutls_x509_privkey_deinit:            X509 certificate API.
-                                                             (line 4350)
+                                                             (line 4366)
 * gnutls_x509_privkey_export:            X509 certificate API.
-                                                             (line 4359)
+                                                             (line 4376)
 * gnutls_x509_privkey_export2:           X509 certificate API.
-                                                             (line 4388)
+                                                             (line 4404)
 * gnutls_x509_privkey_export2_pkcs8:     X509 certificate API.
-                                                             (line 4413)
+                                                             (line 4431)
 * gnutls_x509_privkey_export_dsa_raw:    X509 certificate API.
-                                                             (line 4449)
+                                                             (line 4467)
 * gnutls_x509_privkey_export_ecc_raw:    X509 certificate API.
-                                                             (line 4475)
+                                                             (line 4492)
 * gnutls_x509_privkey_export_pkcs8:      X509 certificate API.
-                                                             (line 4500)
+                                                             (line 4518)
 * gnutls_x509_privkey_export_rsa_raw:    X509 certificate API.
-                                                             (line 4539)
+                                                             (line 4557)
 * gnutls_x509_privkey_export_rsa_raw2:   X509 certificate API.
-                                                             (line 4567)
+                                                             (line 4586)
 * gnutls_x509_privkey_fix:               X509 certificate API.
-                                                             (line 4602)
+                                                             (line 4617)
 * gnutls_x509_privkey_generate:          X509 certificate API.
-                                                             (line 4614)
+                                                             (line 4631)
 * gnutls_x509_privkey_get_key_id:        X509 certificate API.
-                                                             (line 4637)
+                                                             (line 4654)
 * gnutls_x509_privkey_get_pk_algorithm:  X509 certificate API.
-                                                             (line 4664)
+                                                             (line 4680)
 * gnutls_x509_privkey_get_pk_algorithm2: X509 certificate API.
-                                                             (line 4677)
+                                                             (line 4693)
 * gnutls_x509_privkey_import:            X509 certificate API.
-                                                             (line 4692)
-* gnutls_x509_privkey_import2:           Managing encrypted keys.
-                                                             (line   51)
-* gnutls_x509_privkey_import2 <1>:       X509 certificate API.
-                                                             (line 4714)
+                                                             (line 4709)
+* gnutls_x509_privkey_import2 <1>:       Managing encrypted keys.
+                                                             (line   54)
+* gnutls_x509_privkey_import2:           X509 certificate API.
+                                                             (line 4732)
 * gnutls_x509_privkey_import_dsa_raw:    X509 certificate API.
-                                                             (line 4743)
+                                                             (line 4762)
 * gnutls_x509_privkey_import_ecc_raw:    X509 certificate API.
-                                                             (line 4769)
-* gnutls_x509_privkey_import_openssl:    Managing encrypted keys.
-                                                             (line  232)
-* gnutls_x509_privkey_import_openssl <1>: X509 certificate API.
-                                                             (line 4795)
+                                                             (line 4788)
+* gnutls_x509_privkey_import_openssl <1>: Managing encrypted keys.
+                                                             (line  258)
+* gnutls_x509_privkey_import_openssl:    X509 certificate API.
+                                                             (line 4813)
 * gnutls_x509_privkey_import_pkcs8:      X509 certificate API.
-                                                             (line 4819)
+                                                             (line 4838)
 * gnutls_x509_privkey_import_rsa_raw:    X509 certificate API.
-                                                             (line 4856)
+                                                             (line 4876)
 * gnutls_x509_privkey_import_rsa_raw2:   X509 certificate API.
-                                                             (line 4885)
+                                                             (line 4906)
 * gnutls_x509_privkey_init:              X509 certificate API.
-                                                             (line 4919)
+                                                             (line 4935)
 * gnutls_x509_privkey_sec_param:         X509 certificate API.
-                                                             (line 4930)
-* gnutls_x509_privkey_sign_data:         Compatibility API.  (line  551)
-* gnutls_x509_privkey_sign_hash:         Compatibility API.  (line  588)
+                                                             (line 4947)
+* gnutls_x509_privkey_sign_data:         Compatibility API.  (line  556)
+* gnutls_x509_privkey_sign_hash:         Compatibility API.  (line  591)
 * gnutls_x509_privkey_verify_params:     X509 certificate API.
-                                                             (line 4945)
+                                                             (line 4962)
 * gnutls_x509_rdn_get:                   X509 certificate API.
-                                                             (line 4957)
+                                                             (line 4974)
 * gnutls_x509_rdn_get_by_oid:            X509 certificate API.
-                                                             (line 4977)
+                                                             (line 4995)
 * gnutls_x509_rdn_get_oid:               X509 certificate API.
-                                                             (line 5005)
-* gnutls_x509_trust_list_add_cas:        Verifying X.509 certificate paths.
-                                                             (line    9)
+                                                             (line 5022)
 * gnutls_x509_trust_list_add_cas <1>:    X509 certificate API.
-                                                             (line 5028)
-* gnutls_x509_trust_list_add_crls:       Verifying X.509 certificate paths.
-                                                             (line   58)
-* gnutls_x509_trust_list_add_crls <1>:   X509 certificate API.
-                                                             (line 5050)
-* gnutls_x509_trust_list_add_named_crt:  Verifying X.509 certificate paths.
-                                                             (line   28)
+                                                             (line 5046)
+* gnutls_x509_trust_list_add_cas:        Verifying X.509 certificate paths.
+                                                             (line   12)
+* gnutls_x509_trust_list_add_crls <1>:   Verifying X.509 certificate paths.
+                                                             (line   62)
+* gnutls_x509_trust_list_add_crls:       X509 certificate API.
+                                                             (line 5069)
 * gnutls_x509_trust_list_add_named_crt <1>: X509 certificate API.
-                                                             (line 5081)
-* gnutls_x509_trust_list_add_system_trust: Verifying X.509 certificate paths.
-                                                             (line  197)
-* gnutls_x509_trust_list_add_system_trust <1>: X509 certificate API.
-                                                             (line 5114)
-* gnutls_x509_trust_list_add_trust_file: Verifying X.509 certificate paths.
-                                                             (line  148)
+                                                             (line 5099)
+* gnutls_x509_trust_list_add_named_crt:  Verifying X.509 certificate paths.
+                                                             (line   31)
+* gnutls_x509_trust_list_add_system_trust <1>: Verifying X.509 certificate paths.
+                                                             (line  202)
+* gnutls_x509_trust_list_add_system_trust: X509 certificate API.
+                                                             (line 5132)
 * gnutls_x509_trust_list_add_trust_file <1>: X509 certificate API.
-                                                             (line 5136)
-* gnutls_x509_trust_list_add_trust_mem:  Verifying X.509 certificate paths.
-                                                             (line  173)
+                                                             (line 5155)
+* gnutls_x509_trust_list_add_trust_file: Verifying X.509 certificate paths.
+                                                             (line  154)
 * gnutls_x509_trust_list_add_trust_mem <1>: X509 certificate API.
-                                                             (line 5164)
+                                                             (line 5183)
+* gnutls_x509_trust_list_add_trust_mem:  Verifying X.509 certificate paths.
+                                                             (line  179)
 * gnutls_x509_trust_list_deinit:         X509 certificate API.
-                                                             (line 5191)
+                                                             (line 5208)
 * gnutls_x509_trust_list_get_issuer:     X509 certificate API.
-                                                             (line 5205)
+                                                             (line 5223)
 * gnutls_x509_trust_list_init:           X509 certificate API.
-                                                             (line 5228)
+                                                             (line 5244)
 * gnutls_x509_trust_list_remove_cas:     X509 certificate API.
-                                                             (line 5245)
+                                                             (line 5262)
 * gnutls_x509_trust_list_remove_trust_file: X509 certificate API.
-                                                             (line 5264)
+                                                             (line 5281)
 * gnutls_x509_trust_list_remove_trust_mem: X509 certificate API.
-                                                             (line 5284)
-* gnutls_x509_trust_list_verify_crt:     Verifying X.509 certificate paths.
-                                                             (line   86)
-* gnutls_x509_trust_list_verify_crt <1>: X509 certificate API.
-                                                             (line 5303)
-* gnutls_x509_trust_list_verify_named_crt: Verifying X.509 certificate paths.
-                                                             (line  116)
+                                                             (line 5301)
+* gnutls_x509_trust_list_verify_crt <1>: Verifying X.509 certificate paths.
+                                                             (line   90)
+* gnutls_x509_trust_list_verify_crt:     X509 certificate API.
+                                                             (line 5321)
 * gnutls_x509_trust_list_verify_named_crt <1>: X509 certificate API.
-                                                             (line 5336)
+                                                             (line 5355)
+* gnutls_x509_trust_list_verify_named_crt: Verifying X.509 certificate paths.
+                                                             (line  121)
+
+
+File: gnutls.info,  Node: Concept Index,  Prev: Function and Data Index,  Up: Top
+
+Concept Index
+*************
+
+ [index ]
+* Menu:
+
+* abstract types:                        Abstract key types.  (line   6)
+* alert protocol:                        The TLS Alert Protocol.
+                                                              (line   6)
+* anonymous authentication:              Anonymous authentication.
+                                                              (line   6)
+* API reference:                         API reference.       (line   6)
+* authentication methods:                Authentication methods.
+                                                              (line   6)
+* bad_record_mac:                        On Record Padding.   (line   6)
+* callback functions:                    Callback functions.  (line   6)
+* certificate authentication <1>:        Certificate authentication.
+                                                              (line   6)
+* certificate authentication:            More on certificate authentication.
+                                                              (line   6)
+* certificate requests:                  PKCS 10 certificate requests.
+                                                              (line   6)
+* certificate revocation lists:          PKIX certificate revocation lists.
+                                                              (line   6)
+* certificate status:                    OCSP certificate status checking.
+                                                              (line   6)
+* Certificate status request:            OCSP status request. (line   6)
+* Certificate verification:              Advanced certificate verification.
+                                                              (line   6)
+* certtool:                              certtool Invocation. (line   6)
+* certtool help:                         certtool Invocation. (line  18)
+* channel bindings:                      Channel Bindings.    (line   6)
+* ciphersuites:                          Supported ciphersuites.
+                                                              (line   6)
+* client certificate authentication:     Client Authentication.
+                                                              (line   6)
+* compression algorithms:                Compression algorithms used in the record layer.
+                                                              (line   6)
+* contributing:                          Contributing.        (line   7)
+* CRL:                                   PKIX certificate revocation lists.
+                                                              (line   6)
+* DANE <1>:                              Verifying a certificate using DANE.
+                                                              (line   6)
+* DANE:                                  Certificate verification.
+                                                              (line   6)
+* danetool:                              danetool Invocation. (line   6)
+* danetool help:                         danetool Invocation. (line  16)
+* digital signatures:                    Digital signatures.  (line   6)
+* DNSSEC <1>:                            Certificate verification.
+                                                              (line   6)
+* DNSSEC:                                Verifying a certificate using DANE.
+                                                              (line   6)
+* download:                              Downloading and installing.
+                                                              (line   6)
+* Encrypted keys:                        Managing encrypted keys.
+                                                              (line   6)
+* error codes:                           Error codes.         (line   6)
+* example programs:                      GnuTLS application examples.
+                                                              (line   6)
+* examples:                              GnuTLS application examples.
+                                                              (line   6)
+* exporting keying material:             Keying Material Exporters.
+                                                              (line   6)
+* FDL, GNU Free Documentation License:   Copying Information. (line   6)
+* generating parameters:                 Parameter generation.
+                                                              (line   6)
+* gnutls-cli:                            gnutls-cli Invocation.
+                                                              (line   6)
+* gnutls-cli help:                       gnutls-cli Invocation.
+                                                              (line  18)
+* gnutls-cli-debug:                      gnutls-cli-debug Invocation.
+                                                              (line   6)
+* gnutls-cli-debug help:                 gnutls-cli-debug Invocation.
+                                                              (line  21)
+* gnutls-serv:                           gnutls-serv Invocation.
+                                                              (line   6)
+* gnutls-serv help:                      gnutls-serv Invocation.
+                                                              (line  16)
+* hacking:                               Contributing.        (line   7)
+* handshake protocol:                    The TLS Handshake Protocol.
+                                                              (line   6)
+* hardware security modules:             Smart cards and HSMs.
+                                                              (line   6)
+* hardware tokens:                       Smart cards and HSMs.
+                                                              (line   6)
+* hash functions:                        Hash and HMAC functions.
+                                                              (line   6)
+* heartbeat:                             HeartBeat.           (line   6)
+* HMAC functions:                        Hash and HMAC functions.
+                                                              (line   6)
+* installation:                          Downloading and installing.
+                                                              (line   6)
+* internal architecture:                 Internal architecture of GnuTLS.
+                                                              (line   6)
+* Key pinning <1>:                       Certificate verification.
+                                                              (line   6)
+* Key pinning:                           Verifying a certificate using trust on first use authentication.
+                                                              (line   6)
+* key sizes:                             Selecting cryptographic key sizes.
+                                                              (line   6)
+* keying material exporters:             Keying Material Exporters.
+                                                              (line   6)
+* maximum fragment length:               Maximum fragment length negotiation.
+                                                              (line   6)
+* OCSP:                                  OCSP certificate status checking.
+                                                              (line   6)
+* OCSP Functions:                        OCSP API.            (line   6)
+* OCSP status request:                   OCSP status request. (line   6)
+* ocsptool:                              ocsptool Invocation. (line   6)
+* ocsptool help:                         ocsptool Invocation. (line  17)
+* Online Certificate Status Protocol:    OCSP certificate status checking.
+                                                              (line   6)
+* OpenPGP API:                           OpenPGP API.         (line   6)
+* OpenPGP certificates:                  OpenPGP certificates.
+                                                              (line   6)
+* OpenPGP server:                        Echo server with OpenPGP authentication.
+                                                              (line   6)
+* OpenSSL:                               Compatibility with the OpenSSL library.
+                                                              (line   6)
+* OpenSSL encrypted keys:                Managing encrypted keys.
+                                                              (line 249)
+* p11tool:                               p11tool Invocation.  (line   6)
+* p11tool help:                          p11tool Invocation.  (line  21)
+* parameter generation:                  Parameter generation.
+                                                              (line   6)
+* PCT:                                   On SSL 2 and older protocols.
+                                                              (line  38)
+* PKCS #10:                              PKCS 10 certificate requests.
+                                                              (line   6)
+* PKCS #11 tokens:                       Smart cards and HSMs.
+                                                              (line   6)
+* PKCS #12:                              Managing encrypted keys.
+                                                              (line 130)
+* PKCS #8:                               Managing encrypted keys.
+                                                              (line  85)
+* Priority strings:                      Priority Strings.    (line   6)
+* PSK authentication:                    Authentication using PSK.
+                                                              (line   6)
+* psktool:                               psktool Invocation.  (line   6)
+* psktool help:                          psktool Invocation.  (line  17)
+* public key algorithms:                 Public key algorithms.
+                                                              (line   6)
+* random numbers:                        Random number generation.
+                                                              (line   6)
+* record padding:                        On Record Padding.   (line   6)
+* record protocol:                       The TLS record protocol.
+                                                              (line   6)
+* renegotiation:                         Safe renegotiation.  (line   6)
+* reporting bugs:                        Bug Reports.         (line   6)
+* resuming sessions <1>:                 Session resumption.  (line   6)
+* resuming sessions:                     Resuming Sessions.   (line   6)
+* safe renegotiation:                    Safe renegotiation.  (line   6)
+* Secure RTP:                            SRTP.                (line   6)
+* server name indication:                Server name indication.
+                                                              (line   6)
+* session resumption <1>:                Resuming Sessions.   (line   6)
+* session resumption:                    Session resumption.  (line   6)
+* session tickets:                       Session tickets.     (line   6)
+* Smart card example:                    Client using a smart card with TLS.
+                                                              (line   6)
+* smart cards:                           Smart cards and HSMs.
+                                                              (line   6)
+* SRP authentication:                    Authentication using SRP.
+                                                              (line   6)
+* srptool:                               srptool Invocation.  (line   6)
+* srptool help:                          srptool Invocation.  (line  24)
+* SRTP:                                  SRTP.                (line   6)
+* SSH-style authentication <1>:          Verifying a certificate using trust on first use authentication.
+                                                              (line   6)
+* SSH-style authentication:              Certificate verification.
+                                                              (line   6)
+* SSL 2:                                 On SSL 2 and older protocols.
+                                                              (line   6)
+* symmetric algorithms:                  Symmetric algorithms.
+                                                              (line   6)
+* symmetric cryptography:                Symmetric algorithms.
+                                                              (line   6)
+* symmetric encryption algorithms:       Encryption algorithms used in the record layer.
+                                                              (line   6)
+* thread safety:                         Thread safety.       (line   6)
+* tickets:                               Session tickets.     (line   6)
+* TLS extensions <1>:                    TLS Extensions.      (line   6)
+* TLS extensions <2>:                    Session tickets.     (line   6)
+* TLS extensions <3>:                    Server name indication.
+                                                              (line   6)
+* TLS extensions <4>:                    HeartBeat.           (line   6)
+* TLS extensions:                        Maximum fragment length negotiation.
+                                                              (line   6)
+* TLS layers:                            TLS layers.          (line   6)
+* TPM:                                   Trusted Platform Module.
+                                                              (line   6)
+* tpmtool:                               tpmtool Invocation.  (line   6)
+* tpmtool help:                          tpmtool Invocation.  (line  16)
+* transport layer:                       The transport layer. (line   6)
+* transport protocol:                    The transport layer. (line   6)
+* Trust on first use <1>:                Certificate verification.
+                                                              (line   6)
+* Trust on first use:                    Verifying a certificate using trust on first use authentication.
+                                                              (line   6)
+* trusted platform module:               Trusted Platform Module.
+                                                              (line   6)
+* upgrading:                             Upgrading from previous versions.
+                                                              (line   6)
+* verifying certificate paths <1>:       Verifying a certificate using DANE.
+                                                              (line   6)
+* verifying certificate paths <2>:       Verifying a certificate using trust on first use authentication.
+                                                              (line   6)
+* verifying certificate paths <3>:       Verifying a certificate in the context of TLS session.
+                                                              (line   6)
+* verifying certificate paths:           Verifying X.509 certificate paths.
+                                                              (line   6)
+* X.509 certificates:                    X.509 certificates.  (line   6)
+* X.509 distinguished name:              X.509 distinguished names.
+                                                              (line   6)
+* X.509 Functions:                       X509 certificate API.
+                                                              (line   6)
+
 
diff --git a/doc/gnutls.info-5 b/doc/gnutls.info-5
deleted file mode 100644
index 0a537180a85cec905be23d21955f87ff29ee84d5..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 16644
zcmd5@ZExGi5x$QX{fREFUy_5RT29km)1rVQ+p&?@7EI-kqE{R!awRQHkt|;vtG~X_
z>@HuHT9QdYsV4-nO+FmX&fCt;j20V_GW=VIc^0G-5w4;W7AKLPd)#Ns9oxE(oUXDb
zo}?lQ*_+9ft&(V4Jd*KeF&T{(L}=@Vxf>9@z)drj$G)3^%o#h66A`ep)9GurijtDn
z>&bM2OVNtG5A(%G2Xtmpyi3G-ld+exS9s!dI+l-JC7d%ST4i6{gtMzC4?!FJoUohF
zoBZ+%GaejO58jE#C}p?qQxdI(8-`IF<w2B=MvOjlo@_-b7e-P@+>jW~BIbdQ6XuIF
zOT;qIICDe)4`6*8`C_$W8J4Rk_>q@yd5G19K2LCivkXL2S{42A{_Yc#%wK4rWSe~y
z9uHG~qKN#gg*%-<8VTODg9JgQlvJEA1Cef&PKc}_4@IOB%3s+Rk!@HQK{!utf@NpS
z;U38=J)z52Nfc(|Sp=oB1%J+P73))EaQmI>J=X6|7(15|DHatd?n%=k^n%<6V<M#W
zDjKPJ8G~Fz7U1R&-D3D*GP=3Dx*uQMJdB;o+2ZE@u2Oa&mI)TY(~+|{e^`u5<mKJs
z;UA+Pweh@VFO?O)n!I>HuUkNyX&faP`{?elP)Hz8M7D$MiQsNBy1ct+QnT=}OEbP@
z=l)iNWDZh)ZLD}a$+9R4DrTU8=uw1gR@|DrxOGDj=cHhHQLKcA-&0Znd*r)xf;Fk7
zj8mRGS!mVnPF^VAfz`p~2+xxm0WT2k&*P@~I4(eC=Hp|ZFY|RL5d|qp$p=_PD^4F<
zWTNj(UN~YK2b>`WjOPg-I~#bpKmGt=P*8E#YE5Ypw-C~IN<z-VoW*XMeu)xt=P0l%
z`*))&5%9M~EK}i+-9<jG&7#obaRwLi`SS@vMZ%$qt2~r`B$ajHW^Q@^Q~Z`KqL@Nh
z?ZMHH_0MSZ-S__#MDV-s{{=1I@-Tlp!Y}TUEX&JSwu^cCR>mgFf9C}ZW}={Q&6j})
zIlzB<MT7!aAVu&j^2iKZJ`02p2%DWt_*}y$%6nU$>A!4p5=P-}8|AR;9DxCm09K9&
z)Zpp71vV%z=kptu@D)!uRMTLfwk!h%$;ywpC}SyX%d<`7@9XQ_3LA7uOV|H3;U4V!
z*RAWduIWBx4-&=ZuJ0ob(Xxysd2SFa5%AecoA&;4NDi|-Skv?<!0A}lrSe%TY*6{M
zbHn~N{d*~|+X(3d(wcVo!MIBJzjMTFo4Ds6W)7R48eA3d1M>3}DHmnPH4MJyA8tN3
zm@%;jV=B$uEVqe>vHO`bH<(gb=54q~JMN%7)vZ>)M=PW>CGrx<lX-t)x?7zPwrb@t
zmaynQxrkN1vA{Zh(AAOktDTh=(fTQ1lvZj}X{@e9Y<PhEu<cXAEQF?irhUxYAXn!B
zTVl6_F6|b8sH9=<G)x9<GrWm-gX}sN$dB3?Von}Ysz?H_Jus}0WpZUG)V4Fu6wKU0
zhGit$#tB!a9yeG=NQyVxec{ZkFqWrfvX4ELHXxi;kY5kXVyF&Y(0zy2kZP5%V!v*<
z+r!6>=S%xMZh*Tuzq|Yju70NQu!97cYgkR5(lsJ7sLY9=u{V~|F@BlV_V0rQB;O7B
zR|KR2)*g^bM0Y?cVYYzuh60i=)*?f3BNgiqTN3=os=<prSTjw!xN~sCwLV;z^RbmL
zx$0H_ag-l@34_S>dt`K>VbVcxbQU2t-T;T8VR!z^&`WkP?F@7_Z{-PxdUs8%;D}Mf
z59*;jNl+c~a6E1212%M7!OEa$Mn(SY%JVkPiKuy5V!yIPU0HDB7zH0yx6)6dMo~A`
zZ~xucqYI*~!aX)SlnRh8p>g`LrCOYD8^>u>C+Oy_zR511Wd@N9E1Ro}k0(7vL=qd7
zKZ%<g)M^v(i;S|7nyq=rsdxoY>_X`rYqFTpytv1T2S8~^W$W4%%0r#%u3+`xei%kr
z*XD3YMpUj_y`iYJS^cRAJG@*JJ1x>VJUeGo+IaPQR3+3Z7<sV<JFsAglNOmAo|CDp
z@@-JBfg^W15P0cNk8ynR(+zq&-6g}KTzFl=4^lEj)z_E(9rO=WsUGc?JZSEA&elbZ
z(*s!5%&(o>VPkH|M;1MzOVcLiBk+-KddhNSan~+j)I7MpJ)c$hL8JDDL*`5FW^KZd
zrq8Yk_71Qr@o1DAO&(jR9b-*8VYF4H)oRrLN6Iq=T8~MH6Na038&oSiI%Mq2=f(!B
zw@~Y>fBWx7UWN>Z#Uc!QLQVHkB};NNrch#CiG-TMDSD|!d3;bit+Cv7m^sQh2H7Ky
zi~nhcuclHQ9#Fd!d6_&oP(~hagh$DzdVEj;fhxVKNNE`_vR2d7AV-27IJw=r&tjWz
zF;L*HWfMK%;X2!xtT1q4g|U#YqfDq|cgW0;s<=%anp(r(M=e0hmlfT|)-6f#gg#b1
z{+ee$ONrXHRtv0gpoqLww_`1`sV)_;dRAs~R3f_4aK=iQtwtl$qWe&`LhH`$$o>JE
zx3z}oarGASaQ=SIpc9*z3pw3auu64CFfI^YRe!UYfekij04ZLeMh#lmbm?s(J&vHJ
zQHtjd82srKj?-K4rNTCX#!>_{4I)Qn(4c1eX*9p|cu1j}|Ly0V^1xZ6IJ76cgBFp_
z&ZLvX)9F`KR+)wwUTeB-f#~+yPC{p=biymk5w()To@g+Dap=m#e73N>c2E0gsgo+t
zWXc@{H1&l#nw+;7>KO7`_P}Hp`1jM(9;S}gEY|!?F;Me=Jr-#`&U)l>P-mJd(^ahe
z)WZo9m_rtaf07M~c_OHjhnx{DvG$H>33C)o?lwlOnmZpF8M<|OW`h!WJ>`pdcF@hH
z939*9LgRvlbp<OmgVt5IA&OmuROv-dVyfi4qj$>YG_cu(4JsN;H~JXE4fE~NTFBJ`
zdZ@!{0d`nkR3A82BSuzpA$IzQk#s}3h^K9oih5K7KJc1q$BQ;b7<1eeM<2X~g-03w
zl<=aRfH_KA%BD2+E?;9*i=b&s28f<xjv>@F(kj`!Z=v;2z#I)Dat)3egzQIU{XA9&
zc&u6qCZTk1@m4|g%Sg`Va`v$3K6g0)RKihmYj7k7U|ER%1{#9CedZ8av%&_oAFZUC
z^sKV!*VaBEtGd2ITYBaLlbDa(nD5e(R6hzr8m8oJ*iTjXMEO8=60J+qlPqdya9LWG
zZB@=K2mXyWfAb#(R~7vh$I#0w**H-3m}Za7LylEC*8LOD4r_$P#B{f4_4sth{#hV;
zlKlc!KcW{7diI)<eR5%|JWLMzJ>7Ax$7#01)Oe?`e@n&5HkKRyT(4goY{Et!Vfqzu
zgu{*+Tu*mfw4@W{OkHUeb1bl7J*Ip?ts1-A6Vws;&;upt=vzdir&G+E$C=T~HVJoq
zMma#XFQC$$7j;;%c^iSdXFn<^_3umcjRt(12`xLwqkR(~*kuXREEyb`gc|Ny@N@jS
zbd#;KYL2~P>L|%glatqNoTw?&_Ee%t=#O?n{e49uB<E1u^-eOXV1+5-qN)4&?Vh*S
zrK^8mP+JQ_VRL+si$-qPt!z~f8jG@c`!%IH4eQvw3q;TEUBGO+_f!@c@FgYvojNJ&
zHbK$(tO0E_530MJXT5$xQV&LZ(aO|sDGk_X*&1Pvk_O1`EX+7A%veoaG-Y@UYtLhJ
zK55v$`Et|yJ{2(aHDpY(KMDGl88Rgq_6PMqnSRMmXszvnf_1hr!c1jdpC@ll|6)vQ
zOYpInsvA<plsP`GzNm{aQcMy&qcgvfK~bMFkH=`Wd9^XB4vx}74F_)|{KsRt+U2@g
z9(*)^&#DaTEB#|1hE2}c+!TVo)($_*)i=tiR?={}HrP=84VCh%xAgY3KQ}#!+S|jm
H`$zu;8U857

diff --git a/doc/latex/Makefile.in b/doc/latex/Makefile.in
index 456ae3f..ab535cf 100644
--- a/doc/latex/Makefile.in
+++ b/doc/latex/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -14,51 +14,23 @@
 
 @SET_MAKE@
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/doc/manpages/Makefile.in b/doc/manpages/Makefile.in
index 36611c7..548bb0a 100644
--- a/doc/manpages/Makefile.in
+++ b/doc/manpages/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/doc/reference/Makefile.in b/doc/reference/Makefile.in
index 7da22e9..b3c0c8f 100644
--- a/doc/reference/Makefile.in
+++ b/doc/reference/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -20,51 +20,23 @@
 # Everything below here is generic #
 ####################################
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/doc/scripts/Makefile.in b/doc/scripts/Makefile.in
index 768a63a..71eab66 100644
--- a/doc/scripts/Makefile.in
+++ b/doc/scripts/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -32,51 +32,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/extra/Makefile.in b/extra/Makefile.in
index 67df3cb..fb659f4 100644
--- a/extra/Makefile.in
+++ b/extra/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -37,51 +37,23 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1763,7 +1735,6 @@ clean-libLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libgnutls-openssl.la: $(libgnutls_openssl_la_OBJECTS) $(libgnutls_openssl_la_DEPENDENCIES) $(EXTRA_libgnutls_openssl_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libgnutls_openssl_la_LINK) $(am_libgnutls_openssl_la_rpath) $(libgnutls_openssl_la_OBJECTS) $(libgnutls_openssl_la_LIBADD) $(LIBS)
 
@@ -1831,12 +1802,13 @@ uninstall-defexecDATA:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/extra/includes/Makefile.in b/extra/includes/Makefile.in
index 24ef944..bace121 100644
--- a/extra/includes/Makefile.in
+++ b/extra/includes/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -36,51 +36,23 @@
 # 02110-1301, USA.
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/gl/Makefile.in b/gl/Makefile.in
index fe13879..68a3246 100644
--- a/gl/Makefile.in
+++ b/gl/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -40,51 +40,23 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1887,7 +1859,6 @@ unistr/u8-uctomb.lo: unistr/$(am__dirstamp) \
 	unistr/$(DEPDIR)/$(am__dirstamp)
 unistr/u8-uctomb-aux.lo: unistr/$(am__dirstamp) \
 	unistr/$(DEPDIR)/$(am__dirstamp)
-
 libgnu.la: $(libgnu_la_OBJECTS) $(libgnu_la_DEPENDENCIES) $(EXTRA_libgnu_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libgnu_la_LINK)  $(libgnu_la_OBJECTS) $(libgnu_la_LIBADD) $(LIBS)
 
@@ -2063,12 +2034,13 @@ clean-libtool:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/gl/tests/Makefile.in b/gl/tests/Makefile.in
index 93e1490..cb8c19a 100644
--- a/gl/tests/Makefile.in
+++ b/gl/tests/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -39,51 +39,23 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -2875,7 +2847,6 @@ glthread/$(DEPDIR)/$(am__dirstamp):
 	@: > glthread/$(DEPDIR)/$(am__dirstamp)
 glthread/lock.$(OBJEXT): glthread/$(am__dirstamp) \
 	glthread/$(DEPDIR)/$(am__dirstamp)
-
 libtests.a: $(libtests_a_OBJECTS) $(libtests_a_DEPENDENCIES) $(EXTRA_libtests_a_DEPENDENCIES) 
 	$(AM_V_at)-rm -f libtests.a
 	$(AM_V_AR)$(libtests_a_AR) libtests.a $(libtests_a_OBJECTS) $(libtests_a_LIBADD)
@@ -2898,479 +2869,360 @@ clean-noinstPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 test-accept$(EXEEXT): $(test_accept_OBJECTS) $(test_accept_DEPENDENCIES) $(EXTRA_test_accept_DEPENDENCIES) 
 	@rm -f test-accept$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_accept_OBJECTS) $(test_accept_LDADD) $(LIBS)
-
 test-alloca-opt$(EXEEXT): $(test_alloca_opt_OBJECTS) $(test_alloca_opt_DEPENDENCIES) $(EXTRA_test_alloca_opt_DEPENDENCIES) 
 	@rm -f test-alloca-opt$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_alloca_opt_OBJECTS) $(test_alloca_opt_LDADD) $(LIBS)
-
 test-argp$(EXEEXT): $(test_argp_OBJECTS) $(test_argp_DEPENDENCIES) $(EXTRA_test_argp_DEPENDENCIES) 
 	@rm -f test-argp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_argp_OBJECTS) $(test_argp_LDADD) $(LIBS)
-
 test-arpa_inet$(EXEEXT): $(test_arpa_inet_OBJECTS) $(test_arpa_inet_DEPENDENCIES) $(EXTRA_test_arpa_inet_DEPENDENCIES) 
 	@rm -f test-arpa_inet$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_arpa_inet_OBJECTS) $(test_arpa_inet_LDADD) $(LIBS)
-
 test-base64$(EXEEXT): $(test_base64_OBJECTS) $(test_base64_DEPENDENCIES) $(EXTRA_test_base64_DEPENDENCIES) 
 	@rm -f test-base64$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_base64_OBJECTS) $(test_base64_LDADD) $(LIBS)
-
 test-binary-io$(EXEEXT): $(test_binary_io_OBJECTS) $(test_binary_io_DEPENDENCIES) $(EXTRA_test_binary_io_DEPENDENCIES) 
 	@rm -f test-binary-io$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_binary_io_OBJECTS) $(test_binary_io_LDADD) $(LIBS)
-
 test-bind$(EXEEXT): $(test_bind_OBJECTS) $(test_bind_DEPENDENCIES) $(EXTRA_test_bind_DEPENDENCIES) 
 	@rm -f test-bind$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_bind_OBJECTS) $(test_bind_LDADD) $(LIBS)
-
 test-byteswap$(EXEEXT): $(test_byteswap_OBJECTS) $(test_byteswap_DEPENDENCIES) $(EXTRA_test_byteswap_DEPENDENCIES) 
 	@rm -f test-byteswap$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_byteswap_OBJECTS) $(test_byteswap_LDADD) $(LIBS)
-
 test-c-ctype$(EXEEXT): $(test_c_ctype_OBJECTS) $(test_c_ctype_DEPENDENCIES) $(EXTRA_test_c_ctype_DEPENDENCIES) 
 	@rm -f test-c-ctype$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_c_ctype_OBJECTS) $(test_c_ctype_LDADD) $(LIBS)
-
 test-c-strcasecmp$(EXEEXT): $(test_c_strcasecmp_OBJECTS) $(test_c_strcasecmp_DEPENDENCIES) $(EXTRA_test_c_strcasecmp_DEPENDENCIES) 
 	@rm -f test-c-strcasecmp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_c_strcasecmp_OBJECTS) $(test_c_strcasecmp_LDADD) $(LIBS)
-
 test-c-strncasecmp$(EXEEXT): $(test_c_strncasecmp_OBJECTS) $(test_c_strncasecmp_DEPENDENCIES) $(EXTRA_test_c_strncasecmp_DEPENDENCIES) 
 	@rm -f test-c-strncasecmp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_c_strncasecmp_OBJECTS) $(test_c_strncasecmp_LDADD) $(LIBS)
-
 test-close$(EXEEXT): $(test_close_OBJECTS) $(test_close_DEPENDENCIES) $(EXTRA_test_close_DEPENDENCIES) 
 	@rm -f test-close$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_close_OBJECTS) $(test_close_LDADD) $(LIBS)
-
 test-connect$(EXEEXT): $(test_connect_OBJECTS) $(test_connect_DEPENDENCIES) $(EXTRA_test_connect_DEPENDENCIES) 
 	@rm -f test-connect$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_connect_OBJECTS) $(test_connect_LDADD) $(LIBS)
-
 test-dirent$(EXEEXT): $(test_dirent_OBJECTS) $(test_dirent_DEPENDENCIES) $(EXTRA_test_dirent_DEPENDENCIES) 
 	@rm -f test-dirent$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_dirent_OBJECTS) $(test_dirent_LDADD) $(LIBS)
-
 test-dup2$(EXEEXT): $(test_dup2_OBJECTS) $(test_dup2_DEPENDENCIES) $(EXTRA_test_dup2_DEPENDENCIES) 
 	@rm -f test-dup2$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_dup2_OBJECTS) $(test_dup2_LDADD) $(LIBS)
-
 test-environ$(EXEEXT): $(test_environ_OBJECTS) $(test_environ_DEPENDENCIES) $(EXTRA_test_environ_DEPENDENCIES) 
 	@rm -f test-environ$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_environ_OBJECTS) $(test_environ_LDADD) $(LIBS)
-
 test-errno$(EXEEXT): $(test_errno_OBJECTS) $(test_errno_DEPENDENCIES) $(EXTRA_test_errno_DEPENDENCIES) 
 	@rm -f test-errno$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_errno_OBJECTS) $(test_errno_LDADD) $(LIBS)
-
 test-fcntl-h$(EXEEXT): $(test_fcntl_h_OBJECTS) $(test_fcntl_h_DEPENDENCIES) $(EXTRA_test_fcntl_h_DEPENDENCIES) 
 	@rm -f test-fcntl-h$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fcntl_h_OBJECTS) $(test_fcntl_h_LDADD) $(LIBS)
-
 test-fdopen$(EXEEXT): $(test_fdopen_OBJECTS) $(test_fdopen_DEPENDENCIES) $(EXTRA_test_fdopen_DEPENDENCIES) 
 	@rm -f test-fdopen$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fdopen_OBJECTS) $(test_fdopen_LDADD) $(LIBS)
-
 test-fgetc$(EXEEXT): $(test_fgetc_OBJECTS) $(test_fgetc_DEPENDENCIES) $(EXTRA_test_fgetc_DEPENDENCIES) 
 	@rm -f test-fgetc$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fgetc_OBJECTS) $(test_fgetc_LDADD) $(LIBS)
-
 test-float$(EXEEXT): $(test_float_OBJECTS) $(test_float_DEPENDENCIES) $(EXTRA_test_float_DEPENDENCIES) 
 	@rm -f test-float$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_float_OBJECTS) $(test_float_LDADD) $(LIBS)
-
 test-fputc$(EXEEXT): $(test_fputc_OBJECTS) $(test_fputc_DEPENDENCIES) $(EXTRA_test_fputc_DEPENDENCIES) 
 	@rm -f test-fputc$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fputc_OBJECTS) $(test_fputc_LDADD) $(LIBS)
-
 test-fread$(EXEEXT): $(test_fread_OBJECTS) $(test_fread_DEPENDENCIES) $(EXTRA_test_fread_DEPENDENCIES) 
 	@rm -f test-fread$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fread_OBJECTS) $(test_fread_LDADD) $(LIBS)
-
 test-frexp-nolibm$(EXEEXT): $(test_frexp_nolibm_OBJECTS) $(test_frexp_nolibm_DEPENDENCIES) $(EXTRA_test_frexp_nolibm_DEPENDENCIES) 
 	@rm -f test-frexp-nolibm$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_frexp_nolibm_OBJECTS) $(test_frexp_nolibm_LDADD) $(LIBS)
-
 test-frexpl-nolibm$(EXEEXT): $(test_frexpl_nolibm_OBJECTS) $(test_frexpl_nolibm_DEPENDENCIES) $(EXTRA_test_frexpl_nolibm_DEPENDENCIES) 
 	@rm -f test-frexpl-nolibm$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_frexpl_nolibm_OBJECTS) $(test_frexpl_nolibm_LDADD) $(LIBS)
-
 test-fseek$(EXEEXT): $(test_fseek_OBJECTS) $(test_fseek_DEPENDENCIES) $(EXTRA_test_fseek_DEPENDENCIES) 
 	@rm -f test-fseek$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fseek_OBJECTS) $(test_fseek_LDADD) $(LIBS)
-
 test-fseeko$(EXEEXT): $(test_fseeko_OBJECTS) $(test_fseeko_DEPENDENCIES) $(EXTRA_test_fseeko_DEPENDENCIES) 
 	@rm -f test-fseeko$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fseeko_OBJECTS) $(test_fseeko_LDADD) $(LIBS)
-
 test-fseeko3$(EXEEXT): $(test_fseeko3_OBJECTS) $(test_fseeko3_DEPENDENCIES) $(EXTRA_test_fseeko3_DEPENDENCIES) 
 	@rm -f test-fseeko3$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fseeko3_OBJECTS) $(test_fseeko3_LDADD) $(LIBS)
-
 test-fseeko4$(EXEEXT): $(test_fseeko4_OBJECTS) $(test_fseeko4_DEPENDENCIES) $(EXTRA_test_fseeko4_DEPENDENCIES) 
 	@rm -f test-fseeko4$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fseeko4_OBJECTS) $(test_fseeko4_LDADD) $(LIBS)
-
 test-fseterr$(EXEEXT): $(test_fseterr_OBJECTS) $(test_fseterr_DEPENDENCIES) $(EXTRA_test_fseterr_DEPENDENCIES) 
 	@rm -f test-fseterr$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fseterr_OBJECTS) $(test_fseterr_LDADD) $(LIBS)
-
 test-fstat$(EXEEXT): $(test_fstat_OBJECTS) $(test_fstat_DEPENDENCIES) $(EXTRA_test_fstat_DEPENDENCIES) 
 	@rm -f test-fstat$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fstat_OBJECTS) $(test_fstat_LDADD) $(LIBS)
-
 test-ftell$(EXEEXT): $(test_ftell_OBJECTS) $(test_ftell_DEPENDENCIES) $(EXTRA_test_ftell_DEPENDENCIES) 
 	@rm -f test-ftell$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_ftell_OBJECTS) $(test_ftell_LDADD) $(LIBS)
-
 test-ftell3$(EXEEXT): $(test_ftell3_OBJECTS) $(test_ftell3_DEPENDENCIES) $(EXTRA_test_ftell3_DEPENDENCIES) 
 	@rm -f test-ftell3$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_ftell3_OBJECTS) $(test_ftell3_LDADD) $(LIBS)
-
 test-ftello$(EXEEXT): $(test_ftello_OBJECTS) $(test_ftello_DEPENDENCIES) $(EXTRA_test_ftello_DEPENDENCIES) 
 	@rm -f test-ftello$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_ftello_OBJECTS) $(test_ftello_LDADD) $(LIBS)
-
 test-ftello3$(EXEEXT): $(test_ftello3_OBJECTS) $(test_ftello3_DEPENDENCIES) $(EXTRA_test_ftello3_DEPENDENCIES) 
 	@rm -f test-ftello3$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_ftello3_OBJECTS) $(test_ftello3_LDADD) $(LIBS)
-
 test-ftello4$(EXEEXT): $(test_ftello4_OBJECTS) $(test_ftello4_DEPENDENCIES) $(EXTRA_test_ftello4_DEPENDENCIES) 
 	@rm -f test-ftello4$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_ftello4_OBJECTS) $(test_ftello4_LDADD) $(LIBS)
-
 test-ftruncate$(EXEEXT): $(test_ftruncate_OBJECTS) $(test_ftruncate_DEPENDENCIES) $(EXTRA_test_ftruncate_DEPENDENCIES) 
 	@rm -f test-ftruncate$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_ftruncate_OBJECTS) $(test_ftruncate_LDADD) $(LIBS)
-
 test-func$(EXEEXT): $(test_func_OBJECTS) $(test_func_DEPENDENCIES) $(EXTRA_test_func_DEPENDENCIES) 
 	@rm -f test-func$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_func_OBJECTS) $(test_func_LDADD) $(LIBS)
-
 test-fwrite$(EXEEXT): $(test_fwrite_OBJECTS) $(test_fwrite_DEPENDENCIES) $(EXTRA_test_fwrite_DEPENDENCIES) 
 	@rm -f test-fwrite$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_fwrite_OBJECTS) $(test_fwrite_LDADD) $(LIBS)
-
 test-getaddrinfo$(EXEEXT): $(test_getaddrinfo_OBJECTS) $(test_getaddrinfo_DEPENDENCIES) $(EXTRA_test_getaddrinfo_DEPENDENCIES) 
 	@rm -f test-getaddrinfo$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_getaddrinfo_OBJECTS) $(test_getaddrinfo_LDADD) $(LIBS)
-
 test-getcwd-lgpl$(EXEEXT): $(test_getcwd_lgpl_OBJECTS) $(test_getcwd_lgpl_DEPENDENCIES) $(EXTRA_test_getcwd_lgpl_DEPENDENCIES) 
 	@rm -f test-getcwd-lgpl$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_getcwd_lgpl_OBJECTS) $(test_getcwd_lgpl_LDADD) $(LIBS)
-
 test-getdelim$(EXEEXT): $(test_getdelim_OBJECTS) $(test_getdelim_DEPENDENCIES) $(EXTRA_test_getdelim_DEPENDENCIES) 
 	@rm -f test-getdelim$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_getdelim_OBJECTS) $(test_getdelim_LDADD) $(LIBS)
-
 test-getline$(EXEEXT): $(test_getline_OBJECTS) $(test_getline_DEPENDENCIES) $(EXTRA_test_getline_DEPENDENCIES) 
 	@rm -f test-getline$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_getline_OBJECTS) $(test_getline_LDADD) $(LIBS)
-
 test-getopt$(EXEEXT): $(test_getopt_OBJECTS) $(test_getopt_DEPENDENCIES) $(EXTRA_test_getopt_DEPENDENCIES) 
 	@rm -f test-getopt$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_getopt_OBJECTS) $(test_getopt_LDADD) $(LIBS)
-
 test-getpeername$(EXEEXT): $(test_getpeername_OBJECTS) $(test_getpeername_DEPENDENCIES) $(EXTRA_test_getpeername_DEPENDENCIES) 
 	@rm -f test-getpeername$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_getpeername_OBJECTS) $(test_getpeername_LDADD) $(LIBS)
-
 test-gettimeofday$(EXEEXT): $(test_gettimeofday_OBJECTS) $(test_gettimeofday_DEPENDENCIES) $(EXTRA_test_gettimeofday_DEPENDENCIES) 
 	@rm -f test-gettimeofday$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_gettimeofday_OBJECTS) $(test_gettimeofday_LDADD) $(LIBS)
-
 test-iconv$(EXEEXT): $(test_iconv_OBJECTS) $(test_iconv_DEPENDENCIES) $(EXTRA_test_iconv_DEPENDENCIES) 
 	@rm -f test-iconv$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_iconv_OBJECTS) $(test_iconv_LDADD) $(LIBS)
-
 test-iconv-h$(EXEEXT): $(test_iconv_h_OBJECTS) $(test_iconv_h_DEPENDENCIES) $(EXTRA_test_iconv_h_DEPENDENCIES) 
 	@rm -f test-iconv-h$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_iconv_h_OBJECTS) $(test_iconv_h_LDADD) $(LIBS)
-
 test-iconv-utf$(EXEEXT): $(test_iconv_utf_OBJECTS) $(test_iconv_utf_DEPENDENCIES) $(EXTRA_test_iconv_utf_DEPENDENCIES) 
 	@rm -f test-iconv-utf$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_iconv_utf_OBJECTS) $(test_iconv_utf_LDADD) $(LIBS)
-
 test-ignore-value$(EXEEXT): $(test_ignore_value_OBJECTS) $(test_ignore_value_DEPENDENCIES) $(EXTRA_test_ignore_value_DEPENDENCIES) 
 	@rm -f test-ignore-value$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_ignore_value_OBJECTS) $(test_ignore_value_LDADD) $(LIBS)
-
 test-inet_ntop$(EXEEXT): $(test_inet_ntop_OBJECTS) $(test_inet_ntop_DEPENDENCIES) $(EXTRA_test_inet_ntop_DEPENDENCIES) 
 	@rm -f test-inet_ntop$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_inet_ntop_OBJECTS) $(test_inet_ntop_LDADD) $(LIBS)
-
 test-inet_pton$(EXEEXT): $(test_inet_pton_OBJECTS) $(test_inet_pton_DEPENDENCIES) $(EXTRA_test_inet_pton_DEPENDENCIES) 
 	@rm -f test-inet_pton$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_inet_pton_OBJECTS) $(test_inet_pton_LDADD) $(LIBS)
-
 test-intprops$(EXEEXT): $(test_intprops_OBJECTS) $(test_intprops_DEPENDENCIES) $(EXTRA_test_intprops_DEPENDENCIES) 
 	@rm -f test-intprops$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_intprops_OBJECTS) $(test_intprops_LDADD) $(LIBS)
-
 test-inttypes$(EXEEXT): $(test_inttypes_OBJECTS) $(test_inttypes_DEPENDENCIES) $(EXTRA_test_inttypes_DEPENDENCIES) 
 	@rm -f test-inttypes$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_inttypes_OBJECTS) $(test_inttypes_LDADD) $(LIBS)
-
 test-ioctl$(EXEEXT): $(test_ioctl_OBJECTS) $(test_ioctl_DEPENDENCIES) $(EXTRA_test_ioctl_DEPENDENCIES) 
 	@rm -f test-ioctl$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_ioctl_OBJECTS) $(test_ioctl_LDADD) $(LIBS)
-
 test-isnand-nolibm$(EXEEXT): $(test_isnand_nolibm_OBJECTS) $(test_isnand_nolibm_DEPENDENCIES) $(EXTRA_test_isnand_nolibm_DEPENDENCIES) 
 	@rm -f test-isnand-nolibm$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_isnand_nolibm_OBJECTS) $(test_isnand_nolibm_LDADD) $(LIBS)
-
 test-isnanf-nolibm$(EXEEXT): $(test_isnanf_nolibm_OBJECTS) $(test_isnanf_nolibm_DEPENDENCIES) $(EXTRA_test_isnanf_nolibm_DEPENDENCIES) 
 	@rm -f test-isnanf-nolibm$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_isnanf_nolibm_OBJECTS) $(test_isnanf_nolibm_LDADD) $(LIBS)
-
 test-isnanl-nolibm$(EXEEXT): $(test_isnanl_nolibm_OBJECTS) $(test_isnanl_nolibm_DEPENDENCIES) $(EXTRA_test_isnanl_nolibm_DEPENDENCIES) 
 	@rm -f test-isnanl-nolibm$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_isnanl_nolibm_OBJECTS) $(test_isnanl_nolibm_LDADD) $(LIBS)
-
 test-listen$(EXEEXT): $(test_listen_OBJECTS) $(test_listen_DEPENDENCIES) $(EXTRA_test_listen_DEPENDENCIES) 
 	@rm -f test-listen$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_listen_OBJECTS) $(test_listen_LDADD) $(LIBS)
-
 test-locale$(EXEEXT): $(test_locale_OBJECTS) $(test_locale_DEPENDENCIES) $(EXTRA_test_locale_DEPENDENCIES) 
 	@rm -f test-locale$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_locale_OBJECTS) $(test_locale_LDADD) $(LIBS)
-
 test-localename$(EXEEXT): $(test_localename_OBJECTS) $(test_localename_DEPENDENCIES) $(EXTRA_test_localename_DEPENDENCIES) 
 	@rm -f test-localename$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_localename_OBJECTS) $(test_localename_LDADD) $(LIBS)
-
 test-lstat$(EXEEXT): $(test_lstat_OBJECTS) $(test_lstat_DEPENDENCIES) $(EXTRA_test_lstat_DEPENDENCIES) 
 	@rm -f test-lstat$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_lstat_OBJECTS) $(test_lstat_LDADD) $(LIBS)
-
 test-malloc-gnu$(EXEEXT): $(test_malloc_gnu_OBJECTS) $(test_malloc_gnu_DEPENDENCIES) $(EXTRA_test_malloc_gnu_DEPENDENCIES) 
 	@rm -f test-malloc-gnu$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_malloc_gnu_OBJECTS) $(test_malloc_gnu_LDADD) $(LIBS)
-
 test-malloca$(EXEEXT): $(test_malloca_OBJECTS) $(test_malloca_DEPENDENCIES) $(EXTRA_test_malloca_DEPENDENCIES) 
 	@rm -f test-malloca$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_malloca_OBJECTS) $(test_malloca_LDADD) $(LIBS)
-
 test-math$(EXEEXT): $(test_math_OBJECTS) $(test_math_DEPENDENCIES) $(EXTRA_test_math_DEPENDENCIES) 
 	@rm -f test-math$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_math_OBJECTS) $(test_math_LDADD) $(LIBS)
-
 test-memchr$(EXEEXT): $(test_memchr_OBJECTS) $(test_memchr_DEPENDENCIES) $(EXTRA_test_memchr_DEPENDENCIES) 
 	@rm -f test-memchr$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_memchr_OBJECTS) $(test_memchr_LDADD) $(LIBS)
-
 test-netdb$(EXEEXT): $(test_netdb_OBJECTS) $(test_netdb_DEPENDENCIES) $(EXTRA_test_netdb_DEPENDENCIES) 
 	@rm -f test-netdb$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_netdb_OBJECTS) $(test_netdb_LDADD) $(LIBS)
-
 test-netinet_in$(EXEEXT): $(test_netinet_in_OBJECTS) $(test_netinet_in_DEPENDENCIES) $(EXTRA_test_netinet_in_DEPENDENCIES) 
 	@rm -f test-netinet_in$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_netinet_in_OBJECTS) $(test_netinet_in_LDADD) $(LIBS)
-
 test-open$(EXEEXT): $(test_open_OBJECTS) $(test_open_DEPENDENCIES) $(EXTRA_test_open_DEPENDENCIES) 
 	@rm -f test-open$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_open_OBJECTS) $(test_open_LDADD) $(LIBS)
-
 test-pathmax$(EXEEXT): $(test_pathmax_OBJECTS) $(test_pathmax_DEPENDENCIES) $(EXTRA_test_pathmax_DEPENDENCIES) 
 	@rm -f test-pathmax$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_pathmax_OBJECTS) $(test_pathmax_LDADD) $(LIBS)
-
 test-perror$(EXEEXT): $(test_perror_OBJECTS) $(test_perror_DEPENDENCIES) $(EXTRA_test_perror_DEPENDENCIES) 
 	@rm -f test-perror$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_perror_OBJECTS) $(test_perror_LDADD) $(LIBS)
-
 test-perror2$(EXEEXT): $(test_perror2_OBJECTS) $(test_perror2_DEPENDENCIES) $(EXTRA_test_perror2_DEPENDENCIES) 
 	@rm -f test-perror2$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_perror2_OBJECTS) $(test_perror2_LDADD) $(LIBS)
-
 test-pipe$(EXEEXT): $(test_pipe_OBJECTS) $(test_pipe_DEPENDENCIES) $(EXTRA_test_pipe_DEPENDENCIES) 
 	@rm -f test-pipe$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_pipe_OBJECTS) $(test_pipe_LDADD) $(LIBS)
-
 test-printf-frexp$(EXEEXT): $(test_printf_frexp_OBJECTS) $(test_printf_frexp_DEPENDENCIES) $(EXTRA_test_printf_frexp_DEPENDENCIES) 
 	@rm -f test-printf-frexp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_printf_frexp_OBJECTS) $(test_printf_frexp_LDADD) $(LIBS)
-
 test-printf-frexpl$(EXEEXT): $(test_printf_frexpl_OBJECTS) $(test_printf_frexpl_DEPENDENCIES) $(EXTRA_test_printf_frexpl_DEPENDENCIES) 
 	@rm -f test-printf-frexpl$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_printf_frexpl_OBJECTS) $(test_printf_frexpl_LDADD) $(LIBS)
-
 test-rawmemchr$(EXEEXT): $(test_rawmemchr_OBJECTS) $(test_rawmemchr_DEPENDENCIES) $(EXTRA_test_rawmemchr_DEPENDENCIES) 
 	@rm -f test-rawmemchr$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_rawmemchr_OBJECTS) $(test_rawmemchr_LDADD) $(LIBS)
-
 test-read-file$(EXEEXT): $(test_read_file_OBJECTS) $(test_read_file_DEPENDENCIES) $(EXTRA_test_read_file_DEPENDENCIES) 
 	@rm -f test-read-file$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_read_file_OBJECTS) $(test_read_file_LDADD) $(LIBS)
-
 test-recv$(EXEEXT): $(test_recv_OBJECTS) $(test_recv_DEPENDENCIES) $(EXTRA_test_recv_DEPENDENCIES) 
 	@rm -f test-recv$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_recv_OBJECTS) $(test_recv_LDADD) $(LIBS)
-
 test-recvfrom$(EXEEXT): $(test_recvfrom_OBJECTS) $(test_recvfrom_DEPENDENCIES) $(EXTRA_test_recvfrom_DEPENDENCIES) 
 	@rm -f test-recvfrom$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_recvfrom_OBJECTS) $(test_recvfrom_LDADD) $(LIBS)
-
 test-select$(EXEEXT): $(test_select_OBJECTS) $(test_select_DEPENDENCIES) $(EXTRA_test_select_DEPENDENCIES) 
 	@rm -f test-select$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_select_OBJECTS) $(test_select_LDADD) $(LIBS)
-
 test-select-fd$(EXEEXT): $(test_select_fd_OBJECTS) $(test_select_fd_DEPENDENCIES) $(EXTRA_test_select_fd_DEPENDENCIES) 
 	@rm -f test-select-fd$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_select_fd_OBJECTS) $(test_select_fd_LDADD) $(LIBS)
-
 test-select-stdin$(EXEEXT): $(test_select_stdin_OBJECTS) $(test_select_stdin_DEPENDENCIES) $(EXTRA_test_select_stdin_DEPENDENCIES) 
 	@rm -f test-select-stdin$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_select_stdin_OBJECTS) $(test_select_stdin_LDADD) $(LIBS)
-
 test-send$(EXEEXT): $(test_send_OBJECTS) $(test_send_DEPENDENCIES) $(EXTRA_test_send_DEPENDENCIES) 
 	@rm -f test-send$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_send_OBJECTS) $(test_send_LDADD) $(LIBS)
-
 test-sendto$(EXEEXT): $(test_sendto_OBJECTS) $(test_sendto_DEPENDENCIES) $(EXTRA_test_sendto_DEPENDENCIES) 
 	@rm -f test-sendto$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sendto_OBJECTS) $(test_sendto_LDADD) $(LIBS)
-
 test-setenv$(EXEEXT): $(test_setenv_OBJECTS) $(test_setenv_DEPENDENCIES) $(EXTRA_test_setenv_DEPENDENCIES) 
 	@rm -f test-setenv$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_setenv_OBJECTS) $(test_setenv_LDADD) $(LIBS)
-
 test-setlocale1$(EXEEXT): $(test_setlocale1_OBJECTS) $(test_setlocale1_DEPENDENCIES) $(EXTRA_test_setlocale1_DEPENDENCIES) 
 	@rm -f test-setlocale1$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_setlocale1_OBJECTS) $(test_setlocale1_LDADD) $(LIBS)
-
 test-setlocale2$(EXEEXT): $(test_setlocale2_OBJECTS) $(test_setlocale2_DEPENDENCIES) $(EXTRA_test_setlocale2_DEPENDENCIES) 
 	@rm -f test-setlocale2$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_setlocale2_OBJECTS) $(test_setlocale2_LDADD) $(LIBS)
-
 test-setsockopt$(EXEEXT): $(test_setsockopt_OBJECTS) $(test_setsockopt_DEPENDENCIES) $(EXTRA_test_setsockopt_DEPENDENCIES) 
 	@rm -f test-setsockopt$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_setsockopt_OBJECTS) $(test_setsockopt_LDADD) $(LIBS)
-
 test-shutdown$(EXEEXT): $(test_shutdown_OBJECTS) $(test_shutdown_DEPENDENCIES) $(EXTRA_test_shutdown_DEPENDENCIES) 
 	@rm -f test-shutdown$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_shutdown_OBJECTS) $(test_shutdown_LDADD) $(LIBS)
-
 test-signal-h$(EXEEXT): $(test_signal_h_OBJECTS) $(test_signal_h_DEPENDENCIES) $(EXTRA_test_signal_h_DEPENDENCIES) 
 	@rm -f test-signal-h$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_signal_h_OBJECTS) $(test_signal_h_LDADD) $(LIBS)
-
 test-signbit$(EXEEXT): $(test_signbit_OBJECTS) $(test_signbit_DEPENDENCIES) $(EXTRA_test_signbit_DEPENDENCIES) 
 	@rm -f test-signbit$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_signbit_OBJECTS) $(test_signbit_LDADD) $(LIBS)
-
 test-sleep$(EXEEXT): $(test_sleep_OBJECTS) $(test_sleep_DEPENDENCIES) $(EXTRA_test_sleep_DEPENDENCIES) 
 	@rm -f test-sleep$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sleep_OBJECTS) $(test_sleep_LDADD) $(LIBS)
-
 test-snprintf$(EXEEXT): $(test_snprintf_OBJECTS) $(test_snprintf_DEPENDENCIES) $(EXTRA_test_snprintf_DEPENDENCIES) 
 	@rm -f test-snprintf$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_snprintf_OBJECTS) $(test_snprintf_LDADD) $(LIBS)
-
 test-sockets$(EXEEXT): $(test_sockets_OBJECTS) $(test_sockets_DEPENDENCIES) $(EXTRA_test_sockets_DEPENDENCIES) 
 	@rm -f test-sockets$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sockets_OBJECTS) $(test_sockets_LDADD) $(LIBS)
-
 test-stat$(EXEEXT): $(test_stat_OBJECTS) $(test_stat_DEPENDENCIES) $(EXTRA_test_stat_DEPENDENCIES) 
 	@rm -f test-stat$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_stat_OBJECTS) $(test_stat_LDADD) $(LIBS)
-
 test-stdalign$(EXEEXT): $(test_stdalign_OBJECTS) $(test_stdalign_DEPENDENCIES) $(EXTRA_test_stdalign_DEPENDENCIES) 
 	@rm -f test-stdalign$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_stdalign_OBJECTS) $(test_stdalign_LDADD) $(LIBS)
-
 test-stdbool$(EXEEXT): $(test_stdbool_OBJECTS) $(test_stdbool_DEPENDENCIES) $(EXTRA_test_stdbool_DEPENDENCIES) 
 	@rm -f test-stdbool$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_stdbool_OBJECTS) $(test_stdbool_LDADD) $(LIBS)
-
 test-stddef$(EXEEXT): $(test_stddef_OBJECTS) $(test_stddef_DEPENDENCIES) $(EXTRA_test_stddef_DEPENDENCIES) 
 	@rm -f test-stddef$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_stddef_OBJECTS) $(test_stddef_LDADD) $(LIBS)
-
 test-stdint$(EXEEXT): $(test_stdint_OBJECTS) $(test_stdint_DEPENDENCIES) $(EXTRA_test_stdint_DEPENDENCIES) 
 	@rm -f test-stdint$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_stdint_OBJECTS) $(test_stdint_LDADD) $(LIBS)
-
 test-stdio$(EXEEXT): $(test_stdio_OBJECTS) $(test_stdio_DEPENDENCIES) $(EXTRA_test_stdio_DEPENDENCIES) 
 	@rm -f test-stdio$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_stdio_OBJECTS) $(test_stdio_LDADD) $(LIBS)
-
 test-stdlib$(EXEEXT): $(test_stdlib_OBJECTS) $(test_stdlib_DEPENDENCIES) $(EXTRA_test_stdlib_DEPENDENCIES) 
 	@rm -f test-stdlib$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_stdlib_OBJECTS) $(test_stdlib_LDADD) $(LIBS)
-
 test-strchrnul$(EXEEXT): $(test_strchrnul_OBJECTS) $(test_strchrnul_DEPENDENCIES) $(EXTRA_test_strchrnul_DEPENDENCIES) 
 	@rm -f test-strchrnul$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_strchrnul_OBJECTS) $(test_strchrnul_LDADD) $(LIBS)
-
 test-strerror$(EXEEXT): $(test_strerror_OBJECTS) $(test_strerror_DEPENDENCIES) $(EXTRA_test_strerror_DEPENDENCIES) 
 	@rm -f test-strerror$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_strerror_OBJECTS) $(test_strerror_LDADD) $(LIBS)
-
 test-strerror_r$(EXEEXT): $(test_strerror_r_OBJECTS) $(test_strerror_r_DEPENDENCIES) $(EXTRA_test_strerror_r_DEPENDENCIES) 
 	@rm -f test-strerror_r$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_strerror_r_OBJECTS) $(test_strerror_r_LDADD) $(LIBS)
-
 test-string$(EXEEXT): $(test_string_OBJECTS) $(test_string_DEPENDENCIES) $(EXTRA_test_string_DEPENDENCIES) 
 	@rm -f test-string$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_string_OBJECTS) $(test_string_LDADD) $(LIBS)
-
 test-strings$(EXEEXT): $(test_strings_OBJECTS) $(test_strings_DEPENDENCIES) $(EXTRA_test_strings_DEPENDENCIES) 
 	@rm -f test-strings$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_strings_OBJECTS) $(test_strings_LDADD) $(LIBS)
-
 test-strnlen$(EXEEXT): $(test_strnlen_OBJECTS) $(test_strnlen_DEPENDENCIES) $(EXTRA_test_strnlen_DEPENDENCIES) 
 	@rm -f test-strnlen$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_strnlen_OBJECTS) $(test_strnlen_LDADD) $(LIBS)
-
 test-strverscmp$(EXEEXT): $(test_strverscmp_OBJECTS) $(test_strverscmp_DEPENDENCIES) $(EXTRA_test_strverscmp_DEPENDENCIES) 
 	@rm -f test-strverscmp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_strverscmp_OBJECTS) $(test_strverscmp_LDADD) $(LIBS)
-
 test-symlink$(EXEEXT): $(test_symlink_OBJECTS) $(test_symlink_DEPENDENCIES) $(EXTRA_test_symlink_DEPENDENCIES) 
 	@rm -f test-symlink$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_symlink_OBJECTS) $(test_symlink_LDADD) $(LIBS)
-
 test-sys_ioctl$(EXEEXT): $(test_sys_ioctl_OBJECTS) $(test_sys_ioctl_DEPENDENCIES) $(EXTRA_test_sys_ioctl_DEPENDENCIES) 
 	@rm -f test-sys_ioctl$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sys_ioctl_OBJECTS) $(test_sys_ioctl_LDADD) $(LIBS)
-
 test-sys_select$(EXEEXT): $(test_sys_select_OBJECTS) $(test_sys_select_DEPENDENCIES) $(EXTRA_test_sys_select_DEPENDENCIES) 
 	@rm -f test-sys_select$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sys_select_OBJECTS) $(test_sys_select_LDADD) $(LIBS)
-
 test-sys_socket$(EXEEXT): $(test_sys_socket_OBJECTS) $(test_sys_socket_DEPENDENCIES) $(EXTRA_test_sys_socket_DEPENDENCIES) 
 	@rm -f test-sys_socket$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sys_socket_OBJECTS) $(test_sys_socket_LDADD) $(LIBS)
-
 test-sys_stat$(EXEEXT): $(test_sys_stat_OBJECTS) $(test_sys_stat_DEPENDENCIES) $(EXTRA_test_sys_stat_DEPENDENCIES) 
 	@rm -f test-sys_stat$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sys_stat_OBJECTS) $(test_sys_stat_LDADD) $(LIBS)
-
 test-sys_time$(EXEEXT): $(test_sys_time_OBJECTS) $(test_sys_time_DEPENDENCIES) $(EXTRA_test_sys_time_DEPENDENCIES) 
 	@rm -f test-sys_time$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sys_time_OBJECTS) $(test_sys_time_LDADD) $(LIBS)
-
 test-sys_types$(EXEEXT): $(test_sys_types_OBJECTS) $(test_sys_types_DEPENDENCIES) $(EXTRA_test_sys_types_DEPENDENCIES) 
 	@rm -f test-sys_types$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sys_types_OBJECTS) $(test_sys_types_LDADD) $(LIBS)
-
 test-sys_uio$(EXEEXT): $(test_sys_uio_OBJECTS) $(test_sys_uio_DEPENDENCIES) $(EXTRA_test_sys_uio_DEPENDENCIES) 
 	@rm -f test-sys_uio$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sys_uio_OBJECTS) $(test_sys_uio_LDADD) $(LIBS)
-
 test-sysexits$(EXEEXT): $(test_sysexits_OBJECTS) $(test_sysexits_DEPENDENCIES) $(EXTRA_test_sysexits_DEPENDENCIES) 
 	@rm -f test-sysexits$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_sysexits_OBJECTS) $(test_sysexits_LDADD) $(LIBS)
-
 test-time$(EXEEXT): $(test_time_OBJECTS) $(test_time_DEPENDENCIES) $(EXTRA_test_time_DEPENDENCIES) 
 	@rm -f test-time$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_time_OBJECTS) $(test_time_LDADD) $(LIBS)
-
 test-u64$(EXEEXT): $(test_u64_OBJECTS) $(test_u64_DEPENDENCIES) $(EXTRA_test_u64_DEPENDENCIES) 
 	@rm -f test-u64$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_u64_OBJECTS) $(test_u64_LDADD) $(LIBS)
@@ -3382,53 +3234,41 @@ unistr/$(DEPDIR)/$(am__dirstamp):
 	@: > unistr/$(DEPDIR)/$(am__dirstamp)
 unistr/test-u8-mbtoucr.$(OBJEXT): unistr/$(am__dirstamp) \
 	unistr/$(DEPDIR)/$(am__dirstamp)
-
 test-u8-mbtoucr$(EXEEXT): $(test_u8_mbtoucr_OBJECTS) $(test_u8_mbtoucr_DEPENDENCIES) $(EXTRA_test_u8_mbtoucr_DEPENDENCIES) 
 	@rm -f test-u8-mbtoucr$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_u8_mbtoucr_OBJECTS) $(test_u8_mbtoucr_LDADD) $(LIBS)
 unistr/test-u8-uctomb.$(OBJEXT): unistr/$(am__dirstamp) \
 	unistr/$(DEPDIR)/$(am__dirstamp)
-
 test-u8-uctomb$(EXEEXT): $(test_u8_uctomb_OBJECTS) $(test_u8_uctomb_DEPENDENCIES) $(EXTRA_test_u8_uctomb_DEPENDENCIES) 
 	@rm -f test-u8-uctomb$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_u8_uctomb_OBJECTS) $(test_u8_uctomb_LDADD) $(LIBS)
-
 test-unistd$(EXEEXT): $(test_unistd_OBJECTS) $(test_unistd_DEPENDENCIES) $(EXTRA_test_unistd_DEPENDENCIES) 
 	@rm -f test-unistd$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_unistd_OBJECTS) $(test_unistd_LDADD) $(LIBS)
-
 test-unsetenv$(EXEEXT): $(test_unsetenv_OBJECTS) $(test_unsetenv_DEPENDENCIES) $(EXTRA_test_unsetenv_DEPENDENCIES) 
 	@rm -f test-unsetenv$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_unsetenv_OBJECTS) $(test_unsetenv_LDADD) $(LIBS)
-
 test-vasnprintf$(EXEEXT): $(test_vasnprintf_OBJECTS) $(test_vasnprintf_DEPENDENCIES) $(EXTRA_test_vasnprintf_DEPENDENCIES) 
 	@rm -f test-vasnprintf$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_vasnprintf_OBJECTS) $(test_vasnprintf_LDADD) $(LIBS)
-
 test-vasprintf$(EXEEXT): $(test_vasprintf_OBJECTS) $(test_vasprintf_DEPENDENCIES) $(EXTRA_test_vasprintf_DEPENDENCIES) 
 	@rm -f test-vasprintf$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_vasprintf_OBJECTS) $(test_vasprintf_LDADD) $(LIBS)
-
 test-verify$(EXEEXT): $(test_verify_OBJECTS) $(test_verify_DEPENDENCIES) $(EXTRA_test_verify_DEPENDENCIES) 
 	@rm -f test-verify$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_verify_OBJECTS) $(test_verify_LDADD) $(LIBS)
-
 test-version-etc$(EXEEXT): $(test_version_etc_OBJECTS) $(test_version_etc_DEPENDENCIES) $(EXTRA_test_version_etc_DEPENDENCIES) 
 	@rm -f test-version-etc$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_version_etc_OBJECTS) $(test_version_etc_LDADD) $(LIBS)
-
 test-vfprintf-posix$(EXEEXT): $(test_vfprintf_posix_OBJECTS) $(test_vfprintf_posix_DEPENDENCIES) $(EXTRA_test_vfprintf_posix_DEPENDENCIES) 
 	@rm -f test-vfprintf-posix$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_vfprintf_posix_OBJECTS) $(test_vfprintf_posix_LDADD) $(LIBS)
-
 test-vprintf-posix$(EXEEXT): $(test_vprintf_posix_OBJECTS) $(test_vprintf_posix_DEPENDENCIES) $(EXTRA_test_vprintf_posix_DEPENDENCIES) 
 	@rm -f test-vprintf-posix$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_vprintf_posix_OBJECTS) $(test_vprintf_posix_LDADD) $(LIBS)
-
 test-vsnprintf$(EXEEXT): $(test_vsnprintf_OBJECTS) $(test_vsnprintf_DEPENDENCIES) $(EXTRA_test_vsnprintf_DEPENDENCIES) 
 	@rm -f test-vsnprintf$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_vsnprintf_OBJECTS) $(test_vsnprintf_LDADD) $(LIBS)
-
 test-wchar$(EXEEXT): $(test_wchar_OBJECTS) $(test_wchar_DEPENDENCIES) $(EXTRA_test_wchar_DEPENDENCIES) 
 	@rm -f test-wchar$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(test_wchar_OBJECTS) $(test_wchar_LDADD) $(LIBS)
@@ -3632,12 +3472,13 @@ clean-libtool:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
@@ -3733,7 +3574,7 @@ distclean-tags:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/guile/Makefile.in b/guile/Makefile.in
index 204b1ae..c422193 100644
--- a/guile/Makefile.in
+++ b/guile/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -31,51 +31,23 @@
 #  License along with GnuTLS; if not, write to the Free Software
 #  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1638,12 +1610,13 @@ clean-libtool:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/guile/modules/Makefile.in b/guile/modules/Makefile.in
index d90348f..69569f0 100644
--- a/guile/modules/Makefile.in
+++ b/guile/modules/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -32,51 +32,23 @@
 #  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/guile/src/Makefile.in b/guile/src/Makefile.in
index 2a2f8db..44e8348 100644
--- a/guile/src/Makefile.in
+++ b/guile/src/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -33,51 +33,23 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1746,7 +1718,6 @@ clean-guileextensionLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 guile-gnutls-v-2.la: $(guile_gnutls_v_2_la_OBJECTS) $(guile_gnutls_v_2_la_DEPENDENCIES) $(EXTRA_guile_gnutls_v_2_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(guile_gnutls_v_2_la_LINK) -rpath $(guileextensiondir) $(guile_gnutls_v_2_la_OBJECTS) $(guile_gnutls_v_2_la_LIBADD) $(LIBS)
 
diff --git a/guile/tests/Makefile.in b/guile/tests/Makefile.in
index af5e52f..8f8273c 100644
--- a/guile/tests/Makefile.in
+++ b/guile/tests/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -31,51 +31,23 @@
 #  License along with GnuTLS; if not, write to the Free Software
 #  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1804,7 +1776,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/lib/Makefile.in b/lib/Makefile.in
index 7907d2e..1c5d260 100644
--- a/lib/Makefile.in
+++ b/lib/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -35,51 +35,23 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1939,13 +1911,10 @@ clean-libLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libgnutls-xssl.la: $(libgnutls_xssl_la_OBJECTS) $(libgnutls_xssl_la_DEPENDENCIES) $(EXTRA_libgnutls_xssl_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libgnutls_xssl_la_LINK) -rpath $(libdir) $(libgnutls_xssl_la_OBJECTS) $(libgnutls_xssl_la_LIBADD) $(LIBS)
-
 libgnutls.la: $(libgnutls_la_OBJECTS) $(libgnutls_la_DEPENDENCIES) $(EXTRA_libgnutls_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libgnutls_la_LINK) -rpath $(libdir) $(libgnutls_la_OBJECTS) $(libgnutls_la_LIBADD) $(LIBS)
-
 libgnutlsxx.la: $(libgnutlsxx_la_OBJECTS) $(libgnutlsxx_la_DEPENDENCIES) $(EXTRA_libgnutlsxx_la_DEPENDENCIES) 
 	$(AM_V_CXXLD)$(libgnutlsxx_la_LINK) $(am_libgnutlsxx_la_rpath) $(libgnutlsxx_la_OBJECTS) $(libgnutlsxx_la_LIBADD) $(LIBS)
 
@@ -2139,12 +2108,13 @@ uninstall-pkgconfigDATA:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/lib/accelerated/Makefile.in b/lib/accelerated/Makefile.in
index 332e8d2..b78ed4f 100644
--- a/lib/accelerated/Makefile.in
+++ b/lib/accelerated/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1683,7 +1655,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libaccelerated.la: $(libaccelerated_la_OBJECTS) $(libaccelerated_la_DEPENDENCIES) $(EXTRA_libaccelerated_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libaccelerated_la_OBJECTS) $(libaccelerated_la_LIBADD) $(LIBS)
 
@@ -1731,12 +1702,13 @@ clean-libtool:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/lib/accelerated/x86/Makefile.in b/lib/accelerated/x86/Makefile.in
index d6dc354..0ee099b 100644
--- a/lib/accelerated/x86/Makefile.in
+++ b/lib/accelerated/x86/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1695,7 +1667,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libx86.la: $(libx86_la_OBJECTS) $(libx86_la_DEPENDENCIES) $(EXTRA_libx86_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libx86_la_OBJECTS) $(libx86_la_LIBADD) $(LIBS)
 
diff --git a/lib/algorithms/Makefile.in b/lib/algorithms/Makefile.in
index 80036c7..aa37944 100644
--- a/lib/algorithms/Makefile.in
+++ b/lib/algorithms/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1636,7 +1608,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libgnutls_alg.la: $(libgnutls_alg_la_OBJECTS) $(libgnutls_alg_la_DEPENDENCIES) $(EXTRA_libgnutls_alg_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libgnutls_alg_la_OBJECTS) $(libgnutls_alg_la_LIBADD) $(LIBS)
 
diff --git a/lib/auth/Makefile.in b/lib/auth/Makefile.in
index f327ccb..4967eaa 100644
--- a/lib/auth/Makefile.in
+++ b/lib/auth/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1639,7 +1611,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libgnutls_auth.la: $(libgnutls_auth_la_OBJECTS) $(libgnutls_auth_la_DEPENDENCIES) $(EXTRA_libgnutls_auth_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libgnutls_auth_la_OBJECTS) $(libgnutls_auth_la_LIBADD) $(LIBS)
 
diff --git a/lib/ext/Makefile.in b/lib/ext/Makefile.in
index 91ed685..22e2ee3 100644
--- a/lib/ext/Makefile.in
+++ b/lib/ext/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1648,7 +1620,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libgnutls_ext.la: $(libgnutls_ext_la_OBJECTS) $(libgnutls_ext_la_DEPENDENCIES) $(EXTRA_libgnutls_ext_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libgnutls_ext_la_OBJECTS) $(libgnutls_ext_la_LIBADD) $(LIBS)
 
diff --git a/lib/extras/Makefile.in b/lib/extras/Makefile.in
index a7edce3..5c24684 100644
--- a/lib/extras/Makefile.in
+++ b/lib/extras/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1632,7 +1604,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libgnutls_extras.la: $(libgnutls_extras_la_OBJECTS) $(libgnutls_extras_la_DEPENDENCIES) $(EXTRA_libgnutls_extras_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libgnutls_extras_la_OBJECTS) $(libgnutls_extras_la_LIBADD) $(LIBS)
 
diff --git a/lib/includes/Makefile.in b/lib/includes/Makefile.in
index 4ae99b3..fcf0d34 100644
--- a/lib/includes/Makefile.in
+++ b/lib/includes/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/lib/minitasn1/Makefile.in b/lib/minitasn1/Makefile.in
index f3b0464..92006ac 100644
--- a/lib/minitasn1/Makefile.in
+++ b/lib/minitasn1/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -36,51 +36,23 @@
 # MA 02110-1301, USA
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1637,7 +1609,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libminitasn1.la: $(libminitasn1_la_OBJECTS) $(libminitasn1_la_DEPENDENCIES) $(EXTRA_libminitasn1_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libminitasn1_la_OBJECTS) $(libminitasn1_la_LIBADD) $(LIBS)
 
diff --git a/lib/nettle/Makefile.in b/lib/nettle/Makefile.in
index c0cffee..f8eb356 100644
--- a/lib/nettle/Makefile.in
+++ b/lib/nettle/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1645,7 +1617,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libcrypto.la: $(libcrypto_la_OBJECTS) $(libcrypto_la_DEPENDENCIES) $(EXTRA_libcrypto_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libcrypto_la_OBJECTS) $(libcrypto_la_LIBADD) $(LIBS)
 
diff --git a/lib/opencdk/Makefile.in b/lib/opencdk/Makefile.in
index 88f8abf..7244fb1 100644
--- a/lib/opencdk/Makefile.in
+++ b/lib/opencdk/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1637,7 +1609,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libminiopencdk.la: $(libminiopencdk_la_OBJECTS) $(libminiopencdk_la_DEPENDENCIES) $(EXTRA_libminiopencdk_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libminiopencdk_la_OBJECTS) $(libminiopencdk_la_LIBADD) $(LIBS)
 
diff --git a/lib/openpgp/Makefile.in b/lib/openpgp/Makefile.in
index 513162c..a3b6730 100644
--- a/lib/openpgp/Makefile.in
+++ b/lib/openpgp/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1637,7 +1609,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libgnutls_openpgp.la: $(libgnutls_openpgp_la_OBJECTS) $(libgnutls_openpgp_la_DEPENDENCIES) $(EXTRA_libgnutls_openpgp_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libgnutls_openpgp_la_OBJECTS) $(libgnutls_openpgp_la_LIBADD) $(LIBS)
 
diff --git a/lib/x509/Makefile.in b/lib/x509/Makefile.in
index 1648ae6..d26560c 100644
--- a/lib/x509/Makefile.in
+++ b/lib/x509/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -32,51 +32,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1650,7 +1622,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libgnutls_x509.la: $(libgnutls_x509_la_OBJECTS) $(libgnutls_x509_la_DEPENDENCIES) $(EXTRA_libgnutls_x509_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libgnutls_x509_la_OBJECTS) $(libgnutls_x509_la_LIBADD) $(LIBS)
 
diff --git a/libdane/Makefile.in b/libdane/Makefile.in
index 89bb850..64eda43 100644
--- a/libdane/Makefile.in
+++ b/libdane/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -35,51 +35,23 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1759,7 +1731,6 @@ clean-libLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libgnutls-dane.la: $(libgnutls_dane_la_OBJECTS) $(libgnutls_dane_la_DEPENDENCIES) $(EXTRA_libgnutls_dane_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libgnutls_dane_la_LINK) -rpath $(libdir) $(libgnutls_dane_la_OBJECTS) $(libgnutls_dane_la_LIBADD) $(LIBS)
 
@@ -1849,12 +1820,13 @@ uninstall-pkgconfigDATA:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/libdane/includes/Makefile.in b/libdane/includes/Makefile.in
index b02cc27..c99ed55 100644
--- a/libdane/includes/Makefile.in
+++ b/libdane/includes/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/src/Makefile.in b/src/Makefile.in
index 4eee438..0b102ba 100644
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -2028,34 +2000,24 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libcmd-certtool.la: $(libcmd_certtool_la_OBJECTS) $(libcmd_certtool_la_DEPENDENCIES) $(EXTRA_libcmd_certtool_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_certtool_la_LINK)  $(libcmd_certtool_la_OBJECTS) $(libcmd_certtool_la_LIBADD) $(LIBS)
-
 libcmd-cli-debug.la: $(libcmd_cli_debug_la_OBJECTS) $(libcmd_cli_debug_la_DEPENDENCIES) $(EXTRA_libcmd_cli_debug_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_cli_debug_la_LINK)  $(libcmd_cli_debug_la_OBJECTS) $(libcmd_cli_debug_la_LIBADD) $(LIBS)
-
 libcmd-cli.la: $(libcmd_cli_la_OBJECTS) $(libcmd_cli_la_DEPENDENCIES) $(EXTRA_libcmd_cli_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_cli_la_LINK) $(am_libcmd_cli_la_rpath) $(libcmd_cli_la_OBJECTS) $(libcmd_cli_la_LIBADD) $(LIBS)
-
 libcmd-danetool.la: $(libcmd_danetool_la_OBJECTS) $(libcmd_danetool_la_DEPENDENCIES) $(EXTRA_libcmd_danetool_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_danetool_la_LINK)  $(libcmd_danetool_la_OBJECTS) $(libcmd_danetool_la_LIBADD) $(LIBS)
-
 libcmd-ocsp.la: $(libcmd_ocsp_la_OBJECTS) $(libcmd_ocsp_la_DEPENDENCIES) $(EXTRA_libcmd_ocsp_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_ocsp_la_LINK) $(am_libcmd_ocsp_la_rpath) $(libcmd_ocsp_la_OBJECTS) $(libcmd_ocsp_la_LIBADD) $(LIBS)
-
 libcmd-p11tool.la: $(libcmd_p11tool_la_OBJECTS) $(libcmd_p11tool_la_DEPENDENCIES) $(EXTRA_libcmd_p11tool_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_p11tool_la_LINK) $(am_libcmd_p11tool_la_rpath) $(libcmd_p11tool_la_OBJECTS) $(libcmd_p11tool_la_LIBADD) $(LIBS)
-
 libcmd-psk.la: $(libcmd_psk_la_OBJECTS) $(libcmd_psk_la_DEPENDENCIES) $(EXTRA_libcmd_psk_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_psk_la_LINK)  $(libcmd_psk_la_OBJECTS) $(libcmd_psk_la_LIBADD) $(LIBS)
-
 libcmd-serv.la: $(libcmd_serv_la_OBJECTS) $(libcmd_serv_la_DEPENDENCIES) $(EXTRA_libcmd_serv_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_serv_la_LINK) $(am_libcmd_serv_la_rpath) $(libcmd_serv_la_OBJECTS) $(libcmd_serv_la_LIBADD) $(LIBS)
-
 libcmd-srp.la: $(libcmd_srp_la_OBJECTS) $(libcmd_srp_la_DEPENDENCIES) $(EXTRA_libcmd_srp_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_srp_la_LINK) $(am_libcmd_srp_la_rpath) $(libcmd_srp_la_OBJECTS) $(libcmd_srp_la_LIBADD) $(LIBS)
-
 libcmd-tpmtool.la: $(libcmd_tpmtool_la_OBJECTS) $(libcmd_tpmtool_la_DEPENDENCIES) $(EXTRA_libcmd_tpmtool_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libcmd_tpmtool_la_LINK) $(am_libcmd_tpmtool_la_rpath) $(libcmd_tpmtool_la_OBJECTS) $(libcmd_tpmtool_la_LIBADD) $(LIBS)
 install-binPROGRAMS: $(bin_PROGRAMS)
@@ -2107,43 +2069,33 @@ clean-binPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 certtool$(EXEEXT): $(certtool_OBJECTS) $(certtool_DEPENDENCIES) $(EXTRA_certtool_DEPENDENCIES) 
 	@rm -f certtool$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(certtool_OBJECTS) $(certtool_LDADD) $(LIBS)
-
 danetool$(EXEEXT): $(danetool_OBJECTS) $(danetool_DEPENDENCIES) $(EXTRA_danetool_DEPENDENCIES) 
 	@rm -f danetool$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(danetool_OBJECTS) $(danetool_LDADD) $(LIBS)
-
 gnutls-cli$(EXEEXT): $(gnutls_cli_OBJECTS) $(gnutls_cli_DEPENDENCIES) $(EXTRA_gnutls_cli_DEPENDENCIES) 
 	@rm -f gnutls-cli$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(gnutls_cli_OBJECTS) $(gnutls_cli_LDADD) $(LIBS)
-
 gnutls-cli-debug$(EXEEXT): $(gnutls_cli_debug_OBJECTS) $(gnutls_cli_debug_DEPENDENCIES) $(EXTRA_gnutls_cli_debug_DEPENDENCIES) 
 	@rm -f gnutls-cli-debug$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(gnutls_cli_debug_OBJECTS) $(gnutls_cli_debug_LDADD) $(LIBS)
-
 gnutls-serv$(EXEEXT): $(gnutls_serv_OBJECTS) $(gnutls_serv_DEPENDENCIES) $(EXTRA_gnutls_serv_DEPENDENCIES) 
 	@rm -f gnutls-serv$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(gnutls_serv_OBJECTS) $(gnutls_serv_LDADD) $(LIBS)
-
 ocsptool$(EXEEXT): $(ocsptool_OBJECTS) $(ocsptool_DEPENDENCIES) $(EXTRA_ocsptool_DEPENDENCIES) 
 	@rm -f ocsptool$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ocsptool_OBJECTS) $(ocsptool_LDADD) $(LIBS)
-
 p11tool$(EXEEXT): $(p11tool_OBJECTS) $(p11tool_DEPENDENCIES) $(EXTRA_p11tool_DEPENDENCIES) 
 	@rm -f p11tool$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(p11tool_OBJECTS) $(p11tool_LDADD) $(LIBS)
-
 psktool$(EXEEXT): $(psktool_OBJECTS) $(psktool_DEPENDENCIES) $(EXTRA_psktool_DEPENDENCIES) 
 	@rm -f psktool$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(psktool_OBJECTS) $(psktool_LDADD) $(LIBS)
-
 srptool$(EXEEXT): $(srptool_OBJECTS) $(srptool_DEPENDENCIES) $(EXTRA_srptool_DEPENDENCIES) 
 	@rm -f srptool$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(srptool_OBJECTS) $(srptool_LDADD) $(LIBS)
-
 tpmtool$(EXEEXT): $(tpmtool_OBJECTS) $(tpmtool_DEPENDENCIES) $(EXTRA_tpmtool_DEPENDENCIES) 
 	@rm -f tpmtool$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(tpmtool_OBJECTS) $(tpmtool_LDADD) $(LIBS)
@@ -2322,12 +2274,13 @@ clean-libtool:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
diff --git a/src/crywrap/Makefile.in b/src/crywrap/Makefile.in
index 1acf51f..e7593ec 100644
--- a/src/crywrap/Makefile.in
+++ b/src/crywrap/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -31,51 +31,23 @@
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1672,7 +1644,6 @@ clean-binPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 crywrap$(EXEEXT): $(crywrap_OBJECTS) $(crywrap_DEPENDENCIES) $(EXTRA_crywrap_DEPENDENCIES) 
 	@rm -f crywrap$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(crywrap_OBJECTS) $(crywrap_LDADD) $(LIBS)
diff --git a/src/libopts/Makefile.in b/src/libopts/Makefile.in
index fa8484c..c320e19 100644
--- a/src/libopts/Makefile.in
+++ b/src/libopts/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -15,51 +15,23 @@
 @SET_MAKE@
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1633,7 +1605,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libopts.la: $(libopts_la_OBJECTS) $(libopts_la_DEPENDENCIES) $(EXTRA_libopts_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libopts_la_OBJECTS) $(libopts_la_LIBADD) $(LIBS)
 
diff --git a/tests/Makefile.in b/tests/Makefile.in
index b93da64..ddfb8a8 100644
--- a/tests/Makefile.in
+++ b/tests/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -35,51 +35,23 @@
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -2430,7 +2402,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libutils.la: $(libutils_la_OBJECTS) $(libutils_la_DEPENDENCIES) $(EXTRA_libutils_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(LINK)  $(libutils_la_OBJECTS) $(libutils_la_LIBADD) $(LIBS)
 
@@ -2442,283 +2413,213 @@ clean-checkPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 anonself$(EXEEXT): $(anonself_OBJECTS) $(anonself_DEPENDENCIES) $(EXTRA_anonself_DEPENDENCIES) 
 	@rm -f anonself$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(anonself_OBJECTS) $(anonself_LDADD) $(LIBS)
-
 certder$(EXEEXT): $(certder_OBJECTS) $(certder_DEPENDENCIES) $(EXTRA_certder_DEPENDENCIES) 
 	@rm -f certder$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(certder_OBJECTS) $(certder_LDADD) $(LIBS)
-
 certificate_set_x509_crl$(EXEEXT): $(certificate_set_x509_crl_OBJECTS) $(certificate_set_x509_crl_DEPENDENCIES) $(EXTRA_certificate_set_x509_crl_DEPENDENCIES) 
 	@rm -f certificate_set_x509_crl$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(certificate_set_x509_crl_OBJECTS) $(certificate_set_x509_crl_LDADD) $(LIBS)
-
 certuniqueid$(EXEEXT): $(certuniqueid_OBJECTS) $(certuniqueid_DEPENDENCIES) $(EXTRA_certuniqueid_DEPENDENCIES) 
 	@rm -f certuniqueid$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(certuniqueid_OBJECTS) $(certuniqueid_LDADD) $(LIBS)
-
 chainverify$(EXEEXT): $(chainverify_OBJECTS) $(chainverify_DEPENDENCIES) $(EXTRA_chainverify_DEPENDENCIES) 
 	@rm -f chainverify$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(chainverify_OBJECTS) $(chainverify_LDADD) $(LIBS)
-
 chainverify-unsorted$(EXEEXT): $(chainverify_unsorted_OBJECTS) $(chainverify_unsorted_DEPENDENCIES) $(EXTRA_chainverify_unsorted_DEPENDENCIES) 
 	@rm -f chainverify-unsorted$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(chainverify_unsorted_OBJECTS) $(chainverify_unsorted_LDADD) $(LIBS)
-
 crq_apis$(EXEEXT): $(crq_apis_OBJECTS) $(crq_apis_DEPENDENCIES) $(EXTRA_crq_apis_DEPENDENCIES) 
 	@rm -f crq_apis$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(crq_apis_OBJECTS) $(crq_apis_LDADD) $(LIBS)
-
 crq_key_id$(EXEEXT): $(crq_key_id_OBJECTS) $(crq_key_id_DEPENDENCIES) $(EXTRA_crq_key_id_DEPENDENCIES) 
 	@rm -f crq_key_id$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(crq_key_id_OBJECTS) $(crq_key_id_LDADD) $(LIBS)
-
 cve-2008-4989$(EXEEXT): $(cve_2008_4989_OBJECTS) $(cve_2008_4989_DEPENDENCIES) $(EXTRA_cve_2008_4989_DEPENDENCIES) 
 	@rm -f cve-2008-4989$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(cve_2008_4989_OBJECTS) $(cve_2008_4989_LDADD) $(LIBS)
-
 cve-2009-1415$(EXEEXT): $(cve_2009_1415_OBJECTS) $(cve_2009_1415_DEPENDENCIES) $(EXTRA_cve_2009_1415_DEPENDENCIES) 
 	@rm -f cve-2009-1415$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(cve_2009_1415_OBJECTS) $(cve_2009_1415_LDADD) $(LIBS)
-
 cve-2009-1416$(EXEEXT): $(cve_2009_1416_OBJECTS) $(cve_2009_1416_DEPENDENCIES) $(EXTRA_cve_2009_1416_DEPENDENCIES) 
 	@rm -f cve-2009-1416$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(cve_2009_1416_OBJECTS) $(cve_2009_1416_LDADD) $(LIBS)
-
 dhepskself$(EXEEXT): $(dhepskself_OBJECTS) $(dhepskself_DEPENDENCIES) $(EXTRA_dhepskself_DEPENDENCIES) 
 	@rm -f dhepskself$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(dhepskself_OBJECTS) $(dhepskself_LDADD) $(LIBS)
-
 dn$(EXEEXT): $(dn_OBJECTS) $(dn_DEPENDENCIES) $(EXTRA_dn_DEPENDENCIES) 
 	@rm -f dn$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(dn_OBJECTS) $(dn_LDADD) $(LIBS)
-
 dn2$(EXEEXT): $(dn2_OBJECTS) $(dn2_DEPENDENCIES) $(EXTRA_dn2_DEPENDENCIES) 
 	@rm -f dn2$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(dn2_OBJECTS) $(dn2_LDADD) $(LIBS)
-
 gc$(EXEEXT): $(gc_OBJECTS) $(gc_DEPENDENCIES) $(EXTRA_gc_DEPENDENCIES) 
 	@rm -f gc$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(gc_OBJECTS) $(gc_LDADD) $(LIBS)
-
 hostname-check$(EXEEXT): $(hostname_check_OBJECTS) $(hostname_check_DEPENDENCIES) $(EXTRA_hostname_check_DEPENDENCIES) 
 	@rm -f hostname-check$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(hostname_check_OBJECTS) $(hostname_check_LDADD) $(LIBS)
-
 infoaccess$(EXEEXT): $(infoaccess_OBJECTS) $(infoaccess_DEPENDENCIES) $(EXTRA_infoaccess_DEPENDENCIES) 
 	@rm -f infoaccess$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(infoaccess_OBJECTS) $(infoaccess_LDADD) $(LIBS)
-
 init_roundtrip$(EXEEXT): $(init_roundtrip_OBJECTS) $(init_roundtrip_DEPENDENCIES) $(EXTRA_init_roundtrip_DEPENDENCIES) 
 	@rm -f init_roundtrip$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(init_roundtrip_OBJECTS) $(init_roundtrip_LDADD) $(LIBS)
-
 key-openssl$(EXEEXT): $(key_openssl_OBJECTS) $(key_openssl_DEPENDENCIES) $(EXTRA_key_openssl_DEPENDENCIES) 
 	@rm -f key-openssl$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(key_openssl_OBJECTS) $(key_openssl_LDADD) $(LIBS)
-
 mini$(EXEEXT): $(mini_OBJECTS) $(mini_DEPENDENCIES) $(EXTRA_mini_DEPENDENCIES) 
 	@rm -f mini$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_OBJECTS) $(mini_LDADD) $(LIBS)
-
 mini-deflate$(EXEEXT): $(mini_deflate_OBJECTS) $(mini_deflate_DEPENDENCIES) $(EXTRA_mini_deflate_DEPENDENCIES) 
 	@rm -f mini-deflate$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_deflate_OBJECTS) $(mini_deflate_LDADD) $(LIBS)
-
 mini-dtls-heartbeat$(EXEEXT): $(mini_dtls_heartbeat_OBJECTS) $(mini_dtls_heartbeat_DEPENDENCIES) $(EXTRA_mini_dtls_heartbeat_DEPENDENCIES) 
 	@rm -f mini-dtls-heartbeat$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_dtls_heartbeat_OBJECTS) $(mini_dtls_heartbeat_LDADD) $(LIBS)
-
 mini-dtls-record$(EXEEXT): $(mini_dtls_record_OBJECTS) $(mini_dtls_record_DEPENDENCIES) $(EXTRA_mini_dtls_record_DEPENDENCIES) 
 	@rm -f mini-dtls-record$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_dtls_record_OBJECTS) $(mini_dtls_record_LDADD) $(LIBS)
-
 mini-dtls-rehandshake$(EXEEXT): $(mini_dtls_rehandshake_OBJECTS) $(mini_dtls_rehandshake_DEPENDENCIES) $(EXTRA_mini_dtls_rehandshake_DEPENDENCIES) 
 	@rm -f mini-dtls-rehandshake$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_dtls_rehandshake_OBJECTS) $(mini_dtls_rehandshake_LDADD) $(LIBS)
-
 mini-dtls-srtp$(EXEEXT): $(mini_dtls_srtp_OBJECTS) $(mini_dtls_srtp_DEPENDENCIES) $(EXTRA_mini_dtls_srtp_DEPENDENCIES) 
 	@rm -f mini-dtls-srtp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_dtls_srtp_OBJECTS) $(mini_dtls_srtp_LDADD) $(LIBS)
-
 mini-eagain$(EXEEXT): $(mini_eagain_OBJECTS) $(mini_eagain_DEPENDENCIES) $(EXTRA_mini_eagain_DEPENDENCIES) 
 	@rm -f mini-eagain$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_eagain_OBJECTS) $(mini_eagain_LDADD) $(LIBS)
-
 mini-eagain-dtls$(EXEEXT): $(mini_eagain_dtls_OBJECTS) $(mini_eagain_dtls_DEPENDENCIES) $(EXTRA_mini_eagain_dtls_DEPENDENCIES) 
 	@rm -f mini-eagain-dtls$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_eagain_dtls_OBJECTS) $(mini_eagain_dtls_LDADD) $(LIBS)
-
 mini-emsgsize-dtls$(EXEEXT): $(mini_emsgsize_dtls_OBJECTS) $(mini_emsgsize_dtls_DEPENDENCIES) $(EXTRA_mini_emsgsize_dtls_DEPENDENCIES) 
 	@rm -f mini-emsgsize-dtls$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_emsgsize_dtls_OBJECTS) $(mini_emsgsize_dtls_LDADD) $(LIBS)
-
 mini-handshake-timeout$(EXEEXT): $(mini_handshake_timeout_OBJECTS) $(mini_handshake_timeout_DEPENDENCIES) $(EXTRA_mini_handshake_timeout_DEPENDENCIES) 
 	@rm -f mini-handshake-timeout$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_handshake_timeout_OBJECTS) $(mini_handshake_timeout_LDADD) $(LIBS)
-
 mini-loss-time$(EXEEXT): $(mini_loss_time_OBJECTS) $(mini_loss_time_DEPENDENCIES) $(EXTRA_mini_loss_time_DEPENDENCIES) 
 	@rm -f mini-loss-time$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_loss_time_OBJECTS) $(mini_loss_time_LDADD) $(LIBS)
-
 mini-overhead$(EXEEXT): $(mini_overhead_OBJECTS) $(mini_overhead_DEPENDENCIES) $(EXTRA_mini_overhead_DEPENDENCIES) 
 	@rm -f mini-overhead$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_overhead_OBJECTS) $(mini_overhead_LDADD) $(LIBS)
-
 mini-record$(EXEEXT): $(mini_record_OBJECTS) $(mini_record_DEPENDENCIES) $(EXTRA_mini_record_DEPENDENCIES) 
 	@rm -f mini-record$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_record_OBJECTS) $(mini_record_LDADD) $(LIBS)
-
 mini-record-range$(EXEEXT): $(mini_record_range_OBJECTS) $(mini_record_range_DEPENDENCIES) $(EXTRA_mini_record_range_DEPENDENCIES) 
 	@rm -f mini-record-range$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_record_range_OBJECTS) $(mini_record_range_LDADD) $(LIBS)
-
 mini-rehandshake$(EXEEXT): $(mini_rehandshake_OBJECTS) $(mini_rehandshake_DEPENDENCIES) $(EXTRA_mini_rehandshake_DEPENDENCIES) 
 	@rm -f mini-rehandshake$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_rehandshake_OBJECTS) $(mini_rehandshake_LDADD) $(LIBS)
-
 mini-tdb$(EXEEXT): $(mini_tdb_OBJECTS) $(mini_tdb_DEPENDENCIES) $(EXTRA_mini_tdb_DEPENDENCIES) 
 	@rm -f mini-tdb$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_tdb_OBJECTS) $(mini_tdb_LDADD) $(LIBS)
-
 mini-termination$(EXEEXT): $(mini_termination_OBJECTS) $(mini_termination_DEPENDENCIES) $(EXTRA_mini_termination_DEPENDENCIES) 
 	@rm -f mini-termination$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_termination_OBJECTS) $(mini_termination_LDADD) $(LIBS)
-
 mini-x509$(EXEEXT): $(mini_x509_OBJECTS) $(mini_x509_DEPENDENCIES) $(EXTRA_mini_x509_DEPENDENCIES) 
 	@rm -f mini-x509$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_x509_OBJECTS) $(mini_x509_LDADD) $(LIBS)
-
 mini-x509-2$(EXEEXT): $(mini_x509_2_OBJECTS) $(mini_x509_2_DEPENDENCIES) $(EXTRA_mini_x509_2_DEPENDENCIES) 
 	@rm -f mini-x509-2$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_x509_2_OBJECTS) $(mini_x509_2_LDADD) $(LIBS)
-
 mini-x509-callbacks$(EXEEXT): $(mini_x509_callbacks_OBJECTS) $(mini_x509_callbacks_DEPENDENCIES) $(EXTRA_mini_x509_callbacks_DEPENDENCIES) 
 	@rm -f mini-x509-callbacks$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_x509_callbacks_OBJECTS) $(mini_x509_callbacks_LDADD) $(LIBS)
-
 mini-x509-cas$(EXEEXT): $(mini_x509_cas_OBJECTS) $(mini_x509_cas_DEPENDENCIES) $(EXTRA_mini_x509_cas_DEPENDENCIES) 
 	@rm -f mini-x509-cas$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_x509_cas_OBJECTS) $(mini_x509_cas_LDADD) $(LIBS)
-
 mini-xssl$(EXEEXT): $(mini_xssl_OBJECTS) $(mini_xssl_DEPENDENCIES) $(EXTRA_mini_xssl_DEPENDENCIES) 
 	@rm -f mini-xssl$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_xssl_OBJECTS) $(mini_xssl_LDADD) $(LIBS)
-
 moredn$(EXEEXT): $(moredn_OBJECTS) $(moredn_DEPENDENCIES) $(EXTRA_moredn_DEPENDENCIES) 
 	@rm -f moredn$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(moredn_OBJECTS) $(moredn_LDADD) $(LIBS)
-
 mpi$(EXEEXT): $(mpi_OBJECTS) $(mpi_DEPENDENCIES) $(EXTRA_mpi_DEPENDENCIES) 
 	@rm -f mpi$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mpi_OBJECTS) $(mpi_LDADD) $(LIBS)
-
 nul-in-x509-names$(EXEEXT): $(nul_in_x509_names_OBJECTS) $(nul_in_x509_names_DEPENDENCIES) $(EXTRA_nul_in_x509_names_DEPENDENCIES) 
 	@rm -f nul-in-x509-names$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(nul_in_x509_names_OBJECTS) $(nul_in_x509_names_LDADD) $(LIBS)
-
 ocsp$(EXEEXT): $(ocsp_OBJECTS) $(ocsp_DEPENDENCIES) $(EXTRA_ocsp_DEPENDENCIES) 
 	@rm -f ocsp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(ocsp_OBJECTS) $(ocsp_LDADD) $(LIBS)
-
 openpgp-auth$(EXEEXT): $(openpgp_auth_OBJECTS) $(openpgp_auth_DEPENDENCIES) $(EXTRA_openpgp_auth_DEPENDENCIES) 
 	@rm -f openpgp-auth$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(openpgp_auth_OBJECTS) $(openpgp_auth_LDADD) $(LIBS)
-
 openpgp-auth2$(EXEEXT): $(openpgp_auth2_OBJECTS) $(openpgp_auth2_DEPENDENCIES) $(EXTRA_openpgp_auth2_DEPENDENCIES) 
 	@rm -f openpgp-auth2$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(openpgp_auth2_OBJECTS) $(openpgp_auth2_LDADD) $(LIBS)
-
 openpgp-keyring$(EXEEXT): $(openpgp_keyring_OBJECTS) $(openpgp_keyring_DEPENDENCIES) $(EXTRA_openpgp_keyring_DEPENDENCIES) 
 	@rm -f openpgp-keyring$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(openpgp_keyring_OBJECTS) $(openpgp_keyring_LDADD) $(LIBS)
-
 openpgpself$(EXEEXT): $(openpgpself_OBJECTS) $(openpgpself_DEPENDENCIES) $(EXTRA_openpgpself_DEPENDENCIES) 
 	@rm -f openpgpself$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(openpgpself_OBJECTS) $(openpgpself_LDADD) $(LIBS)
-
 openssl$(EXEEXT): $(openssl_OBJECTS) $(openssl_DEPENDENCIES) $(EXTRA_openssl_DEPENDENCIES) 
 	@rm -f openssl$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(openssl_OBJECTS) $(openssl_LDADD) $(LIBS)
-
 parse_ca$(EXEEXT): $(parse_ca_OBJECTS) $(parse_ca_DEPENDENCIES) $(EXTRA_parse_ca_DEPENDENCIES) 
 	@rm -f parse_ca$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(parse_ca_OBJECTS) $(parse_ca_LDADD) $(LIBS)
-
 pgps2kgnu$(EXEEXT): $(pgps2kgnu_OBJECTS) $(pgps2kgnu_DEPENDENCIES) $(EXTRA_pgps2kgnu_DEPENDENCIES) 
 	@rm -f pgps2kgnu$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(pgps2kgnu_OBJECTS) $(pgps2kgnu_LDADD) $(LIBS)
-
 pkcs12_encode$(EXEEXT): $(pkcs12_encode_OBJECTS) $(pkcs12_encode_DEPENDENCIES) $(EXTRA_pkcs12_encode_DEPENDENCIES) 
 	@rm -f pkcs12_encode$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(pkcs12_encode_OBJECTS) $(pkcs12_encode_LDADD) $(LIBS)
-
 pkcs12_s2k$(EXEEXT): $(pkcs12_s2k_OBJECTS) $(pkcs12_s2k_DEPENDENCIES) $(EXTRA_pkcs12_s2k_DEPENDENCIES) 
 	@rm -f pkcs12_s2k$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(pkcs12_s2k_OBJECTS) $(pkcs12_s2k_LDADD) $(LIBS)
-
 pkcs12_s2k_pem$(EXEEXT): $(pkcs12_s2k_pem_OBJECTS) $(pkcs12_s2k_pem_DEPENDENCIES) $(EXTRA_pkcs12_s2k_pem_DEPENDENCIES) 
 	@rm -f pkcs12_s2k_pem$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(pkcs12_s2k_pem_OBJECTS) $(pkcs12_s2k_pem_LDADD) $(LIBS)
-
 pkcs12_simple$(EXEEXT): $(pkcs12_simple_OBJECTS) $(pkcs12_simple_DEPENDENCIES) $(EXTRA_pkcs12_simple_DEPENDENCIES) 
 	@rm -f pkcs12_simple$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(pkcs12_simple_OBJECTS) $(pkcs12_simple_LDADD) $(LIBS)
-
 pskself$(EXEEXT): $(pskself_OBJECTS) $(pskself_DEPENDENCIES) $(EXTRA_pskself_DEPENDENCIES) 
 	@rm -f pskself$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(pskself_OBJECTS) $(pskself_LDADD) $(LIBS)
-
 resume$(EXEEXT): $(resume_OBJECTS) $(resume_DEPENDENCIES) $(EXTRA_resume_DEPENDENCIES) 
 	@rm -f resume$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(resume_OBJECTS) $(resume_LDADD) $(LIBS)
-
 resume-dtls$(EXEEXT): $(resume_dtls_OBJECTS) $(resume_dtls_DEPENDENCIES) $(EXTRA_resume_dtls_DEPENDENCIES) 
 	@rm -f resume-dtls$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(resume_dtls_OBJECTS) $(resume_dtls_LDADD) $(LIBS)
-
 rng-fork$(EXEEXT): $(rng_fork_OBJECTS) $(rng_fork_DEPENDENCIES) $(EXTRA_rng_fork_DEPENDENCIES) 
 	@rm -f rng-fork$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(rng_fork_OBJECTS) $(rng_fork_LDADD) $(LIBS)
-
 rsa-encrypt-decrypt$(EXEEXT): $(rsa_encrypt_decrypt_OBJECTS) $(rsa_encrypt_decrypt_DEPENDENCIES) $(EXTRA_rsa_encrypt_decrypt_DEPENDENCIES) 
 	@rm -f rsa-encrypt-decrypt$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(rsa_encrypt_decrypt_OBJECTS) $(rsa_encrypt_decrypt_LDADD) $(LIBS)
-
 set_pkcs12_cred$(EXEEXT): $(set_pkcs12_cred_OBJECTS) $(set_pkcs12_cred_DEPENDENCIES) $(EXTRA_set_pkcs12_cred_DEPENDENCIES) 
 	@rm -f set_pkcs12_cred$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(set_pkcs12_cred_OBJECTS) $(set_pkcs12_cred_LDADD) $(LIBS)
-
 setcredcrash$(EXEEXT): $(setcredcrash_OBJECTS) $(setcredcrash_DEPENDENCIES) $(EXTRA_setcredcrash_DEPENDENCIES) 
 	@rm -f setcredcrash$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(setcredcrash_OBJECTS) $(setcredcrash_LDADD) $(LIBS)
-
 simple$(EXEEXT): $(simple_OBJECTS) $(simple_DEPENDENCIES) $(EXTRA_simple_DEPENDENCIES) 
 	@rm -f simple$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(simple_OBJECTS) $(simple_LDADD) $(LIBS)
-
 x509_altname$(EXEEXT): $(x509_altname_OBJECTS) $(x509_altname_DEPENDENCIES) $(EXTRA_x509_altname_DEPENDENCIES) 
 	@rm -f x509_altname$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(x509_altname_OBJECTS) $(x509_altname_LDADD) $(LIBS)
-
 x509cert$(EXEEXT): $(x509cert_OBJECTS) $(x509cert_DEPENDENCIES) $(EXTRA_x509cert_DEPENDENCIES) 
 	@rm -f x509cert$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(x509cert_OBJECTS) $(x509cert_LDADD) $(LIBS)
-
 x509cert-tl$(EXEEXT): $(x509cert_tl_OBJECTS) $(x509cert_tl_DEPENDENCIES) $(EXTRA_x509cert_tl_DEPENDENCIES) 
 	@rm -f x509cert-tl$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(x509cert_tl_OBJECTS) $(x509cert_tl_LDADD) $(LIBS)
-
 x509dn$(EXEEXT): $(x509dn_OBJECTS) $(x509dn_DEPENDENCIES) $(EXTRA_x509dn_DEPENDENCIES) 
 	@rm -f x509dn$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(x509dn_OBJECTS) $(x509dn_LDADD) $(LIBS)
-
 x509self$(EXEEXT): $(x509self_OBJECTS) $(x509self_DEPENDENCIES) $(EXTRA_x509self_DEPENDENCIES) 
 	@rm -f x509self$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(x509self_OBJECTS) $(x509self_LDADD) $(LIBS)
-
 x509sign-verify$(EXEEXT): $(x509sign_verify_OBJECTS) $(x509sign_verify_DEPENDENCIES) $(EXTRA_x509sign_verify_DEPENDENCIES) 
 	@rm -f x509sign-verify$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(x509sign_verify_OBJECTS) $(x509sign_verify_LDADD) $(LIBS)
@@ -2835,12 +2736,13 @@ clean-libtool:
 #     (which will cause the Makefiles to be regenerated when you run 'make');
 # (2) otherwise, pass the desired values on the 'make' command line.
 $(am__recursive_targets):
-	@fail=; \
-	if $(am__make_keepgoing); then \
-	  failcom='fail=yes'; \
-	else \
-	  failcom='exit 1'; \
-	fi; \
+	@fail= failcom='exit 1'; \
+	for f in x $$MAKEFLAGS; do \
+	  case $$f in \
+	    *=* | --[!k]*);; \
+	    *k*) failcom='fail=yes';; \
+	  esac; \
+	done; \
 	dot_seen=no; \
 	target=`echo $@ | sed s/-recursive//`; \
 	case "$@" in \
@@ -2936,7 +2838,7 @@ distclean-tags:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/cert-tests/Makefile.in b/tests/cert-tests/Makefile.in
index 9e6b5de..11fcca0 100644
--- a/tests/cert-tests/Makefile.in
+++ b/tests/cert-tests/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1801,7 +1773,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/dsa/Makefile.in b/tests/dsa/Makefile.in
index 1f118e3..2bd974c 100644
--- a/tests/dsa/Makefile.in
+++ b/tests/dsa/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1795,7 +1767,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/dsa/testdsa b/tests/dsa/testdsa
index 64a4b76..71dd55c 100755
--- a/tests/dsa/testdsa
+++ b/tests/dsa/testdsa
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 # Copyright (C) 2010-2012 Free Software Foundation, Inc.
 #
@@ -20,6 +20,7 @@
 # along with GnuTLS; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 
+
 srcdir="${srcdir:-.}"
 SERV="${SERV:-../../src/gnutls-serv} -q"
 CLI="${CLI:-../../src/gnutls-cli}"
diff --git a/tests/dtls/Makefile.in b/tests/dtls/Makefile.in
index 2a81995..fd3464e 100644
--- a/tests/dtls/Makefile.in
+++ b/tests/dtls/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1851,7 +1823,6 @@ clean-checkPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 dtls-stress$(EXEEXT): $(dtls_stress_OBJECTS) $(dtls_stress_DEPENDENCIES) $(EXTRA_dtls_stress_DEPENDENCIES) 
 	@rm -f dtls-stress$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(dtls_stress_OBJECTS) $(dtls_stress_LDADD) $(LIBS)
@@ -1952,7 +1923,7 @@ distclean-tags:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/ecdsa/Makefile.in b/tests/ecdsa/Makefile.in
index c4d41ef..0ebef23 100644
--- a/tests/ecdsa/Makefile.in
+++ b/tests/ecdsa/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1795,7 +1767,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/key-id/Makefile.in b/tests/key-id/Makefile.in
index 4b4e84b..148381d 100644
--- a/tests/key-id/Makefile.in
+++ b/tests/key-id/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1798,7 +1770,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/openpgp-certs/Makefile.in b/tests/openpgp-certs/Makefile.in
index 6a1eb85..b8ad85f 100644
--- a/tests/openpgp-certs/Makefile.in
+++ b/tests/openpgp-certs/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -32,51 +32,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1802,7 +1774,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/openpgp-certs/testcerts b/tests/openpgp-certs/testcerts
index 6a90d14..eae29c5 100755
--- a/tests/openpgp-certs/testcerts
+++ b/tests/openpgp-certs/testcerts
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 # Copyright (C) 2010-2012 Free Software Foundation, Inc.
 #
diff --git a/tests/pkcs1-padding/Makefile.in b/tests/pkcs1-padding/Makefile.in
index 2b7e03f..aae0a9b 100644
--- a/tests/pkcs1-padding/Makefile.in
+++ b/tests/pkcs1-padding/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1800,7 +1772,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/pkcs12-decode/Makefile.in b/tests/pkcs12-decode/Makefile.in
index febb39c..dee613c 100644
--- a/tests/pkcs12-decode/Makefile.in
+++ b/tests/pkcs12-decode/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1797,7 +1769,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/pkcs8-decode/Makefile.in b/tests/pkcs8-decode/Makefile.in
index 1e4eb06..f61f724 100644
--- a/tests/pkcs8-decode/Makefile.in
+++ b/tests/pkcs8-decode/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1795,7 +1767,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/rsa-md5-collision/Makefile.in b/tests/rsa-md5-collision/Makefile.in
index 9549a3b..84e8f0f 100644
--- a/tests/rsa-md5-collision/Makefile.in
+++ b/tests/rsa-md5-collision/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1800,7 +1772,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/safe-renegotiation/Makefile.in b/tests/safe-renegotiation/Makefile.in
index 2de3233..3c7e893 100644
--- a/tests/safe-renegotiation/Makefile.in
+++ b/tests/safe-renegotiation/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -32,51 +32,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1868,27 +1840,21 @@ clean-checkPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 srn0$(EXEEXT): $(srn0_OBJECTS) $(srn0_DEPENDENCIES) $(EXTRA_srn0_DEPENDENCIES) 
 	@rm -f srn0$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(srn0_OBJECTS) $(srn0_LDADD) $(LIBS)
-
 srn1$(EXEEXT): $(srn1_OBJECTS) $(srn1_DEPENDENCIES) $(EXTRA_srn1_DEPENDENCIES) 
 	@rm -f srn1$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(srn1_OBJECTS) $(srn1_LDADD) $(LIBS)
-
 srn2$(EXEEXT): $(srn2_OBJECTS) $(srn2_DEPENDENCIES) $(EXTRA_srn2_DEPENDENCIES) 
 	@rm -f srn2$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(srn2_OBJECTS) $(srn2_LDADD) $(LIBS)
-
 srn3$(EXEEXT): $(srn3_OBJECTS) $(srn3_DEPENDENCIES) $(EXTRA_srn3_DEPENDENCIES) 
 	@rm -f srn3$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(srn3_OBJECTS) $(srn3_LDADD) $(LIBS)
-
 srn4$(EXEEXT): $(srn4_OBJECTS) $(srn4_DEPENDENCIES) $(EXTRA_srn4_DEPENDENCIES) 
 	@rm -f srn4$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(srn4_OBJECTS) $(srn4_LDADD) $(LIBS)
-
 srn5$(EXEEXT): $(srn5_OBJECTS) $(srn5_DEPENDENCIES) $(EXTRA_srn5_DEPENDENCIES) 
 	@rm -f srn5$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(srn5_OBJECTS) $(srn5_LDADD) $(LIBS)
@@ -1994,7 +1960,7 @@ distclean-tags:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/scripts/Makefile.in b/tests/scripts/Makefile.in
index 329c943..4ae2361 100644
--- a/tests/scripts/Makefile.in
+++ b/tests/scripts/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
diff --git a/tests/scripts/common.sh b/tests/scripts/common.sh
index 80a4dfe..b99438c 100644
--- a/tests/scripts/common.sh
+++ b/tests/scripts/common.sh
@@ -29,7 +29,7 @@ fail() {
 launch_server() {
        PARENT=$1;
        shift;
-       $SERV $DEBUG -p $PORT $* >/dev/null 2>&1 &
+       $SERV $DEBUG -p $PORT $* >/tmp/tata 2>&1 &
        LOCALPID="$!";
        trap "[ ! -z \"${LOCALPID}\" ] && kill ${LOCALPID};" 15
        wait "${LOCALPID}"
diff --git a/tests/sha2/Makefile.in b/tests/sha2/Makefile.in
index dd1cdcd..16d0499 100644
--- a/tests/sha2/Makefile.in
+++ b/tests/sha2/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1797,7 +1769,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/slow/Makefile.in b/tests/slow/Makefile.in
index 59b62d4..938db8d 100644
--- a/tests/slow/Makefile.in
+++ b/tests/slow/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -32,51 +32,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1851,15 +1823,12 @@ clean-checkPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 cipher-test$(EXEEXT): $(cipher_test_OBJECTS) $(cipher_test_DEPENDENCIES) $(EXTRA_cipher_test_DEPENDENCIES) 
 	@rm -f cipher-test$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(cipher_test_OBJECTS) $(cipher_test_LDADD) $(LIBS)
-
 gendh$(EXEEXT): $(gendh_OBJECTS) $(gendh_DEPENDENCIES) $(EXTRA_gendh_DEPENDENCIES) 
 	@rm -f gendh$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(gendh_OBJECTS) $(gendh_LDADD) $(LIBS)
-
 keygen$(EXEEXT): $(keygen_OBJECTS) $(keygen_DEPENDENCIES) $(EXTRA_keygen_DEPENDENCIES) 
 	@rm -f keygen$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(keygen_OBJECTS) $(keygen_LDADD) $(LIBS)
@@ -1962,7 +1931,7 @@ distclean-tags:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/srp/Makefile.in b/tests/srp/Makefile.in
index bd64f5a..502f9ab 100644
--- a/tests/srp/Makefile.in
+++ b/tests/srp/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
-    esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1852,7 +1824,6 @@ clean-checkPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 mini-srp$(EXEEXT): $(mini_srp_OBJECTS) $(mini_srp_DEPENDENCIES) $(EXTRA_mini_srp_DEPENDENCIES) 
 	@rm -f mini-srp$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_srp_OBJECTS) $(mini_srp_LDADD) $(LIBS)
@@ -1953,7 +1924,7 @@ distclean-tags:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/suite/Makefile.in b/tests/suite/Makefile.in
index 9f16275..72446b1 100644
--- a/tests/suite/Makefile.in
+++ b/tests/suite/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 
 
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1950,7 +1922,6 @@ clean-noinstLTLIBRARIES:
 	  echo rm -f $${locs}; \
 	  rm -f $${locs}; \
 	}
-
 libecore.la: $(libecore_la_OBJECTS) $(libecore_la_DEPENDENCIES) $(EXTRA_libecore_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libecore_la_LINK) $(am_libecore_la_rpath) $(libecore_la_OBJECTS) $(libecore_la_LIBADD) $(LIBS)
 
@@ -1962,11 +1933,9 @@ clean-noinstPROGRAMS:
 	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
 	echo " rm -f" $$list; \
 	rm -f $$list
-
 eagain-cli$(EXEEXT): $(eagain_cli_OBJECTS) $(eagain_cli_DEPENDENCIES) $(EXTRA_eagain_cli_DEPENDENCIES) 
 	@rm -f eagain-cli$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(eagain_cli_OBJECTS) $(eagain_cli_LDADD) $(LIBS)
-
 mini-record-timing$(EXEEXT): $(mini_record_timing_OBJECTS) $(mini_record_timing_DEPENDENCIES) $(EXTRA_mini_record_timing_DEPENDENCIES) 
 	@rm -f mini-record-timing$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(mini_record_timing_OBJECTS) $(mini_record_timing_LDADD) $(LIBS)
@@ -2516,7 +2485,7 @@ distclean-tags:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
diff --git a/tests/userid/Makefile.in b/tests/userid/Makefile.in
index 9b95504..5b830c2 100644
--- a/tests/userid/Makefile.in
+++ b/tests/userid/Makefile.in
@@ -1,7 +1,7 @@
-# Makefile.in generated by automake 1.13.3 from Makefile.am.
+# Makefile.in generated by automake 1.13.1 from Makefile.am.
 # @configure_input@
 
-# Copyright (C) 1994-2013 Free Software Foundation, Inc.
+# Copyright (C) 1994-2012 Free Software Foundation, Inc.
 
 # This Makefile.in is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
@@ -34,51 +34,23 @@
 # along with this file; if not, write to the Free Software Foundation,
 # Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 VPATH = @srcdir@
-am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
-am__make_running_with_option = \
-  case $${target_option-} in \
-      ?) ;; \
-      *) echo "am__make_running_with_option: internal error: invalid" \
-              "target option '$${target_option-}' specified" >&2; \
-         exit 1;; \
-  esac; \
-  has_opt=no; \
-  sane_makeflags=$$MAKEFLAGS; \
-  if $(am__is_gnu_make); then \
-    sane_makeflags=$$MFLAGS; \
-  else \
+am__make_dryrun = \
+  { \
+    am__dry=no; \
     case $$MAKEFLAGS in \
       *\\[\ \	]*) \
-        bs=\\; \
-        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
-          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
-    esac; \
-  fi; \
-  skip_next=no; \
-  strip_trailopt () \
-  { \
-    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
-  }; \
-  for flg in $$sane_makeflags; do \
-    test $$skip_next = yes && { skip_next=no; continue; }; \
-    case $$flg in \
-      *=*|--*) continue;; \
-        -*I) strip_trailopt 'I'; skip_next=yes;; \
-      -*I?*) strip_trailopt 'I';; \
-        -*O) strip_trailopt 'O'; skip_next=yes;; \
-      -*O?*) strip_trailopt 'O';; \
-        -*l) strip_trailopt 'l'; skip_next=yes;; \
-      -*l?*) strip_trailopt 'l';; \
-      -[dEDm]) skip_next=yes;; \
-      -[JT]) skip_next=yes;; \
-    esac; \
-    case $$flg in \
-      *$$target_option*) has_opt=yes; break;; \
+        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
+          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
+      *) \
+        for am__flg in $$MAKEFLAGS; do \
+          case $$am__flg in \
+            *=*|--*) ;; \
+            *n*) am__dry=yes; break;; \
+          esac; \
+        done;; \
     esac; \
-  done; \
-  test $$has_opt = yes
-am__make_dryrun = (target_option=n; $(am__make_running_with_option))
-am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+    test $$am__dry = yes; \
+  }
 pkgdatadir = $(datadir)/@PACKAGE@
 pkgincludedir = $(includedir)/@PACKAGE@
 pkglibdir = $(libdir)/@PACKAGE@
@@ -1795,7 +1767,7 @@ cscope cscopelist:
 	$(MAKE) $(AM_MAKEFLAGS) $<
 
 # Leading 'am--fnord' is there to ensure the list of targets does not
-# expand to empty, as could happen e.g. with make check TESTS=''.
+# exand to empty, as could happen e.g. with make check TESTS=''.
 am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
 am--force-recheck:
 	@:
-- 
1.8.3.4

