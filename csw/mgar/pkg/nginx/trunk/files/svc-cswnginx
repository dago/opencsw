#!/bin/sh
#
# SMF Method file for nginx
#

NGINX=/opt/csw/sbin/nginx
CFGFILE=/opt/csw/etc/nginx/nginx.conf
VARRUNX=/opt/csw/var/run/nginx
PIDFILE=${VARRUNX}/nginx.pid
PIDFILO=${VARRUNX}/nginx.pid.oldbin

#[ ! -f ${NGINX} ]   && exit 255
#[ ! -f ${CFGFILE} ] && exit 254


start() {
	$NGINX
	RETVAL=$?
	return $RETVAL
}

stop() {
	killpidf -TERM $PIDFILO
	killpidf -TERM
}

check() {
	MSG=`$NGINX -t 2>&1`
	RETVAL=$?
	[ $RETVAL -ne 0 ] && echo $MSG
	return $RETVAL
}

killpidf() {
	if [ "$2" != "" ]; then
		PIDF=$2
	else
		PIDF=$PIDFILE
	fi
	if [ -s "$PIDF" ]; then
		/bin/kill $1 `/usr/bin/cat $PIDF`
		RETVAL=$?
	else
		RETVAL=1
	fi
	return $RETVAL
}

reload() {
	killpidf -HUP
	RETVAL=$?
	return $RETVAL
}

restart() {
	stop
	start
	RETVAL=$?
	return $RETVAL
}

rotate() {
	killpidf -USR1
	RETVAL=$?
	return $RETVAL
}

state() {
	if [ -s "$PIDFILE" ]; then
		FPID=`/bin/cat $PIDFILE`
	else
		echo "not running"
		return 1
	fi
	PIDP=`/bin/ps -o pid= -p $FPID`
	if [ "$PIDP" = "" ]; then
		echo "not running"
		return 1
	fi
	COMM=`/bin/ps -o comm= -p $FPID`
	if [ "$NGINX" = "$COMM" ]; then
		echo "running"
		return 0
	else
		echo "running, but it is not a CSW package"
		return 1
	fi
}

upgrade()
{
	killpidf -USR2
	RETVAL=$?
	[ $RETVAL -ne 0 ] && return $RETVAL
	OLDBINPID=0
	for i in 1 2 3 4 5; do
		if [ -f $PIDFILO ]; then
			OLDBINPID=1
			break
		else
			sleep 1
		fi
	done
	if [ $OLDBINPID -eq 1 ]; then
		state >/dev/null
		RETVAL=$?
		if [ $RETVAL -eq 0 ]; then
			killpidf -WINCH $PIDFILO
			RETVAL=$?
		fi
		return $RETVAL
	fi
	return 1
}

upgrade_commit()
{
	killpidf -QUIT $PIDFILO
	RETVAL=$?
	return $RETVAL
}

upgrade_rollback()
{
	killpidf -HUP $PIDFILO
	RETVAL=$?
	if [ $RETVAL -eq 0 ]; then
		killpidf -QUIT $PIDFILE
		RETVAL=$?
	fi
	return $RETVAL
}


case "$1" in
start)
	[ ! -d $VARRUNX ] && /bin/mkdir -p $VARRUNX
	check
	start
	RETVAL=$?
	;;
stop)
	stop
	;;
refresh|reload)
	check
	RETVAL=$?
	[ $RETVAL -eq 0 ] && reload ||:
	;;
restart)
	check
	RETVAL=$?
	[ $RETVAL -eq 0 ] && restart ||:
	;;
rotate)
	rotate
	RETVAL=$?
	;;
state)
	state
	RETVAL=$?
	;;
upgrade)
	check
	RETVAL=$?
	[ $RETVAL -eq 0 ] && upgrade ||:
	;;
upgrade-commit)
	upgrade_commit
	RETVAL=$?
	;;
upgrade-rollback)
	upgrade_rollback
	RETVAL=$?
	;;
*)
	echo "Usage:" `basename $0` "{start|stop|refresh|reload|restart|rotate|state|upgrade|upgrade-commit|upgrade-rollback}"
	exit 1
	;;
esac

RETVAL=$?
exit $RETVAL
