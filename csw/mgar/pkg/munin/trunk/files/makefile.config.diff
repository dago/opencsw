diff --speed-large-files --minimal -Nru munin-1.3.4.orig/Makefile.config munin-1.3.4/Makefile.config
--- munin-1.3.4.orig/Makefile.config	2008-03-08 07:35:13.000000000 +0100
+++ munin-1.3.4/Makefile.config	2009-07-05 11:01:24.956040045 +0200
@@ -6,13 +6,15 @@
 # DESTDIR is empty during building, and optionally set to point to
 # a shadow tree during make install.
 
+DESTDIR=$(DESTDIR)
+
 #
 # the base of the Munin installation.
 # 
-PREFIX     = $(DESTDIR)/opt/munin
+PREFIX     = /opt/csw
 
 # Where Munin keeps its configurations (server.conf, client.conf, ++)
-CONFDIR    = $(DESTDIR)/etc/opt/munin
+CONFDIR    = /etc/opt/csw/munin
 
 # Server only - where to put munin-cron
 BINDIR     = $(PREFIX)/bin
@@ -21,37 +23,37 @@
 SBINDIR    = $(PREFIX)/sbin
 
 # Where to put text and html documentation
-DOCDIR     = $(PREFIX)/doc
+DOCDIR     = $(PREFIX)/share/doc/munin
 
 # Where to put man pages
-MANDIR     = $(PREFIX)/man
+MANDIR     = $(PREFIX)/share/man
 
 # Where to put internal binaries and plugin repository
-LIBDIR     = $(PREFIX)/lib
+LIBDIR     = $(PREFIX)/lib/munin
 
 # Server only - Output directory
-HTMLDIR    = $(PREFIX)/var/www
+HTMLDIR    = /var/opt/csw/munin/www
 CGIDIR     = $(HTMLDIR)/cgi
 
 # Client only - Where to put RRD files and other intenal data
-DBDIR      = $(DESTDIR)/var/opt/munin
+DBDIR      = /var/opt/csw/munin/db
 
 # Client only - Where plugins should put their states. Must be writable by
 # group "munin", and should be preserved between reboots
 PLUGSTATE  = $(DBDIR)/plugin-state
 
 # Where Munin should place its logs.
-LOGDIR     = $(DESTDIR)/var/log/munin
+LOGDIR     = /var/opt/csw/munin/log
 
 # Location of PID files and other statefiles. On the server, must be
 # writable by the user "munin".
-STATEDIR   = $(DESTDIR)/var/run/munin
+STATEDIR   = /var/opt/csw/munin/run
 
 # The perl interpreter to use
-PERL       = $(shell which perl)
+PERL       = /opt/csw/bin/perl
 
 # The python interpreter to use (used by some plugins)
-PYTHON     = /usr/bin/env python
+PYTHON     = /opt/csw/bin/python
 
 # A modern (posix) shell.  We're not looking for arrays, but $() and
 # other modern stuff is expected.  On a posix-system the expression
@@ -64,10 +66,10 @@
 GOODSH     = $(shell PATH=`getconf PATH` sh -c 'type sh | sed "s/.* //"')
 
 # Path of bash for bash specific plugins
-BASH       = /bin/bash
+BASH       = /usr/bin/bash
 
 # Server only - Where to install the perl libraries
-PERLLIB    = $(DESTDIR)$(shell $(PERL) -V:sitelib | cut -d"'" -f2)
+PERLLIB    = $(shell $(PERL) -V:sitelib | cut -d"'" -f2)
 
 # Client only - Install plugins for this architecture
 OSTYPE     = $(shell uname | tr '[A-Z]' '[a-z]')
@@ -79,7 +81,7 @@
 # What is the safest way to create a tempfile.
 # Default is to figure it out by testing various methods.
 # Replace this with a known platform-specific method
-MKTEMP     = $(shell ./test-mktemp)
+MKTEMP     = $(shell mktemp)
 
 # Munin version number.
 VERSION    = $(shell cat RELEASE)
@@ -94,9 +96,9 @@
 # Which command to use to check if the USER and GROUP to run Munin as, exists.
 # These will work on most modern OSes:
 #
-GETENT = $(shell which getent || which true 2>/dev/null)
-CHECKUSER  = $(shell $(GETENT) passwd $(USER) >/dev/null 2>/dev/null || (echo "echo User $(USER) nonexistant. Create the user and retry; exit 2"))
-CHECKGROUP = $(shell $(GETENT) group $(GROUP) >/dev/null 2>/dev/null || (echo "echo Group $(GROUP) nonexistant. Create the group and retry; exit 2"))
+#GETENT = $(shell which getent || which true 2>/dev/null)
+#CHECKUSER  = $(shell $(GETENT) passwd $(USER) >/dev/null 2>/dev/null || (echo "echo User $(USER) nonexistant. Create the user and retry; exit 2"))
+#CHECKGROUP = $(shell $(GETENT) group $(GROUP) >/dev/null 2>/dev/null || (echo "echo Group $(GROUP) nonexistant. Create the group and retry; exit 2"))
 
 # For OSX, comment out the previous two lines and comment in these
 #
@@ -117,5 +119,5 @@
 CHGRP      = chgrp
 
 # Check whether setruid functionality can be used
-HASSETR = $(shell perl -e 'use Config; my @vars=("d_setruid", "d_setreuid", "d_setresuid"); foreach my $$var (@vars) { if ($$Config{$$var} eq "define") { print "1\n"; exit 0; } } print "0\n"; exit 0;' )
+HASSETR = $(shell /opt/csw/bin/perl -e 'use Config; my @vars=("d_setruid", "d_setreuid", "d_setresuid"); foreach my $$var (@vars) { if ($$Config{$$var} eq "define") { print "1\n"; exit 0; } } print "0\n"; exit 0;' )
 
