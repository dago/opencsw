From 7e368ce421202baea74a89d03a516ffc95c788ae Mon Sep 17 00:00:00 2001
From: Maciej Blizinski <maciej@opencsw.org>
Date: Tue, 23 Feb 2010 06:12:10 +0100
Subject: [PATCH 2/2] std::map in two more files

---
 src/google/protobuf/descriptor_database.cc |    2 +-
 src/google/protobuf/extension_set_heavy.cc |   12 ++++++------
 src/google/protobuf/io/printer.cc          |    8 ++++----
 3 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/src/google/protobuf/descriptor_database.cc b/src/google/protobuf/descriptor_database.cc
index ad29ed1..7d94853 100644
--- a/src/google/protobuf/descriptor_database.cc
+++ b/src/google/protobuf/descriptor_database.cc
@@ -219,7 +219,7 @@ SimpleDescriptorDatabase::DescriptorIndex<Value>::FindLastLessOrEqual(
   // Find the last key in the map which sorts less than or equal to the
   // symbol name.  Since upper_bound() returns the *first* key that sorts
   // *greater* than the input, we want the element immediately before that.
-  typename map<string, Value>::iterator iter = by_symbol_.upper_bound(name);
+  typename std::map<string, Value>::iterator iter = by_symbol_.upper_bound(name);
   if (iter != by_symbol_.begin()) --iter;
   return iter;
 }
diff --git a/src/google/protobuf/extension_set_heavy.cc b/src/google/protobuf/extension_set_heavy.cc
index 2721f15..6a62005 100644
--- a/src/google/protobuf/extension_set_heavy.cc
+++ b/src/google/protobuf/extension_set_heavy.cc
@@ -68,7 +68,7 @@ class DescriptorPoolExtensionFinder : public ExtensionFinder {
 void ExtensionSet::AppendToList(const Descriptor* containing_type,
                                 const DescriptorPool* pool,
                                 vector<const FieldDescriptor*>* output) const {
-  for (map<int, Extension>::const_iterator iter = extensions_.begin();
+  for (std::map<int, Extension>::const_iterator iter = extensions_.begin();
        iter != extensions_.end(); ++iter) {
     bool has = false;
     if (iter->second.is_repeated) {
@@ -112,7 +112,7 @@ inline FieldDescriptor::CppType cpp_type(FieldType type) {
 const MessageLite& ExtensionSet::GetMessage(int number,
                                             const Descriptor* message_type,
                                             MessageFactory* factory) const {
-  map<int, Extension>::const_iterator iter = extensions_.find(number);
+  std::map<int, Extension>::const_iterator iter = extensions_.find(number);
   if (iter == extensions_.end() || iter->second.is_cleared) {
     // Not present.  Return the default value.
     return *factory->GetPrototype(message_type);
@@ -234,8 +234,8 @@ bool ExtensionSet::ParseMessageSet(io::CodedInputStream* input,
 
 int ExtensionSet::SpaceUsedExcludingSelf() const {
   int total_size =
-      extensions_.size() * sizeof(map<int, Extension>::value_type);
-  for (map<int, Extension>::const_iterator iter = extensions_.begin(),
+      extensions_.size() * sizeof(std::map<int, Extension>::value_type);
+  for (std::map<int, Extension>::const_iterator iter = extensions_.begin(),
        end = extensions_.end();
        iter != end;
        ++iter) {
@@ -301,7 +301,7 @@ int ExtensionSet::Extension::SpaceUsedExcludingSelf() const {
 uint8* ExtensionSet::SerializeWithCachedSizesToArray(
     int start_field_number, int end_field_number,
     uint8* target) const {
-  map<int, Extension>::const_iterator iter;
+  std::map<int, Extension>::const_iterator iter;
   for (iter = extensions_.lower_bound(start_field_number);
        iter != extensions_.end() && iter->first < end_field_number;
        ++iter) {
@@ -313,7 +313,7 @@ uint8* ExtensionSet::SerializeWithCachedSizesToArray(
 
 uint8* ExtensionSet::SerializeMessageSetWithCachedSizesToArray(
     uint8* target) const {
-  map<int, Extension>::const_iterator iter;
+  std::map<int, Extension>::const_iterator iter;
   for (iter = extensions_.begin(); iter != extensions_.end(); ++iter) {
     target = iter->second.SerializeMessageSetItemWithCachedSizesToArray(
         iter->first, target);
diff --git a/src/google/protobuf/io/printer.cc b/src/google/protobuf/io/printer.cc
index c7d3074..4d583ef 100644
--- a/src/google/protobuf/io/printer.cc
+++ b/src/google/protobuf/io/printer.cc
@@ -93,7 +93,7 @@ void Printer::Print(const map<string, string>& variables, const char* text) {
         WriteRaw(&variable_delimiter_, 1);
       } else {
         // Replace with the variable's value.
-        map<string, string>::const_iterator iter = variables.find(varname);
+        std::map<string, string>::const_iterator iter = variables.find(varname);
         if (iter == variables.end()) {
           GOOGLE_LOG(DFATAL) << " Undefined variable: " << varname;
         } else {
@@ -112,13 +112,13 @@ void Printer::Print(const map<string, string>& variables, const char* text) {
 }
 
 void Printer::Print(const char* text) {
-  static map<string, string> empty;
+  static std::map<string, string> empty;
   Print(empty, text);
 }
 
 void Printer::Print(const char* text,
                     const char* variable, const string& value) {
-  map<string, string> vars;
+  std::map<string, string> vars;
   vars[variable] = value;
   Print(vars, text);
 }
@@ -126,7 +126,7 @@ void Printer::Print(const char* text,
 void Printer::Print(const char* text,
                     const char* variable1, const string& value1,
                     const char* variable2, const string& value2) {
-  map<string, string> vars;
+  std::map<string, string> vars;
   vars[variable1] = value1;
   vars[variable2] = value2;
   Print(vars, text);
-- 
1.6.6

