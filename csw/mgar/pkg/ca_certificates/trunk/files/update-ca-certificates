#!/bin/sh -e
#
# update-ca-certificates
# Script inspired by debian script update-ca-certificates
#
# Copyright (c) 2003 Fumitoshi UKAI <ukai@debian.or.jp>
# Copyright (c) 2008 Yann Rouillard <yann@pleiades.fr.eu.org>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

CACERTS_CONF=/etc/opt/csw/ca-certificates.conf
CACERTS_DIR=/opt/csw/share/cacertificates
CERTBUNDLE=ca-certificates.crt
CERTSDIR=/etc/opt/csw/ssl/certs


# find the certificate files corresponding to the given pattern
find_certfile ()
{
	if [ -f "$CACERTS_DIR/$1" ]; then
		echo "$CACERTS_DIR/$1"
	elif [ -f "$1" ]; then
		echo "$1"
	else
		# if the file doesn't exist we suppose it's a find pattern
		# like *.crt
		DIRNAME="`dirname "$1"`"
		if [ "$DIRNAME" = "." ]; then
			DIRNAME="$CACERTS_DIR"
		fi
		BASENAME="`basename "$1"`"
		find $DIRNAME -name "$BASENAME" 
	fi
}


# return the full paths of all certificate files
get_certfile_list ()
{
	# first we find all excluded certificates, excluding duplicates
	sed -ne '/^ *!/s/^ *! *//p' "$CACERTS_CONF" | while read CERTFILE; do
		[ -n "$CERTFILE" ] && find_certfile "$CERTFILE"
	done | sort -u > /tmp/update-ca-certificates.tmp.$$

	# then we find all certificates excluding duplicates
	# and excluded certificates
	sed -e '/^ *[#!]/d' "$CACERTS_CONF" | while read CERTFILE; do
		[ -n "$CERTFILE" ] && find_certfile "$CERTFILE"
	done | sort -u | {
		while read CERTFILE; do
			grep "^$CERTFILE$" /tmp/update-ca-certificates.tmp.$$ >/dev/null || echo "$CERTFILE"
		done
	}

	rm -f /tmp/update-ca-certificates.tmp.$$
}


VERBOSE=0
while [ $# -gt 0 ]; do
	case $1 in
		--verbose|-v)
			VERBOSE=1;;

		--help|-h|*)
			echo "$0: [--verbose] [--fresh]"
			exit;;
	esac
	shift
done


if [ ! -f "$CACERTS_CONF" ]; then
	echo "ERROR: $CACERTS_CONF doesn't exist !" >&2
	exit 2
fi

printf "Updating certificates in $CERTSDIR..."


# first we remove the existing symlink
find "$CERTSDIR" -type l -print | while read SYMLINK; do
	[ ! -L "$SYMLINK" ] || rm -f "$SYMLINK"
done

# then we recreate them
get_certfile_list | while read CERTFILE; do
	SYMLINK="`basename "$CERTFILE"`"
	SYMLINK="`echo $SYMLINK | sed -e 's/\.[^\.]*$//'`.pem"

	cd "$CERTSDIR" && ln -sf "$CERTFILE" "$SYMLINK"
done

# we create the certificate bundle file which contains all the
# certificate, some software prefer to use this file 
# (and this is mandatory for software linked with gnutls)
cat "$CERTSDIR/"*.pem > "$CERTSDIR/$CERTBUNDLE.tmp" 2>/dev/null || true
chmod 0644 "$CERTSDIR/$CERTBUNDLE.tmp"
mv -f "$CERTSDIR/$CERTBUNDLE.tmp" "$CERTSDIR/$CERTBUNDLE"


# we create the hash links for certificate, openssl library need 
# this link to be able to find a CA certificate

PATH="$PATH:/opt/csw/bin:"
OIFS="$IFS"; IFS=":"
set -- $PATH
IFS="$OIFS"

OPENSSL=""
while [ $# -ne 0 ]; do
	if [ -x "$1/openssl" ] && [ -x "$1/c_rehash" ]; then

		# update-ca-certificates might be called when openssl_rt is removed
		# that would mean that openssl binary is present but wouldn't work
		# because of missing libraries so we test that case
		if LANG=C ldd /opt/csw/bin/openssl | grep "not found" >/dev/null; then
			shift
			continue
		fi
		OPENSSL="$1/openssl"
		C_REHASH="$1/c_rehash"
		break
	fi
	shift
done

if [ -n "$OPENSSL" ]; then
	OPENSSL="$OPENSSL" "$C_REHASH" "$CERTSDIR" >/dev/null 2>&1

# openssl binary isn't available, so we fall back our own provided file containing
# hash value for certificates provided by this package
# this way, we don't stricly depend on the openssl_utils package
elif [ -f "$CACERTS_DIR/hash.db" ]; then
	cd "$CERTSDIR"
	for FILE in *.pem; do
		HASH=`awk -F= " \\\$1 == \"$FILE\" { print \\\$2; exit 0 }" "$CACERTS_DIR/hash.db"`
		if [ -n "$HASH" ]; then
			ln -s "$FILE" "$HASH"
		else
			echo
			echo "WARNING: a custom certificate was installed, you need to install openssl_utils so" 
		        echo "         update-ca-certificates is able to generate the hash of your custom certificate."	
		fi
	done
fi
	
echo "done."
