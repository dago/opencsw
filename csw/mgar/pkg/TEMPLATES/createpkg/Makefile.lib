# This file is from TEMPLATES/createpkg/Makefile.lib
# You MUST build this with gnu make, unfortunately.
# Mainly just because of the ARCH expansion, but also for "?="

# Organization: variable defintions up top,
# targets in second half.
# Note that assignments with "?=" mean "assign if not already assigned.

ARCH := $(shell /bin/uname -p)

LDFLAGS_COMMON :=

SRCDIR= build/*

# DO NOT specify the arch-blah stuff such as -m64 here.
# the individual targets will do that.

CFLAGS_COMMON   ?= -mt -xnorunpath -xO2
CXXFLAGS_COMMON ?= -mt -norunpath  -xO2

# Keep this arch-neutral if possible. add arch-specific tweaks
# to arch-specific target
CONFIGURE=./configure --prefix=/opt/csw --enable-static=no

CONFIGURE_64_sparc= --libexecdir=/opt/csw/libexec/sparcv9
CONFIGURE_64_i386= --libexecdir=/opt/csw/libexec/amd64

CONFIGURE_64_EXTRAS:= --libdir=/opt/csw/lib/64 $(CONFIGURE_64_$(ARCH))

test:
	@echo extras = $(CONFIGURE_64_EXTRAS)

# Where do we keep local downloads of software src files
ARCHIVEDIR ?= /home/src
ARCHIVENAME=FillThisInHere.tar.foo


all:	$(ARCH)-32 clean $(ARCH)-64 package

# ARCH-XX handles configure, build, and stage for its own combo
# 

EXTRACTPROG=/bin/echo ERROR: UNKNOWN archive type ; exit 1 ;

ifeq  ($(suffix $(ARCHIVENAME)), ".gz")
	EXTRACTPROG=gtar zf
endif
ifeq  ($(suffix $(ARCHIVENAME)), ".bz2")
	EXTRACTPROG=gtar jf
endif

extract:
	test -d build || mkdir build
	@if test -f  $(ARCHIVEDIR)/$(ARCHIVENAME) ; then \
		( cd build && $(EXTRACTPROG) $(ARCHIVEDIR)/$(ARCHIVENAME) ) ; \
	else echo Cannot extract - $(ARCHIVEDIR)/$(ARCHIVENAME) does not exist ;\
		exit 1; \
	fi
	

clean distclean:
	$(MAKE) -C $(SRCDIR) $@



package patch garchive:
	@echo make $@ not implemented yet
	### potentially want to handle "merge" type stuff in 'package'
	# we also want to handle multi-package thingies.


# initial announce here. more down below for individual targets
sparc-32 sparc-64 i386-32 i386-64::
	@echo Building $@ target


configure-$(ARCH)-32:	build/.configure-$(ARCH)-32.done
	@echo $@ done
build-$(ARCH)-32:	build/.build-$(ARCH)-32.done
	@echo $@ done
stage-$(ARCH)-32:	build/.stage-$(ARCH)-32.done
	@echo $@ done
configure-$(ARCH)-64:	build/.configure-$(ARCH)-64.done
	@echo $@ done
build-$(ARCH)-64:	build/.build-$(ARCH)-64.done
	@echo $@ done
stage-$(ARCH)-64:	build/.stage-$(ARCH)-64.done
	@echo $@ done


# split out generic $(ARCH) sections to specific platform if needed.
# but it usually should not be.

build/.$(ARCH)-32.done:	$(ARCH)-32


build/.stage-$(ARCH)-32.done \
build/.stage-$(ARCH)-64.done ::
	@echo debug: handling $@ target
	touch $@


# Since we share the same src tree, we should only need to
# pre-configure patching one time for all.
build/.patch-preconf.done:
	if test -f patchfile.preconf ; then \
	 gpatch -d $(SRCDIR) -p0  <patchfile.preconf ; fi
	touch $@


build/.configure-$(ARCH)-32.done:	build/.patch-preconf.done
	@echo handling $@ target
	(cd $(SRCDIR) ; \
	  CFLAGS="$(CFLAGS_COMMON)" \
	  CXXFLAGS="$(CXXFLAGS_COMMON)" \
	  $(CONFIGURE) )
	if test -f patchfile.postconf ; then \
	 gpatch -d $(SRCDIR) -p0  <patchfile.postconf ; fi
	touch $@

build/.configure-$(ARCH)-64.done:	build/.patch-preconf.done
	@echo handling $@ target
	(cd $(SRCDIR) ; \
	  CFLAGS="$(CFLAGS_COMMON) -m64"  \
	  CXXFLAGS="$(CXXFLAGS_COMMON) -m64" \
	  PKG_CONFIG_PATH=/opt/csw/lib/64 \
	  $(CONFIGURE) $(CONFIGURE_64_EXTRAS)  )
	if test -f patchfile.postconf ; then \
	 gpatch -d $(SRCDIR) -p0  <patchfile.postconf ; fi
	touch $@

	
build/.build-$(ARCH)-32.done build/.build-$(ARCH)-64.done::
	(cd $(SRCDIR) ; \
	  $(MAKE) $(MFLAGS) )	
	touch $@

$(ARCH)-32 ::   configure-$(ARCH)-32 build-$(ARCH)-32 stage-$(ARCH)-32
	@echo Completed $(ARCH)-32 configure, build and stage
	touch build/.$(ARCH)-32.done


$(ARCH)-64 ::  stage-$(ARCH)-32 configure-$(ARCH)-64 build-$(ARCH)-64 stage-$(ARCH)-64
	@echo Completed $@ configure, build and stage
	touch build/.$(ARCH)-64.done
