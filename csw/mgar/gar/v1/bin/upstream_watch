#!/usr/bin/perl -lw
#
# Copyright 2006 Yann Rouillard <yann@blastwave.org>
# All rights reserved.  Use is subject to license terms.
#
# Redistribution and/or use, with or without modification, is
# permitted.  This software is without warranty of any kind.  The
# author(s) shall not be liable in the event that use of the
# software causes damage.
#
# upstream_watch - search for new upstream files 
#

use Env;
use Getopt::Long;

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Function : compare_versions
# Purpose  : Compare version number of two software
# Arguments: $version1 - version number of the first software
#            $version2 - version number of the first software
# Returns  : 1 if $version1 > $version2
#            0 if $version1 == $version2
#            -1 if $version1 < $verson2
#
sub compare_versions
{
    my $version1 = shift;
    my $version2 = shift;
   
    # we consider the version to be composed of several elements separated by '.' ',' or '_'
    # an elements can be a string or a number
    # at each step we extract the next elements of the two version strings and compare them
    while (my ($number1, $string1, $rem1) = ($version1 =~ /^(?:([0-9]+)|([^0-9\.,_]+))[\.,_]?(.*)?$/)) {

	my ($number2, $string2, $rem2) = ($version2 =~ /^(?:([0-9]+)|([^0-9\.,_]+))[\.,_]?(.*)?$/) or 
	    # $versions1 if the same as $versions with additional characters so it must be more recent
	    # (i.e. 1.2foo is usually more recent than 1.2)
	    return 1;

	if (defined $number1 and defined $number2) {
	    my $ret = ($number1 <=> $number2);
	    return $ret if $ret != 0;
	} elsif (defined $string1 and defined $string2) {
	    # string comparisons is relevevant for comparing 
	    # version strings like 2.a and 2.b
	    my $ret = ($string1 cmp $string2);
	    return $ret if $ret != 0;
	} elsif (defined $number1 and defined $string2) {
	    # we suppose that numbers are always greater that string
	    return 1;
	} else {
	    return -1;
	}
	
	$version1 = $rem1;
	$version2 = $rem2;
    }

    if ($version2 ne "") {
	# $version2 if the same as $version1 with additionnal characters so it must be more recent
	# (i.e. 1.2foo is usually more recent than 1.2)
	return -1;
    } 

    return 0;
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Function : get_file_list
# Purpose  : Return the list of files available at a given url
# Arguments: $url - an url
# Returns  : the list of files availables at the given url
#
# TODO: find a better way than lftp to do this
#
sub get_file_list 
{
	my $url = shift;
	my @file_list;

	my $ftp_proxy_cmd = "";
	my $http_proxy_cmd = "";
	
	# lftp doesn't seem to obey the _PROXY env variable
	# we must manually set them
	$ftp_proxy_cmd = "set ftp:proxy $ENV{FTP_PROXY};" if exists $ENV{FTP_PROXY};
	$ftp_proxy_cmd = "set ftp:proxy $ENV{ftp_proxy};" if exists $ENV{ftp_proxy};
	$http_proxy_cmd = "set http:proxy $ENV{HTTP_PROXY};" if exists $ENV{HTTP_PROXY};
	$http_proxy_cmd = "set http:proxy $ENV{http_proxy};" if exists $ENV{http_proxy};

	open (FH, "lftp -q -c \"set net:timeout 30; set net:max-retries 16; $ftp_proxy_cmd $http_proxy_cmd open $url/ && ls\" 2>/dev/null |");

	while (my $line = <FH>) {
		my @cols = split (/\s+/, $line);
		my $filename = $cols[$#cols];
		chomp ($filename);
		push (@file_list, $filename);
	}

	close (FH);

	return \@file_list;
}

my $help;
my @urls;

Getopt::Long::Configure ("no_ignore_case");  
GetOptions("h|help" => \$help,
	   "u|url=s@" => \@urls);

if ($help) {
	print <<EOF
Usage: upstream_watch -u URL file_regex...
Display the latest upstream files.
EOF



}

foreach my $file_pattern (@ARGV) {

	my $newest_version = 0;
	my $newest_file = "";

	foreach my $url (@urls) {
		my $file_list = get_file_list ($url);
		
		foreach my $file (@{$file_list}) {
			if ($file =~ /^$file_pattern$/) {
				# we only keep the newest file for a given $file_pattern
				if (compare_versions ($1, $newest_version) > 0) {
					$newest_version = $1;
					$newest_file = $file;
				}
			}
		}
	}
	printf "$newest_file " if $newest_version;
}
printf "\n";

