#!/opt/csw/bin/perl

use strict;
use warnings;
use DirHandle;
# use Cwd 'abs_path';
use File::Copy;
use File::Find;
use File::Path qw(make_path);
use POSIX qw(mkfifo);
use Pod::Usage;
use Getopt::Long;

use Data::Dumper;

# pcopy [-i <path>] [-s <regex> ]* [--paxargs <arg>]* <src> <target>
#   Regex: -s 's,(/opt/csw/lib)/(.*\.so),\1/bdb33/\2,'
#   -i  Make sure to include this path, later exclusions or replacements to the empty name are ignored
# Objectives:
# - Copy directory trees verbatim
# - exclude entries
# - rename / relocate entries on the fly
# - allow multiple renames (not just the first one as in "pax")
# - ignore existing umask and force 0755 / 0644
# - if the target exists verify for identity or use "diff -D" if specified

my $man = 0;
my $help = 0;
my $verbose = 0;
my $matchonly = 0;	# Copy only files that match at least one regex
my (@subst,@incl);

GetOptions(
	's=s' => \@subst,
	'i=s' => \@incl,
	'm|matchonly' => \$matchonly,
	'v' => \$verbose,
	'help|?' => \$help,
	man => \$man)
	or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

# Use newstyle regexps
s,\\(\d),\$$1,g foreach(@subst);

# print Dumper( @subst );

pod2usage(1) if( @ARGV != 2 );

my ($fromdir, $todir) = @ARGV;

if( ! -d $fromdir ) {
  print STDERR "Source directory not found\n";
  exit( 1 );
}

if( ! -d $todir ) {
  make_path( $todir, { verbose => 1, mode => 0775 } );
}

my %hardlinks;
sub docopy {
  my $srcdir = $File::Find::dir;
  my $name = $_;
  my $whole = $fromdir . '/' . $File::Find::name;

  # print "D: $srcdir N: $name W: $whole\n";

  # Apply substitutions from left to right
  # multiple regexp applied in order, empty target -> exclude

  my $target = $File::Find::name;
  my @matches = ($target);
  my $didmatch = 0;

  my $keepfile = 0;
  foreach my $i (@incl) {
    $keepfile = 1 if( $target =~ /$i/ );
  }
  foreach my $s (@subst) {
    my $t = $target;
    $s =~ s/p$//;
    $s =~ s/\\\(/(/;
    $s =~ s/\\\)/)/;
    # print "Regex: $s\n";
    eval( '$didmatch = 1 if( $target =~ s' . $s . ')');

    # Undo deletions if we want to keep this file
    if( $keepfile && $target eq '' ) {
      $target = $t;
      $keepfile = 2;
    }

    if( $t ne $target ) {
      push @matches, $target;
      #$didmatch = 1;
    }
  }

  if( !$didmatch && $matchonly ) {
    return;
  }

  if( $matches[-1] ne '' ) {
    print join( " >> ", @matches );
    print " (kept)" if( $keepfile == 2 );
    print "\n";
  }

  if( $target eq '' ) {
    return;
  }

  my @path = split(/\//, $target);
  my $targetdir = $todir . '/' . join( '/', @path[0..$#path-1] );

  # Source was a directory, make target hierarchy
  if( -e $targetdir && ! -d _ ) {
    print "ERROR: The directory $File::Find::name is already present as file in $targetdir\n";
  } elsif( ! -d $targetdir ) {
    make_path( $targetdir, {error => \my $err} );
    if (@$err) {
      for my $diag (@$err) {
        my ($target, $message) = %$diag;
        if ($target eq '') {
          print "general error: $message\n";
        } else {
          print "problem unlinking $target: $message\n";
        }
      }
    }
  }
  if( -d $whole && ! -l $whole ) {
    make_path( $todir . '/' . $target );
    return;
  }

  # Create FIFOs on destination
  if( -p $whole ) {
    mkfifo( $todir . '/' . $target, (stat( $whole ))[2] );
    return;
  }

  # Copy with preserving hardlinks
  if( -l $whole ) {
    my $link = readlink( $whole );
    my $linktarget = $todir . '/' . $target;
    if( -l $linktarget ) {
      my $oldlink = readlink( $linktarget );
      if( $link ne $oldlink ) {
        print "Could not link to $linktarget as there is already one pointing to $oldlink instead of the new $link\n";
      }
    } elsif( -e $linktarget ) {
      print "Could not link to $linktarget as there is some file already there\n";
    } else {
print "symlink\n";
      symlink( $link, $todir . '/' . $target ) or print "Could not link to $todir/$target\n";
    }
  } else {
    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks)
      = stat($whole);
    if( exists $hardlinks{$ino} ) {
      link( $hardlinks{$ino}, $todir . '/' . $target ) or
        print STDERR "Could not hardlink to ${target}\n";
    } else {
      copy( $whole, $todir . '/' . $target ) or print "Copy failed\n";
      chmod( $mode, $todir . '/' . $target );
      utime $atime, $mtime, $todir . '/' . $target;
      $hardlinks{$ino} = $todir . '/' . $target;
    }
  }
}

# Make output unbuffered
local( $| ) = 1;

chdir( $fromdir ) or die "Cannot change to directory '$fromdir'\n";
find({ wanted => \&docopy, no_chdir => 1 }, '.' );

=pod

=head1 SYNOPSIS

  pcopy [-s <regex>]* <from> <to>
    -m Copy only matched files

=cut


