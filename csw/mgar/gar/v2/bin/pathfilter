#!/bin/env perl -w

# This scripts takes a package prototype(4) and includes or excludes selected pathes
#
# Please note:
# - If no options are given the input is not changed
# - A path must match include and not exclude to pass the filter
# - The include and exclude directives are matched in order. The path is
#   short-cut included or excluded when there is match. Only the first match
#   is considered.
# - Empty directories are preserved if the incoming prototype doesn't
#   contained files in them. Directories which contained files which
#   were excluded and which would be empty after exclusion are
#   excluded also.

use strict;
use Getopt::Long;
use Pod::Usage;

my $help = 0;

my ($hasinclude, $hasexclude);
my @isaexec;
my @selection;
my $result = GetOptions(
	'h|help' => \$help,
	'e|isaexec=s' => \@isaexec,
	'i|include=s' => sub { push @selection, [ 'i', $_[1] ]; $hasinclude = 1 },
	'x|exclude=s' => sub { push @selection, [ 'x', $_[1] ]; $hasexclude = 1 },
) or pod2usage( 1 );

# Exclude everything by default if there are only include rules
push @selection, [ 'x', '.*' ] if( $hasinclude && !$hasexclude );

pod2usage(-verbose => 2) if $help;

my %p;
my %skipped;		# key=path, Contains directories which may be skipped
my %wasntempty;		# Same key, =1 iff there is a file in it or a subdirectory

NEXTLINE:
while( <STDIN> ) {
  my @line = split /\s+/;
  my $ftype = $line[0];
  my $path = $line[2];
  $path =~ s/=.*//;
  
  # First we remove all directories and then put back what is needed
  if( $ftype eq 'd' ) {
    $skipped{$path} = \@line;
    next;
  }

  {
    # Remember that all path components have been used by a file
    my @c = split( m!/!, $path );
    my @pa = map { join( '/', @c[0..$_] ) } 1..$#c-1;

    foreach (@pa) {
      $wasntempty{$_} = 1;
    }
  }

  SELECTION:
  foreach my $selector (@selection) {
    my ($type, $regex) = @$selector;
    if( $type eq 'i' ) {
      last SELECTION if( $path =~ /^$regex$/ );
    } elsif( $type eq 'x' ) {
      next NEXTLINE if( $path =~ /^$regex$/ );
    } else {
      croak( "The type '$type' is unknown (either 'x' or 'i' is allowed)." );
    }
  }

  $p{$path} = \@line;
}

# Put back needed directories
foreach my $path (keys %p) {
  # This funny construct builds all pathes leading to a directory
  # e. g. /usr/bin/sparcv8/ -> (/usr, /usr/bin, /usr/bin/sparcv8/)
  my @c = split( m!/!, $path );
  my @pa = map { join( '/', @c[0..$_] ) } 1..$#c;

  foreach (@pa) {
    $p{$_} = delete $skipped{$_} if( exists $skipped{$_} )
  }
}

# Re-add directories which where empty
NEXTPATH:
foreach my $path (keys %skipped) {
  next if( exists $wasntempty{$path} );

  SELECTION:
  foreach my $selector (@selection) {
    my ($type, $regex) = @$selector;
    if( $type eq 'i' ) {
      last SELECTION if( $path =~ /^$regex$/ );
    } elsif( $type eq 'x' ) {
      next NEXTPATH if( $path =~ /^$regex$/ );
    }
  }

  my @c = split( m!/!, $path );
  my @pa = map { join( '/', @c[0..$_] ) } 1..$#c;

  foreach (@pa) {
    $p{$_} = delete $skipped{$_} if( exists $skipped{$_} )
  }
}

# Process isaexec substitutions
# Usage: -e /opt/csw/bin/mytool=/opt/csw/bin/sparcv8/mytool
#   f none /opt/csw/bin/mytool 0755 root bin
# ->
#   l none /opt/csw/bin/mytool=/opt/csw/bin/isaexec
#   f none /opt/csw/bin/sparcv8/mytool=/opt/csw/bin/mytool
foreach my $e (@isaexec) {
  my ($isaexec_path, $new_path) = split( /=/, $e );

  # Don't do isaexec replacement if the path has not been selected.
  next if( !exists $p{$isaexec_path} );

  $p{$new_path} = [ @{$p{$isaexec_path}} ];
  $p{$new_path}->[2] = $new_path . '=' . $isaexec_path;
  $p{$isaexec_path}->[0] = 'l';
  $p{$isaexec_path}->[2] .= '=/opt/csw/bin/isaexec';
}

print join( ' ', @{$p{$_}} ) . "\n" foreach (sort keys %p);

__END__

=head1 NAME

pathfilter - Filters pathes from prototype(4)

=head1 SYNOPSIS

pathfilter [options] [file ...]

=head1 OPTIONS

=over 8

=item B<-h | --help>

Print a brief help message and exits.

=item B<-x | --exclude <path>>

Excludes the path from the resulting prototype.

=item B<-i | --include <path>>

Includes the path in the resulting prototype.
All pathes are implicitly excluded by default if B<-i> is used.

=back

=head1 DESCRIPTION

B<pathfilter> will read a prototype(4) file from stdin, filter
it as specified by the include/exclude options and writes the
result to stdout.
If no include/exclude options are given the input is copied verbatim to stdout.

Empty directories are implicitly excluded by default.

=cut

