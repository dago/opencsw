#!/opt/csw/bin/perl -w

# This scripts takes a package prototype(4) and includes or excludes selected pathes

use strict;
use Getopt::Long;
use Pod::Usage;

my $help = 0;

my @exclude;
my @include;
my @isaexec;
my $result = GetOptions(
	'h|help' => \$help,
	'e|isaexec=s' => \@isaexec,
	'i|include=s' => \@include,
	'x|exclude=s' => \@exclude) or pod2usage( 1 );

pod2usage(-verbose => 2) if $help;

my ($exclude, $include) = ('', '');
$exclude = '^(' . join( '|', @exclude ) . ')$' if( @exclude );
$exclude = qr#$exclude# if( $exclude );
$include = '^(' . join( '|', @include ) . ')$' if( @include );
$include = qr#$include# if( $include );

my %p;
my %skipped;
while( <STDIN> ) {
  my @line = split /\s+/;
  my $ftype = $line[0];
  my $path = $line[2];
  $path =~ s/=.*//;
  
  # First we remove all directories and then put back what is needed
  if( $ftype eq 'd' ) {
    $skipped{$path} = \@line;
    next;
  }

  if( $include ne '' ) {
    next if( $path !~ /$include/ );
  } else {
    next if( $exclude ne '' && $path =~ /$exclude/ );
  }
  $p{$path} = \@line;
}

# Put back needed directories
foreach my $path (keys %p) {
  my @c = split( m!/!, $path );
  my @pa = map { join( '/', @c[0..$_] ) } 1..$#c;

  foreach (@pa) {
    if( exists $skipped{$_} ) { $p{$_} = delete $skipped{$_} };
  }
}

# Process isaexec substitutions
# Usage: -e /opt/csw/bin/mytool=/opt/csw/bin/sparcv8/mytool
#   f none /opt/csw/bin/mytool 0755 root bin
# ->
#   l none /opt/csw/bin/mytool=/opt/csw/bin/isaexec
#   f none /opt/csw/bin/sparcv8/mytool=/opt/csw/bin/mytool
foreach my $e (@isaexec) {
  my ($isaexec_path, $new_path) = split( /=/, $e );
  if( !exists $p{$isaexec_path} ) {
    warn "Could not find path '$e' to be replaced by isaexec";
    next;
  }
  $p{$new_path} = [ @{$p{$isaexec_path}} ];
  $p{$new_path}->[2] = $new_path . '=' . $isaexec_path;
  $p{$isaexec_path}->[2] .= '=/opt/csw/bin/isaexec';
}

print join( ' ', @{$p{$_}} ) . "\n" foreach (sort keys %p);

__END__

=head1 NAME

pathfilter - Filters pathes from prototype(4)

=head1 SYNOPSIS

pathfilter [options] [file ...]

=head1 OPTIONS

=over 8

=item B<-h | --help>

Print a brief help message and exits.

=item B<-x | --exclude <path>>

Excludes the path from the resulting prototype.
If -i is given this option is ignored.

=item B<-i | --include <path>>

Includes the path in the resulting prototype.
All pathes are implicitly excluded by default if B<-i> is used.

=back

=head1 DESCRIPTION

B<pathfilter> will read a prototype(4) file from stdin, filter
it as specified by the include/exclude options and writes the
result to stdout.
If no include/exclude options are given the input is copied verbatim to stdout.

Empty directories are implicitly excluded by default.

=cut

