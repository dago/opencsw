--- httpd-2.2.4/srclib/apr/atomic/unix/apr_atomic.c.orig	2006-08-03 07:05:27.000000000 -0400
+++ httpd-2.2.4/srclib/apr/atomic/unix/apr_atomic.c	2007-01-21 23:28:38.160867000 -0500
@@ -1,9 +1,9 @@
-/* Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+/* Copyright 2000-2005 The Apache Software Foundation or its licensors, as
+ * applicable.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
@@ -22,19 +22,69 @@
 
 #include <stdlib.h>
 
-#if defined(__GNUC__) && defined(__STRICT_ANSI__) && !defined(USE_GENERIC_ATOMICS)
+#if defined(SOLARIS2) && ((SOLARIS2 + 0) >= 10)
+#include <atomic.h>
+#if defined(USE_GENERIC_ATOMICS)
+#undef USE_GENERIC_ATOMICS
+#endif
+
+static volatile apr_uint32_t solaris_atomic_cas32(volatile apr_uint32_t *mem,
+        apr_uint32_t with,
+        apr_uint32_t cmp)
+{
+    volatile uint32_t prev;
+    prev = atomic_cas_32(mem, cmp, with);
+    return (apr_uint32_t) prev;
+}
+
+static volatile apr_uint32_t solaris_atomic_add32(volatile apr_uint32_t *mem,
+        apr_uint32_t val)
+{
+    return (apr_uint32_t) atomic_add_32_nv(mem, (int32_t) val);
+}
+
+static volatile apr_uint32_t solaris_atomic_sub32(volatile apr_uint32_t *mem,
+        apr_uint32_t val)
+{
+    volatile uint32_t result;
+    volatile int32_t sub = (int32_t) -val;
+    result = atomic_add_32_nv(mem, sub);
+    return (apr_uint32_t) result;
+}
+
+static volatile int solaris_atomic_dec32(volatile apr_uint32_t *mem)
+{
+    volatile int32_t result;
+    result = (int32_t) atomic_dec_32_nv((volatile uint32_t *) mem);
+    result -= 1;
+    return (int) result;
+}
+
+static volatile apr_uint32_t solaris_atomic_swap32(volatile apr_uint32_t *mem, apr_uint32_t val)
+{
+    volatile uint32_t result;
+    result = atomic_swap_32((uint32_t *) mem, (uint32_t *) val);
+    return (apr_uint32_t) result;
+}
+
+#endif /* SOLARIS */
+
+#if defined(__GNUC__) && defined(__STRICT_ANSI__) && !defined(USE_GENERIC_ATOMICS) && !defined(SOLARIS10)
 /* force use of generic atomics if building e.g. with -std=c89, which
  * doesn't allow inline asm */
 #define USE_GENERIC_ATOMICS
 #endif
 
-#if (defined(__i386__) || defined(__x86_64__)) \
-    && defined(__GNUC__) && !defined(USE_GENERIC_ATOMICS)
+#if (defined(__i386__) || defined(__i386) || defined (__amd64) || defined(__x86_64__) || defined (__sparc) || defined (__sparcv9)) \
+    && !defined(USE_GENERIC_ATOMICS) && defined(SOLARIS2)
 
 APR_DECLARE(apr_uint32_t) apr_atomic_cas32(volatile apr_uint32_t *mem, 
                                            apr_uint32_t with,
                                            apr_uint32_t cmp)
 {
+#if defined(SOLARIS2) && ((SOLARIS2 + 0) >= 10)
+    return solaris_atomic_cas32(mem, with, cmp);
+#else
     apr_uint32_t prev;
 
     asm volatile ("lock; cmpxchgl %1, %2"             
@@ -42,17 +92,23 @@
                   : "r" (with), "m" (*(mem)), "0"(cmp) 
                   : "memory", "cc");
     return prev;
+#endif
 }
 #define APR_OVERRIDE_ATOMIC_CAS32
 
 static apr_uint32_t inline intel_atomic_add32(volatile apr_uint32_t *mem, 
                                               apr_uint32_t val)
 {
+#if defined(SOLARIS2) && ((SOLARIS2 + 0) >= 10)
+    return solaris_atomic_add32(mem, val);
+#else
+
     asm volatile ("lock; xaddl %0,%1"
                   : "=r"(val), "=m"(*mem) /* outputs */
                   : "0"(val), "m"(*mem)   /* inputs */
                   : "memory", "cc");
     return val;
+#endif
 }
 
 APR_DECLARE(apr_uint32_t) apr_atomic_add32(volatile apr_uint32_t *mem, 
@@ -64,15 +120,22 @@
 
 APR_DECLARE(void) apr_atomic_sub32(volatile apr_uint32_t *mem, apr_uint32_t val)
 {
+#if defined(SOLARIS2) && ((SOLARIS2 + 0) >= 10)
+    solaris_atomic_sub32(mem, val);
+#else
     asm volatile ("lock; subl %1, %0"
                   :
                   : "m" (*(mem)), "r" (val)
                   : "memory", "cc");
+#endif
 }
 #define APR_OVERRIDE_ATOMIC_SUB32
 
 APR_DECLARE(int) apr_atomic_dec32(volatile apr_uint32_t *mem)
 {
+#if defined(SOLARIS2) && ((SOLARIS2 + 0) >= 10)
+    return solaris_atomic_dec32(mem);
+#else
     unsigned char prev;
 
     asm volatile ("lock; decl %1;\n\t"
@@ -81,6 +144,7 @@
                   : "m" (*(mem))
                   : "memory", "cc");
     return prev;
+#endif
 }
 #define APR_OVERRIDE_ATOMIC_DEC32
 
@@ -98,6 +162,9 @@
 
 APR_DECLARE(apr_uint32_t) apr_atomic_xchg32(volatile apr_uint32_t *mem, apr_uint32_t val)
 {
+#if defined(SOLARIS2) && ((SOLARIS2 + 0) >= 10)
+    return solaris_atomic_swap32(mem, val);
+#else
     apr_uint32_t prev = val;
 
     asm volatile ("lock; xchgl %0, %1"
@@ -105,12 +172,13 @@
                   : "m" (*(mem)), "0"(prev)
                   : "memory");
     return prev;
+#endif
 }
 #define APR_OVERRIDE_ATOMIC_XCHG32
 
 /*#define apr_atomic_init(pool)        APR_SUCCESS*/
 
-#endif /* (__linux__ || __EMX__ || __FreeBSD__) && __i386__ */
+#endif /* (__linux__ || __EMX__ || __FreeBSD__ || __sun) */
 
 #if (defined(__PPC__) || defined(__ppc__)) && defined(__GNUC__) \
     && !defined(USE_GENERIC_ATOMICS)
