diff -Nru ntop-3.0pre2.orig/globals-structtypes.h ntop-3.0pre2/globals-structtypes.h
--- ntop-3.0pre2.orig/globals-structtypes.h	2004-03-03 17:14:48.000000000 -0800
+++ ntop-3.0pre2/globals-structtypes.h	2004-03-11 11:39:45.793529000 -0800
@@ -138,7 +138,7 @@
 
   struct {
     unsigned naa:4;
-    u_int64_t   vendor_specific:60;
+    uint64_t   vendor_specific:60;
   } wwn_format3;
 
   struct {
@@ -150,7 +150,7 @@
   struct {
     unsigned naa            :4;
     unsigned ieee_company_id:24;
-    u_int64_t   vsid        :36; /* vendor specific ID */
+    uint64_t   vsid        :36; /* vendor specific ID */
   } wwn_format5;
 #else 
   struct {
@@ -166,23 +166,23 @@
   } wwn_format2;
 
   struct {    
-    u_int64_t   vendor_specific:60;
+    uint64_t   vendor_specific:60;
     unsigned naa:4;
   } wwn_format3;
 
   struct {
-    u_int32_t ip_addr;
+    uint32_t ip_addr;
     unsigned  reserved      :28;    
     unsigned  naa           :4;
   } wwn_format4;
 
   struct {
-    u_int64_t   vsid        :36;
+    uint64_t   vsid        :36;
     unsigned ieee_company_id:24;    
     unsigned naa            :4;
   } wwn_format5;
 #endif
-  u_int64_t num;
+  uint64_t num;
 } wwn_t;
 
 typedef struct hostAddr {
diff -Nru ntop-3.0pre2.orig/plugins/sflowPlugin.c ntop-3.0pre2/plugins/sflowPlugin.c
--- ntop-3.0pre2.orig/plugins/sflowPlugin.c	2004-02-23 19:49:44.000000000 -0800
+++ ntop-3.0pre2/plugins/sflowPlugin.c	2004-03-11 11:41:24.411656000 -0800
@@ -115,45 +115,45 @@
 /* define my own IP header struct - to ease portability */
 struct myiphdr
 {
-  u_int8_t version_and_headerLen;
-  u_int8_t tos;
-  u_int16_t tot_len;
-  u_int16_t id;
-  u_int16_t frag_off;
-  u_int8_t ttl;
-  u_int8_t protocol;
-  u_int16_t check;
-  u_int32_t saddr;
-  u_int32_t daddr;
+  uint8_t version_and_headerLen;
+  uint8_t tos;
+  uint16_t tot_len;
+  uint16_t id;
+  uint16_t frag_off;
+  uint8_t ttl;
+  uint8_t protocol;
+  uint16_t check;
+  uint32_t saddr;
+  uint32_t daddr;
 };
 
 /* same for tcp */
 struct mytcphdr
 {
-  u_int16_t th_sport;		/* source port */
-  u_int16_t th_dport;		/* destination port */
-  u_int32_t th_seq;		/* sequence number */
-  u_int32_t th_ack;		/* acknowledgement number */
-  u_int8_t th_off_and_unused;
-  u_int8_t th_flags;
-  u_int16_t th_win;		/* window */
-  u_int16_t th_sum;		/* checksum */
-  u_int16_t th_urp;		/* urgent pointer */
+  uint16_t th_sport;		/* source port */
+  uint16_t th_dport;		/* destination port */
+  uint32_t th_seq;		/* sequence number */
+  uint32_t th_ack;		/* acknowledgement number */
+  uint8_t th_off_and_unused;
+  uint8_t th_flags;
+  uint16_t th_win;		/* window */
+  uint16_t th_sum;		/* checksum */
+  uint16_t th_urp;		/* urgent pointer */
 };
 
 /* and UDP */
 struct myudphdr {
-  u_int16_t uh_sport;           /* source port */
-  u_int16_t uh_dport;           /* destination port */
-  u_int16_t uh_ulen;            /* udp length */
-  u_int16_t uh_sum;             /* udp checksum */
+  uint16_t uh_sport;           /* source port */
+  uint16_t uh_dport;           /* destination port */
+  uint16_t uh_ulen;            /* udp length */
+  uint16_t uh_sum;             /* udp checksum */
 };
 
 /* and ICMP */
 struct myicmphdr
 {
-  u_int8_t type;		/* message type */
-  u_int8_t code;		/* type sub-code */
+  uint8_t type;		/* message type */
+  uint8_t code;		/* type sub-code */
   /* ignore the rest */
 };
 
@@ -163,9 +163,9 @@
 {
   union
   {
-    u_int8_t u6_addr8[16];
-    u_int16_t u6_addr16[8];
-    u_int32_t u6_addr32[4];
+    uint8_t u6_addr8[16];
+    uint16_t u6_addr16[8];
+    uint32_t u6_addr32[4];
   } in6_u;
 };
 #endif /* HAVE_IN6_ADDR */
@@ -181,7 +181,7 @@
 } INMAddress_value;
 
 typedef struct _INMAddress {
-  u_int32_t type;           /* enum INMAddress_type */
+  uint32_t type;           /* enum INMAddress_type */
   INMAddress_value address;
 } INMAddress;
 
@@ -206,38 +206,38 @@
 };
 
 typedef struct _INMSampled_header {
-  u_int32_t header_protocol;            /* (enum INMHeader_protocol) */
-  u_int32_t frame_length;               /* Original length of packet before sampling */
-  u_int32_t header_length;              /* length of sampled header bytes to follow */
-  u_int8_t header[INM_MAX_HEADER_SIZE]; /* Header bytes */
+  uint32_t header_protocol;            /* (enum INMHeader_protocol) */
+  uint32_t frame_length;               /* Original length of packet before sampling */
+  uint32_t header_length;              /* length of sampled header bytes to follow */
+  uint8_t header[INM_MAX_HEADER_SIZE]; /* Header bytes */
 } INMSampled_header;
 
 /* Packet IP version 4 data */
 
 typedef struct _INMSampled_ipv4 {
-  u_int32_t length;      /* The length of the IP packet
+  uint32_t length;      /* The length of the IP packet
 			    excluding lower layer encapsulations */
-  u_int32_t protocol;    /* IP Protocol type (for example, TCP = 6, UDP = 17) */
+  uint32_t protocol;    /* IP Protocol type (for example, TCP = 6, UDP = 17) */
   struct in_addr src_ip; /* Source IP Address */
   struct in_addr dst_ip; /* Destination IP Address */
-  u_int32_t src_port;    /* TCP/UDP source port number or equivalent */
-  u_int32_t dst_port;    /* TCP/UDP destination port number or equivalent */
-  u_int32_t tcp_flags;   /* TCP flags */
-  u_int32_t tos;         /* IP type of service */
+  uint32_t src_port;    /* TCP/UDP source port number or equivalent */
+  uint32_t dst_port;    /* TCP/UDP destination port number or equivalent */
+  uint32_t tcp_flags;   /* TCP flags */
+  uint32_t tos;         /* IP type of service */
 } INMSampled_ipv4;
 
 /* Packet IP version 6 data */
 
 typedef struct _INMSampled_ipv6 {
-  u_int32_t length;       /* The length of the IP packet
+  uint32_t length;       /* The length of the IP packet
 			     excluding lower layer encapsulations */
-  u_int32_t protocol;     /* IP Protocol type (for example, TCP = 6, UDP = 17) */
+  uint32_t protocol;     /* IP Protocol type (for example, TCP = 6, UDP = 17) */
   struct in6_addr src_ip; /* Source IP Address */
   struct in6_addr dst_ip; /* Destination IP Address */
-  u_int32_t src_port;     /* TCP/UDP source port number or equivalent */
-  u_int32_t dst_port;     /* TCP/UDP destination port number or equivalent */
-  u_int32_t tcp_flags;    /* TCP flags */
-  u_int32_t tos;          /* IP type of service */
+  uint32_t src_port;     /* TCP/UDP source port number or equivalent */
+  uint32_t dst_port;     /* TCP/UDP destination port number or equivalent */
+  uint32_t tcp_flags;    /* TCP flags */
+  uint32_t tos;          /* IP type of service */
 } INMSampled_ipv6;
 
 
@@ -260,35 +260,35 @@
 /* Extended switch data */
 
 typedef struct _INMExtended_switch {
-  u_int32_t src_vlan;       /* The 802.1Q VLAN id of incomming frame */
-  u_int32_t src_priority;   /* The 802.1p priority */
-  u_int32_t dst_vlan;       /* The 802.1Q VLAN id of outgoing frame */
-  u_int32_t dst_priority;   /* The 802.1p priority */
+  uint32_t src_vlan;       /* The 802.1Q VLAN id of incomming frame */
+  uint32_t src_priority;   /* The 802.1p priority */
+  uint32_t dst_vlan;       /* The 802.1Q VLAN id of outgoing frame */
+  uint32_t dst_priority;   /* The 802.1p priority */
 } INMExtended_switch;
 
 /* Extended router data */
 
 typedef struct _INMExtended_router {
   INMAddress nexthop;               /* IP address of next hop router */
-  u_int32_t src_mask;               /* Source address prefix mask bits */
-  u_int32_t dst_mask;               /* Destination address prefix mask bits */
+  uint32_t src_mask;               /* Source address prefix mask bits */
+  uint32_t dst_mask;               /* Destination address prefix mask bits */
 } INMExtended_router;
 
 /* Extended gateway data */
 
 typedef struct _INMExtended_gateway {
-  u_int32_t as;              /* AS number for this gateway */
-  u_int32_t src_as;
-  u_int32_t src_peer_as;
-  u_int32_t dst_as_path_length;
-  u_int32_t *dst_as_path;
+  uint32_t as;              /* AS number for this gateway */
+  uint32_t src_as;
+  uint32_t src_peer_as;
+  uint32_t dst_as_path_length;
+  uint32_t *dst_as_path;
 } INMExtended_gateway;
 
 /* Extended user data */
 typedef struct _INMExtended_user {
-  u_int32_t src_user_len;
+  uint32_t src_user_len;
   char *src_user;
-  u_int32_t dst_user_len;
+  uint32_t dst_user_len;
   char *dst_user;
 } INMExtended_user;
 
@@ -304,18 +304,18 @@
 /* Format of a single sample */
 
 typedef struct _INMFlow_sample {
-  u_int32_t sequence_number;      /* Incremented with each flow sample
+  uint32_t sequence_number;      /* Incremented with each flow sample
 				     generated */
-  u_int32_t source_id;            /* fsSourceId */
-  u_int32_t sampling_rate;        /* fsPacketSamplingRate */
-  u_int32_t sample_pool;          /* Total number of packets that could have been
+  uint32_t source_id;            /* fsSourceId */
+  uint32_t sampling_rate;        /* fsPacketSamplingRate */
+  uint32_t sample_pool;          /* Total number of packets that could have been
 				     sampled (i.e. packets skipped by sampling
 				     process + total number of samples) */
-  u_int32_t drops;                /* Number of times a packet was dropped due to
+  uint32_t drops;                /* Number of times a packet was dropped due to
 				     lack of resources */
-  u_int32_t input;                /* SNMP ifIndex of input interface.
+  uint32_t input;                /* SNMP ifIndex of input interface.
 				     0 if interface is not known. */
-  u_int32_t output;               /* SNMP ifIndex of output interface,
+  uint32_t output;               /* SNMP ifIndex of output interface,
 				     0 if interface is not known.
 				     Set most significant bit to indicate
 				     multiple destination interfaces
@@ -330,7 +330,7 @@
 				     0x80000000  indicates a packet sent to
 				     an unknown number of
 				     interfaces greater than 1.*/
-  u_int32_t packet_data_tag;       /* enum INMPacket_information_type */
+  uint32_t packet_data_tag;       /* enum INMPacket_information_type */
   INMPacket_data_type packet_data; /* Information about sampled packet */
 
   /* in the sFlow packet spec the next field is the number of extended objects
@@ -352,46 +352,46 @@
 /* Generic interface counters - see RFC 1573, 2233 */
 
 typedef struct _INMIf_counters {
-  u_int32_t ifIndex;
-  u_int32_t ifType;
-  u_int64_t ifSpeed;
-  u_int32_t ifDirection;        /* Derived from MAU MIB (RFC 2239)
+  uint32_t ifIndex;
+  uint32_t ifType;
+  uint64_t ifSpeed;
+  uint32_t ifDirection;        /* Derived from MAU MIB (RFC 2239)
 				   0 = unknown, 1 = full-duplex,
 				   2 = half-duplex, 3 = in, 4 = out */
-  u_int32_t ifStatus;           /* bit field with the following bits assigned:
+  uint32_t ifStatus;           /* bit field with the following bits assigned:
 				   bit 0 = ifAdminStatus (0 = down, 1 = up)
 				   bit 1 = ifOperStatus (0 = down, 1 = up) */
-  u_int64_t ifInOctets;
-  u_int32_t ifInUcastPkts;
-  u_int32_t ifInMulticastPkts;
-  u_int32_t ifInBroadcastPkts;
-  u_int32_t ifInDiscards;
-  u_int32_t ifInErrors;
-  u_int32_t ifInUnknownProtos;
-  u_int64_t ifOutOctets;
-  u_int32_t ifOutUcastPkts;
-  u_int32_t ifOutMulticastPkts;
-  u_int32_t ifOutBroadcastPkts;
-  u_int32_t ifOutDiscards;
-  u_int32_t ifOutErrors;
-  u_int32_t ifPromiscuousMode;
+  uint64_t ifInOctets;
+  uint32_t ifInUcastPkts;
+  uint32_t ifInMulticastPkts;
+  uint32_t ifInBroadcastPkts;
+  uint32_t ifInDiscards;
+  uint32_t ifInErrors;
+  uint32_t ifInUnknownProtos;
+  uint64_t ifOutOctets;
+  uint32_t ifOutUcastPkts;
+  uint32_t ifOutMulticastPkts;
+  uint32_t ifOutBroadcastPkts;
+  uint32_t ifOutDiscards;
+  uint32_t ifOutErrors;
+  uint32_t ifPromiscuousMode;
 } INMIf_counters;
 
 /* Ethernet interface counters - see RFC 2358 */
 typedef struct _INMEthernet_specific_counters {
-  u_int32_t dot3StatsAlignmentErrors;
-  u_int32_t dot3StatsFCSErrors;
-  u_int32_t dot3StatsSingleCollisionFrames;
-  u_int32_t dot3StatsMultipleCollisionFrames;
-  u_int32_t dot3StatsSQETestErrors;
-  u_int32_t dot3StatsDeferredTransmissions;
-  u_int32_t dot3StatsLateCollisions;
-  u_int32_t dot3StatsExcessiveCollisions;
-  u_int32_t dot3StatsInternalMacTransmitErrors;
-  u_int32_t dot3StatsCarrierSenseErrors;
-  u_int32_t dot3StatsFrameTooLongs;
-  u_int32_t dot3StatsInternalMacReceiveErrors;
-  u_int32_t dot3StatsSymbolErrors;
+  uint32_t dot3StatsAlignmentErrors;
+  uint32_t dot3StatsFCSErrors;
+  uint32_t dot3StatsSingleCollisionFrames;
+  uint32_t dot3StatsMultipleCollisionFrames;
+  uint32_t dot3StatsSQETestErrors;
+  uint32_t dot3StatsDeferredTransmissions;
+  uint32_t dot3StatsLateCollisions;
+  uint32_t dot3StatsExcessiveCollisions;
+  uint32_t dot3StatsInternalMacTransmitErrors;
+  uint32_t dot3StatsCarrierSenseErrors;
+  uint32_t dot3StatsFrameTooLongs;
+  uint32_t dot3StatsInternalMacReceiveErrors;
+  uint32_t dot3StatsSymbolErrors;
 } INMEthernet_specific_counters;
 
 typedef struct _INMEthernet_counters {
@@ -407,24 +407,24 @@
 /* Token ring counters - see RFC 1748 */
 
 typedef struct _INMTokenring_specific_counters {
-  u_int32_t dot5StatsLineErrors;
-  u_int32_t dot5StatsBurstErrors;
-  u_int32_t dot5StatsACErrors;
-  u_int32_t dot5StatsAbortTransErrors;
-  u_int32_t dot5StatsInternalErrors;
-  u_int32_t dot5StatsLostFrameErrors;
-  u_int32_t dot5StatsReceiveCongestions;
-  u_int32_t dot5StatsFrameCopiedErrors;
-  u_int32_t dot5StatsTokenErrors;
-  u_int32_t dot5StatsSoftErrors;
-  u_int32_t dot5StatsHardErrors;
-  u_int32_t dot5StatsSignalLoss;
-  u_int32_t dot5StatsTransmitBeacons;
-  u_int32_t dot5StatsRecoverys;
-  u_int32_t dot5StatsLobeWires;
-  u_int32_t dot5StatsRemoves;
-  u_int32_t dot5StatsSingles;
-  u_int32_t dot5StatsFreqErrors;
+  uint32_t dot5StatsLineErrors;
+  uint32_t dot5StatsBurstErrors;
+  uint32_t dot5StatsACErrors;
+  uint32_t dot5StatsAbortTransErrors;
+  uint32_t dot5StatsInternalErrors;
+  uint32_t dot5StatsLostFrameErrors;
+  uint32_t dot5StatsReceiveCongestions;
+  uint32_t dot5StatsFrameCopiedErrors;
+  uint32_t dot5StatsTokenErrors;
+  uint32_t dot5StatsSoftErrors;
+  uint32_t dot5StatsHardErrors;
+  uint32_t dot5StatsSignalLoss;
+  uint32_t dot5StatsTransmitBeacons;
+  uint32_t dot5StatsRecoverys;
+  uint32_t dot5StatsLobeWires;
+  uint32_t dot5StatsRemoves;
+  uint32_t dot5StatsSingles;
+  uint32_t dot5StatsFreqErrors;
 } INMTokenring_specific_counters;
 
 typedef struct _INMTokenring_counters {
@@ -435,20 +435,20 @@
 /* 100 BaseVG interface counters - see RFC 2020 */
 
 typedef struct _INMVg_specific_counters {
-  u_int32_t dot12InHighPriorityFrames;
-  u_int64_t dot12InHighPriorityOctets;
-  u_int32_t dot12InNormPriorityFrames;
-  u_int64_t dot12InNormPriorityOctets;
-  u_int32_t dot12InIPMErrors;
-  u_int32_t dot12InOversizeFrameErrors;
-  u_int32_t dot12InDataErrors;
-  u_int32_t dot12InNullAddressedFrames;
-  u_int32_t dot12OutHighPriorityFrames;
-  u_int64_t dot12OutHighPriorityOctets;
-  u_int32_t dot12TransitionIntoTrainings;
-  u_int64_t dot12HCInHighPriorityOctets;
-  u_int64_t dot12HCInNormPriorityOctets;
-  u_int64_t dot12HCOutHighPriorityOctets;
+  uint32_t dot12InHighPriorityFrames;
+  uint64_t dot12InHighPriorityOctets;
+  uint32_t dot12InNormPriorityFrames;
+  uint64_t dot12InNormPriorityOctets;
+  uint32_t dot12InIPMErrors;
+  uint32_t dot12InOversizeFrameErrors;
+  uint32_t dot12InDataErrors;
+  uint32_t dot12InNullAddressedFrames;
+  uint32_t dot12OutHighPriorityFrames;
+  uint64_t dot12OutHighPriorityOctets;
+  uint32_t dot12TransitionIntoTrainings;
+  uint64_t dot12HCInHighPriorityOctets;
+  uint64_t dot12HCInNormPriorityOctets;
+  uint64_t dot12HCOutHighPriorityOctets;
 } INMVg_specific_counters;
 
 typedef struct _INMVg_counters {
@@ -463,12 +463,12 @@
 } INMWan_counters;
 
 typedef struct _INMVlan_counters {
-  u_int32_t vlan_id;
-  u_int64_t octets;
-  u_int32_t ucastPkts;
-  u_int32_t multicastPkts;
-  u_int32_t broadcastPkts;
-  u_int32_t discards;
+  uint32_t vlan_id;
+  uint64_t octets;
+  uint32_t ucastPkts;
+  uint32_t multicastPkts;
+  uint32_t broadcastPkts;
+  uint32_t discards;
 } INMVlan_counters;
 
 /* Counters data */
@@ -494,15 +494,15 @@
 } INMCounters_type;
 
 typedef struct _INMCounters_sample_hdr {
-  u_int32_t sequence_number;    /* Incremented with each counters sample
+  uint32_t sequence_number;    /* Incremented with each counters sample
 				   generated by this source_id */
-  u_int32_t source_id;          /* fsSourceId */
-  u_int32_t sampling_interval;  /* fsCounterSamplingInterval */
+  uint32_t source_id;          /* fsSourceId */
+  uint32_t sampling_interval;  /* fsCounterSamplingInterval */
 } INMCounters_sample_hdr;
 
 typedef struct _INMCounters_sample {
   INMCounters_sample_hdr hdr;
-  u_int32_t counters_type_tag;  /* Enum INMCounters_version */
+  uint32_t counters_type_tag;  /* Enum INMCounters_version */
   INMCounters_type counters;    /* Counter set for this interface type */
 } INMCounters_sample;
 
@@ -523,14 +523,14 @@
 };
 
 typedef struct _INMSample_datagram_hdr {
-  u_int32_t datagram_version;      /* (enum INMDatagram_version) = VERSION2 */
+  uint32_t datagram_version;      /* (enum INMDatagram_version) = VERSION2 */
   INMAddress agent_address;        /* IP address of sampling agent */
-  u_int32_t sequence_number;       /* Incremented with each sample datagram
+  uint32_t sequence_number;       /* Incremented with each sample datagram
 				      generated */
-  u_int32_t uptime;                /* Current time (in milliseconds since device
+  uint32_t uptime;                /* Current time (in milliseconds since device
 				      last booted). Should be set as close to
 				      datagram transmission time as possible.*/
-  u_int32_t num_samples;           /* Number of flow and counters samples to follow */
+  uint32_t num_samples;           /* Number of flow and counters samples to follow */
 } INMSample_datagram_hdr;
 
 typedef struct _SFSample {
@@ -539,15 +539,15 @@
 
   /* the raw pdu */
   u_char *rawSample;
-  u_int rawSampleLen;
+  uint rawSampleLen;
 
-  u_int sampleType;
-  u_int samplerId;
+  uint sampleType;
+  uint samplerId;
 
   /* interface info */
   u_long ifIndex;
   u_long networkType;
-  u_int64_t ifSpeed;
+  uint64_t ifSpeed;
   u_long ifDirection;
   u_long ifStatus;
 
@@ -570,12 +570,12 @@
   int offsetToIPV4;
   struct in_addr dcd_srcIP;
   struct in_addr dcd_dstIP;
-  u_int dcd_ipProtocol;
-  u_int dcd_ipTos;
-  u_int dcd_ipTTL;
-  u_int dcd_sport;
-  u_int dcd_dport;
-  u_int dcd_tcpFlags;
+  uint dcd_ipProtocol;
+  uint dcd_ipTos;
+  uint dcd_ipTTL;
+  uint dcd_sport;
+  uint dcd_dport;
+  uint dcd_tcpFlags;
 
   /* ports */
   u_long inputPort;
@@ -608,9 +608,9 @@
 
   /* user id */
 #define SA_MAX_EXTENDED_USER_LEN 200
-  u_int src_user_len;
+  uint src_user_len;
   char src_user[SA_MAX_EXTENDED_USER_LEN+1];
-  u_int dst_user_len;
+  uint dst_user_len;
   char dst_user[SA_MAX_EXTENDED_USER_LEN+1];
 
   /* counter blocks */
@@ -622,7 +622,7 @@
 #define GETDATA32(target, datap) (target) = ntohl(*(datap)++)
 #define GETDATA32_NOBSWAP(target, datap) (target) = *(datap)++
 #define GETDATA64(target, datap) \
-  do { u_int64_t tmpLo, tmpHi;   \
+  do { uint64_t tmpLo, tmpHi;   \
        GETDATA32(tmpHi, (datap));  \
        GETDATA32(tmpLo, (datap));  \
        (target) = (tmpHi << 32) + tmpLo; \
@@ -707,7 +707,7 @@
   u_char *start = (u_char *)sample->header;
   u_char *end = start + sample->headerLen;
   u_char *ptr = start;
-  u_int16_t type_len;
+  uint16_t type_len;
 
   /* assume not found */
   sample->offsetToIPV4 = -1;
@@ -725,9 +725,9 @@
 
   if(type_len == 0x8100) {
     /* VLAN  - next two bytes */
-    u_int32_t vlanData = (ptr[0] << 8) + ptr[1];
-    u_int32_t vlan = vlanData & 0x0fff;
-    u_int32_t priority = vlanData >> 13;
+    uint32_t vlanData = (ptr[0] << 8) + ptr[1];
+    uint32_t vlan = vlanData & 0x0fff;
+    uint32_t priority = vlanData >> 13;
     /*  _____________________________________ */
     /* |   pri  | c |         vlan-id        | */
     /*  ------------------------------------- */
@@ -973,7 +973,7 @@
 
 static u_long *readExtendedRouter(SFSample *sample, u_long *datap, u_char *endPtr)
 {
-  u_int32_t addrType;
+  uint32_t addrType;
   char buf[51];
   GETDATA32(addrType, datap);
   if(addrType == INMADDRESSTYPE_IP_V4) GETDATA32_NOBSWAP(sample->nextHop.s_addr, datap);
@@ -1025,7 +1025,7 @@
             traceEvent(CONST_TRACE_INFO, "SFLOW_DEBUG: dst_as_path_len %lu", sample->dst_as_path_len);
   }
   if(sample->dst_as_path_len > 0) {
-    u_int i = 0;
+    uint i = 0;
     for(; i < sample->dst_as_path_len; i++) {
       if(i == 0) if(debug) traceEvent(CONST_TRACE_INFO, "SFLOW_DEBUG: dst_as_path ");
       else if(debug) traceEvent(CONST_TRACE_INFO, "-");
@@ -1081,11 +1081,11 @@
 
 static void receiveSflowSample(SFSample *sample)
 {
-  u_int numFlowSamples = 0;
-  u_int32_t datagramVersion;
-  u_int32_t addressType;
+  uint numFlowSamples = 0;
+  uint32_t datagramVersion;
+  uint32_t addressType;
   struct in_addr agentIP;
-  u_int32_t samplesInPacket;
+  uint32_t samplesInPacket;
   struct timeval now;
   u_long *datap = (u_long *)sample->rawSample;
 
@@ -1129,7 +1129,7 @@
   }
 
   { /* now iterate and pull out the flows and counters samples */
-    u_int32_t samp = 0;
+    uint32_t samp = 0;
     u_char *endPtr = (u_char *)sample->rawSample + sample->rawSampleLen;
 
     for(; samp < samplesInPacket; samp++) {
@@ -1144,8 +1144,8 @@
       GETDATA32(sample->samplesGenerated, datap);
       GETDATA32(sample->samplerId, datap);
       if(debug) {
-	u_int32_t ds_class = sample->samplerId >> 24;
-	u_int32_t ds_index = sample->samplerId & 0x00ffffff;
+	uint32_t ds_class = sample->samplerId >> 24;
+	uint32_t ds_index = sample->samplerId & 0x00ffffff;
         traceEvent(CONST_TRACE_INFO, "SFLOW_DEBUG: sampleSequenceNo %lu", sample->samplesGenerated);
 	traceEvent(CONST_TRACE_INFO, "SFLOW_DEBUG: sourceId %lu:%lu", ds_class, ds_index);
       }
@@ -1276,10 +1276,10 @@
 	  /* assume no extended data */
 	  sample->extended_data_tag = 0;
 	  {
-	    u_int x;
+	    uint x;
 	    GETDATA32(sample->num_extended, datap);
 	    for(x = 0; x < sample->num_extended; x++) {
-	      u_int32_t extended_tag;
+	      uint32_t extended_tag;
 	      GETDATA32(extended_tag, datap);
 	      switch(extended_tag) {
 	      case INMEXTENDED_SWITCH:
@@ -1344,7 +1344,7 @@
 
 	      /* the generic counters always come first */
               if(debug) {
-	        u_int64_t cntr64;
+	        uint64_t cntr64;
 	        GETDATA64(cntr64, datap);
 	        traceEvent(CONST_TRACE_INFO, "SFLOW_DEBUG: ifInOctets %Lu", cntr64);
 	        GETDATA32(cntr64, datap);
@@ -1393,7 +1393,7 @@
 	    break;
 	  case INMCOUNTERSVERSION_ETHERNET:
 	    if(debug) {
-	      u_int32_t cntr32;
+	      uint32_t cntr32;
 	      GETDATA32(cntr32, datap);
 	      traceEvent(CONST_TRACE_INFO, "SFLOW_DEBUG: dot3StatsAlignmentErrors %lu", cntr32);
 	      GETDATA32(cntr32, datap);
@@ -1424,7 +1424,7 @@
 	    break;
 	  case INMCOUNTERSVERSION_TOKENRING:
 	              {
-	      u_int32_t cntr32;
+	      uint32_t cntr32;
 	      GETDATA32(cntr32, datap);
 	      traceEvent(CONST_TRACE_INFO, "SFLOW_DEBUG: dot5StatsLineErrors %lu", cntr32);
 	      GETDATA32(cntr32, datap);
@@ -1468,7 +1468,7 @@
 	    break;
 	  case INMCOUNTERSVERSION_VG:
 	    if(debug) {
-	      u_int64_t cntr64;
+	      uint64_t cntr64;
 	      GETDATA32(cntr64, datap);
 	      traceEvent(CONST_TRACE_INFO, "SFLOW_DEBUG: dot12InHighPriorityFrames %Lu", cntr64);
 	      GETDATA64(cntr64, datap);
@@ -1504,7 +1504,7 @@
 	    break;
 	  case INMCOUNTERSVERSION_VLAN:
 	    if(debug) {
-	      u_int64_t cntr64;
+	      uint64_t cntr64;
 	      GETDATA32(sample->in_vlan, datap);
 	      traceEvent(CONST_TRACE_INFO, "SFLOW_DEBUG: in_vlan %lu", sample->in_vlan);
 	      GETDATA64(cntr64, datap);
@@ -1969,26 +1969,26 @@
 /* ****************************** */
 
 typedef struct sflowSample {
-  u_int32_t datagramVersion;
-  u_int32_t addressType;
-  u_int32_t agentAddress;
-  u_int32_t sequenceNo;
-  u_int32_t sysUpTime;
-  u_int32_t samplesInPacket;
-  u_int32_t sampleType;
-  u_int32_t sampleSequenceNo;
-  u_int32_t samplerId;
-  u_int32_t meanSkipCount;
-  u_int32_t samplePool;
-  u_int32_t dropEvents;
-  u_int32_t inputPort;
-  u_int32_t outputPort;
-  u_int32_t packet_data_tag;
-  u_int32_t headerProtocol;
-  u_int32_t sampledPacketSize;
-  u_int32_t headerLen;
+  uint32_t datagramVersion;
+  uint32_t addressType;
+  uint32_t agentAddress;
+  uint32_t sequenceNo;
+  uint32_t sysUpTime;
+  uint32_t samplesInPacket;
+  uint32_t sampleType;
+  uint32_t sampleSequenceNo;
+  uint32_t samplerId;
+  uint32_t meanSkipCount;
+  uint32_t samplePool;
+  uint32_t dropEvents;
+  uint32_t inputPort;
+  uint32_t outputPort;
+  uint32_t packet_data_tag;
+  uint32_t headerProtocol;
+  uint32_t sampledPacketSize;
+  uint32_t headerLen;
   u_char    packetData[DEFAULT_SNAPLEN];
-  u_int32_t extended_data_tag;
+  uint32_t extended_data_tag;
 } SflowSample;
 
 /* **************************************** */
@@ -2004,10 +2004,10 @@
     /* ntop is reading packets from a file */
 
     struct ether_header ehdr;
-    u_int caplen = h->caplen;
-    u_int length = h->len;
+    uint caplen = h->caplen;
+    uint length = h->len;
     unsigned short eth_type;
-    u_int8_t flags = 0;
+    uint8_t flags = 0;
     struct ip ip;
     struct udphdr up;
 
@@ -2016,11 +2016,11 @@
       eth_type = ntohs(ehdr.ether_type);
 
       if(eth_type == ETHERTYPE_IP) {
-	u_int plen, hlen;
+	uint plen, hlen;
 	u_short sport, dport;
 
 	memcpy(&ip, p+sizeof(struct ether_header), sizeof(struct ip));
-	hlen = (u_int)ip.ip_hl * 4;
+	hlen = (uint)ip.ip_hl * 4;
 	NTOHL(ip.ip_dst.s_addr); NTOHL(ip.ip_src.s_addr);
 
 	plen = length-sizeof(struct ether_header);
