diff --speed-large-files --minimal -Nru memcached-1.1.12.orig/Makefile.in memcached-1.1.12/Makefile.in
--- memcached-1.1.12.orig/Makefile.in	2005-12-13 03:33:09.453997000 -0500
+++ memcached-1.1.12/Makefile.in	2005-12-13 03:32:52.961025000 -0500
@@ -73,7 +73,7 @@
 
 bin_PROGRAMS = memcached
 
-memcached_SOURCES = memcached.c slabs.c items.c memcached.h assoc.c
+memcached_SOURCES = memcached.c slabs.c items.c memcached.h assoc.c daemon.c
 
 SUBDIRS = doc
 DIST_DIRS = scripts
@@ -90,8 +90,8 @@
 DEFS = @DEFS@ -I. -I$(srcdir) -I.
 CPPFLAGS = @CPPFLAGS@
 LDFLAGS = @LDFLAGS@
-LIBS = @LIBS@
-memcached_OBJECTS =  memcached.o slabs.o items.o assoc.o
+LIBS = @LIBS@ -lsocket -lresolv -lmalloc
+memcached_OBJECTS =  memcached.o slabs.o items.o assoc.o daemon.o
 memcached_LDADD = $(LDADD)
 memcached_DEPENDENCIES = 
 memcached_LDFLAGS = 
diff --speed-large-files --minimal -Nru memcached-1.1.12.orig/memcached.c memcached-1.1.12/memcached.c
--- memcached-1.1.12.orig/memcached.c	2005-12-13 03:33:09.998675000 -0500
+++ memcached-1.1.12/memcached.c	2005-12-13 03:32:48.075669000 -0500
@@ -16,7 +16,9 @@
  *  $Id: memcached.c,v 1.56 2005/04/05 00:10:26 bradfitz Exp $
  */
 
+#include "daemon.h"
 #include "config.h"
+#include <signal.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/time.h>
diff --speed-large-files --minimal -Nru memcached-1.1.12.orig/memcached.h memcached-1.1.12/memcached.h
--- memcached-1.1.12.orig/memcached.h	2005-12-13 03:33:10.090457000 -0500
+++ memcached-1.1.12/memcached.h	2005-12-13 03:32:48.110122000 -0500
@@ -55,13 +55,13 @@
     unsigned char slabs_clsid;
     unsigned char nkey;         /* key length, with terminating null and padding */
     unsigned char dummy1;
-    void * end[0];
+    void *end;
 } item;
 
-#define ITEM_key(item) ((char*)&((item)->end[0]))
+#define ITEM_key(item) ((char*)&((item)->end))
 
 /* warning: don't use these macros with a function, as it evals its arg twice */
-#define ITEM_data(item) ((char*) &((item)->end[0]) + (item)->nkey)
+#define ITEM_data(item) ((char*) &((item)->end) + (item)->nkey)
 #define ITEM_ntotal(item) (sizeof(struct _stritem) + (item)->nkey + (item)->nbytes)
 
 enum conn_states {
